
cv12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a0e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e1b4  0801a298  0801a298  0002a298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802844c  0802844c  00040098  2**0
                  CONTENTS
  4 .ARM          00000008  0802844c  0802844c  0003844c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028454  08028454  00040098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028454  08028454  00038454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028458  08028458  00038458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0802845c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040098  2**0
                  CONTENTS
 10 .bss          00011698  20000098  20000098  00040098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20011730  20011730  00040098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036fe8  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000833c  00000000  00000000  000770b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025b8  00000000  00000000  0007f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002418  00000000  00000000  000819a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003766f  00000000  00000000  00083dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003bbf1  00000000  00000000  000bb42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010244f  00000000  00000000  000f7020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001f946f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a66c  00000000  00000000  001f94c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a280 	.word	0x0801a280

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	0801a280 	.word	0x0801a280

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetIdleTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200000b4 	.word	0x200000b4
 80005f4:	20000168 	.word	0x20000168

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f001 f803 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f81f 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f8c5 	bl	8000794 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800060a:	f000 f899 	bl	8000740 <MX_USART3_UART_Init>
  MX_RNG_Init();
 800060e:	f000 f883 	bl	8000718 <MX_RNG_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <main+0x44>)
 8000614:	1d3c      	adds	r4, r7, #4
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f004 fde1 	bl	80051f0 <osThreadCreate>
 800062e:	4603      	mov	r3, r0
 8000630:	4a03      	ldr	r2, [pc, #12]	; (8000640 <main+0x48>)
 8000632:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000634:	f004 fdc5 	bl	80051c2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x40>
 800063a:	bf00      	nop
 800063c:	0801a2a4 	.word	0x0801a2a4
 8000640:	200003bc 	.word	0x200003bc

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f018 fbd1 	bl	8018dfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	; 0xa8
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fd73 	bl	80031b4 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f95a 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 ffd4 	bl	80036a4 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f943 	bl	800098c <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_RNG_Init+0x20>)
 800071e:	4a07      	ldr	r2, [pc, #28]	; (800073c <MX_RNG_Init+0x24>)
 8000720:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_RNG_Init+0x20>)
 8000724:	f003 fa10 	bl	8003b48 <HAL_RNG_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800072e:	f000 f92d 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000368 	.word	0x20000368
 800073c:	50060800 	.word	0x50060800

08000740 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_USART3_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_USART3_UART_Init+0x4c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART3_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART3_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART3_UART_Init+0x4c>)
 8000778:	f003 fd14 	bl	80041a4 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000782:	f000 f903 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000378 	.word	0x20000378
 8000790:	40004800 	.word	0x40004800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b5b      	ldr	r3, [pc, #364]	; (800091c <MX_GPIO_Init+0x188>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a5a      	ldr	r2, [pc, #360]	; (800091c <MX_GPIO_Init+0x188>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b58      	ldr	r3, [pc, #352]	; (800091c <MX_GPIO_Init+0x188>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b54      	ldr	r3, [pc, #336]	; (800091c <MX_GPIO_Init+0x188>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a53      	ldr	r2, [pc, #332]	; (800091c <MX_GPIO_Init+0x188>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b51      	ldr	r3, [pc, #324]	; (800091c <MX_GPIO_Init+0x188>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b4d      	ldr	r3, [pc, #308]	; (800091c <MX_GPIO_Init+0x188>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a4c      	ldr	r2, [pc, #304]	; (800091c <MX_GPIO_Init+0x188>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b4a      	ldr	r3, [pc, #296]	; (800091c <MX_GPIO_Init+0x188>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b46      	ldr	r3, [pc, #280]	; (800091c <MX_GPIO_Init+0x188>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a45      	ldr	r2, [pc, #276]	; (800091c <MX_GPIO_Init+0x188>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b43      	ldr	r3, [pc, #268]	; (800091c <MX_GPIO_Init+0x188>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b3f      	ldr	r3, [pc, #252]	; (800091c <MX_GPIO_Init+0x188>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a3e      	ldr	r2, [pc, #248]	; (800091c <MX_GPIO_Init+0x188>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b3c      	ldr	r3, [pc, #240]	; (800091c <MX_GPIO_Init+0x188>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b38      	ldr	r3, [pc, #224]	; (800091c <MX_GPIO_Init+0x188>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a37      	ldr	r2, [pc, #220]	; (800091c <MX_GPIO_Init+0x188>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b35      	ldr	r3, [pc, #212]	; (800091c <MX_GPIO_Init+0x188>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f244 0181 	movw	r1, #16513	; 0x4081
 8000858:	4831      	ldr	r0, [pc, #196]	; (8000920 <MX_GPIO_Init+0x18c>)
 800085a:	f002 fc91 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	4830      	ldr	r0, [pc, #192]	; (8000924 <MX_GPIO_Init+0x190>)
 8000864:	f002 fc8c 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	482a      	ldr	r0, [pc, #168]	; (8000928 <MX_GPIO_Init+0x194>)
 8000880:	f002 faba 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000884:	f244 0381 	movw	r3, #16513	; 0x4081
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4820      	ldr	r0, [pc, #128]	; (8000920 <MX_GPIO_Init+0x18c>)
 800089e:	f002 faab 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008a2:	2340      	movs	r3, #64	; 0x40
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	481a      	ldr	r0, [pc, #104]	; (8000924 <MX_GPIO_Init+0x190>)
 80008ba:	f002 fa9d 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4814      	ldr	r0, [pc, #80]	; (8000924 <MX_GPIO_Init+0x190>)
 80008d2:	f002 fa91 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008d6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e8:	230a      	movs	r3, #10
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	480e      	ldr	r0, [pc, #56]	; (800092c <MX_GPIO_Init+0x198>)
 80008f4:	f002 fa80 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <MX_GPIO_Init+0x198>)
 800090e:	f002 fa73 	bl	8002df8 <HAL_GPIO_Init>

}
 8000912:	bf00      	nop
 8000914:	3730      	adds	r7, #48	; 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40020400 	.word	0x40020400
 8000924:	40021800 	.word	0x40021800
 8000928:	40020800 	.word	0x40020800
 800092c:	40020000 	.word	0x40020000

08000930 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
	uint32_t rnd;
	HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4809      	ldr	r0, [pc, #36]	; (8000964 <StartDefaultTask+0x34>)
 8000940:	f003 f92c 	bl	8003b9c <HAL_RNG_GenerateRandomNumber>
	srand( rnd);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4618      	mov	r0, r3
 8000948:	f018 fb0c 	bl	8018f64 <srand>
  MX_LWIP_Init();
 800094c:	f003 feec 	bl	8004728 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpecho_init();
 8000950:	f000 fa9a 	bl	8000e88 <tcpecho_init>
  telnet_init();
 8000954:	f000 fcba 	bl	80012cc <telnet_init>
  httpd_init();
 8000958:	f00a fe90 	bl	800b67c <httpd_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800095c:	2001      	movs	r0, #1
 800095e:	f004 fc93 	bl	8005288 <osDelay>
 8000962:	e7fb      	b.n	800095c <StartDefaultTask+0x2c>
 8000964:	20000368 	.word	0x20000368

08000968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097a:	f000 fe67 	bl	800164c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40002000 	.word	0x40002000

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a11      	ldr	r2, [pc, #68]	; (80009ec <HAL_MspInit+0x54>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <HAL_MspInit+0x54>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_MspInit+0x54>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_MspInit+0x54>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	210f      	movs	r1, #15
 80009da:	f06f 0001 	mvn.w	r0, #1
 80009de:	f000 ff31 	bl	8001844 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <HAL_RNG_MspInit+0x3c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d10d      	bne.n	8000a1e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_RNG_MspInit+0x40>)
 8000a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0a:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <HAL_RNG_MspInit+0x40>)
 8000a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a10:	6353      	str	r3, [r2, #52]	; 0x34
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_RNG_MspInit+0x40>)
 8000a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	50060800 	.word	0x50060800
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <HAL_UART_MspInit+0x84>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d12c      	bne.n	8000ab0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a17      	ldr	r2, [pc, #92]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a10      	ldr	r2, [pc, #64]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_UART_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aa0:	2307      	movs	r3, #7
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <HAL_UART_MspInit+0x8c>)
 8000aac:	f002 f9a4 	bl	8002df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40004800 	.word	0x40004800
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020c00 	.word	0x40020c00

08000ac4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <HAL_InitTick+0xe4>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <HAL_InitTick+0xe4>)
 8000ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <HAL_InitTick+0xe4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af0:	f107 0210 	add.w	r2, r7, #16
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fff2 	bl	8003ae4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d103      	bne.n	8000b12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b0a:	f002 ffc3 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 8000b0e:	6378      	str	r0, [r7, #52]	; 0x34
 8000b10:	e004      	b.n	8000b1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b12:	f002 ffbf 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 8000b16:	4603      	mov	r3, r0
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <HAL_InitTick+0xe8>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	0c9b      	lsrs	r3, r3, #18
 8000b26:	3b01      	subs	r3, #1
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b2c:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <HAL_InitTick+0xf0>)
 8000b2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b36:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b38:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000b50:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b52:	f003 f879 	bl	8003c48 <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d11b      	bne.n	8000b9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000b64:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <HAL_InitTick+0xec>)
 8000b66:	f003 f8c9 	bl	8003cfc <HAL_TIM_Base_Start_IT>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d111      	bne.n	8000b9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b78:	202d      	movs	r0, #45	; 0x2d
 8000b7a:	f000 fe7f 	bl	800187c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d808      	bhi.n	8000b96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	202d      	movs	r0, #45	; 0x2d
 8000b8a:	f000 fe5b 	bl	8001844 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <HAL_InitTick+0xf4>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	e002      	b.n	8000b9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3738      	adds	r7, #56	; 0x38
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	431bde83 	.word	0x431bde83
 8000bb0:	200003c0 	.word	0x200003c0
 8000bb4:	40002000 	.word	0x40002000
 8000bb8:	20000004 	.word	0x20000004

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000bee:	f003 f8f5 	bl	8003ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200003c0 	.word	0x200003c0

08000bfc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <ETH_IRQHandler+0x10>)
 8000c02:	f001 fa23 	bl	800204c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000572c 	.word	0x2000572c

08000c10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
	return 1;
 8000c14:	2301      	movs	r3, #1
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_kill>:

int _kill(int pid, int sig)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <_kill+0x20>)
 8000c2c:	2216      	movs	r2, #22
 8000c2e:	601a      	str	r2, [r3, #0]
	return -1;
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	2001172c 	.word	0x2001172c

08000c44 <_exit>:

void _exit (int status)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ffe5 	bl	8000c20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c56:	e7fe      	b.n	8000c56 <_exit+0x12>

08000c58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	e00a      	b.n	8000c80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c6a:	f3af 8000 	nop.w
 8000c6e:	4601      	mov	r1, r0
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	60ba      	str	r2, [r7, #8]
 8000c76:	b2ca      	uxtb	r2, r1
 8000c78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbf0      	blt.n	8000c6a <_read+0x12>
	}

return len;
 8000c88:	687b      	ldr	r3, [r7, #4]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	e009      	b.n	8000cb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf1      	blt.n	8000ca4 <_write+0x12>
	}
	return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_close>:

int _close(int file)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
	return -1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_isatty>:

int _isatty(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
	return 1;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	return 0;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d205      	bcs.n	8000d70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <_sbrk+0x6c>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <_sbrk+0x64>)
 8000d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	371c      	adds	r7, #28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	20030000 	.word	0x20030000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	20000408 	.word	0x20000408
 8000d9c:	20011730 	.word	0x20011730
 8000da0:	2001172c 	.word	0x2001172c

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2010      	movs	r0, #16
 8000dd6:	f007 f9df 	bl	8008198 <netconn_new_with_proto_and_callback>
 8000dda:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d04e      	beq.n	8000e80 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000de2:	2207      	movs	r2, #7
 8000de4:	2100      	movs	r1, #0
 8000de6:	69f8      	ldr	r0, [r7, #28]
 8000de8:	f007 fa90 	bl	800830c <netconn_bind>
 8000dec:	4603      	mov	r3, r0
 8000dee:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000df0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d13f      	bne.n	8000e78 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000df8:	21ff      	movs	r1, #255	; 0xff
 8000dfa:	69f8      	ldr	r0, [r7, #28]
 8000dfc:	f007 faf6 	bl	80083ec <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	69f8      	ldr	r0, [r7, #28]
 8000e08:	f007 fb1c 	bl	8008444 <netconn_accept>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000e10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f3      	bne.n	8000e00 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e18:	e01b      	b.n	8000e52 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	f107 020a 	add.w	r2, r7, #10
 8000e20:	f107 010c 	add.w	r1, r7, #12
 8000e24:	4618      	mov	r0, r3
 8000e26:	f009 fbfd 	bl	800a624 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	68f9      	ldr	r1, [r7, #12]
 8000e2e:	897b      	ldrh	r3, [r7, #10]
 8000e30:	461a      	mov	r2, r3
 8000e32:	2300      	movs	r3, #0
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2301      	movs	r3, #1
 8000e38:	f007 fd86 	bl	8008948 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f009 fc3a 	bl	800a6b8 <netbuf_next>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	dae7      	bge.n	8000e1a <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f009 fbc9 	bl	800a5e4 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f107 0210 	add.w	r2, r7, #16
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f007 fcfa 	bl	8008854 <netconn_recv>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0d9      	beq.n	8000e1a <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 fe6f 	bl	8008b4c <netconn_close>
          netconn_delete(newconn);
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f007 fa2f 	bl	80082d4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e76:	e7c3      	b.n	8000e00 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f007 fa2a 	bl	80082d4 <netconn_delete>
    }
  }
}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e8e:	2304      	movs	r3, #4
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e96:	2200      	movs	r2, #0
 8000e98:	4903      	ldr	r1, [pc, #12]	; (8000ea8 <tcpecho_init+0x20>)
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <tcpecho_init+0x24>)
 8000e9c:	f017 fe14 	bl	8018ac8 <sys_thread_new>
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	08000dc9 	.word	0x08000dc9
 8000eac:	0801a2c0 	.word	0x0801a2c0

08000eb0 <http_client>:




/*-----------------------------------------------------------------------------------*/
static void http_client(char *s, uint16_t size) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
	struct netconn *client;
	struct netbuf *buf;
	ip_addr_t ip;
	uint16_t len = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	83fb      	strh	r3, [r7, #30]
	IP_ADDR4(&ip, 147, 229, 144, 124);
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <http_client+0xbc>)
 8000ec2:	60fb      	str	r3, [r7, #12]
	const char *request = "GET /ip.php HTTP/1.1\r\n"
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <http_client+0xc0>)
 8000ec6:	61bb      	str	r3, [r7, #24]
			"Host: www.urel.feec.vutbr.cz\r\n"
			"Connection: close\r\n"
			"\r\n\r\n";
	client = netconn_new(NETCONN_TCP);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2010      	movs	r0, #16
 8000ece:	f007 f963 	bl	8008198 <netconn_new_with_proto_and_callback>
 8000ed2:	6178      	str	r0, [r7, #20]
	if (netconn_connect(client, &ip, 80) == ERR_OK) {
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2250      	movs	r2, #80	; 0x50
 8000eda:	4619      	mov	r1, r3
 8000edc:	6978      	ldr	r0, [r7, #20]
 8000ede:	f007 fa4d 	bl	800837c <netconn_connect>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d136      	bne.n	8000f56 <http_client+0xa6>
		netconn_write(client, request, strlen(request), NETCONN_COPY);
 8000ee8:	69b8      	ldr	r0, [r7, #24]
 8000eea:	f7ff f98b 	bl	8000204 <strlen>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	6978      	ldr	r0, [r7, #20]
 8000efa:	f007 fd25 	bl	8008948 <netconn_write_partly>
		// Receive the HTTP response
		s[0] = 0;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000f04:	e019      	b.n	8000f3a <http_client+0x8a>
			len += netbuf_copy(buf, &s[len], size - len);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	8bfb      	ldrh	r3, [r7, #30]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	18d1      	adds	r1, r2, r3
 8000f10:	887a      	ldrh	r2, [r7, #2]
 8000f12:	8bfb      	ldrh	r3, [r7, #30]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f00c fa09 	bl	800d330 <pbuf_copy_partial>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	8bfb      	ldrh	r3, [r7, #30]
 8000f24:	4413      	add	r3, r2
 8000f26:	83fb      	strh	r3, [r7, #30]
			s[len] = 0;
 8000f28:	8bfb      	ldrh	r3, [r7, #30]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
			netbuf_delete(buf);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f009 fb55 	bl	800a5e4 <netbuf_delete>
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000f3a:	8bfa      	ldrh	r2, [r7, #30]
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d20d      	bcs.n	8000f5e <http_client+0xae>
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4619      	mov	r1, r3
 8000f48:	6978      	ldr	r0, [r7, #20]
 8000f4a:	f007 fc83 	bl	8008854 <netconn_recv>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0d8      	beq.n	8000f06 <http_client+0x56>
 8000f54:	e003      	b.n	8000f5e <http_client+0xae>
		}
	} else {
		sprintf(s, "Chyba pripojeni\n");
 8000f56:	4907      	ldr	r1, [pc, #28]	; (8000f74 <http_client+0xc4>)
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f018 f8e9 	bl	8019130 <siprintf>
	}
	netconn_delete(client);
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f007 f9b8 	bl	80082d4 <netconn_delete>
}
 8000f64:	bf00      	nop
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	7c90e593 	.word	0x7c90e593
 8000f70:	0801a2d0 	.word	0x0801a2d0
 8000f74:	0801a31c 	.word	0x0801a31c

08000f78 <telnet_process_command>:

static void telnet_process_command(char *cmd, struct netconn *conn) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8000f7e:	af02      	add	r7, sp, #8
 8000f80:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000f84:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8000f88:	6018      	str	r0, [r3, #0]
 8000f8a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000f8e:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8000f92:	6019      	str	r1, [r3, #0]
	char s[CMD_BUFFER_LEN];
	char *token;
	token = strtok(cmd, " ");
 8000f94:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000f98:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8000f9c:	496a      	ldr	r1, [pc, #424]	; (8001148 <telnet_process_command+0x1d0>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	f018 f966 	bl	8019270 <strtok>
 8000fa4:	f8c7 080c 	str.w	r0, [r7, #2060]	; 0x80c

	sprintf(s, "prijato: %s\n", cmd);
 8000fa8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000fac:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8000fb0:	f107 000c 	add.w	r0, r7, #12
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4965      	ldr	r1, [pc, #404]	; (800114c <telnet_process_command+0x1d4>)
 8000fb8:	f018 f8ba 	bl	8019130 <siprintf>




	if (strcasecmp(token, "HELLO") == 0) {
 8000fbc:	4964      	ldr	r1, [pc, #400]	; (8001150 <telnet_process_command+0x1d8>)
 8000fbe:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 8000fc2:	f018 f919 	bl	80191f8 <strcasecmp>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d106      	bne.n	8000fda <telnet_process_command+0x62>
		sprintf(s, "Komunikace OK\n");
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	4960      	ldr	r1, [pc, #384]	; (8001154 <telnet_process_command+0x1dc>)
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f018 f8ac 	bl	8019130 <siprintf>
 8000fd8:	e09f      	b.n	800111a <telnet_process_command+0x1a2>

	}
	else if (strcasecmp(token, "LD1") == 0) {
 8000fda:	495f      	ldr	r1, [pc, #380]	; (8001158 <telnet_process_command+0x1e0>)
 8000fdc:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 8000fe0:	f018 f90a 	bl	80191f8 <strcasecmp>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d127      	bne.n	800103a <telnet_process_command+0xc2>
		token = strtok(NULL, " ");
 8000fea:	4957      	ldr	r1, [pc, #348]	; (8001148 <telnet_process_command+0x1d0>)
 8000fec:	2000      	movs	r0, #0
 8000fee:	f018 f93f 	bl	8019270 <strtok>
 8000ff2:	f8c7 080c 	str.w	r0, [r7, #2060]	; 0x80c
		if (strcasecmp(token, "ON") == 0) HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ff6:	4959      	ldr	r1, [pc, #356]	; (800115c <telnet_process_command+0x1e4>)
 8000ff8:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 8000ffc:	f018 f8fc 	bl	80191f8 <strcasecmp>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d105      	bne.n	8001012 <telnet_process_command+0x9a>
 8001006:	2201      	movs	r2, #1
 8001008:	2101      	movs	r1, #1
 800100a:	4855      	ldr	r0, [pc, #340]	; (8001160 <telnet_process_command+0x1e8>)
 800100c:	f002 f8b8 	bl	8003180 <HAL_GPIO_WritePin>
 8001010:	e00c      	b.n	800102c <telnet_process_command+0xb4>
		else if (strcasecmp(token, "OFF") ==0) HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001012:	4954      	ldr	r1, [pc, #336]	; (8001164 <telnet_process_command+0x1ec>)
 8001014:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 8001018:	f018 f8ee 	bl	80191f8 <strcasecmp>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d104      	bne.n	800102c <telnet_process_command+0xb4>
 8001022:	2200      	movs	r2, #0
 8001024:	2101      	movs	r1, #1
 8001026:	484e      	ldr	r0, [pc, #312]	; (8001160 <telnet_process_command+0x1e8>)
 8001028:	f002 f8aa 	bl	8003180 <HAL_GPIO_WritePin>
		sprintf(s, "OK\n");
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	494d      	ldr	r1, [pc, #308]	; (8001168 <telnet_process_command+0x1f0>)
 8001032:	4618      	mov	r0, r3
 8001034:	f018 f87c 	bl	8019130 <siprintf>
 8001038:	e06f      	b.n	800111a <telnet_process_command+0x1a2>
	}
	else if (strcasecmp(token, "LD2") == 0) {
 800103a:	494c      	ldr	r1, [pc, #304]	; (800116c <telnet_process_command+0x1f4>)
 800103c:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 8001040:	f018 f8da 	bl	80191f8 <strcasecmp>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d127      	bne.n	800109a <telnet_process_command+0x122>
		token = strtok(NULL, " ");
 800104a:	493f      	ldr	r1, [pc, #252]	; (8001148 <telnet_process_command+0x1d0>)
 800104c:	2000      	movs	r0, #0
 800104e:	f018 f90f 	bl	8019270 <strtok>
 8001052:	f8c7 080c 	str.w	r0, [r7, #2060]	; 0x80c
		if (strcasecmp(token, "ON") == 0) HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001056:	4941      	ldr	r1, [pc, #260]	; (800115c <telnet_process_command+0x1e4>)
 8001058:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 800105c:	f018 f8cc 	bl	80191f8 <strcasecmp>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d105      	bne.n	8001072 <telnet_process_command+0xfa>
 8001066:	2201      	movs	r2, #1
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	483d      	ldr	r0, [pc, #244]	; (8001160 <telnet_process_command+0x1e8>)
 800106c:	f002 f888 	bl	8003180 <HAL_GPIO_WritePin>
 8001070:	e00c      	b.n	800108c <telnet_process_command+0x114>
		else if (strcasecmp(token, "OFF") ==0) HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001072:	493c      	ldr	r1, [pc, #240]	; (8001164 <telnet_process_command+0x1ec>)
 8001074:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 8001078:	f018 f8be 	bl	80191f8 <strcasecmp>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d104      	bne.n	800108c <telnet_process_command+0x114>
 8001082:	2200      	movs	r2, #0
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	4836      	ldr	r0, [pc, #216]	; (8001160 <telnet_process_command+0x1e8>)
 8001088:	f002 f87a 	bl	8003180 <HAL_GPIO_WritePin>
		sprintf(s, "OK\n");
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4935      	ldr	r1, [pc, #212]	; (8001168 <telnet_process_command+0x1f0>)
 8001092:	4618      	mov	r0, r3
 8001094:	f018 f84c 	bl	8019130 <siprintf>
 8001098:	e03f      	b.n	800111a <telnet_process_command+0x1a2>
	}

	else if (strcasecmp(token, "STATUS") == 0) {
 800109a:	4935      	ldr	r1, [pc, #212]	; (8001170 <telnet_process_command+0x1f8>)
 800109c:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 80010a0:	f018 f8aa 	bl	80191f8 <strcasecmp>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d128      	bne.n	80010fc <telnet_process_command+0x184>
		if (HAL_GPIO_ReadPin(GPIOA, LD1_Pin)) sprintf(s, "status LD1 on\n");
 80010aa:	2101      	movs	r1, #1
 80010ac:	4831      	ldr	r0, [pc, #196]	; (8001174 <telnet_process_command+0x1fc>)
 80010ae:	f002 f84f 	bl	8003150 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <telnet_process_command+0x14e>
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	492e      	ldr	r1, [pc, #184]	; (8001178 <telnet_process_command+0x200>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f018 f836 	bl	8019130 <siprintf>
 80010c4:	e005      	b.n	80010d2 <telnet_process_command+0x15a>
		else sprintf(s, "status LD1 off\n");
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	492c      	ldr	r1, [pc, #176]	; (800117c <telnet_process_command+0x204>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f018 f82f 	bl	8019130 <siprintf>

		if (HAL_GPIO_ReadPin(GPIOB, LD2_Pin)) sprintf(s, "status LD2 on\n");
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	4822      	ldr	r0, [pc, #136]	; (8001160 <telnet_process_command+0x1e8>)
 80010d6:	f002 f83b 	bl	8003150 <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <telnet_process_command+0x176>
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4926      	ldr	r1, [pc, #152]	; (8001180 <telnet_process_command+0x208>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f018 f822 	bl	8019130 <siprintf>
 80010ec:	e015      	b.n	800111a <telnet_process_command+0x1a2>
		else sprintf(s, "status LD2 off\n");
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4924      	ldr	r1, [pc, #144]	; (8001184 <telnet_process_command+0x20c>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f018 f81b 	bl	8019130 <siprintf>
 80010fa:	e00e      	b.n	800111a <telnet_process_command+0x1a2>
	}
	else if (strcasecmp(token, "CLIENT") == 0) {
 80010fc:	4922      	ldr	r1, [pc, #136]	; (8001188 <telnet_process_command+0x210>)
 80010fe:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 8001102:	f018 f879 	bl	80191f8 <strcasecmp>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d106      	bne.n	800111a <telnet_process_command+0x1a2>
		http_client(s, 1024);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fecb 	bl	8000eb0 <http_client>
	}
	netconn_write(conn, s, strlen(s), NETCONN_COPY);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f870 	bl	8000204 <strlen>
 8001124:	4602      	mov	r2, r0
 8001126:	f107 010c 	add.w	r1, r7, #12
 800112a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800112e:	f5a3 6001 	sub.w	r0, r3, #2064	; 0x810
 8001132:	2300      	movs	r3, #0
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	6800      	ldr	r0, [r0, #0]
 800113a:	f007 fc05 	bl	8008948 <netconn_write_partly>
}
 800113e:	bf00      	nop
 8001140:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	0801a330 	.word	0x0801a330
 800114c:	0801a334 	.word	0x0801a334
 8001150:	0801a344 	.word	0x0801a344
 8001154:	0801a34c 	.word	0x0801a34c
 8001158:	0801a35c 	.word	0x0801a35c
 800115c:	0801a360 	.word	0x0801a360
 8001160:	40020400 	.word	0x40020400
 8001164:	0801a364 	.word	0x0801a364
 8001168:	0801a368 	.word	0x0801a368
 800116c:	0801a36c 	.word	0x0801a36c
 8001170:	0801a370 	.word	0x0801a370
 8001174:	40020000 	.word	0x40020000
 8001178:	0801a378 	.word	0x0801a378
 800117c:	0801a388 	.word	0x0801a388
 8001180:	0801a398 	.word	0x0801a398
 8001184:	0801a3a8 	.word	0x0801a3a8
 8001188:	0801a3b8 	.word	0x0801a3b8

0800118c <telnet_byte_available>:

static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <telnet_byte_available+0x68>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011a0:	d210      	bcs.n	80011c4 <telnet_byte_available+0x38>
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b1f      	cmp	r3, #31
 80011a6:	d90d      	bls.n	80011c4 <telnet_byte_available+0x38>
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db09      	blt.n	80011c4 <telnet_byte_available+0x38>
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <telnet_byte_available+0x68>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	b291      	uxth	r1, r2
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <telnet_byte_available+0x68>)
 80011ba:	8011      	strh	r1, [r2, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <telnet_byte_available+0x6c>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b0a      	cmp	r3, #10
 80011c8:	d002      	beq.n	80011d0 <telnet_byte_available+0x44>
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b0d      	cmp	r3, #13
 80011ce:	d10c      	bne.n	80011ea <telnet_byte_available+0x5e>
		data[cnt] = '\0';
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <telnet_byte_available+0x68>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <telnet_byte_available+0x6c>)
 80011d8:	2100      	movs	r1, #0
 80011da:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 80011dc:	6839      	ldr	r1, [r7, #0]
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <telnet_byte_available+0x6c>)
 80011e0:	f7ff feca 	bl	8000f78 <telnet_process_command>
		cnt = 0;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <telnet_byte_available+0x68>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	801a      	strh	r2, [r3, #0]
	}
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000040c 	.word	0x2000040c
 80011f8:	20000410 	.word	0x20000410

080011fc <telnet_thread>:

static void telnet_thread(void *arg)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	u16_t len;

	LWIP_UNUSED_ARG(arg);

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2010      	movs	r0, #16
 800120a:	f006 ffc5 	bl	8008198 <netconn_new_with_proto_and_callback>
 800120e:	61f8      	str	r0, [r7, #28]

	if (conn!=NULL)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d055      	beq.n	80012c2 <telnet_thread+0xc6>
	{
		/* Bind connection to well known port number 7. */
		err = netconn_bind(conn, NULL, 23);
 8001216:	2217      	movs	r2, #23
 8001218:	2100      	movs	r1, #0
 800121a:	69f8      	ldr	r0, [r7, #28]
 800121c:	f007 f876 	bl	800830c <netconn_bind>
 8001220:	4603      	mov	r3, r0
 8001222:	76fb      	strb	r3, [r7, #27]

		if (err == ERR_OK)
 8001224:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d146      	bne.n	80012ba <telnet_thread+0xbe>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 800122c:	21ff      	movs	r1, #255	; 0xff
 800122e:	69f8      	ldr	r0, [r7, #28]
 8001230:	f007 f8dc 	bl	80083ec <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	69f8      	ldr	r0, [r7, #28]
 800123c:	f007 f902 	bl	8008444 <netconn_accept>
 8001240:	4603      	mov	r3, r0
 8001242:	76bb      	strb	r3, [r7, #26]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 8001244:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f3      	bne.n	8001234 <telnet_thread+0x38>
				{

					while (netconn_recv(newconn, &buf) == ERR_OK)
 800124c:	e022      	b.n	8001294 <telnet_thread+0x98>
						do
						{
							//netbuf_data(buf, &data, &len);
							//netconn_write(newconn, data, len, NETCONN_COPY);

							netbuf_data(buf, (void**)&data, &len);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	f107 020a 	add.w	r2, r7, #10
 8001254:	f107 010c 	add.w	r1, r7, #12
 8001258:	4618      	mov	r0, r3
 800125a:	f009 f9e3 	bl	800a624 <netbuf_data>
							while (len--)
 800125e:	e008      	b.n	8001272 <telnet_thread+0x76>
								telnet_byte_available(*data++, newconn);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60fa      	str	r2, [r7, #12]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff8d 	bl	800118c <telnet_byte_available>
							while (len--)
 8001272:	897b      	ldrh	r3, [r7, #10]
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	b292      	uxth	r2, r2
 8001278:	817a      	strh	r2, [r7, #10]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <telnet_thread+0x64>

						}
						while (netbuf_next(buf) >= 0);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4618      	mov	r0, r3
 8001282:	f009 fa19 	bl	800a6b8 <netbuf_next>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	dae0      	bge.n	800124e <telnet_thread+0x52>

						netbuf_delete(buf);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4618      	mov	r0, r3
 8001290:	f009 f9a8 	bl	800a5e4 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f107 0210 	add.w	r2, r7, #16
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f007 fad9 	bl	8008854 <netconn_recv>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0d2      	beq.n	800124e <telnet_thread+0x52>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f007 fc4e 	bl	8008b4c <netconn_close>
					netconn_delete(newconn);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 f80e 	bl	80082d4 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 80012b8:	e7bc      	b.n	8001234 <telnet_thread+0x38>
				}
			}
		}
		else
		{
			netconn_delete(newconn);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	4618      	mov	r0, r3
 80012be:	f007 f809 	bl	80082d4 <netconn_delete>
		}
	}
}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <telnet_init>:
/*-----------------------------------------------------------------------------------*/




void telnet_init(void) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af02      	add	r7, sp, #8
	sys_thread_new("telnet_thread", telnet_thread, NULL,
 80012d2:	2304      	movs	r3, #4
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012da:	2200      	movs	r2, #0
 80012dc:	4903      	ldr	r1, [pc, #12]	; (80012ec <telnet_init+0x20>)
 80012de:	4804      	ldr	r0, [pc, #16]	; (80012f0 <telnet_init+0x24>)
 80012e0:	f017 fbf2 	bl	8018ac8 <sys_thread_new>
			DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	080011fd 	.word	0x080011fd
 80012f0:	0801a3c0 	.word	0x0801a3c0

080012f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800132c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012fa:	490e      	ldr	r1, [pc, #56]	; (8001334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012fc:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001310:	4c0b      	ldr	r4, [pc, #44]	; (8001340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800131e:	f7ff fd41 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001322:	f017 fd0b 	bl	8018d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001326:	f7ff f967 	bl	80005f8 <main>
  bx  lr    
 800132a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800132c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001338:	0802845c 	.word	0x0802845c
  ldr r2, =_sbss
 800133c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001340:	20011730 	.word	0x20011730

08001344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC_IRQHandler>

08001346 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <LAN8742_RegisterBusIO+0x28>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <LAN8742_RegisterBusIO+0x28>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <LAN8742_RegisterBusIO+0x28>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e014      	b.n	800139e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d17c      	bne.n	80014c4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2220      	movs	r2, #32
 80013dc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	e01c      	b.n	800141e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	f107 0208 	add.w	r2, r7, #8
 80013ec:	2112      	movs	r1, #18
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	4798      	blx	r3
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	da03      	bge.n	8001400 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80013f8:	f06f 0304 	mvn.w	r3, #4
 80013fc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80013fe:	e00b      	b.n	8001418 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	429a      	cmp	r2, r3
 800140a:	d105      	bne.n	8001418 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
         break;
 8001416:	e005      	b.n	8001424 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2b1f      	cmp	r3, #31
 8001422:	d9df      	bls.n	80013e4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b1f      	cmp	r3, #31
 800142a:	d902      	bls.n	8001432 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800142c:	f06f 0302 	mvn.w	r3, #2
 8001430:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d145      	bne.n	80014c4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6810      	ldr	r0, [r2, #0]
 8001440:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001444:	2100      	movs	r1, #0
 8001446:	4798      	blx	r3
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	db37      	blt.n	80014be <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6810      	ldr	r0, [r2, #0]
 8001456:	f107 0208 	add.w	r2, r7, #8
 800145a:	2100      	movs	r1, #0
 800145c:	4798      	blx	r3
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	db28      	blt.n	80014b6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4798      	blx	r3
 800146a:	4603      	mov	r3, r0
 800146c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800146e:	e01c      	b.n	80014aa <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4798      	blx	r3
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001482:	d80e      	bhi.n	80014a2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6810      	ldr	r0, [r2, #0]
 800148c:	f107 0208 	add.w	r2, r7, #8
 8001490:	2100      	movs	r1, #0
 8001492:	4798      	blx	r3
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	da07      	bge.n	80014aa <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800149a:	f06f 0304 	mvn.w	r3, #4
 800149e:	613b      	str	r3, [r7, #16]
                 break;
 80014a0:	e010      	b.n	80014c4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80014a2:	f06f 0301 	mvn.w	r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
               break;
 80014a8:	e00c      	b.n	80014c4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1dd      	bne.n	8001470 <LAN8742_Init+0xc6>
 80014b4:	e006      	b.n	80014c4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80014b6:	f06f 0304 	mvn.w	r3, #4
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	e002      	b.n	80014c4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80014be:	f06f 0303 	mvn.w	r3, #3
 80014c2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d112      	bne.n	80014f0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4798      	blx	r3
 80014d0:	4603      	mov	r3, r0
 80014d2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80014d4:	bf00      	nop
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	4798      	blx	r3
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014e8:	d9f5      	bls.n	80014d6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80014f0:	693b      	ldr	r3, [r7, #16]
 }
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6810      	ldr	r0, [r2, #0]
 800150e:	f107 020c 	add.w	r2, r7, #12
 8001512:	2101      	movs	r1, #1
 8001514:	4798      	blx	r3
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	da02      	bge.n	8001522 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800151c:	f06f 0304 	mvn.w	r3, #4
 8001520:	e06e      	b.n	8001600 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6810      	ldr	r0, [r2, #0]
 800152a:	f107 020c 	add.w	r2, r7, #12
 800152e:	2101      	movs	r1, #1
 8001530:	4798      	blx	r3
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	da02      	bge.n	800153e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001538:	f06f 0304 	mvn.w	r3, #4
 800153c:	e060      	b.n	8001600 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001548:	2301      	movs	r3, #1
 800154a:	e059      	b.n	8001600 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6810      	ldr	r0, [r2, #0]
 8001554:	f107 020c 	add.w	r2, r7, #12
 8001558:	2100      	movs	r1, #0
 800155a:	4798      	blx	r3
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	da02      	bge.n	8001568 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001562:	f06f 0304 	mvn.w	r3, #4
 8001566:	e04b      	b.n	8001600 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d11b      	bne.n	80015aa <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <LAN8742_GetLinkState+0x90>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001586:	2302      	movs	r3, #2
 8001588:	e03a      	b.n	8001600 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001594:	2303      	movs	r3, #3
 8001596:	e033      	b.n	8001600 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80015a2:	2304      	movs	r3, #4
 80015a4:	e02c      	b.n	8001600 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80015a6:	2305      	movs	r3, #5
 80015a8:	e02a      	b.n	8001600 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6810      	ldr	r0, [r2, #0]
 80015b2:	f107 020c 	add.w	r2, r7, #12
 80015b6:	211f      	movs	r1, #31
 80015b8:	4798      	blx	r3
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	da02      	bge.n	80015c6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80015c0:	f06f 0304 	mvn.w	r3, #4
 80015c4:	e01c      	b.n	8001600 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80015d0:	2306      	movs	r3, #6
 80015d2:	e015      	b.n	8001600 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 031c 	and.w	r3, r3, #28
 80015da:	2b18      	cmp	r3, #24
 80015dc:	d101      	bne.n	80015e2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80015de:	2302      	movs	r3, #2
 80015e0:	e00e      	b.n	8001600 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f003 031c 	and.w	r3, r3, #28
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d101      	bne.n	80015f0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e007      	b.n	8001600 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 031c 	and.w	r3, r3, #28
 80015f6:	2b14      	cmp	r3, #20
 80015f8:	d101      	bne.n	80015fe <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80015fa:	2304      	movs	r3, #4
 80015fc:	e000      	b.n	8001600 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80015fe:	2305      	movs	r3, #5
    }				
  }
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <HAL_Init+0x40>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001616:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_Init+0x40>)
 800161e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001622:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_Init+0x40>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 f8fc 	bl	800182e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001636:	200f      	movs	r0, #15
 8001638:	f7ff fa44 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163c:	f7ff f9ac 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023c00 	.word	0x40023c00

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008
 8001670:	20000c10 	.word	0x20000c10

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000c10 	.word	0x20000c10

0800168c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff ffee 	bl	8001674 <HAL_GetTick>
 8001698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a4:	d005      	beq.n	80016b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_Delay+0x44>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016b2:	bf00      	nop
 80016b4:	f7ff ffde 	bl	8001674 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d8f7      	bhi.n	80016b4 <HAL_Delay+0x28>
  {
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000008 	.word	0x20000008

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <__NVIC_EnableIRQ+0x38>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ff4c 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001856:	f7ff ff61 	bl	800171c <__NVIC_GetPriorityGrouping>
 800185a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	6978      	ldr	r0, [r7, #20]
 8001862:	f7ff ffb1 	bl	80017c8 <NVIC_EncodePriority>
 8001866:	4602      	mov	r2, r0
 8001868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff80 	bl	8001774 <__NVIC_SetPriority>
}
 8001874:	bf00      	nop
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff54 	bl	8001738 <__NVIC_EnableIRQ>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e06c      	b.n	8001984 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d106      	bne.n	80018c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2223      	movs	r2, #35	; 0x23
 80018b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f003 fa31 	bl	8004d24 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <HAL_ETH_Init+0xf4>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a30      	ldr	r2, [pc, #192]	; (800198c <HAL_ETH_Init+0xf4>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b2e      	ldr	r3, [pc, #184]	; (800198c <HAL_ETH_Init+0xf4>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80018de:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <HAL_ETH_Init+0xf8>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4a2b      	ldr	r2, [pc, #172]	; (8001990 <HAL_ETH_Init+0xf8>)
 80018e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_ETH_Init+0xf8>)
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	4927      	ldr	r1, [pc, #156]	; (8001990 <HAL_ETH_Init+0xf8>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_ETH_Init+0xf8>)
 80018fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001912:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001914:	f7ff feae 	bl	8001674 <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800191a:	e011      	b.n	8001940 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800191c:	f7ff feaa 	bl	8001674 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800192a:	d909      	bls.n	8001940 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2204      	movs	r2, #4
 8001930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	22e0      	movs	r2, #224	; 0xe0
 8001938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e021      	b.n	8001984 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1e4      	bne.n	800191c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 ffaa 	bl	80028ac <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f001 f851 	bl	8002a00 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f001 f8a7 	bl	8002ab2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	461a      	mov	r2, r3
 800196a:	2100      	movs	r1, #0
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f001 f80f 	bl	8002990 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2210      	movs	r2, #16
 800197e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	40013800 	.word	0x40013800

08001994 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d150      	bne.n	8001a48 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2223      	movs	r2, #35	; 0x23
 80019aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2204      	movs	r2, #4
 80019b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fa79 	bl	8001eac <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0208 	orr.w	r2, r2, #8
 80019c8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f7ff fe5a 	bl	800168c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0204 	orr.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fe47 	bl	800168c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 fdf1 	bl	80025ee <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a22:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a3a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2223      	movs	r2, #35	; 0x23
 8001a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e000      	b.n	8001a4a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
  }
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a60:	2b10      	cmp	r3, #16
 8001a62:	d17f      	bne.n	8001b64 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2223      	movs	r2, #35	; 0x23
 8001a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001a80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a96:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001aaa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f9f9 	bl	8001eac <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0208 	orr.w	r2, r2, #8
 8001ac8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f7ff fdda 	bl	800168c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0204 	orr.w	r2, r2, #4
 8001aee:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f7ff fdc7 	bl	800168c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fd71 	bl	80025ee <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b22:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b3a:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001b4e:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001b52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b56:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2223      	movs	r2, #35	; 0x23
 8001b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e000      	b.n	8001b66 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
  }
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b7c:	2b23      	cmp	r3, #35	; 0x23
 8001b7e:	d170      	bne.n	8001c62 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2223      	movs	r2, #35	; 0x23
 8001b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001b9a:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001b9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ba2:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bba:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	f023 0302 	bic.w	r3, r3, #2
 8001bce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bd2:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0204 	bic.w	r2, r2, #4
 8001be2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bec:	2001      	movs	r0, #1
 8001bee:	f7ff fd4d 	bl	800168c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fcf7 	bl	80025ee <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0208 	bic.w	r2, r2, #8
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f7ff fd37 	bl	800168c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	e00e      	b.n	8001c4a <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	3212      	adds	r2, #18
 8001c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c36:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3301      	adds	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d9ed      	bls.n	8001c2c <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2210      	movs	r2, #16
 8001c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
  }
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	f043 0201 	orr.w	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e045      	b.n	8001d1c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c96:	2b23      	cmp	r3, #35	; 0x23
 8001c98:	d13f      	bne.n	8001d1a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	6839      	ldr	r1, [r7, #0]
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 ff70 	bl	8002b8c <ETH_Prepare_Tx_Descriptors>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb8:	f043 0202 	orr.w	r2, r3, #2
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e02a      	b.n	8001d1c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc6:	f3bf 8f4f 	dsb	sy
}
 8001cca:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d904      	bls.n	8001ce8 <HAL_ETH_Transmit_IT+0x7c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	1f1a      	subs	r2, r3, #4
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d02:	461a      	mov	r2, r3
 8001d04:	2304      	movs	r3, #4
 8001d06:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d10:	461a      	mov	r2, r3
 8001d12:	2300      	movs	r3, #0
 8001d14:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
  }
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d109      	bne.n	8001d50 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0a8      	b.n	8001ea2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d56:	2b23      	cmp	r3, #35	; 0x23
 8001d58:	d001      	beq.n	8001d5e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0a1      	b.n	8001ea2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d62:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	3212      	adds	r2, #18
 8001d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d74:	f1c3 0304 	rsb	r3, r3, #4
 8001d78:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d7a:	e06a      	b.n	8001e52 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	69da      	ldr	r2, [r3, #28]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d103      	bne.n	8001dac <HAL_ETH_ReadData+0x88>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d040      	beq.n	8001e2e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00c      	beq.n	8001df0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	0c1b      	lsrs	r3, r3, #16
 8001ddc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001de0:	3b04      	subs	r3, #4
 8001de2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e08:	461a      	mov	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	f003 f963 	bl	80050d8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	441a      	add	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d902      	bls.n	8001e40 <HAL_ETH_ReadData+0x11c>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b04      	subs	r3, #4
 8001e3e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	3212      	adds	r2, #18
 8001e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db06      	blt.n	8001e68 <HAL_ETH_ReadData+0x144>
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d202      	bcs.n	8001e68 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d089      	beq.n	8001d7c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	441a      	add	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f815 	bl	8001eac <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d108      	bne.n	8001ea0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	e000      	b.n	8001ea2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3720      	adds	r7, #32
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ec0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69fa      	ldr	r2, [r7, #28]
 8001ec6:	3212      	adds	r2, #18
 8001ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ecc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ed2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ed4:	e040      	b.n	8001f58 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d112      	bne.n	8001f04 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 f8c8 	bl	8005078 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	74fb      	strb	r3, [r7, #19]
 8001ef2:	e007      	b.n	8001f04 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	461a      	mov	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001f04:	7cfb      	ldrb	r3, [r7, #19]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d026      	beq.n	8001f58 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d103      	bne.n	8001f1a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <ETH_UpdateDescriptor+0xe4>)
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	e003      	b.n	8001f22 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001f20:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f22:	f3bf 8f5f 	dmb	sy
}
 8001f26:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	3301      	adds	r3, #1
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d902      	bls.n	8001f46 <ETH_UpdateDescriptor+0x9a>
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	3b04      	subs	r3, #4
 8001f44:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	3212      	adds	r2, #18
 8001f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f50:	617b      	str	r3, [r7, #20]
      desccount--;
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <ETH_UpdateDescriptor+0xb8>
 8001f5e:	7cfb      	ldrb	r3, [r7, #19]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1b8      	bne.n	8001ed6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d00c      	beq.n	8001f88 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f76:	461a      	mov	r2, r3
 8001f78:	2300      	movs	r3, #0
 8001f7a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	800045f8 	.word	0x800045f8

08001f94 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3318      	adds	r3, #24
 8001fa0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001fb2:	e03f      	b.n	8002034 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001fdc:	7bbb      	ldrb	r3, [r7, #14]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d028      	beq.n	8002034 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68d9      	ldr	r1, [r3, #12]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db1b      	blt.n	8002030 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4618      	mov	r0, r3
 8002006:	f003 f8a7 	bl	8005158 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	3304      	adds	r3, #4
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	2200      	movs	r2, #0
 8002016:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	3301      	adds	r3, #1
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c
 800202e:	e001      	b.n	8002034 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_ETH_ReleaseTxPacket+0xac>
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1b9      	bne.n	8001fb4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002062:	2b40      	cmp	r3, #64	; 0x40
 8002064:	d112      	bne.n	800208c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002074:	2b40      	cmp	r3, #64	; 0x40
 8002076:	d109      	bne.n	800208c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002080:	461a      	mov	r2, r3
 8002082:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <HAL_ETH_IRQHandler+0x178>)
 8002084:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f002 fbb0 	bl	80047ec <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d113      	bne.n	80020c6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d10a      	bne.n	80020c6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b8:	461a      	mov	r2, r3
 80020ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80020be:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f002 fba3 	bl	800480c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020d8:	d14c      	bne.n	8002174 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ec:	d142      	bne.n	8002174 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f4:	f043 0208 	orr.w	r2, r3, #8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800210c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002110:	d11a      	bne.n	8002148 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <HAL_ETH_IRQHandler+0x17c>)
 800211e:	4013      	ands	r3, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002138:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800213c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	22e0      	movs	r2, #224	; 0xe0
 8002142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002146:	e012      	b.n	800216e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	f248 6380 	movw	r3, #34432	; 0x8680
 8002156:	4013      	ands	r3, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002166:	461a      	mov	r2, r3
 8002168:	f248 6380 	movw	r3, #34432	; 0x8680
 800216c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f002 fb5c 	bl	800482c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b08      	cmp	r3, #8
 8002180:	d10e      	bne.n	80021a0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f81c 	bl	80021d0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_ETH_IRQHandler+0x180>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80021ac:	4b07      	ldr	r3, [pc, #28]	; (80021cc <HAL_ETH_IRQHandler+0x180>)
 80021ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021b2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f815 	bl	80021e4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	00010040 	.word	0x00010040
 80021c8:	007e2000 	.word	0x007e2000
 80021cc:	40013c00 	.word	0x40013c00

080021d0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f003 031c 	and.w	r3, r3, #28
 8002214:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	02db      	lsls	r3, r3, #11
 800221a:	b29b      	uxth	r3, r3
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	019b      	lsls	r3, r3, #6
 8002226:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4313      	orrs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f023 0302 	bic.w	r3, r3, #2
 8002236:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002248:	f7ff fa14 	bl	8001674 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800224e:	e00d      	b.n	800226c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002250:	f7ff fa10 	bl	8001674 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225e:	d301      	bcc.n	8002264 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e010      	b.n	8002286 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ec      	bne.n	8002250 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	b29b      	uxth	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 031c 	and.w	r3, r3, #28
 80022aa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	02db      	lsls	r3, r3, #11
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	019b      	lsls	r3, r3, #6
 80022bc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022e8:	f7ff f9c4 	bl	8001674 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022ee:	e00d      	b.n	800230c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80022f0:	f7ff f9c0 	bl	8001674 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fe:	d301      	bcc.n	8002304 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e009      	b.n	8002318 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ec      	bne.n	80022f0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0d9      	b.n	80024e8 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b00      	cmp	r3, #0
 8002340:	bf14      	ite	ne
 8002342:	2301      	movne	r3, #1
 8002344:	2300      	moveq	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf14      	ite	ne
 8002388:	2301      	movne	r3, #1
 800238a:	2300      	moveq	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf0c      	ite	eq
 80023a2:	2301      	moveq	r3, #1
 80023a4:	2300      	movne	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf0c      	ite	eq
 80023f2:	2301      	moveq	r3, #1
 80023f4:	2300      	movne	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf14      	ite	ne
 8002426:	2301      	movne	r3, #1
 8002428:	2300      	moveq	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244a:	2b00      	cmp	r3, #0
 800244c:	bf14      	ite	ne
 800244e:	2301      	movne	r3, #1
 8002450:	2300      	moveq	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf14      	ite	ne
 8002468:	2301      	movne	r3, #1
 800246a:	2300      	moveq	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	0c1b      	lsrs	r3, r3, #16
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf14      	ite	ne
 80024bc:	2301      	movne	r3, #1
 80024be:	2300      	moveq	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf14      	ite	ne
 80024d8:	2301      	movne	r3, #1
 80024da:	2300      	moveq	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e00b      	b.n	8002520 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250e:	2b10      	cmp	r3, #16
 8002510:	d105      	bne.n	800251e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002512:	6839      	ldr	r1, [r7, #0]
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f88f 	bl	8002638 <ETH_SetMACConfig>

    return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e000      	b.n	8002520 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
  }
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f023 031c 	bic.w	r3, r3, #28
 800253e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002540:	f001 fa9c 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8002544:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d908      	bls.n	8002560 <HAL_ETH_SetMDIOClockRange+0x38>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d804      	bhi.n	8002560 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f043 0308 	orr.w	r3, r3, #8
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e027      	b.n	80025b0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d908      	bls.n	800257a <HAL_ETH_SetMDIOClockRange+0x52>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d204      	bcs.n	800257a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f043 030c 	orr.w	r3, r3, #12
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e01a      	b.n	80025b0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d303      	bcc.n	800258a <HAL_ETH_SetMDIOClockRange+0x62>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4a11      	ldr	r2, [pc, #68]	; (80025cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d911      	bls.n	80025ae <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4a0f      	ldr	r2, [pc, #60]	; (80025cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d908      	bls.n	80025a4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d804      	bhi.n	80025a4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e005      	b.n	80025b0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f043 0310 	orr.w	r3, r3, #16
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e000      	b.n	80025b0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80025ae:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	611a      	str	r2, [r3, #16]
}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	01312cff 	.word	0x01312cff
 80025c4:	02160ebf 	.word	0x02160ebf
 80025c8:	03938700 	.word	0x03938700
 80025cc:	05f5e0ff 	.word	0x05f5e0ff
 80025d0:	08f0d17f 	.word	0x08f0d17f

080025d4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002610:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800261e:	2001      	movs	r0, #1
 8002620:	f7ff f834 	bl	800168c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800262e:	6193      	str	r3, [r2, #24]
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4b51      	ldr	r3, [pc, #324]	; (8002794 <ETH_SetMACConfig+0x15c>)
 800264e:	4013      	ands	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	7c1b      	ldrb	r3, [r3, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d102      	bne.n	8002660 <ETH_SetMACConfig+0x28>
 800265a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800265e:	e000      	b.n	8002662 <ETH_SetMACConfig+0x2a>
 8002660:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	7c5b      	ldrb	r3, [r3, #17]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <ETH_SetMACConfig+0x38>
 800266a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800266e:	e000      	b.n	8002672 <ETH_SetMACConfig+0x3a>
 8002670:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002672:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002678:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	7fdb      	ldrb	r3, [r3, #31]
 800267e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002680:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002686:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	7f92      	ldrb	r2, [r2, #30]
 800268c:	2a00      	cmp	r2, #0
 800268e:	d102      	bne.n	8002696 <ETH_SetMACConfig+0x5e>
 8002690:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002694:	e000      	b.n	8002698 <ETH_SetMACConfig+0x60>
 8002696:	2200      	movs	r2, #0
                        macconf->Speed |
 8002698:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	7f1b      	ldrb	r3, [r3, #28]
 800269e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026a0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	791b      	ldrb	r3, [r3, #4]
 80026ac:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026b6:	2a00      	cmp	r2, #0
 80026b8:	d102      	bne.n	80026c0 <ETH_SetMACConfig+0x88>
 80026ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026be:	e000      	b.n	80026c2 <ETH_SetMACConfig+0x8a>
 80026c0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	7bdb      	ldrb	r3, [r3, #15]
 80026c8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026ca:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026d8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026da:	4313      	orrs	r3, r2
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026f2:	2001      	movs	r0, #1
 80026f4:	f7fe ffca 	bl	800168c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800270e:	4013      	ands	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002716:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800271e:	2a00      	cmp	r2, #0
 8002720:	d101      	bne.n	8002726 <ETH_SetMACConfig+0xee>
 8002722:	2280      	movs	r2, #128	; 0x80
 8002724:	e000      	b.n	8002728 <ETH_SetMACConfig+0xf0>
 8002726:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002728:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800272e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002736:	2a01      	cmp	r2, #1
 8002738:	d101      	bne.n	800273e <ETH_SetMACConfig+0x106>
 800273a:	2208      	movs	r2, #8
 800273c:	e000      	b.n	8002740 <ETH_SetMACConfig+0x108>
 800273e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002740:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002748:	2a01      	cmp	r2, #1
 800274a:	d101      	bne.n	8002750 <ETH_SetMACConfig+0x118>
 800274c:	2204      	movs	r2, #4
 800274e:	e000      	b.n	8002752 <ETH_SetMACConfig+0x11a>
 8002750:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002752:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800275a:	2a01      	cmp	r2, #1
 800275c:	d101      	bne.n	8002762 <ETH_SetMACConfig+0x12a>
 800275e:	2202      	movs	r2, #2
 8002760:	e000      	b.n	8002764 <ETH_SetMACConfig+0x12c>
 8002762:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002764:	4313      	orrs	r3, r2
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800277c:	2001      	movs	r0, #1
 800277e:	f7fe ff85 	bl	800168c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	619a      	str	r2, [r3, #24]
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	ff20810f 	.word	0xff20810f

08002798 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <ETH_SetDMAConfig+0x110>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	7b1b      	ldrb	r3, [r3, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <ETH_SetDMAConfig+0x2c>
 80027be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027c2:	e000      	b.n	80027c6 <ETH_SetDMAConfig+0x2e>
 80027c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	7b5b      	ldrb	r3, [r3, #13]
 80027ca:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027cc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	7f52      	ldrb	r2, [r2, #29]
 80027d2:	2a00      	cmp	r2, #0
 80027d4:	d102      	bne.n	80027dc <ETH_SetDMAConfig+0x44>
 80027d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027da:	e000      	b.n	80027de <ETH_SetDMAConfig+0x46>
 80027dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	7b9b      	ldrb	r3, [r3, #14]
 80027e4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027e6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	7f1b      	ldrb	r3, [r3, #28]
 80027f2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80027f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	7f9b      	ldrb	r3, [r3, #30]
 80027fa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027fc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002802:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800280a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800280c:	4313      	orrs	r3, r2
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281c:	461a      	mov	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800282e:	2001      	movs	r0, #1
 8002830:	f7fe ff2c 	bl	800168c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283c:	461a      	mov	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	791b      	ldrb	r3, [r3, #4]
 8002846:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800284c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002852:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002858:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002860:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002862:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800286a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002870:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800287a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800287e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800288c:	2001      	movs	r0, #1
 800288e:	f7fe fefd 	bl	800168c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800289a:	461a      	mov	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	f8de3f23 	.word	0xf8de3f23

080028ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b0a6      	sub	sp, #152	; 0x98
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028c0:	2300      	movs	r3, #0
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80028d6:	2301      	movs	r3, #1
 80028d8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028e8:	2300      	movs	r3, #0
 80028ea:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800290e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002912:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002914:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002918:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002920:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002924:	4619      	mov	r1, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff fe86 	bl	8002638 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800292c:	2301      	movs	r3, #1
 800292e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002930:	2301      	movs	r3, #1
 8002932:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800293a:	2301      	movs	r3, #1
 800293c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800294e:	2300      	movs	r3, #0
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002952:	2301      	movs	r3, #1
 8002954:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002958:	2301      	movs	r3, #1
 800295a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800295c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002960:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002966:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800296c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800296e:	2301      	movs	r3, #1
 8002970:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002974:	2300      	movs	r3, #0
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002978:	2300      	movs	r3, #0
 800297a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800297c:	f107 0308 	add.w	r3, r7, #8
 8002980:	4619      	mov	r1, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ff08 	bl	8002798 <ETH_SetDMAConfig>
}
 8002988:	bf00      	nop
 800298a:	3798      	adds	r7, #152	; 0x98
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3305      	adds	r3, #5
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	3204      	adds	r2, #4
 80029a8:	7812      	ldrb	r2, [r2, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <ETH_MACAddressConfig+0x68>)
 80029b2:	4413      	add	r3, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3303      	adds	r3, #3
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	061a      	lsls	r2, r3, #24
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3302      	adds	r3, #2
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3301      	adds	r3, #1
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	4313      	orrs	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	7812      	ldrb	r2, [r2, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <ETH_MACAddressConfig+0x6c>)
 80029e2:	4413      	add	r3, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	6013      	str	r3, [r2, #0]
}
 80029ea:	bf00      	nop
 80029ec:	371c      	adds	r7, #28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40028040 	.word	0x40028040
 80029fc:	40028044 	.word	0x40028044

08002a00 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e03e      	b.n	8002a8c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68d9      	ldr	r1, [r3, #12]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	440b      	add	r3, r1
 8002a1e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2200      	movs	r2, #0
 8002a36:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	3206      	adds	r2, #6
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d80c      	bhi.n	8002a70 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68d9      	ldr	r1, [r3, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	440b      	add	r3, r1
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	e004      	b.n	8002a7a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	461a      	mov	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d9bd      	bls.n	8002a0e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa4:	611a      	str	r2, [r3, #16]
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	e046      	b.n	8002b4e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6919      	ldr	r1, [r3, #16]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2200      	movs	r2, #0
 8002adc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002afc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002b04:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	3212      	adds	r2, #18
 8002b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d80c      	bhi.n	8002b3e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6919      	ldr	r1, [r3, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
 8002b3c:	e004      	b.n	8002b48 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d9b5      	bls.n	8002ac0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b7e:	60da      	str	r2, [r3, #12]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b08d      	sub	sp, #52	; 0x34
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3318      	adds	r3, #24
 8002b9c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bce:	d007      	beq.n	8002be0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002be0:	2302      	movs	r3, #2
 8002be2:	e103      	b.n	8002dec <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	3301      	adds	r3, #1
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002bfc:	f023 031f 	bic.w	r3, r3, #31
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	6852      	ldr	r2, [r2, #4]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c6a:	f3bf 8f5f 	dmb	sy
}
 8002c6e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002c7c:	e084      	b.n	8002d88 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d006      	beq.n	8002c9e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e005      	b.n	8002caa <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	3301      	adds	r3, #1
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d902      	bls.n	8002cbc <ETH_Prepare_Tx_Descriptors+0x130>
 8002cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb8:	3b04      	subs	r3, #4
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cde:	d007      	beq.n	8002cf0 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d029      	beq.n	8002d44 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d02:	e019      	b.n	8002d38 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d04:	f3bf 8f5f 	dmb	sy
}
 8002d08:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d18:	3301      	adds	r3, #1
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d902      	bls.n	8002d28 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	3b04      	subs	r3, #4
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d30:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	3301      	adds	r3, #1
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d3e1      	bcc.n	8002d04 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d40:	2302      	movs	r3, #2
 8002d42:	e053      	b.n	8002dec <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	3301      	adds	r3, #1
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002d62:	f023 031f 	bic.w	r3, r3, #31
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	6852      	ldr	r2, [r2, #4]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	3301      	adds	r3, #1
 8002d74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d76:	f3bf 8f5f 	dmb	sy
}
 8002d7a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f47f af76 	bne.w	8002c7e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d006      	beq.n	8002da6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e005      	b.n	8002db2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc2:	6979      	ldr	r1, [r7, #20]
 8002dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dd4:	b672      	cpsid	i
}
 8002dd6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	4413      	add	r3, r2
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002de6:	b662      	cpsie	i
}
 8002de8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3734      	adds	r7, #52	; 0x34
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	e177      	b.n	8003104 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e14:	2201      	movs	r2, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	f040 8166 	bne.w	80030fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d005      	beq.n	8002e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d130      	bne.n	8002eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	2203      	movs	r2, #3
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e80:	2201      	movs	r2, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 0201 	and.w	r2, r3, #1
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d017      	beq.n	8002ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d123      	bne.n	8002f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	08da      	lsrs	r2, r3, #3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3208      	adds	r2, #8
 8002efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	220f      	movs	r2, #15
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	08da      	lsrs	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3208      	adds	r2, #8
 8002f36:	69b9      	ldr	r1, [r7, #24]
 8002f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0203 	and.w	r2, r3, #3
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80c0 	beq.w	80030fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	4b66      	ldr	r3, [pc, #408]	; (800311c <HAL_GPIO_Init+0x324>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	4a65      	ldr	r2, [pc, #404]	; (800311c <HAL_GPIO_Init+0x324>)
 8002f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8e:	4b63      	ldr	r3, [pc, #396]	; (800311c <HAL_GPIO_Init+0x324>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f9a:	4a61      	ldr	r2, [pc, #388]	; (8003120 <HAL_GPIO_Init+0x328>)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a58      	ldr	r2, [pc, #352]	; (8003124 <HAL_GPIO_Init+0x32c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d037      	beq.n	8003036 <HAL_GPIO_Init+0x23e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a57      	ldr	r2, [pc, #348]	; (8003128 <HAL_GPIO_Init+0x330>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d031      	beq.n	8003032 <HAL_GPIO_Init+0x23a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a56      	ldr	r2, [pc, #344]	; (800312c <HAL_GPIO_Init+0x334>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d02b      	beq.n	800302e <HAL_GPIO_Init+0x236>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a55      	ldr	r2, [pc, #340]	; (8003130 <HAL_GPIO_Init+0x338>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d025      	beq.n	800302a <HAL_GPIO_Init+0x232>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a54      	ldr	r2, [pc, #336]	; (8003134 <HAL_GPIO_Init+0x33c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01f      	beq.n	8003026 <HAL_GPIO_Init+0x22e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a53      	ldr	r2, [pc, #332]	; (8003138 <HAL_GPIO_Init+0x340>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d019      	beq.n	8003022 <HAL_GPIO_Init+0x22a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_GPIO_Init+0x344>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_GPIO_Init+0x226>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a51      	ldr	r2, [pc, #324]	; (8003140 <HAL_GPIO_Init+0x348>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00d      	beq.n	800301a <HAL_GPIO_Init+0x222>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a50      	ldr	r2, [pc, #320]	; (8003144 <HAL_GPIO_Init+0x34c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <HAL_GPIO_Init+0x21e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4f      	ldr	r2, [pc, #316]	; (8003148 <HAL_GPIO_Init+0x350>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_GPIO_Init+0x21a>
 800300e:	2309      	movs	r3, #9
 8003010:	e012      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003012:	230a      	movs	r3, #10
 8003014:	e010      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003016:	2308      	movs	r3, #8
 8003018:	e00e      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800301a:	2307      	movs	r3, #7
 800301c:	e00c      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800301e:	2306      	movs	r3, #6
 8003020:	e00a      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003022:	2305      	movs	r3, #5
 8003024:	e008      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003026:	2304      	movs	r3, #4
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800302a:	2303      	movs	r3, #3
 800302c:	e004      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800302e:	2302      	movs	r3, #2
 8003030:	e002      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003036:	2300      	movs	r3, #0
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f002 0203 	and.w	r2, r2, #3
 800303e:	0092      	lsls	r2, r2, #2
 8003040:	4093      	lsls	r3, r2
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003048:	4935      	ldr	r1, [pc, #212]	; (8003120 <HAL_GPIO_Init+0x328>)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003056:	4b3d      	ldr	r3, [pc, #244]	; (800314c <HAL_GPIO_Init+0x354>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800307a:	4a34      	ldr	r2, [pc, #208]	; (800314c <HAL_GPIO_Init+0x354>)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003080:	4b32      	ldr	r3, [pc, #200]	; (800314c <HAL_GPIO_Init+0x354>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a4:	4a29      	ldr	r2, [pc, #164]	; (800314c <HAL_GPIO_Init+0x354>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030aa:	4b28      	ldr	r3, [pc, #160]	; (800314c <HAL_GPIO_Init+0x354>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ce:	4a1f      	ldr	r2, [pc, #124]	; (800314c <HAL_GPIO_Init+0x354>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <HAL_GPIO_Init+0x354>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f8:	4a14      	ldr	r2, [pc, #80]	; (800314c <HAL_GPIO_Init+0x354>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3301      	adds	r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b0f      	cmp	r3, #15
 8003108:	f67f ae84 	bls.w	8002e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3724      	adds	r7, #36	; 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	40013800 	.word	0x40013800
 8003124:	40020000 	.word	0x40020000
 8003128:	40020400 	.word	0x40020400
 800312c:	40020800 	.word	0x40020800
 8003130:	40020c00 	.word	0x40020c00
 8003134:	40021000 	.word	0x40021000
 8003138:	40021400 	.word	0x40021400
 800313c:	40021800 	.word	0x40021800
 8003140:	40021c00 	.word	0x40021c00
 8003144:	40022000 	.word	0x40022000
 8003148:	40022400 	.word	0x40022400
 800314c:	40013c00 	.word	0x40013c00

08003150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	e001      	b.n	8003172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800319c:	e003      	b.n	80031a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	041a      	lsls	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	619a      	str	r2, [r3, #24]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e267      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d075      	beq.n	80032be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031d2:	4b88      	ldr	r3, [pc, #544]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d00c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4b85      	ldr	r3, [pc, #532]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d112      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ea:	4b82      	ldr	r3, [pc, #520]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f6:	d10b      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	4b7e      	ldr	r3, [pc, #504]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d05b      	beq.n	80032bc <HAL_RCC_OscConfig+0x108>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d157      	bne.n	80032bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e242      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003218:	d106      	bne.n	8003228 <HAL_RCC_OscConfig+0x74>
 800321a:	4b76      	ldr	r3, [pc, #472]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a75      	ldr	r2, [pc, #468]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e01d      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x98>
 8003232:	4b70      	ldr	r3, [pc, #448]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6f      	ldr	r2, [pc, #444]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6c      	ldr	r2, [pc, #432]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 800324c:	4b69      	ldr	r3, [pc, #420]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a68      	ldr	r2, [pc, #416]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4b66      	ldr	r3, [pc, #408]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a65      	ldr	r2, [pc, #404]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800325e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fa02 	bl	8001674 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003274:	f7fe f9fe 	bl	8001674 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e207      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b5b      	ldr	r3, [pc, #364]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0xc0>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe f9ee 	bl	8001674 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800329c:	f7fe f9ea 	bl	8001674 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1f3      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	4b51      	ldr	r3, [pc, #324]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0xe8>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d063      	beq.n	8003392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ca:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d6:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d11c      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e2:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d116      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1c7      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4937      	ldr	r1, [pc, #220]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	e03a      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003324:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <HAL_RCC_OscConfig+0x244>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fe f9a3 	bl	8001674 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003332:	f7fe f99f 	bl	8001674 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1a8      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4925      	ldr	r1, [pc, #148]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_RCC_OscConfig+0x244>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fe f982 	bl	8001674 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003374:	f7fe f97e 	bl	8001674 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e187      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d036      	beq.n	800340c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_RCC_OscConfig+0x248>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fe f962 	bl	8001674 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b4:	f7fe f95e 	bl	8001674 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e167      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80033c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x200>
 80033d2:	e01b      	b.n	800340c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_OscConfig+0x248>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7fe f94b 	bl	8001674 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e0:	e00e      	b.n	8003400 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e2:	f7fe f947 	bl	8001674 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d907      	bls.n	8003400 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e150      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
 80033f4:	40023800 	.word	0x40023800
 80033f8:	42470000 	.word	0x42470000
 80033fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003400:	4b88      	ldr	r3, [pc, #544]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1ea      	bne.n	80033e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8097 	beq.w	8003548 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341e:	4b81      	ldr	r3, [pc, #516]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10f      	bne.n	800344a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	4b7d      	ldr	r3, [pc, #500]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a7c      	ldr	r2, [pc, #496]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b7a      	ldr	r3, [pc, #488]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b77      	ldr	r3, [pc, #476]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d118      	bne.n	8003488 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003456:	4b74      	ldr	r3, [pc, #464]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a73      	ldr	r2, [pc, #460]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f7fe f907 	bl	8001674 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f7fe f903 	bl	8001674 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e10c      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x2ea>
 8003490:	4b64      	ldr	r3, [pc, #400]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	4a63      	ldr	r2, [pc, #396]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6713      	str	r3, [r2, #112]	; 0x70
 800349c:	e01c      	b.n	80034d8 <HAL_RCC_OscConfig+0x324>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x30c>
 80034a6:	4b5f      	ldr	r3, [pc, #380]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a5e      	ldr	r2, [pc, #376]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
 80034b2:	4b5c      	ldr	r3, [pc, #368]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a5b      	ldr	r2, [pc, #364]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0x324>
 80034c0:	4b58      	ldr	r3, [pc, #352]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	4a57      	ldr	r2, [pc, #348]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	6713      	str	r3, [r2, #112]	; 0x70
 80034cc:	4b55      	ldr	r3, [pc, #340]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	4a54      	ldr	r2, [pc, #336]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034d2:	f023 0304 	bic.w	r3, r3, #4
 80034d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d015      	beq.n	800350c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fe f8c8 	bl	8001674 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7fe f8c4 	bl	8001674 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e0cb      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fe:	4b49      	ldr	r3, [pc, #292]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0ee      	beq.n	80034e8 <HAL_RCC_OscConfig+0x334>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350c:	f7fe f8b2 	bl	8001674 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003512:	e00a      	b.n	800352a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003514:	f7fe f8ae 	bl	8001674 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0b5      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352a:	4b3e      	ldr	r3, [pc, #248]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ee      	bne.n	8003514 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353c:	4b39      	ldr	r3, [pc, #228]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	4a38      	ldr	r2, [pc, #224]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003546:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80a1 	beq.w	8003694 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003552:	4b34      	ldr	r3, [pc, #208]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b08      	cmp	r3, #8
 800355c:	d05c      	beq.n	8003618 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d141      	bne.n	80035ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003566:	4b31      	ldr	r3, [pc, #196]	; (800362c <HAL_RCC_OscConfig+0x478>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe f882 	bl	8001674 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003574:	f7fe f87e 	bl	8001674 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e087      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	4b27      	ldr	r3, [pc, #156]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	019b      	lsls	r3, r3, #6
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	041b      	lsls	r3, r3, #16
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	061b      	lsls	r3, r3, #24
 80035b6:	491b      	ldr	r1, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x478>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fe f857 	bl	8001674 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fe f853 	bl	8001674 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e05c      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x416>
 80035e8:	e054      	b.n	8003694 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_RCC_OscConfig+0x478>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe f840 	bl	8001674 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f8:	f7fe f83c 	bl	8001674 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e045      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x444>
 8003616:	e03d      	b.n	8003694 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e038      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
 8003624:	40023800 	.word	0x40023800
 8003628:	40007000 	.word	0x40007000
 800362c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_RCC_OscConfig+0x4ec>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d028      	beq.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d121      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d11a      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003666:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003668:	4293      	cmp	r3, r2
 800366a:	d111      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	3b01      	subs	r3, #1
 800367a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0cc      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b8:	4b68      	ldr	r3, [pc, #416]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d90c      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b65      	ldr	r3, [pc, #404]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b63      	ldr	r3, [pc, #396]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0b8      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a58      	ldr	r2, [pc, #352]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a52      	ldr	r2, [pc, #328]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800371a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	494d      	ldr	r1, [pc, #308]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d044      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d119      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d003      	beq.n	8003762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375e:	2b03      	cmp	r3, #3
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e06f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e067      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b37      	ldr	r3, [pc, #220]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4934      	ldr	r1, [pc, #208]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003794:	f7fd ff6e 	bl	8001674 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fd ff6a 	bl	8001674 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e04f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b25      	ldr	r3, [pc, #148]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d20c      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e032      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4916      	ldr	r1, [pc, #88]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	490e      	ldr	r1, [pc, #56]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800382a:	f000 f821 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800382e:	4602      	mov	r2, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	490a      	ldr	r1, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	5ccb      	ldrb	r3, [r1, r3]
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd f93a 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023c00 	.word	0x40023c00
 8003860:	40023800 	.word	0x40023800
 8003864:	0801df04 	.word	0x0801df04
 8003868:	20000000 	.word	0x20000000
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003874:	b094      	sub	sp, #80	; 0x50
 8003876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	647b      	str	r3, [r7, #68]	; 0x44
 800387c:	2300      	movs	r3, #0
 800387e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003880:	2300      	movs	r3, #0
 8003882:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003888:	4b79      	ldr	r3, [pc, #484]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x200>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d00d      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003894:	2b08      	cmp	r3, #8
 8003896:	f200 80e1 	bhi.w	8003a5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x34>
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x3a>
 80038a2:	e0db      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a4:	4b73      	ldr	r3, [pc, #460]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x204>)
 80038a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038a8:	e0db      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038aa:	4b73      	ldr	r3, [pc, #460]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x208>)
 80038ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038ae:	e0d8      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b0:	4b6f      	ldr	r3, [pc, #444]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ba:	4b6d      	ldr	r3, [pc, #436]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d063      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c6:	4b6a      	ldr	r3, [pc, #424]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	099b      	lsrs	r3, r3, #6
 80038cc:	2200      	movs	r2, #0
 80038ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80038d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d8:	633b      	str	r3, [r7, #48]	; 0x30
 80038da:	2300      	movs	r3, #0
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
 80038de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038e2:	4622      	mov	r2, r4
 80038e4:	462b      	mov	r3, r5
 80038e6:	f04f 0000 	mov.w	r0, #0
 80038ea:	f04f 0100 	mov.w	r1, #0
 80038ee:	0159      	lsls	r1, r3, #5
 80038f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f4:	0150      	lsls	r0, r2, #5
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4621      	mov	r1, r4
 80038fc:	1a51      	subs	r1, r2, r1
 80038fe:	6139      	str	r1, [r7, #16]
 8003900:	4629      	mov	r1, r5
 8003902:	eb63 0301 	sbc.w	r3, r3, r1
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003914:	4659      	mov	r1, fp
 8003916:	018b      	lsls	r3, r1, #6
 8003918:	4651      	mov	r1, sl
 800391a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800391e:	4651      	mov	r1, sl
 8003920:	018a      	lsls	r2, r1, #6
 8003922:	4651      	mov	r1, sl
 8003924:	ebb2 0801 	subs.w	r8, r2, r1
 8003928:	4659      	mov	r1, fp
 800392a:	eb63 0901 	sbc.w	r9, r3, r1
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800393e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003942:	4690      	mov	r8, r2
 8003944:	4699      	mov	r9, r3
 8003946:	4623      	mov	r3, r4
 8003948:	eb18 0303 	adds.w	r3, r8, r3
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	462b      	mov	r3, r5
 8003950:	eb49 0303 	adc.w	r3, r9, r3
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003962:	4629      	mov	r1, r5
 8003964:	024b      	lsls	r3, r1, #9
 8003966:	4621      	mov	r1, r4
 8003968:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800396c:	4621      	mov	r1, r4
 800396e:	024a      	lsls	r2, r1, #9
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003976:	2200      	movs	r2, #0
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
 800397a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800397c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003980:	f7fc fc9e 	bl	80002c0 <__aeabi_uldivmod>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4613      	mov	r3, r2
 800398a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800398c:	e058      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398e:	4b38      	ldr	r3, [pc, #224]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	099b      	lsrs	r3, r3, #6
 8003994:	2200      	movs	r2, #0
 8003996:	4618      	mov	r0, r3
 8003998:	4611      	mov	r1, r2
 800399a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800399e:	623b      	str	r3, [r7, #32]
 80039a0:	2300      	movs	r3, #0
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
 80039a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	f04f 0000 	mov.w	r0, #0
 80039b0:	f04f 0100 	mov.w	r1, #0
 80039b4:	0159      	lsls	r1, r3, #5
 80039b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ba:	0150      	lsls	r0, r2, #5
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4641      	mov	r1, r8
 80039c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80039c6:	4649      	mov	r1, r9
 80039c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039e0:	ebb2 040a 	subs.w	r4, r2, sl
 80039e4:	eb63 050b 	sbc.w	r5, r3, fp
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	00eb      	lsls	r3, r5, #3
 80039f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f6:	00e2      	lsls	r2, r4, #3
 80039f8:	4614      	mov	r4, r2
 80039fa:	461d      	mov	r5, r3
 80039fc:	4643      	mov	r3, r8
 80039fe:	18e3      	adds	r3, r4, r3
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	464b      	mov	r3, r9
 8003a04:	eb45 0303 	adc.w	r3, r5, r3
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a16:	4629      	mov	r1, r5
 8003a18:	028b      	lsls	r3, r1, #10
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a20:	4621      	mov	r1, r4
 8003a22:	028a      	lsls	r2, r1, #10
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	61fa      	str	r2, [r7, #28]
 8003a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a34:	f7fc fc44 	bl	80002c0 <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a5a:	e002      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3750      	adds	r7, #80	; 0x50
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800
 8003a74:	00f42400 	.word	0x00f42400
 8003a78:	007a1200 	.word	0x007a1200

08003a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000000 	.word	0x20000000

08003a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a98:	f7ff fff0 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	0a9b      	lsrs	r3, r3, #10
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4903      	ldr	r1, [pc, #12]	; (8003ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	0801df14 	.word	0x0801df14

08003abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ac0:	f7ff ffdc 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	0b5b      	lsrs	r3, r3, #13
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	4903      	ldr	r1, [pc, #12]	; (8003ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad2:	5ccb      	ldrb	r3, [r1, r3]
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	0801df14 	.word	0x0801df14

08003ae4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	220f      	movs	r2, #15
 8003af2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003af4:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_RCC_GetClockConfig+0x5c>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0203 	and.w	r2, r3, #3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <HAL_RCC_GetClockConfig+0x5c>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <HAL_RCC_GetClockConfig+0x5c>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_GetClockConfig+0x5c>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	08db      	lsrs	r3, r3, #3
 8003b1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b26:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <HAL_RCC_GetClockConfig+0x60>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 020f 	and.w	r2, r3, #15
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	601a      	str	r2, [r3, #0]
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40023c00 	.word	0x40023c00

08003b48 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e01c      	b.n	8003b94 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	795b      	ldrb	r3, [r3, #5]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fc ff40 	bl	80009f0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0204 	orr.w	r2, r2, #4
 8003b84:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	791b      	ldrb	r3, [r3, #4]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RNG_GenerateRandomNumber+0x1a>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e044      	b.n	8003c40 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	795b      	ldrb	r3, [r3, #5]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d133      	bne.n	8003c2e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bcc:	f7fd fd52 	bl	8001674 <HAL_GetTick>
 8003bd0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003bd2:	e018      	b.n	8003c06 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003bd4:	f7fd fd4e 	bl	8001674 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d911      	bls.n	8003c06 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d00a      	beq.n	8003c06 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e01c      	b.n	8003c40 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d1df      	bne.n	8003bd4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	715a      	strb	r2, [r3, #5]
 8003c2c:	e004      	b.n	8003c38 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2204      	movs	r2, #4
 8003c32:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	711a      	strb	r2, [r3, #4]

  return status;
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e041      	b.n	8003cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f839 	bl	8003ce6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f000 f9d8 	bl	800403c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d001      	beq.n	8003d14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e04e      	b.n	8003db2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a23      	ldr	r2, [pc, #140]	; (8003dc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d022      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3e:	d01d      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d018      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d013      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <HAL_TIM_Base_Start_IT+0xd0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00e      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d111      	bne.n	8003da0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b06      	cmp	r3, #6
 8003d8c:	d010      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9e:	e007      	b.n	8003db0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000800 	.word	0x40000800
 8003dcc:	40000c00 	.word	0x40000c00
 8003dd0:	40010400 	.word	0x40010400
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40001800 	.word	0x40001800

08003ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d122      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d11b      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0202 	mvn.w	r2, #2
 8003e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f8ee 	bl	8004000 <HAL_TIM_IC_CaptureCallback>
 8003e24:	e005      	b.n	8003e32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8e0 	bl	8003fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f8f1 	bl	8004014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d122      	bne.n	8003e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d11b      	bne.n	8003e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0204 	mvn.w	r2, #4
 8003e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f8c4 	bl	8004000 <HAL_TIM_IC_CaptureCallback>
 8003e78:	e005      	b.n	8003e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f8b6 	bl	8003fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f8c7 	bl	8004014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d122      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d11b      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0208 	mvn.w	r2, #8
 8003eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f89a 	bl	8004000 <HAL_TIM_IC_CaptureCallback>
 8003ecc:	e005      	b.n	8003eda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f88c 	bl	8003fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f89d 	bl	8004014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b10      	cmp	r3, #16
 8003eec:	d122      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d11b      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0210 	mvn.w	r2, #16
 8003f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2208      	movs	r2, #8
 8003f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f870 	bl	8004000 <HAL_TIM_IC_CaptureCallback>
 8003f20:	e005      	b.n	8003f2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f862 	bl	8003fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f873 	bl	8004014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d10e      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d107      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0201 	mvn.w	r2, #1
 8003f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fc fd04 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b80      	cmp	r3, #128	; 0x80
 8003f6c:	d10e      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f78:	2b80      	cmp	r3, #128	; 0x80
 8003f7a:	d107      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f902 	bl	8004190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d10e      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d107      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f838 	bl	8004028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d107      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0220 	mvn.w	r2, #32
 8003fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f8cc 	bl	800417c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a40      	ldr	r2, [pc, #256]	; (8004150 <TIM_Base_SetConfig+0x114>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405a:	d00f      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a3d      	ldr	r2, [pc, #244]	; (8004154 <TIM_Base_SetConfig+0x118>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00b      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a3c      	ldr	r2, [pc, #240]	; (8004158 <TIM_Base_SetConfig+0x11c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d007      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a3b      	ldr	r2, [pc, #236]	; (800415c <TIM_Base_SetConfig+0x120>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d003      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a3a      	ldr	r2, [pc, #232]	; (8004160 <TIM_Base_SetConfig+0x124>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d108      	bne.n	800408e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a2f      	ldr	r2, [pc, #188]	; (8004150 <TIM_Base_SetConfig+0x114>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d02b      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409c:	d027      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a2c      	ldr	r2, [pc, #176]	; (8004154 <TIM_Base_SetConfig+0x118>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d023      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a2b      	ldr	r2, [pc, #172]	; (8004158 <TIM_Base_SetConfig+0x11c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01f      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a2a      	ldr	r2, [pc, #168]	; (800415c <TIM_Base_SetConfig+0x120>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01b      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a29      	ldr	r2, [pc, #164]	; (8004160 <TIM_Base_SetConfig+0x124>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d017      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a28      	ldr	r2, [pc, #160]	; (8004164 <TIM_Base_SetConfig+0x128>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a27      	ldr	r2, [pc, #156]	; (8004168 <TIM_Base_SetConfig+0x12c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00f      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a26      	ldr	r2, [pc, #152]	; (800416c <TIM_Base_SetConfig+0x130>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00b      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a25      	ldr	r2, [pc, #148]	; (8004170 <TIM_Base_SetConfig+0x134>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a24      	ldr	r2, [pc, #144]	; (8004174 <TIM_Base_SetConfig+0x138>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d003      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a23      	ldr	r2, [pc, #140]	; (8004178 <TIM_Base_SetConfig+0x13c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d108      	bne.n	8004100 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <TIM_Base_SetConfig+0x114>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_Base_SetConfig+0xf8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a0c      	ldr	r2, [pc, #48]	; (8004160 <TIM_Base_SetConfig+0x124>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d103      	bne.n	800413c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	615a      	str	r2, [r3, #20]
}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40010000 	.word	0x40010000
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40000c00 	.word	0x40000c00
 8004160:	40010400 	.word	0x40010400
 8004164:	40014000 	.word	0x40014000
 8004168:	40014400 	.word	0x40014400
 800416c:	40014800 	.word	0x40014800
 8004170:	40001800 	.word	0x40001800
 8004174:	40001c00 	.word	0x40001c00
 8004178:	40002000 	.word	0x40002000

0800417c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e03f      	b.n	8004236 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fc fc32 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2224      	movs	r2, #36	; 0x24
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f829 	bl	8004240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695a      	ldr	r2, [r3, #20]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800420c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800421c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004244:	b0c0      	sub	sp, #256	; 0x100
 8004246:	af00      	add	r7, sp, #0
 8004248:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	68d9      	ldr	r1, [r3, #12]
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	ea40 0301 	orr.w	r3, r0, r1
 8004268:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	431a      	orrs	r2, r3
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	431a      	orrs	r2, r3
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004298:	f021 010c 	bic.w	r1, r1, #12
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042a6:	430b      	orrs	r3, r1
 80042a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ba:	6999      	ldr	r1, [r3, #24]
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	ea40 0301 	orr.w	r3, r0, r1
 80042c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b8f      	ldr	r3, [pc, #572]	; (800450c <UART_SetConfig+0x2cc>)
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d005      	beq.n	80042e0 <UART_SetConfig+0xa0>
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b8d      	ldr	r3, [pc, #564]	; (8004510 <UART_SetConfig+0x2d0>)
 80042dc:	429a      	cmp	r2, r3
 80042de:	d104      	bne.n	80042ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7ff fbec 	bl	8003abc <HAL_RCC_GetPCLK2Freq>
 80042e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042e8:	e003      	b.n	80042f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ea:	f7ff fbd3 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 80042ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fc:	f040 810c 	bne.w	8004518 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004304:	2200      	movs	r2, #0
 8004306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800430a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800430e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004312:	4622      	mov	r2, r4
 8004314:	462b      	mov	r3, r5
 8004316:	1891      	adds	r1, r2, r2
 8004318:	65b9      	str	r1, [r7, #88]	; 0x58
 800431a:	415b      	adcs	r3, r3
 800431c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800431e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004322:	4621      	mov	r1, r4
 8004324:	eb12 0801 	adds.w	r8, r2, r1
 8004328:	4629      	mov	r1, r5
 800432a:	eb43 0901 	adc.w	r9, r3, r1
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800433a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800433e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004342:	4690      	mov	r8, r2
 8004344:	4699      	mov	r9, r3
 8004346:	4623      	mov	r3, r4
 8004348:	eb18 0303 	adds.w	r3, r8, r3
 800434c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004350:	462b      	mov	r3, r5
 8004352:	eb49 0303 	adc.w	r3, r9, r3
 8004356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004366:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800436a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800436e:	460b      	mov	r3, r1
 8004370:	18db      	adds	r3, r3, r3
 8004372:	653b      	str	r3, [r7, #80]	; 0x50
 8004374:	4613      	mov	r3, r2
 8004376:	eb42 0303 	adc.w	r3, r2, r3
 800437a:	657b      	str	r3, [r7, #84]	; 0x54
 800437c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004380:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004384:	f7fb ff9c 	bl	80002c0 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4b61      	ldr	r3, [pc, #388]	; (8004514 <UART_SetConfig+0x2d4>)
 800438e:	fba3 2302 	umull	r2, r3, r3, r2
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	011c      	lsls	r4, r3, #4
 8004396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	1891      	adds	r1, r2, r2
 80043ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80043b0:	415b      	adcs	r3, r3
 80043b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043b8:	4641      	mov	r1, r8
 80043ba:	eb12 0a01 	adds.w	sl, r2, r1
 80043be:	4649      	mov	r1, r9
 80043c0:	eb43 0b01 	adc.w	fp, r3, r1
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d8:	4692      	mov	sl, r2
 80043da:	469b      	mov	fp, r3
 80043dc:	4643      	mov	r3, r8
 80043de:	eb1a 0303 	adds.w	r3, sl, r3
 80043e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043e6:	464b      	mov	r3, r9
 80043e8:	eb4b 0303 	adc.w	r3, fp, r3
 80043ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004400:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004404:	460b      	mov	r3, r1
 8004406:	18db      	adds	r3, r3, r3
 8004408:	643b      	str	r3, [r7, #64]	; 0x40
 800440a:	4613      	mov	r3, r2
 800440c:	eb42 0303 	adc.w	r3, r2, r3
 8004410:	647b      	str	r3, [r7, #68]	; 0x44
 8004412:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004416:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800441a:	f7fb ff51 	bl	80002c0 <__aeabi_uldivmod>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4611      	mov	r1, r2
 8004424:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <UART_SetConfig+0x2d4>)
 8004426:	fba3 2301 	umull	r2, r3, r3, r1
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2264      	movs	r2, #100	; 0x64
 800442e:	fb02 f303 	mul.w	r3, r2, r3
 8004432:	1acb      	subs	r3, r1, r3
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800443a:	4b36      	ldr	r3, [pc, #216]	; (8004514 <UART_SetConfig+0x2d4>)
 800443c:	fba3 2302 	umull	r2, r3, r3, r2
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004448:	441c      	add	r4, r3
 800444a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004454:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004458:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800445c:	4642      	mov	r2, r8
 800445e:	464b      	mov	r3, r9
 8004460:	1891      	adds	r1, r2, r2
 8004462:	63b9      	str	r1, [r7, #56]	; 0x38
 8004464:	415b      	adcs	r3, r3
 8004466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800446c:	4641      	mov	r1, r8
 800446e:	1851      	adds	r1, r2, r1
 8004470:	6339      	str	r1, [r7, #48]	; 0x30
 8004472:	4649      	mov	r1, r9
 8004474:	414b      	adcs	r3, r1
 8004476:	637b      	str	r3, [r7, #52]	; 0x34
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004484:	4659      	mov	r1, fp
 8004486:	00cb      	lsls	r3, r1, #3
 8004488:	4651      	mov	r1, sl
 800448a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800448e:	4651      	mov	r1, sl
 8004490:	00ca      	lsls	r2, r1, #3
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	4603      	mov	r3, r0
 8004498:	4642      	mov	r2, r8
 800449a:	189b      	adds	r3, r3, r2
 800449c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044a0:	464b      	mov	r3, r9
 80044a2:	460a      	mov	r2, r1
 80044a4:	eb42 0303 	adc.w	r3, r2, r3
 80044a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044c0:	460b      	mov	r3, r1
 80044c2:	18db      	adds	r3, r3, r3
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c6:	4613      	mov	r3, r2
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044d6:	f7fb fef3 	bl	80002c0 <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <UART_SetConfig+0x2d4>)
 80044e0:	fba3 1302 	umull	r1, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	2164      	movs	r1, #100	; 0x64
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	3332      	adds	r3, #50	; 0x32
 80044f2:	4a08      	ldr	r2, [pc, #32]	; (8004514 <UART_SetConfig+0x2d4>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	f003 0207 	and.w	r2, r3, #7
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4422      	add	r2, r4
 8004506:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004508:	e105      	b.n	8004716 <UART_SetConfig+0x4d6>
 800450a:	bf00      	nop
 800450c:	40011000 	.word	0x40011000
 8004510:	40011400 	.word	0x40011400
 8004514:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451c:	2200      	movs	r2, #0
 800451e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004522:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004526:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800452a:	4642      	mov	r2, r8
 800452c:	464b      	mov	r3, r9
 800452e:	1891      	adds	r1, r2, r2
 8004530:	6239      	str	r1, [r7, #32]
 8004532:	415b      	adcs	r3, r3
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
 8004536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800453a:	4641      	mov	r1, r8
 800453c:	1854      	adds	r4, r2, r1
 800453e:	4649      	mov	r1, r9
 8004540:	eb43 0501 	adc.w	r5, r3, r1
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	00eb      	lsls	r3, r5, #3
 800454e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004552:	00e2      	lsls	r2, r4, #3
 8004554:	4614      	mov	r4, r2
 8004556:	461d      	mov	r5, r3
 8004558:	4643      	mov	r3, r8
 800455a:	18e3      	adds	r3, r4, r3
 800455c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004560:	464b      	mov	r3, r9
 8004562:	eb45 0303 	adc.w	r3, r5, r3
 8004566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004576:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004586:	4629      	mov	r1, r5
 8004588:	008b      	lsls	r3, r1, #2
 800458a:	4621      	mov	r1, r4
 800458c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004590:	4621      	mov	r1, r4
 8004592:	008a      	lsls	r2, r1, #2
 8004594:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004598:	f7fb fe92 	bl	80002c0 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4b60      	ldr	r3, [pc, #384]	; (8004724 <UART_SetConfig+0x4e4>)
 80045a2:	fba3 2302 	umull	r2, r3, r3, r2
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	011c      	lsls	r4, r3, #4
 80045aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045bc:	4642      	mov	r2, r8
 80045be:	464b      	mov	r3, r9
 80045c0:	1891      	adds	r1, r2, r2
 80045c2:	61b9      	str	r1, [r7, #24]
 80045c4:	415b      	adcs	r3, r3
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045cc:	4641      	mov	r1, r8
 80045ce:	1851      	adds	r1, r2, r1
 80045d0:	6139      	str	r1, [r7, #16]
 80045d2:	4649      	mov	r1, r9
 80045d4:	414b      	adcs	r3, r1
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045e4:	4659      	mov	r1, fp
 80045e6:	00cb      	lsls	r3, r1, #3
 80045e8:	4651      	mov	r1, sl
 80045ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ee:	4651      	mov	r1, sl
 80045f0:	00ca      	lsls	r2, r1, #3
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	4642      	mov	r2, r8
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004600:	464b      	mov	r3, r9
 8004602:	460a      	mov	r2, r1
 8004604:	eb42 0303 	adc.w	r3, r2, r3
 8004608:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	67bb      	str	r3, [r7, #120]	; 0x78
 8004616:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004624:	4649      	mov	r1, r9
 8004626:	008b      	lsls	r3, r1, #2
 8004628:	4641      	mov	r1, r8
 800462a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800462e:	4641      	mov	r1, r8
 8004630:	008a      	lsls	r2, r1, #2
 8004632:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004636:	f7fb fe43 	bl	80002c0 <__aeabi_uldivmod>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4b39      	ldr	r3, [pc, #228]	; (8004724 <UART_SetConfig+0x4e4>)
 8004640:	fba3 1302 	umull	r1, r3, r3, r2
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	2164      	movs	r1, #100	; 0x64
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	3332      	adds	r3, #50	; 0x32
 8004652:	4a34      	ldr	r2, [pc, #208]	; (8004724 <UART_SetConfig+0x4e4>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800465e:	441c      	add	r4, r3
 8004660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004664:	2200      	movs	r2, #0
 8004666:	673b      	str	r3, [r7, #112]	; 0x70
 8004668:	677a      	str	r2, [r7, #116]	; 0x74
 800466a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800466e:	4642      	mov	r2, r8
 8004670:	464b      	mov	r3, r9
 8004672:	1891      	adds	r1, r2, r2
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	415b      	adcs	r3, r3
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800467e:	4641      	mov	r1, r8
 8004680:	1851      	adds	r1, r2, r1
 8004682:	6039      	str	r1, [r7, #0]
 8004684:	4649      	mov	r1, r9
 8004686:	414b      	adcs	r3, r1
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004696:	4659      	mov	r1, fp
 8004698:	00cb      	lsls	r3, r1, #3
 800469a:	4651      	mov	r1, sl
 800469c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046a0:	4651      	mov	r1, sl
 80046a2:	00ca      	lsls	r2, r1, #3
 80046a4:	4610      	mov	r0, r2
 80046a6:	4619      	mov	r1, r3
 80046a8:	4603      	mov	r3, r0
 80046aa:	4642      	mov	r2, r8
 80046ac:	189b      	adds	r3, r3, r2
 80046ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80046b0:	464b      	mov	r3, r9
 80046b2:	460a      	mov	r2, r1
 80046b4:	eb42 0303 	adc.w	r3, r2, r3
 80046b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	663b      	str	r3, [r7, #96]	; 0x60
 80046c4:	667a      	str	r2, [r7, #100]	; 0x64
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046d2:	4649      	mov	r1, r9
 80046d4:	008b      	lsls	r3, r1, #2
 80046d6:	4641      	mov	r1, r8
 80046d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046dc:	4641      	mov	r1, r8
 80046de:	008a      	lsls	r2, r1, #2
 80046e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046e4:	f7fb fdec 	bl	80002c0 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <UART_SetConfig+0x4e4>)
 80046ee:	fba3 1302 	umull	r1, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2164      	movs	r1, #100	; 0x64
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	3332      	adds	r3, #50	; 0x32
 8004700:	4a08      	ldr	r2, [pc, #32]	; (8004724 <UART_SetConfig+0x4e4>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	f003 020f 	and.w	r2, r3, #15
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4422      	add	r2, r4
 8004714:	609a      	str	r2, [r3, #8]
}
 8004716:	bf00      	nop
 8004718:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800471c:	46bd      	mov	sp, r7
 800471e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004722:	bf00      	nop
 8004724:	51eb851f 	.word	0x51eb851f

08004728 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004728:	b5b0      	push	{r4, r5, r7, lr}
 800472a:	b08c      	sub	sp, #48	; 0x30
 800472c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800472e:	2100      	movs	r1, #0
 8004730:	2000      	movs	r0, #0
 8004732:	f006 f95f 	bl	800a9f4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004736:	4b20      	ldr	r3, [pc, #128]	; (80047b8 <MX_LWIP_Init+0x90>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800473c:	4b1f      	ldr	r3, [pc, #124]	; (80047bc <MX_LWIP_Init+0x94>)
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004742:	4b1f      	ldr	r3, [pc, #124]	; (80047c0 <MX_LWIP_Init+0x98>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004748:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <MX_LWIP_Init+0x9c>)
 800474a:	9302      	str	r3, [sp, #8]
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <MX_LWIP_Init+0xa0>)
 800474e:	9301      	str	r3, [sp, #4]
 8004750:	2300      	movs	r3, #0
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <MX_LWIP_Init+0x98>)
 8004756:	4a19      	ldr	r2, [pc, #100]	; (80047bc <MX_LWIP_Init+0x94>)
 8004758:	4917      	ldr	r1, [pc, #92]	; (80047b8 <MX_LWIP_Init+0x90>)
 800475a:	481c      	ldr	r0, [pc, #112]	; (80047cc <MX_LWIP_Init+0xa4>)
 800475c:	f007 fd64 	bl	800c228 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004760:	481a      	ldr	r0, [pc, #104]	; (80047cc <MX_LWIP_Init+0xa4>)
 8004762:	f007 ff1b 	bl	800c59c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004766:	4b19      	ldr	r3, [pc, #100]	; (80047cc <MX_LWIP_Init+0xa4>)
 8004768:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800476c:	089b      	lsrs	r3, r3, #2
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004778:	4814      	ldr	r0, [pc, #80]	; (80047cc <MX_LWIP_Init+0xa4>)
 800477a:	f007 ff1f 	bl	800c5bc <netif_set_up>
 800477e:	e002      	b.n	8004786 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004780:	4812      	ldr	r0, [pc, #72]	; (80047cc <MX_LWIP_Init+0xa4>)
 8004782:	f007 ff87 	bl	800c694 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004786:	4912      	ldr	r1, [pc, #72]	; (80047d0 <MX_LWIP_Init+0xa8>)
 8004788:	4810      	ldr	r0, [pc, #64]	; (80047cc <MX_LWIP_Init+0xa4>)
 800478a:	f008 f81d 	bl	800c7c8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800478e:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <MX_LWIP_Init+0xac>)
 8004790:	1d3c      	adds	r4, r7, #4
 8004792:	461d      	mov	r5, r3
 8004794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004798:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800479c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80047a0:	1d3b      	adds	r3, r7, #4
 80047a2:	490a      	ldr	r1, [pc, #40]	; (80047cc <MX_LWIP_Init+0xa4>)
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fd23 	bl	80051f0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80047aa:	4808      	ldr	r0, [pc, #32]	; (80047cc <MX_LWIP_Init+0xa4>)
 80047ac:	f010 f9f0 	bl	8014b90 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80047b0:	bf00      	nop
 80047b2:	3720      	adds	r7, #32
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bdb0      	pop	{r4, r5, r7, pc}
 80047b8:	20000c4c 	.word	0x20000c4c
 80047bc:	20000c50 	.word	0x20000c50
 80047c0:	20000c54 	.word	0x20000c54
 80047c4:	0800a905 	.word	0x0800a905
 80047c8:	08004c79 	.word	0x08004c79
 80047cc:	20000c14 	.word	0x20000c14
 80047d0:	080047d9 	.word	0x080047d9
 80047d4:	0801a3d8 	.word	0x0801a3d8

080047d8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80047f4:	4b04      	ldr	r3, [pc, #16]	; (8004808 <HAL_ETH_RxCpltCallback+0x1c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fe75 	bl	80054e8 <osSemaphoreRelease>
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20005724 	.word	0x20005724

0800480c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004814:	4b04      	ldr	r3, [pc, #16]	; (8004828 <HAL_ETH_TxCpltCallback+0x1c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fe65 	bl	80054e8 <osSemaphoreRelease>
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20005728 	.word	0x20005728

0800482c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7fd fecd 	bl	80025d4 <HAL_ETH_GetDMAError>
 800483a:	4603      	mov	r3, r0
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d104      	bne.n	800484e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004844:	4b04      	ldr	r3, [pc, #16]	; (8004858 <HAL_ETH_ErrorCallback+0x2c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fe4d 	bl	80054e8 <osSemaphoreRelease>
  }
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20005724 	.word	0x20005724

0800485c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800485c:	b5b0      	push	{r4, r5, r7, lr}
 800485e:	b0a8      	sub	sp, #160	; 0xa0
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800487a:	2264      	movs	r2, #100	; 0x64
 800487c:	2100      	movs	r1, #0
 800487e:	4618      	mov	r0, r3
 8004880:	f014 fabb 	bl	8018dfa <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004884:	4b85      	ldr	r3, [pc, #532]	; (8004a9c <low_level_init+0x240>)
 8004886:	4a86      	ldr	r2, [pc, #536]	; (8004aa0 <low_level_init+0x244>)
 8004888:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800488a:	2300      	movs	r3, #0
 800488c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004896:	23e1      	movs	r3, #225	; 0xe1
 8004898:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 800489c:	23fe      	movs	r3, #254	; 0xfe
 800489e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 80048a2:	23ec      	movs	r3, #236	; 0xec
 80048a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x80;
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80048ae:	4a7b      	ldr	r2, [pc, #492]	; (8004a9c <low_level_init+0x240>)
 80048b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048b4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80048b6:	4b79      	ldr	r3, [pc, #484]	; (8004a9c <low_level_init+0x240>)
 80048b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048bc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80048be:	4b77      	ldr	r3, [pc, #476]	; (8004a9c <low_level_init+0x240>)
 80048c0:	4a78      	ldr	r2, [pc, #480]	; (8004aa4 <low_level_init+0x248>)
 80048c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80048c4:	4b75      	ldr	r3, [pc, #468]	; (8004a9c <low_level_init+0x240>)
 80048c6:	4a78      	ldr	r2, [pc, #480]	; (8004aa8 <low_level_init+0x24c>)
 80048c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80048ca:	4b74      	ldr	r3, [pc, #464]	; (8004a9c <low_level_init+0x240>)
 80048cc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80048d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80048d2:	4872      	ldr	r0, [pc, #456]	; (8004a9c <low_level_init+0x240>)
 80048d4:	f7fc ffe0 	bl	8001898 <HAL_ETH_Init>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80048de:	2238      	movs	r2, #56	; 0x38
 80048e0:	2100      	movs	r1, #0
 80048e2:	4872      	ldr	r0, [pc, #456]	; (8004aac <low_level_init+0x250>)
 80048e4:	f014 fa89 	bl	8018dfa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80048e8:	4b70      	ldr	r3, [pc, #448]	; (8004aac <low_level_init+0x250>)
 80048ea:	2221      	movs	r2, #33	; 0x21
 80048ec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80048ee:	4b6f      	ldr	r3, [pc, #444]	; (8004aac <low_level_init+0x250>)
 80048f0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80048f4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80048f6:	4b6d      	ldr	r3, [pc, #436]	; (8004aac <low_level_init+0x250>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80048fc:	486c      	ldr	r0, [pc, #432]	; (8004ab0 <low_level_init+0x254>)
 80048fe:	f007 fb4d 	bl	800bf9c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2206      	movs	r2, #6
 8004906:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800490a:	4b64      	ldr	r3, [pc, #400]	; (8004a9c <low_level_init+0x240>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	781a      	ldrb	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004916:	4b61      	ldr	r3, [pc, #388]	; (8004a9c <low_level_init+0x240>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	785a      	ldrb	r2, [r3, #1]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004922:	4b5e      	ldr	r3, [pc, #376]	; (8004a9c <low_level_init+0x240>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	789a      	ldrb	r2, [r3, #2]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800492e:	4b5b      	ldr	r3, [pc, #364]	; (8004a9c <low_level_init+0x240>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	78da      	ldrb	r2, [r3, #3]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800493a:	4b58      	ldr	r3, [pc, #352]	; (8004a9c <low_level_init+0x240>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	791a      	ldrb	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004946:	4b55      	ldr	r3, [pc, #340]	; (8004a9c <low_level_init+0x240>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	795a      	ldrb	r2, [r3, #5]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004958:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004960:	f043 030a 	orr.w	r3, r3, #10
 8004964:	b2da      	uxtb	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800496c:	2203      	movs	r2, #3
 800496e:	2100      	movs	r1, #0
 8004970:	2001      	movs	r0, #1
 8004972:	f001 f89d 	bl	8005ab0 <xQueueGenericCreate>
 8004976:	4603      	mov	r3, r0
 8004978:	4a4e      	ldr	r2, [pc, #312]	; (8004ab4 <low_level_init+0x258>)
 800497a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800497c:	2203      	movs	r2, #3
 800497e:	2100      	movs	r1, #0
 8004980:	2001      	movs	r0, #1
 8004982:	f001 f895 	bl	8005ab0 <xQueueGenericCreate>
 8004986:	4603      	mov	r3, r0
 8004988:	4a4b      	ldr	r2, [pc, #300]	; (8004ab8 <low_level_init+0x25c>)
 800498a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800498c:	4b4b      	ldr	r3, [pc, #300]	; (8004abc <low_level_init+0x260>)
 800498e:	f107 0408 	add.w	r4, r7, #8
 8004992:	461d      	mov	r5, r3
 8004994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004998:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800499c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80049a0:	f107 0308 	add.w	r3, r7, #8
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fc22 	bl	80051f0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80049ac:	4944      	ldr	r1, [pc, #272]	; (8004ac0 <low_level_init+0x264>)
 80049ae:	4845      	ldr	r0, [pc, #276]	; (8004ac4 <low_level_init+0x268>)
 80049b0:	f7fc fcc9 	bl	8001346 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80049b4:	4843      	ldr	r0, [pc, #268]	; (8004ac4 <low_level_init+0x268>)
 80049b6:	f7fc fcf8 	bl	80013aa <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80049ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d165      	bne.n	8004a8e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80049c2:	4840      	ldr	r0, [pc, #256]	; (8004ac4 <low_level_init+0x268>)
 80049c4:	f7fc fd99 	bl	80014fa <LAN8742_GetLinkState>
 80049c8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80049cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	dc06      	bgt.n	80049e2 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f007 fec7 	bl	800c768 <netif_set_link_down>
      netif_set_down(netif);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f007 fe5a 	bl	800c694 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80049e0:	e057      	b.n	8004a92 <low_level_init+0x236>
      switch (PHYLinkState)
 80049e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049e6:	3b02      	subs	r3, #2
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d82b      	bhi.n	8004a44 <low_level_init+0x1e8>
 80049ec:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <low_level_init+0x198>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a17 	.word	0x08004a17
 80049fc:	08004a27 	.word	0x08004a27
 8004a00:	08004a37 	.word	0x08004a37
        duplex = ETH_FULLDUPLEX_MODE;
 8004a04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004a0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004a14:	e01f      	b.n	8004a56 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004a1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004a24:	e017      	b.n	8004a56 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004a26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004a34:	e00f      	b.n	8004a56 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004a42:	e008      	b.n	8004a56 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004a44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004a4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004a54:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	480f      	ldr	r0, [pc, #60]	; (8004a9c <low_level_init+0x240>)
 8004a5e:	f7fd fc5f 	bl	8002320 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004a62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a66:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a6c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a72:	4619      	mov	r1, r3
 8004a74:	4809      	ldr	r0, [pc, #36]	; (8004a9c <low_level_init+0x240>)
 8004a76:	f7fd fd3d 	bl	80024f4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004a7a:	4808      	ldr	r0, [pc, #32]	; (8004a9c <low_level_init+0x240>)
 8004a7c:	f7fc ffe9 	bl	8001a52 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f007 fd9b 	bl	800c5bc <netif_set_up>
    netif_set_link_up(netif);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f007 fe36 	bl	800c6f8 <netif_set_link_up>
}
 8004a8c:	e001      	b.n	8004a92 <low_level_init+0x236>
    Error_Handler();
 8004a8e:	f7fb ff7d 	bl	800098c <Error_Handler>
}
 8004a92:	bf00      	nop
 8004a94:	37a0      	adds	r7, #160	; 0xa0
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bdb0      	pop	{r4, r5, r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	2000572c 	.word	0x2000572c
 8004aa0:	40028000 	.word	0x40028000
 8004aa4:	20005684 	.word	0x20005684
 8004aa8:	200055e4 	.word	0x200055e4
 8004aac:	200057dc 	.word	0x200057dc
 8004ab0:	0801df1c 	.word	0x0801df1c
 8004ab4:	20005724 	.word	0x20005724
 8004ab8:	20005728 	.word	0x20005728
 8004abc:	0801a3fc 	.word	0x0801a3fc
 8004ac0:	2000000c 	.word	0x2000000c
 8004ac4:	20005814 	.word	0x20005814

08004ac8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b092      	sub	sp, #72	; 0x48
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004ae0:	f107 030c 	add.w	r3, r7, #12
 8004ae4:	2230      	movs	r2, #48	; 0x30
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f014 f986 	bl	8018dfa <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004aee:	f107 030c 	add.w	r3, r7, #12
 8004af2:	2230      	movs	r2, #48	; 0x30
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f014 f97f 	bl	8018dfa <memset>

  for(q = p; q != NULL; q = q->next)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	643b      	str	r3, [r7, #64]	; 0x40
 8004b00:	e045      	b.n	8004b8e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d902      	bls.n	8004b0e <low_level_output+0x46>
      return ERR_IF;
 8004b08:	f06f 030b 	mvn.w	r3, #11
 8004b0c:	e065      	b.n	8004bda <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b10:	6859      	ldr	r1, [r3, #4]
 8004b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b14:	4613      	mov	r3, r2
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	3348      	adds	r3, #72	; 0x48
 8004b1e:	443b      	add	r3, r7
 8004b20:	3b3c      	subs	r3, #60	; 0x3c
 8004b22:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b26:	895b      	ldrh	r3, [r3, #10]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	3348      	adds	r3, #72	; 0x48
 8004b36:	443b      	add	r3, r7
 8004b38:	3b38      	subs	r3, #56	; 0x38
 8004b3a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d011      	beq.n	8004b66 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b44:	1e5a      	subs	r2, r3, #1
 8004b46:	f107 000c 	add.w	r0, r7, #12
 8004b4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	440b      	add	r3, r1
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	18c1      	adds	r1, r0, r3
 8004b56:	4613      	mov	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	3348      	adds	r3, #72	; 0x48
 8004b60:	443b      	add	r3, r7
 8004b62:	3b34      	subs	r3, #52	; 0x34
 8004b64:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b70:	4613      	mov	r3, r2
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	3348      	adds	r3, #72	; 0x48
 8004b7a:	443b      	add	r3, r7
 8004b7c:	3b34      	subs	r3, #52	; 0x34
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b84:	3301      	adds	r3, #1
 8004b86:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1b6      	bne.n	8004b02 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	891b      	ldrh	r3, [r3, #8]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <low_level_output+0x11c>)
 8004b9c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004b9e:	4a11      	ldr	r2, [pc, #68]	; (8004be4 <low_level_output+0x11c>)
 8004ba0:	f107 030c 	add.w	r3, r7, #12
 8004ba4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004ba6:	4a0f      	ldr	r2, [pc, #60]	; (8004be4 <low_level_output+0x11c>)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004bac:	6838      	ldr	r0, [r7, #0]
 8004bae:	f008 fa5f 	bl	800d070 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004bb2:	490c      	ldr	r1, [pc, #48]	; (8004be4 <low_level_output+0x11c>)
 8004bb4:	480c      	ldr	r0, [pc, #48]	; (8004be8 <low_level_output+0x120>)
 8004bb6:	f7fd f859 	bl	8001c6c <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004bba:	bf00      	nop
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <low_level_output+0x124>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fc41 	bl	800544c <osSemaphoreWait>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f5      	bne.n	8004bbc <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004bd0:	4805      	ldr	r0, [pc, #20]	; (8004be8 <low_level_output+0x120>)
 8004bd2:	f7fd f9df 	bl	8001f94 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004bd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3748      	adds	r7, #72	; 0x48
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	200057dc 	.word	0x200057dc
 8004be8:	2000572c 	.word	0x2000572c
 8004bec:	20005728 	.word	0x20005728

08004bf0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004bfc:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <low_level_input+0x2c>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d105      	bne.n	8004c10 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004c04:	f107 030c 	add.w	r3, r7, #12
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4805      	ldr	r0, [pc, #20]	; (8004c20 <low_level_input+0x30>)
 8004c0c:	f7fd f88a 	bl	8001d24 <HAL_ETH_ReadData>
  }

  return p;
 8004c10:	68fb      	ldr	r3, [r7, #12]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	200055e0 	.word	0x200055e0
 8004c20:	2000572c 	.word	0x2000572c

08004c24 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004c34:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <ethernetif_input+0x50>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f04f 31ff 	mov.w	r1, #4294967295
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fc05 	bl	800544c <osSemaphoreWait>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f5      	bne.n	8004c34 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004c48:	68b8      	ldr	r0, [r7, #8]
 8004c4a:	f7ff ffd1 	bl	8004bf0 <low_level_input>
 8004c4e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	4798      	blx	r3
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f008 f95c 	bl	800cf24 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1ea      	bne.n	8004c48 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004c72:	e7df      	b.n	8004c34 <ethernetif_input+0x10>
 8004c74:	20005724 	.word	0x20005724

08004c78 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <ethernetif_init+0x1c>
 8004c86:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <ethernetif_init+0x48>)
 8004c88:	f240 12df 	movw	r2, #479	; 0x1df
 8004c8c:	490d      	ldr	r1, [pc, #52]	; (8004cc4 <ethernetif_init+0x4c>)
 8004c8e:	480e      	ldr	r0, [pc, #56]	; (8004cc8 <ethernetif_init+0x50>)
 8004c90:	f014 f950 	bl	8018f34 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2273      	movs	r2, #115	; 0x73
 8004c98:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2274      	movs	r2, #116	; 0x74
 8004ca0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <ethernetif_init+0x54>)
 8004ca8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <ethernetif_init+0x58>)
 8004cae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff fdd3 	bl	800485c <low_level_init>

  return ERR_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	0801a418 	.word	0x0801a418
 8004cc4:	0801a434 	.word	0x0801a434
 8004cc8:	0801a444 	.word	0x0801a444
 8004ccc:	08016a5d 	.word	0x08016a5d
 8004cd0:	08004ac9 	.word	0x08004ac9

08004cd4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004ce0:	68f9      	ldr	r1, [r7, #12]
 8004ce2:	4809      	ldr	r0, [pc, #36]	; (8004d08 <pbuf_free_custom+0x34>)
 8004ce4:	f007 fa4a 	bl	800c17c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004ce8:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <pbuf_free_custom+0x38>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d107      	bne.n	8004d00 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <pbuf_free_custom+0x38>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <pbuf_free_custom+0x3c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fbf4 	bl	80054e8 <osSemaphoreRelease>
  }
}
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	0801df1c 	.word	0x0801df1c
 8004d0c:	200055e0 	.word	0x200055e0
 8004d10:	20005724 	.word	0x20005724

08004d14 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004d18:	f7fc fcac 	bl	8001674 <HAL_GetTick>
 8004d1c:	4603      	mov	r3, r0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08e      	sub	sp, #56	; 0x38
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	609a      	str	r2, [r3, #8]
 8004d38:	60da      	str	r2, [r3, #12]
 8004d3a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a59      	ldr	r2, [pc, #356]	; (8004ea8 <HAL_ETH_MspInit+0x184>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	f040 80ac 	bne.w	8004ea0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004d48:	2300      	movs	r3, #0
 8004d4a:	623b      	str	r3, [r7, #32]
 8004d4c:	4b57      	ldr	r3, [pc, #348]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	4a56      	ldr	r2, [pc, #344]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004d52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d56:	6313      	str	r3, [r2, #48]	; 0x30
 8004d58:	4b54      	ldr	r3, [pc, #336]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d60:	623b      	str	r3, [r7, #32]
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	2300      	movs	r3, #0
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	4b50      	ldr	r3, [pc, #320]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	4a4f      	ldr	r2, [pc, #316]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d72:	6313      	str	r3, [r2, #48]	; 0x30
 8004d74:	4b4d      	ldr	r3, [pc, #308]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	2300      	movs	r3, #0
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	4b49      	ldr	r3, [pc, #292]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	4a48      	ldr	r2, [pc, #288]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004d8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d90:	4b46      	ldr	r3, [pc, #280]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	4b42      	ldr	r3, [pc, #264]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	4a41      	ldr	r2, [pc, #260]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004da6:	f043 0304 	orr.w	r3, r3, #4
 8004daa:	6313      	str	r3, [r2, #48]	; 0x30
 8004dac:	4b3f      	ldr	r3, [pc, #252]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	4b3b      	ldr	r3, [pc, #236]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	4a3a      	ldr	r2, [pc, #232]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc8:	4b38      	ldr	r3, [pc, #224]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	4b34      	ldr	r3, [pc, #208]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	4a33      	ldr	r2, [pc, #204]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004dde:	f043 0302 	orr.w	r3, r3, #2
 8004de2:	6313      	str	r3, [r2, #48]	; 0x30
 8004de4:	4b31      	ldr	r3, [pc, #196]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004df0:	2300      	movs	r3, #0
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	4b2d      	ldr	r3, [pc, #180]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	4a2c      	ldr	r2, [pc, #176]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8004e00:	4b2a      	ldr	r3, [pc, #168]	; (8004eac <HAL_ETH_MspInit+0x188>)
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004e0c:	2332      	movs	r3, #50	; 0x32
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e10:	2302      	movs	r3, #2
 8004e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e1c:	230b      	movs	r3, #11
 8004e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e24:	4619      	mov	r1, r3
 8004e26:	4822      	ldr	r0, [pc, #136]	; (8004eb0 <HAL_ETH_MspInit+0x18c>)
 8004e28:	f7fd ffe6 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004e2c:	2386      	movs	r3, #134	; 0x86
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e30:	2302      	movs	r3, #2
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e3c:	230b      	movs	r3, #11
 8004e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e44:	4619      	mov	r1, r3
 8004e46:	481b      	ldr	r0, [pc, #108]	; (8004eb4 <HAL_ETH_MspInit+0x190>)
 8004e48:	f7fd ffd6 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e52:	2302      	movs	r3, #2
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e5e:	230b      	movs	r3, #11
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e66:	4619      	mov	r1, r3
 8004e68:	4813      	ldr	r0, [pc, #76]	; (8004eb8 <HAL_ETH_MspInit+0x194>)
 8004e6a:	f7fd ffc5 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004e6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e74:	2302      	movs	r3, #2
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e80:	230b      	movs	r3, #11
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e88:	4619      	mov	r1, r3
 8004e8a:	480c      	ldr	r0, [pc, #48]	; (8004ebc <HAL_ETH_MspInit+0x198>)
 8004e8c:	f7fd ffb4 	bl	8002df8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004e90:	2200      	movs	r2, #0
 8004e92:	2105      	movs	r1, #5
 8004e94:	203d      	movs	r0, #61	; 0x3d
 8004e96:	f7fc fcd5 	bl	8001844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004e9a:	203d      	movs	r0, #61	; 0x3d
 8004e9c:	f7fc fcee 	bl	800187c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004ea0:	bf00      	nop
 8004ea2:	3738      	adds	r7, #56	; 0x38
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40028000 	.word	0x40028000
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40020800 	.word	0x40020800
 8004eb4:	40020000 	.word	0x40020000
 8004eb8:	40020400 	.word	0x40020400
 8004ebc:	40021800 	.word	0x40021800

08004ec0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004ec4:	4802      	ldr	r0, [pc, #8]	; (8004ed0 <ETH_PHY_IO_Init+0x10>)
 8004ec6:	f7fd fb2f 	bl	8002528 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	2000572c 	.word	0x2000572c

08004ed4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return 0;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	68f9      	ldr	r1, [r7, #12]
 8004ef6:	4807      	ldr	r0, [pc, #28]	; (8004f14 <ETH_PHY_IO_ReadReg+0x30>)
 8004ef8:	f7fd f97e 	bl	80021f8 <HAL_ETH_ReadPHYRegister>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004f02:	f04f 33ff 	mov.w	r3, #4294967295
 8004f06:	e000      	b.n	8004f0a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	2000572c 	.word	0x2000572c

08004f18 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	68f9      	ldr	r1, [r7, #12]
 8004f2a:	4807      	ldr	r0, [pc, #28]	; (8004f48 <ETH_PHY_IO_WriteReg+0x30>)
 8004f2c:	f7fd f9af 	bl	800228e <HAL_ETH_WritePHYRegister>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004f36:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3a:	e000      	b.n	8004f3e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	2000572c 	.word	0x2000572c

08004f4c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f50:	f7fc fb90 	bl	8001674 <HAL_GetTick>
 8004f54:	4603      	mov	r3, r0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b0a0      	sub	sp, #128	; 0x80
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004f64:	f107 0308 	add.w	r3, r7, #8
 8004f68:	2264      	movs	r2, #100	; 0x64
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f013 ff44 	bl	8018dfa <memset>
  int32_t PHYLinkState = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f7e:	2300      	movs	r3, #0
 8004f80:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004f86:	483a      	ldr	r0, [pc, #232]	; (8005070 <ethernet_link_thread+0x114>)
 8004f88:	f7fc fab7 	bl	80014fa <LAN8742_GetLinkState>
 8004f8c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f94:	089b      	lsrs	r3, r3, #2
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00c      	beq.n	8004fba <ethernet_link_thread+0x5e>
 8004fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	dc09      	bgt.n	8004fba <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004fa6:	4833      	ldr	r0, [pc, #204]	; (8005074 <ethernet_link_thread+0x118>)
 8004fa8:	f7fc fde1 	bl	8001b6e <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004fac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fae:	f007 fb71 	bl	800c694 <netif_set_down>
    netif_set_link_down(netif);
 8004fb2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fb4:	f007 fbd8 	bl	800c768 <netif_set_link_down>
 8004fb8:	e055      	b.n	8005066 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d14e      	bne.n	8005066 <ethernet_link_thread+0x10a>
 8004fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	dd4b      	ble.n	8005066 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fd0:	3b02      	subs	r3, #2
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d82a      	bhi.n	800502c <ethernet_link_thread+0xd0>
 8004fd6:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <ethernet_link_thread+0x80>)
 8004fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fdc:	08004fed 	.word	0x08004fed
 8004fe0:	08004fff 	.word	0x08004fff
 8004fe4:	0800500f 	.word	0x0800500f
 8004fe8:	0800501f 	.word	0x0800501f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004fec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ff0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004ff2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ff6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004ffc:	e017      	b.n	800502e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005002:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005006:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005008:	2301      	movs	r3, #1
 800500a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800500c:	e00f      	b.n	800502e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800500e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005012:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005014:	2300      	movs	r3, #0
 8005016:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005018:	2301      	movs	r3, #1
 800501a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800501c:	e007      	b.n	800502e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800501e:	2300      	movs	r3, #0
 8005020:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005022:	2300      	movs	r3, #0
 8005024:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005026:	2301      	movs	r3, #1
 8005028:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800502a:	e000      	b.n	800502e <ethernet_link_thread+0xd2>
    default:
      break;
 800502c:	bf00      	nop
    }

    if(linkchanged)
 800502e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d018      	beq.n	8005066 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005034:	f107 0308 	add.w	r3, r7, #8
 8005038:	4619      	mov	r1, r3
 800503a:	480e      	ldr	r0, [pc, #56]	; (8005074 <ethernet_link_thread+0x118>)
 800503c:	f7fd f970 	bl	8002320 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005042:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005046:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005048:	f107 0308 	add.w	r3, r7, #8
 800504c:	4619      	mov	r1, r3
 800504e:	4809      	ldr	r0, [pc, #36]	; (8005074 <ethernet_link_thread+0x118>)
 8005050:	f7fd fa50 	bl	80024f4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005054:	4807      	ldr	r0, [pc, #28]	; (8005074 <ethernet_link_thread+0x118>)
 8005056:	f7fc fc9d 	bl	8001994 <HAL_ETH_Start>
      netif_set_up(netif);
 800505a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800505c:	f007 faae 	bl	800c5bc <netif_set_up>
      netif_set_link_up(netif);
 8005060:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005062:	f007 fb49 	bl	800c6f8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005066:	2064      	movs	r0, #100	; 0x64
 8005068:	f000 f90e 	bl	8005288 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800506c:	e78b      	b.n	8004f86 <ethernet_link_thread+0x2a>
 800506e:	bf00      	nop
 8005070:	20005814 	.word	0x20005814
 8005074:	2000572c 	.word	0x2000572c

08005078 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af02      	add	r7, sp, #8
 800507e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005080:	4812      	ldr	r0, [pc, #72]	; (80050cc <HAL_ETH_RxAllocateCallback+0x54>)
 8005082:	f007 f807 	bl	800c094 <memp_malloc_pool>
 8005086:	60f8      	str	r0, [r7, #12]
  if (p)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d014      	beq.n	80050b8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f103 0220 	add.w	r2, r3, #32
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a0d      	ldr	r2, [pc, #52]	; (80050d0 <HAL_ETH_RxAllocateCallback+0x58>)
 800509c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80050a6:	9201      	str	r2, [sp, #4]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2241      	movs	r2, #65	; 0x41
 80050ae:	2100      	movs	r1, #0
 80050b0:	2000      	movs	r0, #0
 80050b2:	f007 fd7d 	bl	800cbb0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80050b6:	e005      	b.n	80050c4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	0801df1c 	.word	0x0801df1c
 80050d0:	08004cd5 	.word	0x08004cd5
 80050d4:	200055e0 	.word	0x200055e0

080050d8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80050d8:	b480      	push	{r7}
 80050da:	b089      	sub	sp, #36	; 0x24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3b20      	subs	r3, #32
 80050f6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	2200      	movs	r2, #0
 8005102:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	887a      	ldrh	r2, [r7, #2]
 8005108:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d103      	bne.n	800511a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	e003      	b.n	8005122 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	e009      	b.n	8005144 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	891a      	ldrh	r2, [r3, #8]
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	4413      	add	r3, r2
 8005138:	b29a      	uxth	r2, r3
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f2      	bne.n	8005130 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800514a:	bf00      	nop
 800514c:	bf00      	nop
 800514e:	3724      	adds	r7, #36	; 0x24
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f007 fedf 	bl	800cf24 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005166:	bf00      	nop
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800516e:	b480      	push	{r7}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	4603      	mov	r3, r0
 8005176:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800517c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005180:	2b84      	cmp	r3, #132	; 0x84
 8005182:	d005      	beq.n	8005190 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005184:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	3303      	adds	r3, #3
 800518e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005190:	68fb      	ldr	r3, [r7, #12]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051a4:	f3ef 8305 	mrs	r3, IPSR
 80051a8:	607b      	str	r3, [r7, #4]
  return(result);
 80051aa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80051c6:	f001 fd3b 	bl	8006c40 <vTaskStartScheduler>
  
  return osOK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80051d4:	f7ff ffe3 	bl	800519e <inHandlerMode>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80051de:	f001 fe53 	bl	8006e88 <xTaskGetTickCountFromISR>
 80051e2:	4603      	mov	r3, r0
 80051e4:	e002      	b.n	80051ec <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80051e6:	f001 fe3f 	bl	8006e68 <xTaskGetTickCount>
 80051ea:	4603      	mov	r3, r0
  }
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80051f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051f2:	b089      	sub	sp, #36	; 0x24
 80051f4:	af04      	add	r7, sp, #16
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d020      	beq.n	8005244 <osThreadCreate+0x54>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01c      	beq.n	8005244 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685c      	ldr	r4, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681d      	ldr	r5, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691e      	ldr	r6, [r3, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff ffa6 	bl	800516e <makeFreeRtosPriority>
 8005222:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800522c:	9202      	str	r2, [sp, #8]
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	9100      	str	r1, [sp, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	4632      	mov	r2, r6
 8005236:	4629      	mov	r1, r5
 8005238:	4620      	mov	r0, r4
 800523a:	f001 fb23 	bl	8006884 <xTaskCreateStatic>
 800523e:	4603      	mov	r3, r0
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	e01c      	b.n	800527e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685c      	ldr	r4, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005250:	b29e      	uxth	r6, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ff88 	bl	800516e <makeFreeRtosPriority>
 800525e:	4602      	mov	r2, r0
 8005260:	f107 030c 	add.w	r3, r7, #12
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	9200      	str	r2, [sp, #0]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	4632      	mov	r2, r6
 800526c:	4629      	mov	r1, r5
 800526e:	4620      	mov	r0, r4
 8005270:	f001 fb65 	bl	800693e <xTaskCreate>
 8005274:	4603      	mov	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d001      	beq.n	800527e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	e000      	b.n	8005280 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800527e:	68fb      	ldr	r3, [r7, #12]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005288 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <osDelay+0x16>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	e000      	b.n	80052a0 <osDelay+0x18>
 800529e:	2301      	movs	r3, #1
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 fc99 	bl	8006bd8 <vTaskDelay>
  
  return osOK;
 80052a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4619      	mov	r1, r3
 80052c6:	2001      	movs	r0, #1
 80052c8:	f000 fc7d 	bl	8005bc6 <xQueueCreateMutexStatic>
 80052cc:	4603      	mov	r3, r0
 80052ce:	e003      	b.n	80052d8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80052d0:	2001      	movs	r0, #1
 80052d2:	f000 fc60 	bl	8005b96 <xQueueCreateMutex>
 80052d6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80052ea:	2300      	movs	r3, #0
 80052ec:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <osMutexWait+0x18>
    return osErrorParameter;
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	e03a      	b.n	800536e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005302:	d103      	bne.n	800530c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005304:	f04f 33ff 	mov.w	r3, #4294967295
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	e009      	b.n	8005320 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d006      	beq.n	8005320 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <osMutexWait+0x40>
      ticks = 1;
 800531c:	2301      	movs	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005320:	f7ff ff3d 	bl	800519e <inHandlerMode>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d017      	beq.n	800535a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800532a:	f107 0308 	add.w	r3, r7, #8
 800532e:	461a      	mov	r2, r3
 8005330:	2100      	movs	r1, #0
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f001 f874 	bl	8006420 <xQueueReceiveFromISR>
 8005338:	4603      	mov	r3, r0
 800533a:	2b01      	cmp	r3, #1
 800533c:	d001      	beq.n	8005342 <osMutexWait+0x62>
      return osErrorOS;
 800533e:	23ff      	movs	r3, #255	; 0xff
 8005340:	e015      	b.n	800536e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d011      	beq.n	800536c <osMutexWait+0x8c>
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <osMutexWait+0x98>)
 800534a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	e008      	b.n	800536c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800535a:	68f9      	ldr	r1, [r7, #12]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 ff53 	bl	8006208 <xQueueSemaphoreTake>
 8005362:	4603      	mov	r3, r0
 8005364:	2b01      	cmp	r3, #1
 8005366:	d001      	beq.n	800536c <osMutexWait+0x8c>
    return osErrorOS;
 8005368:	23ff      	movs	r3, #255	; 0xff
 800536a:	e000      	b.n	800536e <osMutexWait+0x8e>
  }
  
  return osOK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005388:	2300      	movs	r3, #0
 800538a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800538c:	f7ff ff07 	bl	800519e <inHandlerMode>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d016      	beq.n	80053c4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005396:	f107 0308 	add.w	r3, r7, #8
 800539a:	4619      	mov	r1, r3
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fdc6 	bl	8005f2e <xQueueGiveFromISR>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d001      	beq.n	80053ac <osMutexRelease+0x30>
      return osErrorOS;
 80053a8:	23ff      	movs	r3, #255	; 0xff
 80053aa:	e017      	b.n	80053dc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d013      	beq.n	80053da <osMutexRelease+0x5e>
 80053b2:	4b0c      	ldr	r3, [pc, #48]	; (80053e4 <osMutexRelease+0x68>)
 80053b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	e00a      	b.n	80053da <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80053c4:	2300      	movs	r3, #0
 80053c6:	2200      	movs	r2, #0
 80053c8:	2100      	movs	r1, #0
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fc16 	bl	8005bfc <xQueueGenericSend>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d001      	beq.n	80053da <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80053d6:	23ff      	movs	r3, #255	; 0xff
 80053d8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80053da:	68fb      	ldr	r3, [r7, #12]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00f      	beq.n	800541a <osSemaphoreCreate+0x32>
    if (count == 1) {
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d10a      	bne.n	8005416 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2203      	movs	r2, #3
 8005406:	9200      	str	r2, [sp, #0]
 8005408:	2200      	movs	r2, #0
 800540a:	2100      	movs	r1, #0
 800540c:	2001      	movs	r0, #1
 800540e:	f000 fad7 	bl	80059c0 <xQueueGenericCreateStatic>
 8005412:	4603      	mov	r3, r0
 8005414:	e016      	b.n	8005444 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005416:	2300      	movs	r3, #0
 8005418:	e014      	b.n	8005444 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d110      	bne.n	8005442 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005420:	2203      	movs	r2, #3
 8005422:	2100      	movs	r1, #0
 8005424:	2001      	movs	r0, #1
 8005426:	f000 fb43 	bl	8005ab0 <xQueueGenericCreate>
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <osSemaphoreCreate+0x56>
 8005432:	2300      	movs	r3, #0
 8005434:	2200      	movs	r2, #0
 8005436:	2100      	movs	r1, #0
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fbdf 	bl	8005bfc <xQueueGenericSend>
      return sema;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	e000      	b.n	8005444 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005442:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005456:	2300      	movs	r3, #0
 8005458:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	e03a      	b.n	80054da <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d103      	bne.n	8005478 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005470:	f04f 33ff 	mov.w	r3, #4294967295
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e009      	b.n	800548c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d006      	beq.n	800548c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <osSemaphoreWait+0x40>
      ticks = 1;
 8005488:	2301      	movs	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800548c:	f7ff fe87 	bl	800519e <inHandlerMode>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d017      	beq.n	80054c6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005496:	f107 0308 	add.w	r3, r7, #8
 800549a:	461a      	mov	r2, r3
 800549c:	2100      	movs	r1, #0
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 ffbe 	bl	8006420 <xQueueReceiveFromISR>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d001      	beq.n	80054ae <osSemaphoreWait+0x62>
      return osErrorOS;
 80054aa:	23ff      	movs	r3, #255	; 0xff
 80054ac:	e015      	b.n	80054da <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d011      	beq.n	80054d8 <osSemaphoreWait+0x8c>
 80054b4:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <osSemaphoreWait+0x98>)
 80054b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	e008      	b.n	80054d8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80054c6:	68f9      	ldr	r1, [r7, #12]
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fe9d 	bl	8006208 <xQueueSemaphoreTake>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d001      	beq.n	80054d8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80054d4:	23ff      	movs	r3, #255	; 0xff
 80054d6:	e000      	b.n	80054da <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	e000ed04 	.word	0xe000ed04

080054e8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80054f8:	f7ff fe51 	bl	800519e <inHandlerMode>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d016      	beq.n	8005530 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005502:	f107 0308 	add.w	r3, r7, #8
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fd10 	bl	8005f2e <xQueueGiveFromISR>
 800550e:	4603      	mov	r3, r0
 8005510:	2b01      	cmp	r3, #1
 8005512:	d001      	beq.n	8005518 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005514:	23ff      	movs	r3, #255	; 0xff
 8005516:	e017      	b.n	8005548 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d013      	beq.n	8005546 <osSemaphoreRelease+0x5e>
 800551e:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <osSemaphoreRelease+0x68>)
 8005520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	e00a      	b.n	8005546 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005530:	2300      	movs	r3, #0
 8005532:	2200      	movs	r2, #0
 8005534:	2100      	movs	r1, #0
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fb60 	bl	8005bfc <xQueueGenericSend>
 800553c:	4603      	mov	r3, r0
 800553e:	2b01      	cmp	r3, #1
 8005540:	d001      	beq.n	8005546 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005542:	23ff      	movs	r3, #255	; 0xff
 8005544:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005546:	68fb      	ldr	r3, [r7, #12]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	e000ed04 	.word	0xe000ed04

08005554 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800555c:	f7ff fe1f 	bl	800519e <inHandlerMode>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005566:	2382      	movs	r3, #130	; 0x82
 8005568:	e003      	b.n	8005572 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f001 f814 	bl	8006598 <vQueueDelete>

  return osOK; 
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800557a:	b590      	push	{r4, r7, lr}
 800557c:	b085      	sub	sp, #20
 800557e:	af02      	add	r7, sp, #8
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d011      	beq.n	80055b0 <osMessageCreate+0x36>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00d      	beq.n	80055b0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6818      	ldr	r0, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6859      	ldr	r1, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2400      	movs	r4, #0
 80055a6:	9400      	str	r4, [sp, #0]
 80055a8:	f000 fa0a 	bl	80059c0 <xQueueGenericCreateStatic>
 80055ac:	4603      	mov	r3, r0
 80055ae:	e008      	b.n	80055c2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	4619      	mov	r1, r3
 80055bc:	f000 fa78 	bl	8005ab0 <xQueueGenericCreate>
 80055c0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd90      	pop	{r4, r7, pc}
	...

080055cc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80055d8:	2300      	movs	r3, #0
 80055da:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <osMessagePut+0x1e>
    ticks = 1;
 80055e6:	2301      	movs	r3, #1
 80055e8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80055ea:	f7ff fdd8 	bl	800519e <inHandlerMode>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d018      	beq.n	8005626 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80055f4:	f107 0210 	add.w	r2, r7, #16
 80055f8:	f107 0108 	add.w	r1, r7, #8
 80055fc:	2300      	movs	r3, #0
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 fbfa 	bl	8005df8 <xQueueGenericSendFromISR>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d001      	beq.n	800560e <osMessagePut+0x42>
      return osErrorOS;
 800560a:	23ff      	movs	r3, #255	; 0xff
 800560c:	e018      	b.n	8005640 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d014      	beq.n	800563e <osMessagePut+0x72>
 8005614:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <osMessagePut+0x7c>)
 8005616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	e00b      	b.n	800563e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005626:	f107 0108 	add.w	r1, r7, #8
 800562a:	2300      	movs	r3, #0
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 fae4 	bl	8005bfc <xQueueGenericSend>
 8005634:	4603      	mov	r3, r0
 8005636:	2b01      	cmp	r3, #1
 8005638:	d001      	beq.n	800563e <osMessagePut+0x72>
      return osErrorOS;
 800563a:	23ff      	movs	r3, #255	; 0xff
 800563c:	e000      	b.n	8005640 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800564c:	b590      	push	{r4, r7, lr}
 800564e:	b08b      	sub	sp, #44	; 0x2c
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10a      	bne.n	800567c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005666:	2380      	movs	r3, #128	; 0x80
 8005668:	617b      	str	r3, [r7, #20]
    return event;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	461c      	mov	r4, r3
 800566e:	f107 0314 	add.w	r3, r7, #20
 8005672:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800567a:	e054      	b.n	8005726 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800567c:	2300      	movs	r3, #0
 800567e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568a:	d103      	bne.n	8005694 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800568c:	f04f 33ff 	mov.w	r3, #4294967295
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
 8005692:	e009      	b.n	80056a8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d006      	beq.n	80056a8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <osMessageGet+0x5c>
      ticks = 1;
 80056a4:	2301      	movs	r3, #1
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80056a8:	f7ff fd79 	bl	800519e <inHandlerMode>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01c      	beq.n	80056ec <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80056b2:	f107 0220 	add.w	r2, r7, #32
 80056b6:	f107 0314 	add.w	r3, r7, #20
 80056ba:	3304      	adds	r3, #4
 80056bc:	4619      	mov	r1, r3
 80056be:	68b8      	ldr	r0, [r7, #8]
 80056c0:	f000 feae 	bl	8006420 <xQueueReceiveFromISR>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d102      	bne.n	80056d0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80056ca:	2310      	movs	r3, #16
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	e001      	b.n	80056d4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01d      	beq.n	8005716 <osMessageGet+0xca>
 80056da:	4b15      	ldr	r3, [pc, #84]	; (8005730 <osMessageGet+0xe4>)
 80056dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	e014      	b.n	8005716 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80056ec:	f107 0314 	add.w	r3, r7, #20
 80056f0:	3304      	adds	r3, #4
 80056f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f4:	4619      	mov	r1, r3
 80056f6:	68b8      	ldr	r0, [r7, #8]
 80056f8:	f000 fca6 	bl	8006048 <xQueueReceive>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d102      	bne.n	8005708 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005702:	2310      	movs	r3, #16
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	e006      	b.n	8005716 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <osMessageGet+0xc6>
 800570e:	2300      	movs	r3, #0
 8005710:	e000      	b.n	8005714 <osMessageGet+0xc8>
 8005712:	2340      	movs	r3, #64	; 0x40
 8005714:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	461c      	mov	r4, r3
 800571a:	f107 0314 	add.w	r3, r7, #20
 800571e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	372c      	adds	r7, #44	; 0x2c
 800572a:	46bd      	mov	sp, r7
 800572c:	bd90      	pop	{r4, r7, pc}
 800572e:	bf00      	nop
 8005730:	e000ed04 	.word	0xe000ed04

08005734 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800573c:	f7ff fd2f 	bl	800519e <inHandlerMode>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 ff08 	bl	800655c <uxQueueMessagesWaitingFromISR>
 800574c:	4603      	mov	r3, r0
 800574e:	e003      	b.n	8005758 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fee5 	bl	8006520 <uxQueueMessagesWaiting>
 8005756:	4603      	mov	r3, r0
  }
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005768:	f7ff fd19 	bl	800519e <inHandlerMode>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <osMessageDelete+0x16>
    return osErrorISR;
 8005772:	2382      	movs	r3, #130	; 0x82
 8005774:	e003      	b.n	800577e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 ff0e 	bl	8006598 <vQueueDelete>

  return osOK; 
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f103 0208 	add.w	r2, r3, #8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f04f 32ff 	mov.w	r2, #4294967295
 800579e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f103 0208 	add.w	r2, r3, #8
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f103 0208 	add.w	r2, r3, #8
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	601a      	str	r2, [r3, #0]
}
 800581c:	bf00      	nop
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583e:	d103      	bne.n	8005848 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	e00c      	b.n	8005862 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3308      	adds	r3, #8
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	e002      	b.n	8005856 <vListInsert+0x2e>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	429a      	cmp	r2, r3
 8005860:	d2f6      	bcs.n	8005850 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	601a      	str	r2, [r3, #0]
}
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6892      	ldr	r2, [r2, #8]
 80058b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6852      	ldr	r2, [r2, #4]
 80058ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d103      	bne.n	80058ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	1e5a      	subs	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
	...

080058f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800591a:	f002 f913 	bl	8007b44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800592a:	fb01 f303 	mul.w	r3, r1, r3
 800592e:	441a      	add	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	3b01      	subs	r3, #1
 800594c:	68f9      	ldr	r1, [r7, #12]
 800594e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	441a      	add	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	22ff      	movs	r2, #255	; 0xff
 800595e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	22ff      	movs	r2, #255	; 0xff
 8005966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d114      	bne.n	800599a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01a      	beq.n	80059ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3310      	adds	r3, #16
 800597c:	4618      	mov	r0, r3
 800597e:	f001 fbd3 	bl	8007128 <xTaskRemoveFromEventList>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d012      	beq.n	80059ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <xQueueGenericReset+0xcc>)
 800598a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	e009      	b.n	80059ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3310      	adds	r3, #16
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fef1 	bl	8005786 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3324      	adds	r3, #36	; 0x24
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff feec 	bl	8005786 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059ae:	f002 f8f9 	bl	8007ba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059b2:	2301      	movs	r3, #1
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	; 0x38
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <xQueueGenericCreateStatic+0x52>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <xQueueGenericCreateStatic+0x56>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <xQueueGenericCreateStatic+0x58>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	623b      	str	r3, [r7, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <xQueueGenericCreateStatic+0x7e>
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <xQueueGenericCreateStatic+0x82>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <xQueueGenericCreateStatic+0x84>
 8005a42:	2300      	movs	r3, #0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	61fb      	str	r3, [r7, #28]
}
 8005a5a:	bf00      	nop
 8005a5c:	e7fe      	b.n	8005a5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a5e:	2348      	movs	r3, #72	; 0x48
 8005a60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b48      	cmp	r3, #72	; 0x48
 8005a66:	d00a      	beq.n	8005a7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	61bb      	str	r3, [r7, #24]
}
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00d      	beq.n	8005aa6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	68b9      	ldr	r1, [r7, #8]
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f83f 	bl	8005b24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3730      	adds	r7, #48	; 0x30
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08a      	sub	sp, #40	; 0x28
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	4613      	mov	r3, r2
 8005abc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <xQueueGenericCreate+0x2a>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	613b      	str	r3, [r7, #16]
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	fb02 f303 	mul.w	r3, r2, r3
 8005ae2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	3348      	adds	r3, #72	; 0x48
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f002 f94d 	bl	8007d88 <pvPortMalloc>
 8005aee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d011      	beq.n	8005b1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	3348      	adds	r3, #72	; 0x48
 8005afe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b08:	79fa      	ldrb	r2, [r7, #7]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f805 	bl	8005b24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
	}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3720      	adds	r7, #32
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d103      	bne.n	8005b40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e002      	b.n	8005b46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b52:	2101      	movs	r1, #1
 8005b54:	69b8      	ldr	r0, [r7, #24]
 8005b56:	f7ff fecb 	bl	80058f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b82:	2300      	movs	r3, #0
 8005b84:	2200      	movs	r2, #0
 8005b86:	2100      	movs	r1, #0
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f837 	bl	8005bfc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005b8e:	bf00      	nop
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b086      	sub	sp, #24
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	461a      	mov	r2, r3
 8005bac:	6939      	ldr	r1, [r7, #16]
 8005bae:	6978      	ldr	r0, [r7, #20]
 8005bb0:	f7ff ff7e 	bl	8005ab0 <xQueueGenericCreate>
 8005bb4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff ffd3 	bl	8005b62 <prvInitialiseMutex>

		return xNewQueue;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
	}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b088      	sub	sp, #32
 8005bca:	af02      	add	r7, sp, #8
 8005bcc:	4603      	mov	r3, r0
 8005bce:	6039      	str	r1, [r7, #0]
 8005bd0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2200      	movs	r2, #0
 8005be2:	6939      	ldr	r1, [r7, #16]
 8005be4:	6978      	ldr	r0, [r7, #20]
 8005be6:	f7ff feeb 	bl	80059c0 <xQueueGenericCreateStatic>
 8005bea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7ff ffb8 	bl	8005b62 <prvInitialiseMutex>

		return xNewQueue;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
	}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08e      	sub	sp, #56	; 0x38
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <xQueueGenericSend+0x32>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d103      	bne.n	8005c3c <xQueueGenericSend+0x40>
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <xQueueGenericSend+0x44>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <xQueueGenericSend+0x46>
 8005c40:	2300      	movs	r3, #0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <xQueueGenericSend+0x60>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d103      	bne.n	8005c6a <xQueueGenericSend+0x6e>
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <xQueueGenericSend+0x72>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <xQueueGenericSend+0x74>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <xQueueGenericSend+0x8e>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	623b      	str	r3, [r7, #32]
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c8a:	f001 fc0d 	bl	80074a8 <xTaskGetSchedulerState>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d102      	bne.n	8005c9a <xQueueGenericSend+0x9e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <xQueueGenericSend+0xa2>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <xQueueGenericSend+0xa4>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <xQueueGenericSend+0xbe>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	61fb      	str	r3, [r7, #28]
}
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cba:	f001 ff43 	bl	8007b44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d302      	bcc.n	8005cd0 <xQueueGenericSend+0xd4>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d129      	bne.n	8005d24 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cd6:	f000 fc9a 	bl	800660e <prvCopyDataToQueue>
 8005cda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d010      	beq.n	8005d06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	3324      	adds	r3, #36	; 0x24
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f001 fa1d 	bl	8007128 <xTaskRemoveFromEventList>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d013      	beq.n	8005d1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005cf4:	4b3f      	ldr	r3, [pc, #252]	; (8005df4 <xQueueGenericSend+0x1f8>)
 8005cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	e00a      	b.n	8005d1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d0c:	4b39      	ldr	r3, [pc, #228]	; (8005df4 <xQueueGenericSend+0x1f8>)
 8005d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d1c:	f001 ff42 	bl	8007ba4 <vPortExitCritical>
				return pdPASS;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e063      	b.n	8005dec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d103      	bne.n	8005d32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d2a:	f001 ff3b 	bl	8007ba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	e05c      	b.n	8005dec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d106      	bne.n	8005d46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d38:	f107 0314 	add.w	r3, r7, #20
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f001 fa55 	bl	80071ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d42:	2301      	movs	r3, #1
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d46:	f001 ff2d 	bl	8007ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d4a:	f000 ffe3 	bl	8006d14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d4e:	f001 fef9 	bl	8007b44 <vPortEnterCritical>
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d58:	b25b      	sxtb	r3, r3
 8005d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5e:	d103      	bne.n	8005d68 <xQueueGenericSend+0x16c>
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d6e:	b25b      	sxtb	r3, r3
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d103      	bne.n	8005d7e <xQueueGenericSend+0x182>
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d7e:	f001 ff11 	bl	8007ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d82:	1d3a      	adds	r2, r7, #4
 8005d84:	f107 0314 	add.w	r3, r7, #20
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f001 fa44 	bl	8007218 <xTaskCheckForTimeOut>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d124      	bne.n	8005de0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d98:	f000 fd31 	bl	80067fe <prvIsQueueFull>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d018      	beq.n	8005dd4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	3310      	adds	r3, #16
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 f998 	bl	80070e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005db2:	f000 fcbc 	bl	800672e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005db6:	f000 ffbb 	bl	8006d30 <xTaskResumeAll>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f47f af7c 	bne.w	8005cba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <xQueueGenericSend+0x1f8>)
 8005dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	e772      	b.n	8005cba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd6:	f000 fcaa 	bl	800672e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dda:	f000 ffa9 	bl	8006d30 <xTaskResumeAll>
 8005dde:	e76c      	b.n	8005cba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005de2:	f000 fca4 	bl	800672e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005de6:	f000 ffa3 	bl	8006d30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005dea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3738      	adds	r7, #56	; 0x38
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	e000ed04 	.word	0xe000ed04

08005df8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b090      	sub	sp, #64	; 0x40
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d103      	bne.n	8005e34 <xQueueGenericSendFromISR+0x3c>
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <xQueueGenericSendFromISR+0x40>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <xQueueGenericSendFromISR+0x42>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d103      	bne.n	8005e62 <xQueueGenericSendFromISR+0x6a>
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <xQueueGenericSendFromISR+0x6e>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <xQueueGenericSendFromISR+0x70>
 8005e66:	2300      	movs	r3, #0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	623b      	str	r3, [r7, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e82:	f001 ff41 	bl	8007d08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e86:	f3ef 8211 	mrs	r2, BASEPRI
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	61fa      	str	r2, [r7, #28]
 8005e9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ea0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d302      	bcc.n	8005eb4 <xQueueGenericSendFromISR+0xbc>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d12f      	bne.n	8005f14 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005eca:	f000 fba0 	bl	800660e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ece:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d112      	bne.n	8005efe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d016      	beq.n	8005f0e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	3324      	adds	r3, #36	; 0x24
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f001 f91f 	bl	8007128 <xTaskRemoveFromEventList>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00e      	beq.n	8005f0e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	e007      	b.n	8005f0e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005efe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f02:	3301      	adds	r3, #1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	b25a      	sxtb	r2, r3
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f12:	e001      	b.n	8005f18 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3740      	adds	r7, #64	; 0x40
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b08e      	sub	sp, #56	; 0x38
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	623b      	str	r3, [r7, #32]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	61fb      	str	r3, [r7, #28]
}
 8005f72:	bf00      	nop
 8005f74:	e7fe      	b.n	8005f74 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d103      	bne.n	8005f86 <xQueueGiveFromISR+0x58>
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <xQueueGiveFromISR+0x5c>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <xQueueGiveFromISR+0x5e>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	61bb      	str	r3, [r7, #24]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fa6:	f001 feaf 	bl	8007d08 <vPortValidateInterruptPriority>
	__asm volatile
 8005faa:	f3ef 8211 	mrs	r2, BASEPRI
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	617a      	str	r2, [r7, #20]
 8005fc0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005fc2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d22b      	bcs.n	800602e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d112      	bne.n	8006018 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d016      	beq.n	8006028 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	3324      	adds	r3, #36	; 0x24
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 f892 	bl	8007128 <xTaskRemoveFromEventList>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00e      	beq.n	8006028 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00b      	beq.n	8006028 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2201      	movs	r2, #1
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	e007      	b.n	8006028 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800601c:	3301      	adds	r3, #1
 800601e:	b2db      	uxtb	r3, r3
 8006020:	b25a      	sxtb	r2, r3
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006028:	2301      	movs	r3, #1
 800602a:	637b      	str	r3, [r7, #52]	; 0x34
 800602c:	e001      	b.n	8006032 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800602e:	2300      	movs	r3, #0
 8006030:	637b      	str	r3, [r7, #52]	; 0x34
 8006032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006034:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f383 8811 	msr	BASEPRI, r3
}
 800603c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800603e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006040:	4618      	mov	r0, r3
 8006042:	3738      	adds	r7, #56	; 0x38
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08c      	sub	sp, #48	; 0x30
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006054:	2300      	movs	r3, #0
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <xQueueReceive+0x30>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	623b      	str	r3, [r7, #32]
}
 8006074:	bf00      	nop
 8006076:	e7fe      	b.n	8006076 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d103      	bne.n	8006086 <xQueueReceive+0x3e>
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <xQueueReceive+0x42>
 8006086:	2301      	movs	r3, #1
 8006088:	e000      	b.n	800608c <xQueueReceive+0x44>
 800608a:	2300      	movs	r3, #0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10a      	bne.n	80060a6 <xQueueReceive+0x5e>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	61fb      	str	r3, [r7, #28]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060a6:	f001 f9ff 	bl	80074a8 <xTaskGetSchedulerState>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <xQueueReceive+0x6e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <xQueueReceive+0x72>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <xQueueReceive+0x74>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <xQueueReceive+0x8e>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	61bb      	str	r3, [r7, #24]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060d6:	f001 fd35 	bl	8007b44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d01f      	beq.n	8006126 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ea:	f000 fafa 	bl	80066e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	1e5a      	subs	r2, r3, #1
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00f      	beq.n	800611e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	3310      	adds	r3, #16
 8006102:	4618      	mov	r0, r3
 8006104:	f001 f810 	bl	8007128 <xTaskRemoveFromEventList>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800610e:	4b3d      	ldr	r3, [pc, #244]	; (8006204 <xQueueReceive+0x1bc>)
 8006110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800611e:	f001 fd41 	bl	8007ba4 <vPortExitCritical>
				return pdPASS;
 8006122:	2301      	movs	r3, #1
 8006124:	e069      	b.n	80061fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d103      	bne.n	8006134 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800612c:	f001 fd3a 	bl	8007ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006130:	2300      	movs	r3, #0
 8006132:	e062      	b.n	80061fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800613a:	f107 0310 	add.w	r3, r7, #16
 800613e:	4618      	mov	r0, r3
 8006140:	f001 f854 	bl	80071ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006144:	2301      	movs	r3, #1
 8006146:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006148:	f001 fd2c 	bl	8007ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800614c:	f000 fde2 	bl	8006d14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006150:	f001 fcf8 	bl	8007b44 <vPortEnterCritical>
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800615a:	b25b      	sxtb	r3, r3
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d103      	bne.n	800616a <xQueueReceive+0x122>
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006170:	b25b      	sxtb	r3, r3
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006176:	d103      	bne.n	8006180 <xQueueReceive+0x138>
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006180:	f001 fd10 	bl	8007ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006184:	1d3a      	adds	r2, r7, #4
 8006186:	f107 0310 	add.w	r3, r7, #16
 800618a:	4611      	mov	r1, r2
 800618c:	4618      	mov	r0, r3
 800618e:	f001 f843 	bl	8007218 <xTaskCheckForTimeOut>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d123      	bne.n	80061e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800619a:	f000 fb1a 	bl	80067d2 <prvIsQueueEmpty>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d017      	beq.n	80061d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	3324      	adds	r3, #36	; 0x24
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	4611      	mov	r1, r2
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 ff97 	bl	80070e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b4:	f000 fabb 	bl	800672e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061b8:	f000 fdba 	bl	8006d30 <xTaskResumeAll>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d189      	bne.n	80060d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80061c2:	4b10      	ldr	r3, [pc, #64]	; (8006204 <xQueueReceive+0x1bc>)
 80061c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	e780      	b.n	80060d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d6:	f000 faaa 	bl	800672e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061da:	f000 fda9 	bl	8006d30 <xTaskResumeAll>
 80061de:	e77a      	b.n	80060d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e2:	f000 faa4 	bl	800672e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061e6:	f000 fda3 	bl	8006d30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ec:	f000 faf1 	bl	80067d2 <prvIsQueueEmpty>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f43f af6f 	beq.w	80060d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3730      	adds	r7, #48	; 0x30
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	e000ed04 	.word	0xe000ed04

08006208 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08e      	sub	sp, #56	; 0x38
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006212:	2300      	movs	r3, #0
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800621a:	2300      	movs	r3, #0
 800621c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	623b      	str	r3, [r7, #32]
}
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	61fb      	str	r3, [r7, #28]
}
 8006254:	bf00      	nop
 8006256:	e7fe      	b.n	8006256 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006258:	f001 f926 	bl	80074a8 <xTaskGetSchedulerState>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d102      	bne.n	8006268 <xQueueSemaphoreTake+0x60>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <xQueueSemaphoreTake+0x64>
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <xQueueSemaphoreTake+0x66>
 800626c:	2300      	movs	r3, #0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	61bb      	str	r3, [r7, #24]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006288:	f001 fc5c 	bl	8007b44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	2b00      	cmp	r3, #0
 8006296:	d024      	beq.n	80062e2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	1e5a      	subs	r2, r3, #1
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d104      	bne.n	80062b2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80062a8:	f001 faa6 	bl	80077f8 <pvTaskIncrementMutexHeldCount>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00f      	beq.n	80062da <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062bc:	3310      	adds	r3, #16
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 ff32 	bl	8007128 <xTaskRemoveFromEventList>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062ca:	4b54      	ldr	r3, [pc, #336]	; (800641c <xQueueSemaphoreTake+0x214>)
 80062cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062da:	f001 fc63 	bl	8007ba4 <vPortExitCritical>
				return pdPASS;
 80062de:	2301      	movs	r3, #1
 80062e0:	e097      	b.n	8006412 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d111      	bne.n	800630c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	617b      	str	r3, [r7, #20]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006304:	f001 fc4e 	bl	8007ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006308:	2300      	movs	r3, #0
 800630a:	e082      	b.n	8006412 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800630c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006312:	f107 030c 	add.w	r3, r7, #12
 8006316:	4618      	mov	r0, r3
 8006318:	f000 ff68 	bl	80071ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006320:	f001 fc40 	bl	8007ba4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006324:	f000 fcf6 	bl	8006d14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006328:	f001 fc0c 	bl	8007b44 <vPortEnterCritical>
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006332:	b25b      	sxtb	r3, r3
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d103      	bne.n	8006342 <xQueueSemaphoreTake+0x13a>
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006348:	b25b      	sxtb	r3, r3
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634e:	d103      	bne.n	8006358 <xQueueSemaphoreTake+0x150>
 8006350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006358:	f001 fc24 	bl	8007ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800635c:	463a      	mov	r2, r7
 800635e:	f107 030c 	add.w	r3, r7, #12
 8006362:	4611      	mov	r1, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f000 ff57 	bl	8007218 <xTaskCheckForTimeOut>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d132      	bne.n	80063d6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006372:	f000 fa2e 	bl	80067d2 <prvIsQueueEmpty>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d026      	beq.n	80063ca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800637c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d109      	bne.n	8006398 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006384:	f001 fbde 	bl	8007b44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	4618      	mov	r0, r3
 800638e:	f001 f8a9 	bl	80074e4 <xTaskPriorityInherit>
 8006392:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006394:	f001 fc06 	bl	8007ba4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	3324      	adds	r3, #36	; 0x24
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	4611      	mov	r1, r2
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fe9d 	bl	80070e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063a8:	f000 f9c1 	bl	800672e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063ac:	f000 fcc0 	bl	8006d30 <xTaskResumeAll>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f47f af68 	bne.w	8006288 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80063b8:	4b18      	ldr	r3, [pc, #96]	; (800641c <xQueueSemaphoreTake+0x214>)
 80063ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	e75e      	b.n	8006288 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063cc:	f000 f9af 	bl	800672e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063d0:	f000 fcae 	bl	8006d30 <xTaskResumeAll>
 80063d4:	e758      	b.n	8006288 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80063d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063d8:	f000 f9a9 	bl	800672e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063dc:	f000 fca8 	bl	8006d30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063e2:	f000 f9f6 	bl	80067d2 <prvIsQueueEmpty>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f43f af4d 	beq.w	8006288 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00d      	beq.n	8006410 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80063f4:	f001 fba6 	bl	8007b44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80063f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063fa:	f000 f8f0 	bl	80065de <prvGetDisinheritPriorityAfterTimeout>
 80063fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006406:	4618      	mov	r0, r3
 8006408:	f001 f968 	bl	80076dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800640c:	f001 fbca 	bl	8007ba4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006410:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006412:	4618      	mov	r0, r3
 8006414:	3738      	adds	r7, #56	; 0x38
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	e000ed04 	.word	0xe000ed04

08006420 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08e      	sub	sp, #56	; 0x38
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10a      	bne.n	800644c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	623b      	str	r3, [r7, #32]
}
 8006448:	bf00      	nop
 800644a:	e7fe      	b.n	800644a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d103      	bne.n	800645a <xQueueReceiveFromISR+0x3a>
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <xQueueReceiveFromISR+0x3e>
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <xQueueReceiveFromISR+0x40>
 800645e:	2300      	movs	r3, #0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	61fb      	str	r3, [r7, #28]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800647a:	f001 fc45 	bl	8007d08 <vPortValidateInterruptPriority>
	__asm volatile
 800647e:	f3ef 8211 	mrs	r2, BASEPRI
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	61ba      	str	r2, [r7, #24]
 8006494:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006496:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d02f      	beq.n	8006506 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064b0:	68b9      	ldr	r1, [r7, #8]
 80064b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064b4:	f000 f915 	bl	80066e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	1e5a      	subs	r2, r3, #1
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80064c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c8:	d112      	bne.n	80064f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d016      	beq.n	8006500 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	3310      	adds	r3, #16
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fe26 	bl	8007128 <xTaskRemoveFromEventList>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00e      	beq.n	8006500 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e007      	b.n	8006500 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80064f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064f4:	3301      	adds	r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	b25a      	sxtb	r2, r3
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006500:	2301      	movs	r3, #1
 8006502:	637b      	str	r3, [r7, #52]	; 0x34
 8006504:	e001      	b.n	800650a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006506:	2300      	movs	r3, #0
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f383 8811 	msr	BASEPRI, r3
}
 8006514:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006518:	4618      	mov	r0, r3
 800651a:	3738      	adds	r7, #56	; 0x38
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	60bb      	str	r3, [r7, #8]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006544:	f001 fafe 	bl	8007b44 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800654e:	f001 fb29 	bl	8007ba4 <vPortExitCritical>

	return uxReturn;
 8006552:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	60fb      	str	r3, [r7, #12]
}
 8006580:	bf00      	nop
 8006582:	e7fe      	b.n	8006582 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800658a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800658c:	4618      	mov	r0, r3
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10a      	bne.n	80065c0 <vQueueDelete+0x28>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	60bb      	str	r3, [r7, #8]
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f935 	bl	8006830 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f001 fca5 	bl	8007f20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80065d6:	bf00      	nop
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d006      	beq.n	80065fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f1c3 0307 	rsb	r3, r3, #7
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	e001      	b.n	8006600 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80065fc:	2300      	movs	r3, #0
 80065fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006600:	68fb      	ldr	r3, [r7, #12]
	}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b086      	sub	sp, #24
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10d      	bne.n	8006648 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d14d      	bne.n	80066d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	4618      	mov	r0, r3
 800663a:	f000 ffc9 	bl	80075d0 <xTaskPriorityDisinherit>
 800663e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	609a      	str	r2, [r3, #8]
 8006646:	e043      	b.n	80066d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d119      	bne.n	8006682 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6858      	ldr	r0, [r3, #4]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	461a      	mov	r2, r3
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	f012 fba6 	bl	8018daa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	441a      	add	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	429a      	cmp	r2, r3
 8006676:	d32b      	bcc.n	80066d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	605a      	str	r2, [r3, #4]
 8006680:	e026      	b.n	80066d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	68d8      	ldr	r0, [r3, #12]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	461a      	mov	r2, r3
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	f012 fb8c 	bl	8018daa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	425b      	negs	r3, r3
 800669c:	441a      	add	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d207      	bcs.n	80066be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	425b      	negs	r3, r3
 80066b8:	441a      	add	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d105      	bne.n	80066d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066d8:	697b      	ldr	r3, [r7, #20]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b082      	sub	sp, #8
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d018      	beq.n	8006726 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	441a      	add	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	429a      	cmp	r2, r3
 800670c:	d303      	bcc.n	8006716 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68d9      	ldr	r1, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	461a      	mov	r2, r3
 8006720:	6838      	ldr	r0, [r7, #0]
 8006722:	f012 fb42 	bl	8018daa <memcpy>
	}
}
 8006726:	bf00      	nop
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006736:	f001 fa05 	bl	8007b44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006740:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006742:	e011      	b.n	8006768 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	2b00      	cmp	r3, #0
 800674a:	d012      	beq.n	8006772 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3324      	adds	r3, #36	; 0x24
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fce9 	bl	8007128 <xTaskRemoveFromEventList>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800675c:	f000 fdbe 	bl	80072dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	3b01      	subs	r3, #1
 8006764:	b2db      	uxtb	r3, r3
 8006766:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800676c:	2b00      	cmp	r3, #0
 800676e:	dce9      	bgt.n	8006744 <prvUnlockQueue+0x16>
 8006770:	e000      	b.n	8006774 <prvUnlockQueue+0x46>
					break;
 8006772:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	22ff      	movs	r2, #255	; 0xff
 8006778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800677c:	f001 fa12 	bl	8007ba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006780:	f001 f9e0 	bl	8007b44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800678a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800678c:	e011      	b.n	80067b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d012      	beq.n	80067bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3310      	adds	r3, #16
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fcc4 	bl	8007128 <xTaskRemoveFromEventList>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067a6:	f000 fd99 	bl	80072dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	dce9      	bgt.n	800678e <prvUnlockQueue+0x60>
 80067ba:	e000      	b.n	80067be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	22ff      	movs	r2, #255	; 0xff
 80067c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067c6:	f001 f9ed 	bl	8007ba4 <vPortExitCritical>
}
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067da:	f001 f9b3 	bl	8007b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d102      	bne.n	80067ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067e6:	2301      	movs	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e001      	b.n	80067f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067f0:	f001 f9d8 	bl	8007ba4 <vPortExitCritical>

	return xReturn;
 80067f4:	68fb      	ldr	r3, [r7, #12]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006806:	f001 f99d 	bl	8007b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006812:	429a      	cmp	r2, r3
 8006814:	d102      	bne.n	800681c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006816:	2301      	movs	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	e001      	b.n	8006820 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006820:	f001 f9c0 	bl	8007ba4 <vPortExitCritical>

	return xReturn;
 8006824:	68fb      	ldr	r3, [r7, #12]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	e016      	b.n	800686c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800683e:	4a10      	ldr	r2, [pc, #64]	; (8006880 <vQueueUnregisterQueue+0x50>)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	4413      	add	r3, r2
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	429a      	cmp	r2, r3
 800684c:	d10b      	bne.n	8006866 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800684e:	4a0c      	ldr	r2, [pc, #48]	; (8006880 <vQueueUnregisterQueue+0x50>)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2100      	movs	r1, #0
 8006854:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006858:	4a09      	ldr	r2, [pc, #36]	; (8006880 <vQueueUnregisterQueue+0x50>)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	4413      	add	r3, r2
 8006860:	2200      	movs	r2, #0
 8006862:	605a      	str	r2, [r3, #4]
				break;
 8006864:	e006      	b.n	8006874 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3301      	adds	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b07      	cmp	r3, #7
 8006870:	d9e5      	bls.n	800683e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006872:	bf00      	nop
 8006874:	bf00      	nop
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	20005834 	.word	0x20005834

08006884 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08e      	sub	sp, #56	; 0x38
 8006888:	af04      	add	r7, sp, #16
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10a      	bne.n	80068ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	623b      	str	r3, [r7, #32]
}
 80068aa:	bf00      	nop
 80068ac:	e7fe      	b.n	80068ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <xTaskCreateStatic+0x46>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	61fb      	str	r3, [r7, #28]
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068ca:	23b4      	movs	r3, #180	; 0xb4
 80068cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	2bb4      	cmp	r3, #180	; 0xb4
 80068d2:	d00a      	beq.n	80068ea <xTaskCreateStatic+0x66>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	61bb      	str	r3, [r7, #24]
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80068ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01e      	beq.n	8006930 <xTaskCreateStatic+0xac>
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01b      	beq.n	8006930 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006900:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	2202      	movs	r2, #2
 8006906:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800690a:	2300      	movs	r3, #0
 800690c:	9303      	str	r3, [sp, #12]
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	9302      	str	r3, [sp, #8]
 8006912:	f107 0314 	add.w	r3, r7, #20
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 f850 	bl	80069c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800692a:	f000 f8eb 	bl	8006b04 <prvAddNewTaskToReadyList>
 800692e:	e001      	b.n	8006934 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006930:	2300      	movs	r3, #0
 8006932:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006934:	697b      	ldr	r3, [r7, #20]
	}
 8006936:	4618      	mov	r0, r3
 8006938:	3728      	adds	r7, #40	; 0x28
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800693e:	b580      	push	{r7, lr}
 8006940:	b08c      	sub	sp, #48	; 0x30
 8006942:	af04      	add	r7, sp, #16
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	603b      	str	r3, [r7, #0]
 800694a:	4613      	mov	r3, r2
 800694c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800694e:	88fb      	ldrh	r3, [r7, #6]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4618      	mov	r0, r3
 8006954:	f001 fa18 	bl	8007d88 <pvPortMalloc>
 8006958:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00e      	beq.n	800697e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006960:	20b4      	movs	r0, #180	; 0xb4
 8006962:	f001 fa11 	bl	8007d88 <pvPortMalloc>
 8006966:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	631a      	str	r2, [r3, #48]	; 0x30
 8006974:	e005      	b.n	8006982 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006976:	6978      	ldr	r0, [r7, #20]
 8006978:	f001 fad2 	bl	8007f20 <vPortFree>
 800697c:	e001      	b.n	8006982 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800697e:	2300      	movs	r3, #0
 8006980:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d017      	beq.n	80069b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006990:	88fa      	ldrh	r2, [r7, #6]
 8006992:	2300      	movs	r3, #0
 8006994:	9303      	str	r3, [sp, #12]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	9302      	str	r3, [sp, #8]
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f80e 	bl	80069c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069ac:	69f8      	ldr	r0, [r7, #28]
 80069ae:	f000 f8a9 	bl	8006b04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069b2:	2301      	movs	r3, #1
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	e002      	b.n	80069be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069b8:	f04f 33ff 	mov.w	r3, #4294967295
 80069bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069be:	69bb      	ldr	r3, [r7, #24]
	}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069e0:	3b01      	subs	r3, #1
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	f023 0307 	bic.w	r3, r3, #7
 80069ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <prvInitialiseNewTask+0x48>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	617b      	str	r3, [r7, #20]
}
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d01f      	beq.n	8006a56 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	e012      	b.n	8006a42 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	4413      	add	r3, r2
 8006a22:	7819      	ldrb	r1, [r3, #0]
 8006a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	4413      	add	r3, r2
 8006a2a:	3334      	adds	r3, #52	; 0x34
 8006a2c:	460a      	mov	r2, r1
 8006a2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	4413      	add	r3, r2
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d006      	beq.n	8006a4a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	2b0f      	cmp	r3, #15
 8006a46:	d9e9      	bls.n	8006a1c <prvInitialiseNewTask+0x54>
 8006a48:	e000      	b.n	8006a4c <prvInitialiseNewTask+0x84>
			{
				break;
 8006a4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a54:	e003      	b.n	8006a5e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	2b06      	cmp	r3, #6
 8006a62:	d901      	bls.n	8006a68 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a64:	2306      	movs	r3, #6
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a72:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	2200      	movs	r2, #0
 8006a78:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fe fea1 	bl	80057c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	3318      	adds	r3, #24
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fe fe9c 	bl	80057c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f1c3 0207 	rsb	r2, r3, #7
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	334c      	adds	r3, #76	; 0x4c
 8006ab8:	2260      	movs	r2, #96	; 0x60
 8006aba:	2100      	movs	r1, #0
 8006abc:	4618      	mov	r0, r3
 8006abe:	f012 f99c 	bl	8018dfa <memset>
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	4a0c      	ldr	r2, [pc, #48]	; (8006af8 <prvInitialiseNewTask+0x130>)
 8006ac6:	651a      	str	r2, [r3, #80]	; 0x50
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	4a0c      	ldr	r2, [pc, #48]	; (8006afc <prvInitialiseNewTask+0x134>)
 8006acc:	655a      	str	r2, [r3, #84]	; 0x54
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	4a0b      	ldr	r2, [pc, #44]	; (8006b00 <prvInitialiseNewTask+0x138>)
 8006ad2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	68f9      	ldr	r1, [r7, #12]
 8006ad8:	69b8      	ldr	r0, [r7, #24]
 8006ada:	f000 ff07 	bl	80078ec <pxPortInitialiseStack>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006af0:	bf00      	nop
 8006af2:	3720      	adds	r7, #32
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	080282c8 	.word	0x080282c8
 8006afc:	080282e8 	.word	0x080282e8
 8006b00:	080282a8 	.word	0x080282a8

08006b04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b0c:	f001 f81a 	bl	8007b44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b10:	4b2a      	ldr	r3, [pc, #168]	; (8006bbc <prvAddNewTaskToReadyList+0xb8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3301      	adds	r3, #1
 8006b16:	4a29      	ldr	r2, [pc, #164]	; (8006bbc <prvAddNewTaskToReadyList+0xb8>)
 8006b18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b1a:	4b29      	ldr	r3, [pc, #164]	; (8006bc0 <prvAddNewTaskToReadyList+0xbc>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d109      	bne.n	8006b36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b22:	4a27      	ldr	r2, [pc, #156]	; (8006bc0 <prvAddNewTaskToReadyList+0xbc>)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b28:	4b24      	ldr	r3, [pc, #144]	; (8006bbc <prvAddNewTaskToReadyList+0xb8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d110      	bne.n	8006b52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b30:	f000 fbf8 	bl	8007324 <prvInitialiseTaskLists>
 8006b34:	e00d      	b.n	8006b52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b36:	4b23      	ldr	r3, [pc, #140]	; (8006bc4 <prvAddNewTaskToReadyList+0xc0>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b3e:	4b20      	ldr	r3, [pc, #128]	; (8006bc0 <prvAddNewTaskToReadyList+0xbc>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d802      	bhi.n	8006b52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b4c:	4a1c      	ldr	r2, [pc, #112]	; (8006bc0 <prvAddNewTaskToReadyList+0xbc>)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b52:	4b1d      	ldr	r3, [pc, #116]	; (8006bc8 <prvAddNewTaskToReadyList+0xc4>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3301      	adds	r3, #1
 8006b58:	4a1b      	ldr	r2, [pc, #108]	; (8006bc8 <prvAddNewTaskToReadyList+0xc4>)
 8006b5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	2201      	movs	r2, #1
 8006b62:	409a      	lsls	r2, r3
 8006b64:	4b19      	ldr	r3, [pc, #100]	; (8006bcc <prvAddNewTaskToReadyList+0xc8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	4a18      	ldr	r2, [pc, #96]	; (8006bcc <prvAddNewTaskToReadyList+0xc8>)
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4a15      	ldr	r2, [pc, #84]	; (8006bd0 <prvAddNewTaskToReadyList+0xcc>)
 8006b7c:	441a      	add	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f7fe fe2b 	bl	80057e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b8a:	f001 f80b 	bl	8007ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	; (8006bc4 <prvAddNewTaskToReadyList+0xc0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00e      	beq.n	8006bb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b96:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <prvAddNewTaskToReadyList+0xbc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d207      	bcs.n	8006bb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ba4:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <prvAddNewTaskToReadyList+0xd0>)
 8006ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bb4:	bf00      	nop
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20005974 	.word	0x20005974
 8006bc0:	20005874 	.word	0x20005874
 8006bc4:	20005980 	.word	0x20005980
 8006bc8:	20005990 	.word	0x20005990
 8006bcc:	2000597c 	.word	0x2000597c
 8006bd0:	20005878 	.word	0x20005878
 8006bd4:	e000ed04 	.word	0xe000ed04

08006bd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d017      	beq.n	8006c1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bea:	4b13      	ldr	r3, [pc, #76]	; (8006c38 <vTaskDelay+0x60>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <vTaskDelay+0x30>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	60bb      	str	r3, [r7, #8]
}
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c08:	f000 f884 	bl	8006d14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fe06 	bl	8007820 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c14:	f000 f88c 	bl	8006d30 <xTaskResumeAll>
 8006c18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d107      	bne.n	8006c30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <vTaskDelay+0x64>)
 8006c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c30:	bf00      	nop
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	2000599c 	.word	0x2000599c
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c4e:	463a      	mov	r2, r7
 8006c50:	1d39      	adds	r1, r7, #4
 8006c52:	f107 0308 	add.w	r3, r7, #8
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7f9 fcb4 	bl	80005c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	9202      	str	r2, [sp, #8]
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	2300      	movs	r3, #0
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	460a      	mov	r2, r1
 8006c6e:	4921      	ldr	r1, [pc, #132]	; (8006cf4 <vTaskStartScheduler+0xb4>)
 8006c70:	4821      	ldr	r0, [pc, #132]	; (8006cf8 <vTaskStartScheduler+0xb8>)
 8006c72:	f7ff fe07 	bl	8006884 <xTaskCreateStatic>
 8006c76:	4603      	mov	r3, r0
 8006c78:	4a20      	ldr	r2, [pc, #128]	; (8006cfc <vTaskStartScheduler+0xbc>)
 8006c7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c7c:	4b1f      	ldr	r3, [pc, #124]	; (8006cfc <vTaskStartScheduler+0xbc>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c84:	2301      	movs	r3, #1
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	e001      	b.n	8006c8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d11b      	bne.n	8006ccc <vTaskStartScheduler+0x8c>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	613b      	str	r3, [r7, #16]
}
 8006ca6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ca8:	4b15      	ldr	r3, [pc, #84]	; (8006d00 <vTaskStartScheduler+0xc0>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	334c      	adds	r3, #76	; 0x4c
 8006cae:	4a15      	ldr	r2, [pc, #84]	; (8006d04 <vTaskStartScheduler+0xc4>)
 8006cb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006cb2:	4b15      	ldr	r3, [pc, #84]	; (8006d08 <vTaskStartScheduler+0xc8>)
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006cba:	4b14      	ldr	r3, [pc, #80]	; (8006d0c <vTaskStartScheduler+0xcc>)
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006cc0:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <vTaskStartScheduler+0xd0>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cc6:	f000 fe9b 	bl	8007a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cca:	e00e      	b.n	8006cea <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd2:	d10a      	bne.n	8006cea <vTaskStartScheduler+0xaa>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	60fb      	str	r3, [r7, #12]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <vTaskStartScheduler+0xa8>
}
 8006cea:	bf00      	nop
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	0801a46c 	.word	0x0801a46c
 8006cf8:	080072f5 	.word	0x080072f5
 8006cfc:	20005998 	.word	0x20005998
 8006d00:	20005874 	.word	0x20005874
 8006d04:	20000034 	.word	0x20000034
 8006d08:	20005994 	.word	0x20005994
 8006d0c:	20005980 	.word	0x20005980
 8006d10:	20005978 	.word	0x20005978

08006d14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d18:	4b04      	ldr	r3, [pc, #16]	; (8006d2c <vTaskSuspendAll+0x18>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	4a03      	ldr	r2, [pc, #12]	; (8006d2c <vTaskSuspendAll+0x18>)
 8006d20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d22:	bf00      	nop
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	2000599c 	.word	0x2000599c

08006d30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d3e:	4b41      	ldr	r3, [pc, #260]	; (8006e44 <xTaskResumeAll+0x114>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <xTaskResumeAll+0x2c>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	603b      	str	r3, [r7, #0]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d5c:	f000 fef2 	bl	8007b44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d60:	4b38      	ldr	r3, [pc, #224]	; (8006e44 <xTaskResumeAll+0x114>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	4a37      	ldr	r2, [pc, #220]	; (8006e44 <xTaskResumeAll+0x114>)
 8006d68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d6a:	4b36      	ldr	r3, [pc, #216]	; (8006e44 <xTaskResumeAll+0x114>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d161      	bne.n	8006e36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d72:	4b35      	ldr	r3, [pc, #212]	; (8006e48 <xTaskResumeAll+0x118>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d05d      	beq.n	8006e36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d7a:	e02e      	b.n	8006dda <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7c:	4b33      	ldr	r3, [pc, #204]	; (8006e4c <xTaskResumeAll+0x11c>)
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3318      	adds	r3, #24
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe fd86 	bl	800589a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3304      	adds	r3, #4
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fe fd81 	bl	800589a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	409a      	lsls	r2, r3
 8006da0:	4b2b      	ldr	r3, [pc, #172]	; (8006e50 <xTaskResumeAll+0x120>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	4a2a      	ldr	r2, [pc, #168]	; (8006e50 <xTaskResumeAll+0x120>)
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dae:	4613      	mov	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4a27      	ldr	r2, [pc, #156]	; (8006e54 <xTaskResumeAll+0x124>)
 8006db8:	441a      	add	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	f7fe fd0d 	bl	80057e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dca:	4b23      	ldr	r3, [pc, #140]	; (8006e58 <xTaskResumeAll+0x128>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d302      	bcc.n	8006dda <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006dd4:	4b21      	ldr	r3, [pc, #132]	; (8006e5c <xTaskResumeAll+0x12c>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dda:	4b1c      	ldr	r3, [pc, #112]	; (8006e4c <xTaskResumeAll+0x11c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1cc      	bne.n	8006d7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006de8:	f000 fb3e 	bl	8007468 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006dec:	4b1c      	ldr	r3, [pc, #112]	; (8006e60 <xTaskResumeAll+0x130>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d010      	beq.n	8006e1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006df8:	f000 f858 	bl	8006eac <xTaskIncrementTick>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006e02:	4b16      	ldr	r3, [pc, #88]	; (8006e5c <xTaskResumeAll+0x12c>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f1      	bne.n	8006df8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006e14:	4b12      	ldr	r3, [pc, #72]	; (8006e60 <xTaskResumeAll+0x130>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e1a:	4b10      	ldr	r3, [pc, #64]	; (8006e5c <xTaskResumeAll+0x12c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d009      	beq.n	8006e36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e22:	2301      	movs	r3, #1
 8006e24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e26:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <xTaskResumeAll+0x134>)
 8006e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e36:	f000 feb5 	bl	8007ba4 <vPortExitCritical>

	return xAlreadyYielded;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	2000599c 	.word	0x2000599c
 8006e48:	20005974 	.word	0x20005974
 8006e4c:	20005934 	.word	0x20005934
 8006e50:	2000597c 	.word	0x2000597c
 8006e54:	20005878 	.word	0x20005878
 8006e58:	20005874 	.word	0x20005874
 8006e5c:	20005988 	.word	0x20005988
 8006e60:	20005984 	.word	0x20005984
 8006e64:	e000ed04 	.word	0xe000ed04

08006e68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <xTaskGetTickCount+0x1c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e74:	687b      	ldr	r3, [r7, #4]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	20005978 	.word	0x20005978

08006e88 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e8e:	f000 ff3b 	bl	8007d08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006e92:	2300      	movs	r3, #0
 8006e94:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006e96:	4b04      	ldr	r3, [pc, #16]	; (8006ea8 <xTaskGetTickCountFromISR+0x20>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e9c:	683b      	ldr	r3, [r7, #0]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20005978 	.word	0x20005978

08006eac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eb6:	4b4e      	ldr	r3, [pc, #312]	; (8006ff0 <xTaskIncrementTick+0x144>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f040 808e 	bne.w	8006fdc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ec0:	4b4c      	ldr	r3, [pc, #304]	; (8006ff4 <xTaskIncrementTick+0x148>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ec8:	4a4a      	ldr	r2, [pc, #296]	; (8006ff4 <xTaskIncrementTick+0x148>)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d120      	bne.n	8006f16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ed4:	4b48      	ldr	r3, [pc, #288]	; (8006ff8 <xTaskIncrementTick+0x14c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	603b      	str	r3, [r7, #0]
}
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <xTaskIncrementTick+0x46>
 8006ef4:	4b40      	ldr	r3, [pc, #256]	; (8006ff8 <xTaskIncrementTick+0x14c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	4b40      	ldr	r3, [pc, #256]	; (8006ffc <xTaskIncrementTick+0x150>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a3e      	ldr	r2, [pc, #248]	; (8006ff8 <xTaskIncrementTick+0x14c>)
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	4a3e      	ldr	r2, [pc, #248]	; (8006ffc <xTaskIncrementTick+0x150>)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	4b3d      	ldr	r3, [pc, #244]	; (8007000 <xTaskIncrementTick+0x154>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	4a3c      	ldr	r2, [pc, #240]	; (8007000 <xTaskIncrementTick+0x154>)
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	f000 faa9 	bl	8007468 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f16:	4b3b      	ldr	r3, [pc, #236]	; (8007004 <xTaskIncrementTick+0x158>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d348      	bcc.n	8006fb2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f20:	4b35      	ldr	r3, [pc, #212]	; (8006ff8 <xTaskIncrementTick+0x14c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d104      	bne.n	8006f34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f2a:	4b36      	ldr	r3, [pc, #216]	; (8007004 <xTaskIncrementTick+0x158>)
 8006f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f30:	601a      	str	r2, [r3, #0]
					break;
 8006f32:	e03e      	b.n	8006fb2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f34:	4b30      	ldr	r3, [pc, #192]	; (8006ff8 <xTaskIncrementTick+0x14c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d203      	bcs.n	8006f54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f4c:	4a2d      	ldr	r2, [pc, #180]	; (8007004 <xTaskIncrementTick+0x158>)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f52:	e02e      	b.n	8006fb2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe fc9e 	bl	800589a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d004      	beq.n	8006f70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	3318      	adds	r3, #24
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fc95 	bl	800589a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	2201      	movs	r2, #1
 8006f76:	409a      	lsls	r2, r3
 8006f78:	4b23      	ldr	r3, [pc, #140]	; (8007008 <xTaskIncrementTick+0x15c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	4a22      	ldr	r2, [pc, #136]	; (8007008 <xTaskIncrementTick+0x15c>)
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4a1f      	ldr	r2, [pc, #124]	; (800700c <xTaskIncrementTick+0x160>)
 8006f90:	441a      	add	r2, r3
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f7fe fc21 	bl	80057e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa2:	4b1b      	ldr	r3, [pc, #108]	; (8007010 <xTaskIncrementTick+0x164>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d3b9      	bcc.n	8006f20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006fac:	2301      	movs	r3, #1
 8006fae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fb0:	e7b6      	b.n	8006f20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fb2:	4b17      	ldr	r3, [pc, #92]	; (8007010 <xTaskIncrementTick+0x164>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	4914      	ldr	r1, [pc, #80]	; (800700c <xTaskIncrementTick+0x160>)
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d901      	bls.n	8006fce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006fce:	4b11      	ldr	r3, [pc, #68]	; (8007014 <xTaskIncrementTick+0x168>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	e004      	b.n	8006fe6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006fdc:	4b0e      	ldr	r3, [pc, #56]	; (8007018 <xTaskIncrementTick+0x16c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	4a0d      	ldr	r2, [pc, #52]	; (8007018 <xTaskIncrementTick+0x16c>)
 8006fe4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006fe6:	697b      	ldr	r3, [r7, #20]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	2000599c 	.word	0x2000599c
 8006ff4:	20005978 	.word	0x20005978
 8006ff8:	2000592c 	.word	0x2000592c
 8006ffc:	20005930 	.word	0x20005930
 8007000:	2000598c 	.word	0x2000598c
 8007004:	20005994 	.word	0x20005994
 8007008:	2000597c 	.word	0x2000597c
 800700c:	20005878 	.word	0x20005878
 8007010:	20005874 	.word	0x20005874
 8007014:	20005988 	.word	0x20005988
 8007018:	20005984 	.word	0x20005984

0800701c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007022:	4b29      	ldr	r3, [pc, #164]	; (80070c8 <vTaskSwitchContext+0xac>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800702a:	4b28      	ldr	r3, [pc, #160]	; (80070cc <vTaskSwitchContext+0xb0>)
 800702c:	2201      	movs	r2, #1
 800702e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007030:	e044      	b.n	80070bc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007032:	4b26      	ldr	r3, [pc, #152]	; (80070cc <vTaskSwitchContext+0xb0>)
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007038:	4b25      	ldr	r3, [pc, #148]	; (80070d0 <vTaskSwitchContext+0xb4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	fab3 f383 	clz	r3, r3
 8007044:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007046:	7afb      	ldrb	r3, [r7, #11]
 8007048:	f1c3 031f 	rsb	r3, r3, #31
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	4921      	ldr	r1, [pc, #132]	; (80070d4 <vTaskSwitchContext+0xb8>)
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	607b      	str	r3, [r7, #4]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <vTaskSwitchContext+0x5a>
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4a14      	ldr	r2, [pc, #80]	; (80070d4 <vTaskSwitchContext+0xb8>)
 8007084:	4413      	add	r3, r2
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	605a      	str	r2, [r3, #4]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	3308      	adds	r3, #8
 800709a:	429a      	cmp	r2, r3
 800709c:	d104      	bne.n	80070a8 <vTaskSwitchContext+0x8c>
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	605a      	str	r2, [r3, #4]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	4a0a      	ldr	r2, [pc, #40]	; (80070d8 <vTaskSwitchContext+0xbc>)
 80070b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070b2:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <vTaskSwitchContext+0xbc>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	334c      	adds	r3, #76	; 0x4c
 80070b8:	4a08      	ldr	r2, [pc, #32]	; (80070dc <vTaskSwitchContext+0xc0>)
 80070ba:	6013      	str	r3, [r2, #0]
}
 80070bc:	bf00      	nop
 80070be:	371c      	adds	r7, #28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	2000599c 	.word	0x2000599c
 80070cc:	20005988 	.word	0x20005988
 80070d0:	2000597c 	.word	0x2000597c
 80070d4:	20005878 	.word	0x20005878
 80070d8:	20005874 	.word	0x20005874
 80070dc:	20000034 	.word	0x20000034

080070e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60fb      	str	r3, [r7, #12]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007106:	4b07      	ldr	r3, [pc, #28]	; (8007124 <vTaskPlaceOnEventList+0x44>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3318      	adds	r3, #24
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7fe fb8a 	bl	8005828 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007114:	2101      	movs	r1, #1
 8007116:	6838      	ldr	r0, [r7, #0]
 8007118:	f000 fb82 	bl	8007820 <prvAddCurrentTaskToDelayedList>
}
 800711c:	bf00      	nop
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20005874 	.word	0x20005874

08007128 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	60fb      	str	r3, [r7, #12]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	3318      	adds	r3, #24
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe fb9e 	bl	800589a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715e:	4b1d      	ldr	r3, [pc, #116]	; (80071d4 <xTaskRemoveFromEventList+0xac>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d11c      	bne.n	80071a0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	3304      	adds	r3, #4
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe fb95 	bl	800589a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	2201      	movs	r2, #1
 8007176:	409a      	lsls	r2, r3
 8007178:	4b17      	ldr	r3, [pc, #92]	; (80071d8 <xTaskRemoveFromEventList+0xb0>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4313      	orrs	r3, r2
 800717e:	4a16      	ldr	r2, [pc, #88]	; (80071d8 <xTaskRemoveFromEventList+0xb0>)
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007186:	4613      	mov	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4a13      	ldr	r2, [pc, #76]	; (80071dc <xTaskRemoveFromEventList+0xb4>)
 8007190:	441a      	add	r2, r3
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	3304      	adds	r3, #4
 8007196:	4619      	mov	r1, r3
 8007198:	4610      	mov	r0, r2
 800719a:	f7fe fb21 	bl	80057e0 <vListInsertEnd>
 800719e:	e005      	b.n	80071ac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	3318      	adds	r3, #24
 80071a4:	4619      	mov	r1, r3
 80071a6:	480e      	ldr	r0, [pc, #56]	; (80071e0 <xTaskRemoveFromEventList+0xb8>)
 80071a8:	f7fe fb1a 	bl	80057e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b0:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <xTaskRemoveFromEventList+0xbc>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d905      	bls.n	80071c6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071ba:	2301      	movs	r3, #1
 80071bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071be:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <xTaskRemoveFromEventList+0xc0>)
 80071c0:	2201      	movs	r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	e001      	b.n	80071ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071ca:	697b      	ldr	r3, [r7, #20]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	2000599c 	.word	0x2000599c
 80071d8:	2000597c 	.word	0x2000597c
 80071dc:	20005878 	.word	0x20005878
 80071e0:	20005934 	.word	0x20005934
 80071e4:	20005874 	.word	0x20005874
 80071e8:	20005988 	.word	0x20005988

080071ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071f4:	4b06      	ldr	r3, [pc, #24]	; (8007210 <vTaskInternalSetTimeOutState+0x24>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <vTaskInternalSetTimeOutState+0x28>)
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	605a      	str	r2, [r3, #4]
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	2000598c 	.word	0x2000598c
 8007214:	20005978 	.word	0x20005978

08007218 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	613b      	str	r3, [r7, #16]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	60fb      	str	r3, [r7, #12]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800725a:	f000 fc73 	bl	8007b44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800725e:	4b1d      	ldr	r3, [pc, #116]	; (80072d4 <xTaskCheckForTimeOut+0xbc>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007276:	d102      	bne.n	800727e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007278:	2300      	movs	r3, #0
 800727a:	61fb      	str	r3, [r7, #28]
 800727c:	e023      	b.n	80072c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	4b15      	ldr	r3, [pc, #84]	; (80072d8 <xTaskCheckForTimeOut+0xc0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	429a      	cmp	r2, r3
 8007288:	d007      	beq.n	800729a <xTaskCheckForTimeOut+0x82>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	429a      	cmp	r2, r3
 8007292:	d302      	bcc.n	800729a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007294:	2301      	movs	r3, #1
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	e015      	b.n	80072c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d20b      	bcs.n	80072bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	1ad2      	subs	r2, r2, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff ff9b 	bl	80071ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072b6:	2300      	movs	r3, #0
 80072b8:	61fb      	str	r3, [r7, #28]
 80072ba:	e004      	b.n	80072c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072c2:	2301      	movs	r3, #1
 80072c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072c6:	f000 fc6d 	bl	8007ba4 <vPortExitCritical>

	return xReturn;
 80072ca:	69fb      	ldr	r3, [r7, #28]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3720      	adds	r7, #32
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20005978 	.word	0x20005978
 80072d8:	2000598c 	.word	0x2000598c

080072dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072e0:	4b03      	ldr	r3, [pc, #12]	; (80072f0 <vTaskMissedYield+0x14>)
 80072e2:	2201      	movs	r2, #1
 80072e4:	601a      	str	r2, [r3, #0]
}
 80072e6:	bf00      	nop
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	20005988 	.word	0x20005988

080072f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072fc:	f000 f852 	bl	80073a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007300:	4b06      	ldr	r3, [pc, #24]	; (800731c <prvIdleTask+0x28>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d9f9      	bls.n	80072fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <prvIdleTask+0x2c>)
 800730a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007318:	e7f0      	b.n	80072fc <prvIdleTask+0x8>
 800731a:	bf00      	nop
 800731c:	20005878 	.word	0x20005878
 8007320:	e000ed04 	.word	0xe000ed04

08007324 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800732a:	2300      	movs	r3, #0
 800732c:	607b      	str	r3, [r7, #4]
 800732e:	e00c      	b.n	800734a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4a12      	ldr	r2, [pc, #72]	; (8007384 <prvInitialiseTaskLists+0x60>)
 800733c:	4413      	add	r3, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe fa21 	bl	8005786 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3301      	adds	r3, #1
 8007348:	607b      	str	r3, [r7, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b06      	cmp	r3, #6
 800734e:	d9ef      	bls.n	8007330 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007350:	480d      	ldr	r0, [pc, #52]	; (8007388 <prvInitialiseTaskLists+0x64>)
 8007352:	f7fe fa18 	bl	8005786 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007356:	480d      	ldr	r0, [pc, #52]	; (800738c <prvInitialiseTaskLists+0x68>)
 8007358:	f7fe fa15 	bl	8005786 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800735c:	480c      	ldr	r0, [pc, #48]	; (8007390 <prvInitialiseTaskLists+0x6c>)
 800735e:	f7fe fa12 	bl	8005786 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007362:	480c      	ldr	r0, [pc, #48]	; (8007394 <prvInitialiseTaskLists+0x70>)
 8007364:	f7fe fa0f 	bl	8005786 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007368:	480b      	ldr	r0, [pc, #44]	; (8007398 <prvInitialiseTaskLists+0x74>)
 800736a:	f7fe fa0c 	bl	8005786 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800736e:	4b0b      	ldr	r3, [pc, #44]	; (800739c <prvInitialiseTaskLists+0x78>)
 8007370:	4a05      	ldr	r2, [pc, #20]	; (8007388 <prvInitialiseTaskLists+0x64>)
 8007372:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007374:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <prvInitialiseTaskLists+0x7c>)
 8007376:	4a05      	ldr	r2, [pc, #20]	; (800738c <prvInitialiseTaskLists+0x68>)
 8007378:	601a      	str	r2, [r3, #0]
}
 800737a:	bf00      	nop
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20005878 	.word	0x20005878
 8007388:	20005904 	.word	0x20005904
 800738c:	20005918 	.word	0x20005918
 8007390:	20005934 	.word	0x20005934
 8007394:	20005948 	.word	0x20005948
 8007398:	20005960 	.word	0x20005960
 800739c:	2000592c 	.word	0x2000592c
 80073a0:	20005930 	.word	0x20005930

080073a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073aa:	e019      	b.n	80073e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073ac:	f000 fbca 	bl	8007b44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073b0:	4b10      	ldr	r3, [pc, #64]	; (80073f4 <prvCheckTasksWaitingTermination+0x50>)
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fe fa6c 	bl	800589a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073c2:	4b0d      	ldr	r3, [pc, #52]	; (80073f8 <prvCheckTasksWaitingTermination+0x54>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	4a0b      	ldr	r2, [pc, #44]	; (80073f8 <prvCheckTasksWaitingTermination+0x54>)
 80073ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <prvCheckTasksWaitingTermination+0x58>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <prvCheckTasksWaitingTermination+0x58>)
 80073d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073d6:	f000 fbe5 	bl	8007ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f810 	bl	8007400 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <prvCheckTasksWaitingTermination+0x58>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e1      	bne.n	80073ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073e8:	bf00      	nop
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	20005948 	.word	0x20005948
 80073f8:	20005974 	.word	0x20005974
 80073fc:	2000595c 	.word	0x2000595c

08007400 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	334c      	adds	r3, #76	; 0x4c
 800740c:	4618      	mov	r0, r3
 800740e:	f011 fe23 	bl	8019058 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d108      	bne.n	800742e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fd7d 	bl	8007f20 <vPortFree>
				vPortFree( pxTCB );
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fd7a 	bl	8007f20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800742c:	e018      	b.n	8007460 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007434:	2b01      	cmp	r3, #1
 8007436:	d103      	bne.n	8007440 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fd71 	bl	8007f20 <vPortFree>
	}
 800743e:	e00f      	b.n	8007460 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007446:	2b02      	cmp	r3, #2
 8007448:	d00a      	beq.n	8007460 <prvDeleteTCB+0x60>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	60fb      	str	r3, [r7, #12]
}
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <prvDeleteTCB+0x5e>
	}
 8007460:	bf00      	nop
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800746e:	4b0c      	ldr	r3, [pc, #48]	; (80074a0 <prvResetNextTaskUnblockTime+0x38>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007478:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <prvResetNextTaskUnblockTime+0x3c>)
 800747a:	f04f 32ff 	mov.w	r2, #4294967295
 800747e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007480:	e008      	b.n	8007494 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007482:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <prvResetNextTaskUnblockTime+0x38>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	4a04      	ldr	r2, [pc, #16]	; (80074a4 <prvResetNextTaskUnblockTime+0x3c>)
 8007492:	6013      	str	r3, [r2, #0]
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	2000592c 	.word	0x2000592c
 80074a4:	20005994 	.word	0x20005994

080074a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074ae:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <xTaskGetSchedulerState+0x34>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d102      	bne.n	80074bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074b6:	2301      	movs	r3, #1
 80074b8:	607b      	str	r3, [r7, #4]
 80074ba:	e008      	b.n	80074ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074bc:	4b08      	ldr	r3, [pc, #32]	; (80074e0 <xTaskGetSchedulerState+0x38>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d102      	bne.n	80074ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074c4:	2302      	movs	r3, #2
 80074c6:	607b      	str	r3, [r7, #4]
 80074c8:	e001      	b.n	80074ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074ca:	2300      	movs	r3, #0
 80074cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074ce:	687b      	ldr	r3, [r7, #4]
	}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	20005980 	.word	0x20005980
 80074e0:	2000599c 	.word	0x2000599c

080074e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d05e      	beq.n	80075b8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fe:	4b31      	ldr	r3, [pc, #196]	; (80075c4 <xTaskPriorityInherit+0xe0>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007504:	429a      	cmp	r2, r3
 8007506:	d24e      	bcs.n	80075a6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	db06      	blt.n	800751e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007510:	4b2c      	ldr	r3, [pc, #176]	; (80075c4 <xTaskPriorityInherit+0xe0>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	f1c3 0207 	rsb	r2, r3, #7
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6959      	ldr	r1, [r3, #20]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4a26      	ldr	r2, [pc, #152]	; (80075c8 <xTaskPriorityInherit+0xe4>)
 8007530:	4413      	add	r3, r2
 8007532:	4299      	cmp	r1, r3
 8007534:	d12f      	bne.n	8007596 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	3304      	adds	r3, #4
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe f9ad 	bl	800589a <uxListRemove>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10a      	bne.n	800755c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754a:	2201      	movs	r2, #1
 800754c:	fa02 f303 	lsl.w	r3, r2, r3
 8007550:	43da      	mvns	r2, r3
 8007552:	4b1e      	ldr	r3, [pc, #120]	; (80075cc <xTaskPriorityInherit+0xe8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4013      	ands	r3, r2
 8007558:	4a1c      	ldr	r2, [pc, #112]	; (80075cc <xTaskPriorityInherit+0xe8>)
 800755a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800755c:	4b19      	ldr	r3, [pc, #100]	; (80075c4 <xTaskPriorityInherit+0xe0>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	2201      	movs	r2, #1
 800756c:	409a      	lsls	r2, r3
 800756e:	4b17      	ldr	r3, [pc, #92]	; (80075cc <xTaskPriorityInherit+0xe8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4313      	orrs	r3, r2
 8007574:	4a15      	ldr	r2, [pc, #84]	; (80075cc <xTaskPriorityInherit+0xe8>)
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757c:	4613      	mov	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4a10      	ldr	r2, [pc, #64]	; (80075c8 <xTaskPriorityInherit+0xe4>)
 8007586:	441a      	add	r2, r3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	3304      	adds	r3, #4
 800758c:	4619      	mov	r1, r3
 800758e:	4610      	mov	r0, r2
 8007590:	f7fe f926 	bl	80057e0 <vListInsertEnd>
 8007594:	e004      	b.n	80075a0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007596:	4b0b      	ldr	r3, [pc, #44]	; (80075c4 <xTaskPriorityInherit+0xe0>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80075a0:	2301      	movs	r3, #1
 80075a2:	60fb      	str	r3, [r7, #12]
 80075a4:	e008      	b.n	80075b8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075aa:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <xTaskPriorityInherit+0xe0>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d201      	bcs.n	80075b8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80075b4:	2301      	movs	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075b8:	68fb      	ldr	r3, [r7, #12]
	}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20005874 	.word	0x20005874
 80075c8:	20005878 	.word	0x20005878
 80075cc:	2000597c 	.word	0x2000597c

080075d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d06e      	beq.n	80076c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075e6:	4b3a      	ldr	r3, [pc, #232]	; (80076d0 <xTaskPriorityDisinherit+0x100>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d00a      	beq.n	8007606 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	60fb      	str	r3, [r7, #12]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	60bb      	str	r3, [r7, #8]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007628:	1e5a      	subs	r2, r3, #1
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007636:	429a      	cmp	r2, r3
 8007638:	d044      	beq.n	80076c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800763e:	2b00      	cmp	r3, #0
 8007640:	d140      	bne.n	80076c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	3304      	adds	r3, #4
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe f927 	bl	800589a <uxListRemove>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d115      	bne.n	800767e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007656:	491f      	ldr	r1, [pc, #124]	; (80076d4 <xTaskPriorityDisinherit+0x104>)
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10a      	bne.n	800767e <xTaskPriorityDisinherit+0xae>
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	2201      	movs	r2, #1
 800766e:	fa02 f303 	lsl.w	r3, r2, r3
 8007672:	43da      	mvns	r2, r3
 8007674:	4b18      	ldr	r3, [pc, #96]	; (80076d8 <xTaskPriorityDisinherit+0x108>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4013      	ands	r3, r2
 800767a:	4a17      	ldr	r2, [pc, #92]	; (80076d8 <xTaskPriorityDisinherit+0x108>)
 800767c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	f1c3 0207 	rsb	r2, r3, #7
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007696:	2201      	movs	r2, #1
 8007698:	409a      	lsls	r2, r3
 800769a:	4b0f      	ldr	r3, [pc, #60]	; (80076d8 <xTaskPriorityDisinherit+0x108>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4313      	orrs	r3, r2
 80076a0:	4a0d      	ldr	r2, [pc, #52]	; (80076d8 <xTaskPriorityDisinherit+0x108>)
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4a08      	ldr	r2, [pc, #32]	; (80076d4 <xTaskPriorityDisinherit+0x104>)
 80076b2:	441a      	add	r2, r3
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	3304      	adds	r3, #4
 80076b8:	4619      	mov	r1, r3
 80076ba:	4610      	mov	r0, r2
 80076bc:	f7fe f890 	bl	80057e0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076c0:	2301      	movs	r3, #1
 80076c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076c4:	697b      	ldr	r3, [r7, #20]
	}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20005874 	.word	0x20005874
 80076d4:	20005878 	.word	0x20005878
 80076d8:	2000597c 	.word	0x2000597c

080076dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80076ea:	2301      	movs	r3, #1
 80076ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d077      	beq.n	80077e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	60fb      	str	r3, [r7, #12]
}
 800770e:	bf00      	nop
 8007710:	e7fe      	b.n	8007710 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d902      	bls.n	8007722 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	61fb      	str	r3, [r7, #28]
 8007720:	e002      	b.n	8007728 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007726:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	429a      	cmp	r2, r3
 8007730:	d058      	beq.n	80077e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	429a      	cmp	r2, r3
 800773a:	d153      	bne.n	80077e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800773c:	4b2b      	ldr	r3, [pc, #172]	; (80077ec <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	429a      	cmp	r2, r3
 8007744:	d10a      	bne.n	800775c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	60bb      	str	r3, [r7, #8]
}
 8007758:	bf00      	nop
 800775a:	e7fe      	b.n	800775a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	db04      	blt.n	800777a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	f1c3 0207 	rsb	r2, r3, #7
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	6959      	ldr	r1, [r3, #20]
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	4613      	mov	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4a19      	ldr	r2, [pc, #100]	; (80077f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800778a:	4413      	add	r3, r2
 800778c:	4299      	cmp	r1, r3
 800778e:	d129      	bne.n	80077e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	3304      	adds	r3, #4
 8007794:	4618      	mov	r0, r3
 8007796:	f7fe f880 	bl	800589a <uxListRemove>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10a      	bne.n	80077b6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	2201      	movs	r2, #1
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	43da      	mvns	r2, r3
 80077ac:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4013      	ands	r3, r2
 80077b2:	4a10      	ldr	r2, [pc, #64]	; (80077f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ba:	2201      	movs	r2, #1
 80077bc:	409a      	lsls	r2, r3
 80077be:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	4a0b      	ldr	r2, [pc, #44]	; (80077f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4a06      	ldr	r2, [pc, #24]	; (80077f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80077d6:	441a      	add	r2, r3
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	3304      	adds	r3, #4
 80077dc:	4619      	mov	r1, r3
 80077de:	4610      	mov	r0, r2
 80077e0:	f7fd fffe 	bl	80057e0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077e4:	bf00      	nop
 80077e6:	3720      	adds	r7, #32
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	20005874 	.word	0x20005874
 80077f0:	20005878 	.word	0x20005878
 80077f4:	2000597c 	.word	0x2000597c

080077f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80077f8:	b480      	push	{r7}
 80077fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80077fc:	4b07      	ldr	r3, [pc, #28]	; (800781c <pvTaskIncrementMutexHeldCount+0x24>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d004      	beq.n	800780e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007804:	4b05      	ldr	r3, [pc, #20]	; (800781c <pvTaskIncrementMutexHeldCount+0x24>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800780a:	3201      	adds	r2, #1
 800780c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800780e:	4b03      	ldr	r3, [pc, #12]	; (800781c <pvTaskIncrementMutexHeldCount+0x24>)
 8007810:	681b      	ldr	r3, [r3, #0]
	}
 8007812:	4618      	mov	r0, r3
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	20005874 	.word	0x20005874

08007820 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800782a:	4b29      	ldr	r3, [pc, #164]	; (80078d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007830:	4b28      	ldr	r3, [pc, #160]	; (80078d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3304      	adds	r3, #4
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe f82f 	bl	800589a <uxListRemove>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10b      	bne.n	800785a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007842:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	2201      	movs	r2, #1
 800784a:	fa02 f303 	lsl.w	r3, r2, r3
 800784e:	43da      	mvns	r2, r3
 8007850:	4b21      	ldr	r3, [pc, #132]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4013      	ands	r3, r2
 8007856:	4a20      	ldr	r2, [pc, #128]	; (80078d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007858:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007860:	d10a      	bne.n	8007878 <prvAddCurrentTaskToDelayedList+0x58>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d007      	beq.n	8007878 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007868:	4b1a      	ldr	r3, [pc, #104]	; (80078d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3304      	adds	r3, #4
 800786e:	4619      	mov	r1, r3
 8007870:	481a      	ldr	r0, [pc, #104]	; (80078dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007872:	f7fd ffb5 	bl	80057e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007876:	e026      	b.n	80078c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4413      	add	r3, r2
 800787e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007880:	4b14      	ldr	r3, [pc, #80]	; (80078d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	429a      	cmp	r2, r3
 800788e:	d209      	bcs.n	80078a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007890:	4b13      	ldr	r3, [pc, #76]	; (80078e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	4b0f      	ldr	r3, [pc, #60]	; (80078d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3304      	adds	r3, #4
 800789a:	4619      	mov	r1, r3
 800789c:	4610      	mov	r0, r2
 800789e:	f7fd ffc3 	bl	8005828 <vListInsert>
}
 80078a2:	e010      	b.n	80078c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078a4:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3304      	adds	r3, #4
 80078ae:	4619      	mov	r1, r3
 80078b0:	4610      	mov	r0, r2
 80078b2:	f7fd ffb9 	bl	8005828 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078b6:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d202      	bcs.n	80078c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80078c0:	4a09      	ldr	r2, [pc, #36]	; (80078e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	6013      	str	r3, [r2, #0]
}
 80078c6:	bf00      	nop
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	20005978 	.word	0x20005978
 80078d4:	20005874 	.word	0x20005874
 80078d8:	2000597c 	.word	0x2000597c
 80078dc:	20005960 	.word	0x20005960
 80078e0:	20005930 	.word	0x20005930
 80078e4:	2000592c 	.word	0x2000592c
 80078e8:	20005994 	.word	0x20005994

080078ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	3b04      	subs	r3, #4
 80078fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3b04      	subs	r3, #4
 800790a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f023 0201 	bic.w	r2, r3, #1
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3b04      	subs	r3, #4
 800791a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800791c:	4a0c      	ldr	r2, [pc, #48]	; (8007950 <pxPortInitialiseStack+0x64>)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3b14      	subs	r3, #20
 8007926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3b04      	subs	r3, #4
 8007932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f06f 0202 	mvn.w	r2, #2
 800793a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3b20      	subs	r3, #32
 8007940:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007942:	68fb      	ldr	r3, [r7, #12]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	08007955 	.word	0x08007955

08007954 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800795e:	4b12      	ldr	r3, [pc, #72]	; (80079a8 <prvTaskExitError+0x54>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007966:	d00a      	beq.n	800797e <prvTaskExitError+0x2a>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	60fb      	str	r3, [r7, #12]
}
 800797a:	bf00      	nop
 800797c:	e7fe      	b.n	800797c <prvTaskExitError+0x28>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	60bb      	str	r3, [r7, #8]
}
 8007990:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007992:	bf00      	nop
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0fc      	beq.n	8007994 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800799a:	bf00      	nop
 800799c:	bf00      	nop
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	20000020 	.word	0x20000020
 80079ac:	00000000 	.word	0x00000000

080079b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079b0:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <pxCurrentTCBConst2>)
 80079b2:	6819      	ldr	r1, [r3, #0]
 80079b4:	6808      	ldr	r0, [r1, #0]
 80079b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ba:	f380 8809 	msr	PSP, r0
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f04f 0000 	mov.w	r0, #0
 80079c6:	f380 8811 	msr	BASEPRI, r0
 80079ca:	4770      	bx	lr
 80079cc:	f3af 8000 	nop.w

080079d0 <pxCurrentTCBConst2>:
 80079d0:	20005874 	.word	0x20005874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop

080079d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079d8:	4808      	ldr	r0, [pc, #32]	; (80079fc <prvPortStartFirstTask+0x24>)
 80079da:	6800      	ldr	r0, [r0, #0]
 80079dc:	6800      	ldr	r0, [r0, #0]
 80079de:	f380 8808 	msr	MSP, r0
 80079e2:	f04f 0000 	mov.w	r0, #0
 80079e6:	f380 8814 	msr	CONTROL, r0
 80079ea:	b662      	cpsie	i
 80079ec:	b661      	cpsie	f
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	df00      	svc	0
 80079f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079fa:	bf00      	nop
 80079fc:	e000ed08 	.word	0xe000ed08

08007a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a06:	4b46      	ldr	r3, [pc, #280]	; (8007b20 <xPortStartScheduler+0x120>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a46      	ldr	r2, [pc, #280]	; (8007b24 <xPortStartScheduler+0x124>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d10a      	bne.n	8007a26 <xPortStartScheduler+0x26>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	613b      	str	r3, [r7, #16]
}
 8007a22:	bf00      	nop
 8007a24:	e7fe      	b.n	8007a24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a26:	4b3e      	ldr	r3, [pc, #248]	; (8007b20 <xPortStartScheduler+0x120>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a3f      	ldr	r2, [pc, #252]	; (8007b28 <xPortStartScheduler+0x128>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d10a      	bne.n	8007a46 <xPortStartScheduler+0x46>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	60fb      	str	r3, [r7, #12]
}
 8007a42:	bf00      	nop
 8007a44:	e7fe      	b.n	8007a44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a46:	4b39      	ldr	r3, [pc, #228]	; (8007b2c <xPortStartScheduler+0x12c>)
 8007a48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	22ff      	movs	r2, #255	; 0xff
 8007a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	4b31      	ldr	r3, [pc, #196]	; (8007b30 <xPortStartScheduler+0x130>)
 8007a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a6e:	4b31      	ldr	r3, [pc, #196]	; (8007b34 <xPortStartScheduler+0x134>)
 8007a70:	2207      	movs	r2, #7
 8007a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a74:	e009      	b.n	8007a8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a76:	4b2f      	ldr	r3, [pc, #188]	; (8007b34 <xPortStartScheduler+0x134>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	4a2d      	ldr	r2, [pc, #180]	; (8007b34 <xPortStartScheduler+0x134>)
 8007a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a92:	2b80      	cmp	r3, #128	; 0x80
 8007a94:	d0ef      	beq.n	8007a76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a96:	4b27      	ldr	r3, [pc, #156]	; (8007b34 <xPortStartScheduler+0x134>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f1c3 0307 	rsb	r3, r3, #7
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	d00a      	beq.n	8007ab8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	60bb      	str	r3, [r7, #8]
}
 8007ab4:	bf00      	nop
 8007ab6:	e7fe      	b.n	8007ab6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ab8:	4b1e      	ldr	r3, [pc, #120]	; (8007b34 <xPortStartScheduler+0x134>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	021b      	lsls	r3, r3, #8
 8007abe:	4a1d      	ldr	r2, [pc, #116]	; (8007b34 <xPortStartScheduler+0x134>)
 8007ac0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ac2:	4b1c      	ldr	r3, [pc, #112]	; (8007b34 <xPortStartScheduler+0x134>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aca:	4a1a      	ldr	r2, [pc, #104]	; (8007b34 <xPortStartScheduler+0x134>)
 8007acc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ad6:	4b18      	ldr	r3, [pc, #96]	; (8007b38 <xPortStartScheduler+0x138>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a17      	ldr	r2, [pc, #92]	; (8007b38 <xPortStartScheduler+0x138>)
 8007adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ae0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ae2:	4b15      	ldr	r3, [pc, #84]	; (8007b38 <xPortStartScheduler+0x138>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a14      	ldr	r2, [pc, #80]	; (8007b38 <xPortStartScheduler+0x138>)
 8007ae8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007aec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007aee:	f000 f8dd 	bl	8007cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007af2:	4b12      	ldr	r3, [pc, #72]	; (8007b3c <xPortStartScheduler+0x13c>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007af8:	f000 f8fc 	bl	8007cf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007afc:	4b10      	ldr	r3, [pc, #64]	; (8007b40 <xPortStartScheduler+0x140>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a0f      	ldr	r2, [pc, #60]	; (8007b40 <xPortStartScheduler+0x140>)
 8007b02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b08:	f7ff ff66 	bl	80079d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b0c:	f7ff fa86 	bl	800701c <vTaskSwitchContext>
	prvTaskExitError();
 8007b10:	f7ff ff20 	bl	8007954 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	e000ed00 	.word	0xe000ed00
 8007b24:	410fc271 	.word	0x410fc271
 8007b28:	410fc270 	.word	0x410fc270
 8007b2c:	e000e400 	.word	0xe000e400
 8007b30:	200059a0 	.word	0x200059a0
 8007b34:	200059a4 	.word	0x200059a4
 8007b38:	e000ed20 	.word	0xe000ed20
 8007b3c:	20000020 	.word	0x20000020
 8007b40:	e000ef34 	.word	0xe000ef34

08007b44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	607b      	str	r3, [r7, #4]
}
 8007b5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b5e:	4b0f      	ldr	r3, [pc, #60]	; (8007b9c <vPortEnterCritical+0x58>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3301      	adds	r3, #1
 8007b64:	4a0d      	ldr	r2, [pc, #52]	; (8007b9c <vPortEnterCritical+0x58>)
 8007b66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b68:	4b0c      	ldr	r3, [pc, #48]	; (8007b9c <vPortEnterCritical+0x58>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d10f      	bne.n	8007b90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b70:	4b0b      	ldr	r3, [pc, #44]	; (8007ba0 <vPortEnterCritical+0x5c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	603b      	str	r3, [r7, #0]
}
 8007b8c:	bf00      	nop
 8007b8e:	e7fe      	b.n	8007b8e <vPortEnterCritical+0x4a>
	}
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	20000020 	.word	0x20000020
 8007ba0:	e000ed04 	.word	0xe000ed04

08007ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <vPortExitCritical+0x50>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10a      	bne.n	8007bc8 <vPortExitCritical+0x24>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	607b      	str	r3, [r7, #4]
}
 8007bc4:	bf00      	nop
 8007bc6:	e7fe      	b.n	8007bc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bc8:	4b0a      	ldr	r3, [pc, #40]	; (8007bf4 <vPortExitCritical+0x50>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	4a09      	ldr	r2, [pc, #36]	; (8007bf4 <vPortExitCritical+0x50>)
 8007bd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bd2:	4b08      	ldr	r3, [pc, #32]	; (8007bf4 <vPortExitCritical+0x50>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d105      	bne.n	8007be6 <vPortExitCritical+0x42>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	f383 8811 	msr	BASEPRI, r3
}
 8007be4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20000020 	.word	0x20000020
	...

08007c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c00:	f3ef 8009 	mrs	r0, PSP
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	4b15      	ldr	r3, [pc, #84]	; (8007c60 <pxCurrentTCBConst>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	f01e 0f10 	tst.w	lr, #16
 8007c10:	bf08      	it	eq
 8007c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1a:	6010      	str	r0, [r2, #0]
 8007c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c24:	f380 8811 	msr	BASEPRI, r0
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f7ff f9f4 	bl	800701c <vTaskSwitchContext>
 8007c34:	f04f 0000 	mov.w	r0, #0
 8007c38:	f380 8811 	msr	BASEPRI, r0
 8007c3c:	bc09      	pop	{r0, r3}
 8007c3e:	6819      	ldr	r1, [r3, #0]
 8007c40:	6808      	ldr	r0, [r1, #0]
 8007c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c46:	f01e 0f10 	tst.w	lr, #16
 8007c4a:	bf08      	it	eq
 8007c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c50:	f380 8809 	msr	PSP, r0
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	f3af 8000 	nop.w

08007c60 <pxCurrentTCBConst>:
 8007c60:	20005874 	.word	0x20005874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop

08007c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	607b      	str	r3, [r7, #4]
}
 8007c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c82:	f7ff f913 	bl	8006eac <xTaskIncrementTick>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c8c:	4b06      	ldr	r3, [pc, #24]	; (8007ca8 <SysTick_Handler+0x40>)
 8007c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	2300      	movs	r3, #0
 8007c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	f383 8811 	msr	BASEPRI, r3
}
 8007c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	e000ed04 	.word	0xe000ed04

08007cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cb0:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <vPortSetupTimerInterrupt+0x34>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <vPortSetupTimerInterrupt+0x38>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <vPortSetupTimerInterrupt+0x3c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a0a      	ldr	r2, [pc, #40]	; (8007cec <vPortSetupTimerInterrupt+0x40>)
 8007cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc6:	099b      	lsrs	r3, r3, #6
 8007cc8:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <vPortSetupTimerInterrupt+0x44>)
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cce:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <vPortSetupTimerInterrupt+0x34>)
 8007cd0:	2207      	movs	r2, #7
 8007cd2:	601a      	str	r2, [r3, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	e000e010 	.word	0xe000e010
 8007ce4:	e000e018 	.word	0xe000e018
 8007ce8:	20000000 	.word	0x20000000
 8007cec:	10624dd3 	.word	0x10624dd3
 8007cf0:	e000e014 	.word	0xe000e014

08007cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d04 <vPortEnableVFP+0x10>
 8007cf8:	6801      	ldr	r1, [r0, #0]
 8007cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cfe:	6001      	str	r1, [r0, #0]
 8007d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d02:	bf00      	nop
 8007d04:	e000ed88 	.word	0xe000ed88

08007d08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d0e:	f3ef 8305 	mrs	r3, IPSR
 8007d12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2b0f      	cmp	r3, #15
 8007d18:	d914      	bls.n	8007d44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d1a:	4a17      	ldr	r2, [pc, #92]	; (8007d78 <vPortValidateInterruptPriority+0x70>)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d24:	4b15      	ldr	r3, [pc, #84]	; (8007d7c <vPortValidateInterruptPriority+0x74>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	7afa      	ldrb	r2, [r7, #11]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d20a      	bcs.n	8007d44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	607b      	str	r3, [r7, #4]
}
 8007d40:	bf00      	nop
 8007d42:	e7fe      	b.n	8007d42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d44:	4b0e      	ldr	r3, [pc, #56]	; (8007d80 <vPortValidateInterruptPriority+0x78>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d4c:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <vPortValidateInterruptPriority+0x7c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d90a      	bls.n	8007d6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	603b      	str	r3, [r7, #0]
}
 8007d66:	bf00      	nop
 8007d68:	e7fe      	b.n	8007d68 <vPortValidateInterruptPriority+0x60>
	}
 8007d6a:	bf00      	nop
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	e000e3f0 	.word	0xe000e3f0
 8007d7c:	200059a0 	.word	0x200059a0
 8007d80:	e000ed0c 	.word	0xe000ed0c
 8007d84:	200059a4 	.word	0x200059a4

08007d88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08a      	sub	sp, #40	; 0x28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d90:	2300      	movs	r3, #0
 8007d92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d94:	f7fe ffbe 	bl	8006d14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d98:	4b5b      	ldr	r3, [pc, #364]	; (8007f08 <pvPortMalloc+0x180>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007da0:	f000 f920 	bl	8007fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007da4:	4b59      	ldr	r3, [pc, #356]	; (8007f0c <pvPortMalloc+0x184>)
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f040 8093 	bne.w	8007ed8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01d      	beq.n	8007df4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007db8:	2208      	movs	r2, #8
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d014      	beq.n	8007df4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f023 0307 	bic.w	r3, r3, #7
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <pvPortMalloc+0x6c>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	617b      	str	r3, [r7, #20]
}
 8007df0:	bf00      	nop
 8007df2:	e7fe      	b.n	8007df2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d06e      	beq.n	8007ed8 <pvPortMalloc+0x150>
 8007dfa:	4b45      	ldr	r3, [pc, #276]	; (8007f10 <pvPortMalloc+0x188>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d869      	bhi.n	8007ed8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e04:	4b43      	ldr	r3, [pc, #268]	; (8007f14 <pvPortMalloc+0x18c>)
 8007e06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e08:	4b42      	ldr	r3, [pc, #264]	; (8007f14 <pvPortMalloc+0x18c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e0e:	e004      	b.n	8007e1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d903      	bls.n	8007e2c <pvPortMalloc+0xa4>
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1f1      	bne.n	8007e10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e2c:	4b36      	ldr	r3, [pc, #216]	; (8007f08 <pvPortMalloc+0x180>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d050      	beq.n	8007ed8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2208      	movs	r2, #8
 8007e3c:	4413      	add	r3, r2
 8007e3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	1ad2      	subs	r2, r2, r3
 8007e50:	2308      	movs	r3, #8
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d91f      	bls.n	8007e98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <pvPortMalloc+0xf8>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	613b      	str	r3, [r7, #16]
}
 8007e7c:	bf00      	nop
 8007e7e:	e7fe      	b.n	8007e7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	1ad2      	subs	r2, r2, r3
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e92:	69b8      	ldr	r0, [r7, #24]
 8007e94:	f000 f908 	bl	80080a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e98:	4b1d      	ldr	r3, [pc, #116]	; (8007f10 <pvPortMalloc+0x188>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	4a1b      	ldr	r2, [pc, #108]	; (8007f10 <pvPortMalloc+0x188>)
 8007ea4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ea6:	4b1a      	ldr	r3, [pc, #104]	; (8007f10 <pvPortMalloc+0x188>)
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	4b1b      	ldr	r3, [pc, #108]	; (8007f18 <pvPortMalloc+0x190>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d203      	bcs.n	8007eba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007eb2:	4b17      	ldr	r3, [pc, #92]	; (8007f10 <pvPortMalloc+0x188>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a18      	ldr	r2, [pc, #96]	; (8007f18 <pvPortMalloc+0x190>)
 8007eb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	4b13      	ldr	r3, [pc, #76]	; (8007f0c <pvPortMalloc+0x184>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ece:	4b13      	ldr	r3, [pc, #76]	; (8007f1c <pvPortMalloc+0x194>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	4a11      	ldr	r2, [pc, #68]	; (8007f1c <pvPortMalloc+0x194>)
 8007ed6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ed8:	f7fe ff2a 	bl	8006d30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	f003 0307 	and.w	r3, r3, #7
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <pvPortMalloc+0x174>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	60fb      	str	r3, [r7, #12]
}
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <pvPortMalloc+0x172>
	return pvReturn;
 8007efc:	69fb      	ldr	r3, [r7, #28]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3728      	adds	r7, #40	; 0x28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	2000d9b0 	.word	0x2000d9b0
 8007f0c:	2000d9c4 	.word	0x2000d9c4
 8007f10:	2000d9b4 	.word	0x2000d9b4
 8007f14:	2000d9a8 	.word	0x2000d9a8
 8007f18:	2000d9b8 	.word	0x2000d9b8
 8007f1c:	2000d9bc 	.word	0x2000d9bc

08007f20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d04d      	beq.n	8007fce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f32:	2308      	movs	r3, #8
 8007f34:	425b      	negs	r3, r3
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	4413      	add	r3, r2
 8007f3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	4b24      	ldr	r3, [pc, #144]	; (8007fd8 <vPortFree+0xb8>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4013      	ands	r3, r2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <vPortFree+0x44>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	60fb      	str	r3, [r7, #12]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00a      	beq.n	8007f82 <vPortFree+0x62>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	60bb      	str	r3, [r7, #8]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	4b14      	ldr	r3, [pc, #80]	; (8007fd8 <vPortFree+0xb8>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d01e      	beq.n	8007fce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d11a      	bne.n	8007fce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	4b0e      	ldr	r3, [pc, #56]	; (8007fd8 <vPortFree+0xb8>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	401a      	ands	r2, r3
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fa8:	f7fe feb4 	bl	8006d14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	4b0a      	ldr	r3, [pc, #40]	; (8007fdc <vPortFree+0xbc>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	4a09      	ldr	r2, [pc, #36]	; (8007fdc <vPortFree+0xbc>)
 8007fb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fba:	6938      	ldr	r0, [r7, #16]
 8007fbc:	f000 f874 	bl	80080a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007fc0:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <vPortFree+0xc0>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	4a06      	ldr	r2, [pc, #24]	; (8007fe0 <vPortFree+0xc0>)
 8007fc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007fca:	f7fe feb1 	bl	8006d30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fce:	bf00      	nop
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	2000d9c4 	.word	0x2000d9c4
 8007fdc:	2000d9b4 	.word	0x2000d9b4
 8007fe0:	2000d9c0 	.word	0x2000d9c0

08007fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ff0:	4b27      	ldr	r3, [pc, #156]	; (8008090 <prvHeapInit+0xac>)
 8007ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00c      	beq.n	8008018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3307      	adds	r3, #7
 8008002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 0307 	bic.w	r3, r3, #7
 800800a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <prvHeapInit+0xac>)
 8008014:	4413      	add	r3, r2
 8008016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800801c:	4a1d      	ldr	r2, [pc, #116]	; (8008094 <prvHeapInit+0xb0>)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008022:	4b1c      	ldr	r3, [pc, #112]	; (8008094 <prvHeapInit+0xb0>)
 8008024:	2200      	movs	r2, #0
 8008026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	4413      	add	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008030:	2208      	movs	r2, #8
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	1a9b      	subs	r3, r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f023 0307 	bic.w	r3, r3, #7
 800803e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4a15      	ldr	r2, [pc, #84]	; (8008098 <prvHeapInit+0xb4>)
 8008044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008046:	4b14      	ldr	r3, [pc, #80]	; (8008098 <prvHeapInit+0xb4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2200      	movs	r2, #0
 800804c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800804e:	4b12      	ldr	r3, [pc, #72]	; (8008098 <prvHeapInit+0xb4>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	1ad2      	subs	r2, r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008064:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <prvHeapInit+0xb4>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	4a0a      	ldr	r2, [pc, #40]	; (800809c <prvHeapInit+0xb8>)
 8008072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <prvHeapInit+0xbc>)
 800807a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800807c:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <prvHeapInit+0xc0>)
 800807e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008082:	601a      	str	r2, [r3, #0]
}
 8008084:	bf00      	nop
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	200059a8 	.word	0x200059a8
 8008094:	2000d9a8 	.word	0x2000d9a8
 8008098:	2000d9b0 	.word	0x2000d9b0
 800809c:	2000d9b8 	.word	0x2000d9b8
 80080a0:	2000d9b4 	.word	0x2000d9b4
 80080a4:	2000d9c4 	.word	0x2000d9c4

080080a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080b0:	4b28      	ldr	r3, [pc, #160]	; (8008154 <prvInsertBlockIntoFreeList+0xac>)
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	e002      	b.n	80080bc <prvInsertBlockIntoFreeList+0x14>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d8f7      	bhi.n	80080b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	4413      	add	r3, r2
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d108      	bne.n	80080ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	441a      	add	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	441a      	add	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d118      	bne.n	8008130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	4b15      	ldr	r3, [pc, #84]	; (8008158 <prvInsertBlockIntoFreeList+0xb0>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d00d      	beq.n	8008126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	441a      	add	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	e008      	b.n	8008138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008126:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <prvInsertBlockIntoFreeList+0xb0>)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e003      	b.n	8008138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	429a      	cmp	r2, r3
 800813e:	d002      	beq.n	8008146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008146:	bf00      	nop
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	2000d9a8 	.word	0x2000d9a8
 8008158:	2000d9b0 	.word	0x2000d9b0

0800815c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	330c      	adds	r3, #12
 800816c:	461a      	mov	r2, r3
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f002 fc29 	bl	800a9c8 <tcpip_send_msg_wait_sem>
 8008176:	4603      	mov	r3, r0
 8008178:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800817a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d103      	bne.n	800818a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008188:	e001      	b.n	800818e <netconn_apimsg+0x32>
  }
  return err;
 800818a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08c      	sub	sp, #48	; 0x30
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	603a      	str	r2, [r7, #0]
 80081a2:	71fb      	strb	r3, [r7, #7]
 80081a4:	460b      	mov	r3, r1
 80081a6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f001 f95b 	bl	8009468 <netconn_alloc>
 80081b2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80081b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d054      	beq.n	8008264 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80081ba:	79bb      	ldrb	r3, [r7, #6]
 80081bc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80081be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80081c2:	f107 0308 	add.w	r3, r7, #8
 80081c6:	4619      	mov	r1, r3
 80081c8:	4829      	ldr	r0, [pc, #164]	; (8008270 <netconn_new_with_proto_and_callback+0xd8>)
 80081ca:	f7ff ffc7 	bl	800815c <netconn_apimsg>
 80081ce:	4603      	mov	r3, r0
 80081d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80081d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d043      	beq.n	8008264 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80081dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <netconn_new_with_proto_and_callback+0x58>
 80081e4:	4b23      	ldr	r3, [pc, #140]	; (8008274 <netconn_new_with_proto_and_callback+0xdc>)
 80081e6:	22a3      	movs	r2, #163	; 0xa3
 80081e8:	4923      	ldr	r1, [pc, #140]	; (8008278 <netconn_new_with_proto_and_callback+0xe0>)
 80081ea:	4824      	ldr	r0, [pc, #144]	; (800827c <netconn_new_with_proto_and_callback+0xe4>)
 80081ec:	f010 fea2 	bl	8018f34 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	3310      	adds	r3, #16
 80081f4:	4618      	mov	r0, r3
 80081f6:	f010 fb72 	bl	80188de <sys_mbox_valid>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d105      	bne.n	800820c <netconn_new_with_proto_and_callback+0x74>
 8008200:	4b1c      	ldr	r3, [pc, #112]	; (8008274 <netconn_new_with_proto_and_callback+0xdc>)
 8008202:	22a4      	movs	r2, #164	; 0xa4
 8008204:	491e      	ldr	r1, [pc, #120]	; (8008280 <netconn_new_with_proto_and_callback+0xe8>)
 8008206:	481d      	ldr	r0, [pc, #116]	; (800827c <netconn_new_with_proto_and_callback+0xe4>)
 8008208:	f010 fe94 	bl	8018f34 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	3314      	adds	r3, #20
 8008210:	4618      	mov	r0, r3
 8008212:	f010 fb64 	bl	80188de <sys_mbox_valid>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d005      	beq.n	8008228 <netconn_new_with_proto_and_callback+0x90>
 800821c:	4b15      	ldr	r3, [pc, #84]	; (8008274 <netconn_new_with_proto_and_callback+0xdc>)
 800821e:	22a6      	movs	r2, #166	; 0xa6
 8008220:	4918      	ldr	r1, [pc, #96]	; (8008284 <netconn_new_with_proto_and_callback+0xec>)
 8008222:	4816      	ldr	r0, [pc, #88]	; (800827c <netconn_new_with_proto_and_callback+0xe4>)
 8008224:	f010 fe86 	bl	8018f34 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	330c      	adds	r3, #12
 800822c:	4618      	mov	r0, r3
 800822e:	f010 fbe7 	bl	8018a00 <sys_sem_valid>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d105      	bne.n	8008244 <netconn_new_with_proto_and_callback+0xac>
 8008238:	4b0e      	ldr	r3, [pc, #56]	; (8008274 <netconn_new_with_proto_and_callback+0xdc>)
 800823a:	22a9      	movs	r2, #169	; 0xa9
 800823c:	4912      	ldr	r1, [pc, #72]	; (8008288 <netconn_new_with_proto_and_callback+0xf0>)
 800823e:	480f      	ldr	r0, [pc, #60]	; (800827c <netconn_new_with_proto_and_callback+0xe4>)
 8008240:	f010 fe78 	bl	8018f34 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008246:	330c      	adds	r3, #12
 8008248:	4618      	mov	r0, r3
 800824a:	f010 fbcc 	bl	80189e6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800824e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008250:	3310      	adds	r3, #16
 8008252:	4618      	mov	r0, r3
 8008254:	f010 fabc 	bl	80187d0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008258:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800825a:	2007      	movs	r0, #7
 800825c:	f003 ffb2 	bl	800c1c4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008260:	2300      	movs	r3, #0
 8008262:	e000      	b.n	8008266 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008266:	4618      	mov	r0, r3
 8008268:	3730      	adds	r7, #48	; 0x30
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	0800943d 	.word	0x0800943d
 8008274:	0801a474 	.word	0x0801a474
 8008278:	0801a4a8 	.word	0x0801a4a8
 800827c:	0801a4cc 	.word	0x0801a4cc
 8008280:	0801a4f4 	.word	0x0801a4f4
 8008284:	0801a50c 	.word	0x0801a50c
 8008288:	0801a530 	.word	0x0801a530

0800828c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08c      	sub	sp, #48	; 0x30
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	e014      	b.n	80082c8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80082a2:	2329      	movs	r3, #41	; 0x29
 80082a4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80082a6:	f107 030c 	add.w	r3, r7, #12
 80082aa:	4619      	mov	r1, r3
 80082ac:	4808      	ldr	r0, [pc, #32]	; (80082d0 <netconn_prepare_delete+0x44>)
 80082ae:	f7ff ff55 	bl	800815c <netconn_apimsg>
 80082b2:	4603      	mov	r3, r0
 80082b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80082b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <netconn_prepare_delete+0x3a>
    return err;
 80082c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80082c4:	e000      	b.n	80082c8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3730      	adds	r7, #48	; 0x30
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	080099a9 	.word	0x080099a9

080082d4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <netconn_delete+0x12>
    return ERR_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	e00d      	b.n	8008302 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff ffd0 	bl	800828c <netconn_prepare_delete>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80082f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d102      	bne.n	80082fe <netconn_delete+0x2a>
    netconn_free(conn);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 f923 	bl	8009544 <netconn_free>
  }
  return err;
 80082fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08e      	sub	sp, #56	; 0x38
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d109      	bne.n	8008334 <netconn_bind+0x28>
 8008320:	4b11      	ldr	r3, [pc, #68]	; (8008368 <netconn_bind+0x5c>)
 8008322:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008326:	4911      	ldr	r1, [pc, #68]	; (800836c <netconn_bind+0x60>)
 8008328:	4811      	ldr	r0, [pc, #68]	; (8008370 <netconn_bind+0x64>)
 800832a:	f010 fe03 	bl	8018f34 <iprintf>
 800832e:	f06f 030f 	mvn.w	r3, #15
 8008332:	e015      	b.n	8008360 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800833a:	4b0e      	ldr	r3, [pc, #56]	; (8008374 <netconn_bind+0x68>)
 800833c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800834a:	f107 0314 	add.w	r3, r7, #20
 800834e:	4619      	mov	r1, r3
 8008350:	4809      	ldr	r0, [pc, #36]	; (8008378 <netconn_bind+0x6c>)
 8008352:	f7ff ff03 	bl	800815c <netconn_apimsg>
 8008356:	4603      	mov	r3, r0
 8008358:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800835c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008360:	4618      	mov	r0, r3
 8008362:	3738      	adds	r7, #56	; 0x38
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	0801a474 	.word	0x0801a474
 800836c:	0801a5ac 	.word	0x0801a5ac
 8008370:	0801a4cc 	.word	0x0801a4cc
 8008374:	08028184 	.word	0x08028184
 8008378:	08009b71 	.word	0x08009b71

0800837c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08e      	sub	sp, #56	; 0x38
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	4613      	mov	r3, r2
 8008388:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d109      	bne.n	80083a4 <netconn_connect+0x28>
 8008390:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <netconn_connect+0x5c>)
 8008392:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008396:	4911      	ldr	r1, [pc, #68]	; (80083dc <netconn_connect+0x60>)
 8008398:	4811      	ldr	r0, [pc, #68]	; (80083e0 <netconn_connect+0x64>)
 800839a:	f010 fdcb 	bl	8018f34 <iprintf>
 800839e:	f06f 030f 	mvn.w	r3, #15
 80083a2:	e015      	b.n	80083d0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 80083aa:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <netconn_connect+0x68>)
 80083ac:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80083b6:	88fb      	ldrh	r3, [r7, #6]
 80083b8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 80083ba:	f107 0314 	add.w	r3, r7, #20
 80083be:	4619      	mov	r1, r3
 80083c0:	4809      	ldr	r0, [pc, #36]	; (80083e8 <netconn_connect+0x6c>)
 80083c2:	f7ff fecb 	bl	800815c <netconn_apimsg>
 80083c6:	4603      	mov	r3, r0
 80083c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80083cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3738      	adds	r7, #56	; 0x38
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	0801a474 	.word	0x0801a474
 80083dc:	0801a5e8 	.word	0x0801a5e8
 80083e0:	0801a4cc 	.word	0x0801a4cc
 80083e4:	08028184 	.word	0x08028184
 80083e8:	08009d05 	.word	0x08009d05

080083ec <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08c      	sub	sp, #48	; 0x30
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d109      	bne.n	8008412 <netconn_listen_with_backlog+0x26>
 80083fe:	4b0d      	ldr	r3, [pc, #52]	; (8008434 <netconn_listen_with_backlog+0x48>)
 8008400:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008404:	490c      	ldr	r1, [pc, #48]	; (8008438 <netconn_listen_with_backlog+0x4c>)
 8008406:	480d      	ldr	r0, [pc, #52]	; (800843c <netconn_listen_with_backlog+0x50>)
 8008408:	f010 fd94 	bl	8018f34 <iprintf>
 800840c:	f06f 030f 	mvn.w	r3, #15
 8008410:	e00c      	b.n	800842c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008416:	f107 030c 	add.w	r3, r7, #12
 800841a:	4619      	mov	r1, r3
 800841c:	4808      	ldr	r0, [pc, #32]	; (8008440 <netconn_listen_with_backlog+0x54>)
 800841e:	f7ff fe9d 	bl	800815c <netconn_apimsg>
 8008422:	4603      	mov	r3, r0
 8008424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008428:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800842c:	4618      	mov	r0, r3
 800842e:	3730      	adds	r7, #48	; 0x30
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	0801a474 	.word	0x0801a474
 8008438:	0801a62c 	.word	0x0801a62c
 800843c:	0801a4cc 	.word	0x0801a4cc
 8008440:	08009e81 	.word	0x08009e81

08008444 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d109      	bne.n	8008468 <netconn_accept+0x24>
 8008454:	4b3d      	ldr	r3, [pc, #244]	; (800854c <netconn_accept+0x108>)
 8008456:	f240 12e1 	movw	r2, #481	; 0x1e1
 800845a:	493d      	ldr	r1, [pc, #244]	; (8008550 <netconn_accept+0x10c>)
 800845c:	483d      	ldr	r0, [pc, #244]	; (8008554 <netconn_accept+0x110>)
 800845e:	f010 fd69 	bl	8018f34 <iprintf>
 8008462:	f06f 030f 	mvn.w	r3, #15
 8008466:	e06c      	b.n	8008542 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d109      	bne.n	8008488 <netconn_accept+0x44>
 8008474:	4b35      	ldr	r3, [pc, #212]	; (800854c <netconn_accept+0x108>)
 8008476:	f240 12e3 	movw	r2, #483	; 0x1e3
 800847a:	4937      	ldr	r1, [pc, #220]	; (8008558 <netconn_accept+0x114>)
 800847c:	4835      	ldr	r0, [pc, #212]	; (8008554 <netconn_accept+0x110>)
 800847e:	f010 fd59 	bl	8018f34 <iprintf>
 8008482:	f06f 030f 	mvn.w	r3, #15
 8008486:	e05c      	b.n	8008542 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fb6c 	bl	8008b66 <netconn_err>
 800848e:	4603      	mov	r3, r0
 8008490:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008492:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800849a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800849e:	e050      	b.n	8008542 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3314      	adds	r3, #20
 80084a4:	4618      	mov	r0, r3
 80084a6:	f010 fa1a 	bl	80188de <sys_mbox_valid>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <netconn_accept+0x78>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	7f1b      	ldrb	r3, [r3, #28]
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80084bc:	f06f 030e 	mvn.w	r3, #14
 80084c0:	e03f      	b.n	8008542 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	7f1b      	ldrb	r3, [r3, #28]
 80084c6:	f003 0302 	and.w	r3, r3, #2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00e      	beq.n	80084ec <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	3314      	adds	r3, #20
 80084d2:	f107 020c 	add.w	r2, r7, #12
 80084d6:	4611      	mov	r1, r2
 80084d8:	4618      	mov	r0, r3
 80084da:	f010 f9e4 	bl	80188a6 <sys_arch_mbox_tryfetch>
 80084de:	4603      	mov	r3, r0
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e4:	d10a      	bne.n	80084fc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80084e6:	f06f 0306 	mvn.w	r3, #6
 80084ea:	e02a      	b.n	8008542 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3314      	adds	r3, #20
 80084f0:	f107 010c 	add.w	r1, r7, #12
 80084f4:	2200      	movs	r2, #0
 80084f6:	4618      	mov	r0, r3
 80084f8:	f010 f996 	bl	8018828 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <netconn_accept+0xcc>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	2200      	movs	r2, #0
 800850a:	2101      	movs	r1, #1
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f107 0213 	add.w	r2, r7, #19
 8008516:	4611      	mov	r1, r2
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fb75 	bl	8008c08 <lwip_netconn_is_err_msg>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008524:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008528:	e00b      	b.n	8008542 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d102      	bne.n	8008536 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008530:	f06f 030e 	mvn.w	r3, #14
 8008534:	e005      	b.n	8008542 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008540:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	0801a474 	.word	0x0801a474
 8008550:	0801a64c 	.word	0x0801a64c
 8008554:	0801a4cc 	.word	0x0801a4cc
 8008558:	0801a66c 	.word	0x0801a66c

0800855c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	4613      	mov	r3, r2
 8008568:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d109      	bne.n	8008588 <netconn_recv_data+0x2c>
 8008574:	4b58      	ldr	r3, [pc, #352]	; (80086d8 <netconn_recv_data+0x17c>)
 8008576:	f44f 7212 	mov.w	r2, #584	; 0x248
 800857a:	4958      	ldr	r1, [pc, #352]	; (80086dc <netconn_recv_data+0x180>)
 800857c:	4858      	ldr	r0, [pc, #352]	; (80086e0 <netconn_recv_data+0x184>)
 800857e:	f010 fcd9 	bl	8018f34 <iprintf>
 8008582:	f06f 030f 	mvn.w	r3, #15
 8008586:	e0a2      	b.n	80086ce <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d109      	bne.n	80085a8 <netconn_recv_data+0x4c>
 8008594:	4b50      	ldr	r3, [pc, #320]	; (80086d8 <netconn_recv_data+0x17c>)
 8008596:	f240 224a 	movw	r2, #586	; 0x24a
 800859a:	4952      	ldr	r1, [pc, #328]	; (80086e4 <netconn_recv_data+0x188>)
 800859c:	4850      	ldr	r0, [pc, #320]	; (80086e0 <netconn_recv_data+0x184>)
 800859e:	f010 fcc9 	bl	8018f34 <iprintf>
 80085a2:	f06f 030f 	mvn.w	r3, #15
 80085a6:	e092      	b.n	80086ce <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	3310      	adds	r3, #16
 80085ac:	4618      	mov	r0, r3
 80085ae:	f010 f996 	bl	80188de <sys_mbox_valid>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10e      	bne.n	80085d6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 fad4 	bl	8008b66 <netconn_err>
 80085be:	4603      	mov	r3, r0
 80085c0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80085c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d002      	beq.n	80085d0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80085ca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80085ce:	e07e      	b.n	80086ce <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80085d0:	f06f 030a 	mvn.w	r3, #10
 80085d4:	e07b      	b.n	80086ce <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	7f1b      	ldrb	r3, [r3, #28]
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10f      	bne.n	8008602 <netconn_recv_data+0xa6>
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	7f1b      	ldrb	r3, [r3, #28]
 80085f0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d104      	bne.n	8008602 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d023      	beq.n	800864a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3310      	adds	r3, #16
 8008606:	f107 0218 	add.w	r2, r7, #24
 800860a:	4611      	mov	r1, r2
 800860c:	4618      	mov	r0, r3
 800860e:	f010 f94a 	bl	80188a6 <sys_arch_mbox_tryfetch>
 8008612:	4603      	mov	r3, r0
 8008614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008618:	d11f      	bne.n	800865a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 faa3 	bl	8008b66 <netconn_err>
 8008620:	4603      	mov	r3, r0
 8008622:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008624:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800862c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008630:	e04d      	b.n	80086ce <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	7f1b      	ldrb	r3, [r3, #28]
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800863e:	f06f 030a 	mvn.w	r3, #10
 8008642:	e044      	b.n	80086ce <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008644:	f06f 0306 	mvn.w	r3, #6
 8008648:	e041      	b.n	80086ce <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3310      	adds	r3, #16
 800864e:	f107 0118 	add.w	r1, r7, #24
 8008652:	2200      	movs	r2, #0
 8008654:	4618      	mov	r0, r3
 8008656:	f010 f8e7 	bl	8018828 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008662:	2b10      	cmp	r3, #16
 8008664:	d117      	bne.n	8008696 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	f107 0217 	add.w	r2, r7, #23
 800866c:	4611      	mov	r1, r2
 800866e:	4618      	mov	r0, r3
 8008670:	f000 faca 	bl	8008c08 <lwip_netconn_is_err_msg>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d009      	beq.n	800868e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800867a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800867e:	f113 0f0f 	cmn.w	r3, #15
 8008682:	d101      	bne.n	8008688 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	e022      	b.n	80086ce <netconn_recv_data+0x172>
      }
      return err;
 8008688:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800868c:	e01f      	b.n	80086ce <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	891b      	ldrh	r3, [r3, #8]
 8008692:	83fb      	strh	r3, [r7, #30]
 8008694:	e00d      	b.n	80086b2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d106      	bne.n	80086aa <netconn_recv_data+0x14e>
 800869c:	4b0e      	ldr	r3, [pc, #56]	; (80086d8 <netconn_recv_data+0x17c>)
 800869e:	f240 2291 	movw	r2, #657	; 0x291
 80086a2:	4911      	ldr	r1, [pc, #68]	; (80086e8 <netconn_recv_data+0x18c>)
 80086a4:	480e      	ldr	r0, [pc, #56]	; (80086e0 <netconn_recv_data+0x184>)
 80086a6:	f010 fc45 	bl	8018f34 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	891b      	ldrh	r3, [r3, #8]
 80086b0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <netconn_recv_data+0x16a>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086be:	8bfa      	ldrh	r2, [r7, #30]
 80086c0:	2101      	movs	r1, #1
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3720      	adds	r7, #32
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	0801a474 	.word	0x0801a474
 80086dc:	0801a68c 	.word	0x0801a68c
 80086e0:	0801a4cc 	.word	0x0801a4cc
 80086e4:	0801a6ac 	.word	0x0801a6ac
 80086e8:	0801a6c8 	.word	0x0801a6c8

080086ec <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <netconn_tcp_recvd_msg+0x1e>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008706:	2b10      	cmp	r3, #16
 8008708:	d009      	beq.n	800871e <netconn_tcp_recvd_msg+0x32>
 800870a:	4b0c      	ldr	r3, [pc, #48]	; (800873c <netconn_tcp_recvd_msg+0x50>)
 800870c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008710:	490b      	ldr	r1, [pc, #44]	; (8008740 <netconn_tcp_recvd_msg+0x54>)
 8008712:	480c      	ldr	r0, [pc, #48]	; (8008744 <netconn_tcp_recvd_msg+0x58>)
 8008714:	f010 fc0e 	bl	8018f34 <iprintf>
 8008718:	f06f 030f 	mvn.w	r3, #15
 800871c:	e00a      	b.n	8008734 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	4806      	ldr	r0, [pc, #24]	; (8008748 <netconn_tcp_recvd_msg+0x5c>)
 800872e:	f7ff fd15 	bl	800815c <netconn_apimsg>
 8008732:	4603      	mov	r3, r0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	0801a474 	.word	0x0801a474
 8008740:	0801a6d4 	.word	0x0801a6d4
 8008744:	0801a4cc 	.word	0x0801a4cc
 8008748:	08009fb1 	.word	0x08009fb1

0800874c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b090      	sub	sp, #64	; 0x40
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	4613      	mov	r3, r2
 8008758:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3310      	adds	r3, #16
 800875e:	4618      	mov	r0, r3
 8008760:	f010 f8bd 	bl	80188de <sys_mbox_valid>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800876a:	f06f 030a 	mvn.w	r3, #10
 800876e:	e06d      	b.n	800884c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	7f1b      	ldrb	r3, [r3, #28]
 8008774:	b25b      	sxtb	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	da07      	bge.n	800878a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	7f1b      	ldrb	r3, [r3, #28]
 800877e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008782:	b2da      	uxtb	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008788:	e039      	b.n	80087fe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	461a      	mov	r2, r3
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f7ff fee3 	bl	800855c <netconn_recv_data>
 8008796:	4603      	mov	r3, r0
 8008798:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800879c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80087a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80087a8:	e050      	b.n	800884c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	f003 0308 	and.w	r3, r3, #8
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10e      	bne.n	80087d8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80087ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <netconn_recv_data_tcp+0x7a>
 80087c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c2:	891b      	ldrh	r3, [r3, #8]
 80087c4:	e000      	b.n	80087c8 <netconn_recv_data_tcp+0x7c>
 80087c6:	2301      	movs	r3, #1
 80087c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80087ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80087cc:	f107 0214 	add.w	r2, r7, #20
 80087d0:	4619      	mov	r1, r3
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f7ff ff8a 	bl	80086ec <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80087d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d134      	bne.n	8008848 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	f003 0310 	and.w	r3, r3, #16
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d009      	beq.n	80087fc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	7f1b      	ldrb	r3, [r3, #28]
 80087ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80087f6:	f06f 0306 	mvn.w	r3, #6
 80087fa:	e027      	b.n	800884c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80087fc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008802:	2b00      	cmp	r3, #0
 8008804:	d005      	beq.n	8008812 <netconn_recv_data_tcp+0xc6>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	2200      	movs	r2, #0
 800880c:	2101      	movs	r1, #1
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10f      	bne.n	800883a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 f9a3 	bl	8008b66 <netconn_err>
 8008820:	4603      	mov	r3, r0
 8008822:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008826:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <netconn_recv_data_tcp+0xe8>
          return err;
 800882e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008832:	e00b      	b.n	800884c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008834:	f06f 030d 	mvn.w	r3, #13
 8008838:	e008      	b.n	800884c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800883a:	2101      	movs	r1, #1
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 f955 	bl	8008aec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008842:	f06f 030e 	mvn.w	r3, #14
 8008846:	e001      	b.n	800884c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008848:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800884c:	4618      	mov	r0, r3
 800884e:	3740      	adds	r7, #64	; 0x40
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800885e:	2300      	movs	r3, #0
 8008860:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d109      	bne.n	800887c <netconn_recv+0x28>
 8008868:	4b32      	ldr	r3, [pc, #200]	; (8008934 <netconn_recv+0xe0>)
 800886a:	f240 3263 	movw	r2, #867	; 0x363
 800886e:	4932      	ldr	r1, [pc, #200]	; (8008938 <netconn_recv+0xe4>)
 8008870:	4832      	ldr	r0, [pc, #200]	; (800893c <netconn_recv+0xe8>)
 8008872:	f010 fb5f 	bl	8018f34 <iprintf>
 8008876:	f06f 030f 	mvn.w	r3, #15
 800887a:	e056      	b.n	800892a <netconn_recv+0xd6>
  *new_buf = NULL;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d109      	bne.n	800889c <netconn_recv+0x48>
 8008888:	4b2a      	ldr	r3, [pc, #168]	; (8008934 <netconn_recv+0xe0>)
 800888a:	f240 3265 	movw	r2, #869	; 0x365
 800888e:	492c      	ldr	r1, [pc, #176]	; (8008940 <netconn_recv+0xec>)
 8008890:	482a      	ldr	r0, [pc, #168]	; (800893c <netconn_recv+0xe8>)
 8008892:	f010 fb4f 	bl	8018f34 <iprintf>
 8008896:	f06f 030f 	mvn.w	r3, #15
 800889a:	e046      	b.n	800892a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088a4:	2b10      	cmp	r3, #16
 80088a6:	d13a      	bne.n	800891e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80088ac:	2006      	movs	r0, #6
 80088ae:	f003 fc13 	bl	800c0d8 <memp_malloc>
 80088b2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d102      	bne.n	80088c0 <netconn_recv+0x6c>
      return ERR_MEM;
 80088ba:	f04f 33ff 	mov.w	r3, #4294967295
 80088be:	e034      	b.n	800892a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80088c0:	f107 030c 	add.w	r3, r7, #12
 80088c4:	2200      	movs	r2, #0
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff ff3f 	bl	800874c <netconn_recv_data_tcp>
 80088ce:	4603      	mov	r3, r0
 80088d0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80088d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d006      	beq.n	80088e8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80088da:	6979      	ldr	r1, [r7, #20]
 80088dc:	2006      	movs	r0, #6
 80088de:	f003 fc71 	bl	800c1c4 <memp_free>
      return err;
 80088e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088e6:	e020      	b.n	800892a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d106      	bne.n	80088fc <netconn_recv+0xa8>
 80088ee:	4b11      	ldr	r3, [pc, #68]	; (8008934 <netconn_recv+0xe0>)
 80088f0:	f240 3279 	movw	r2, #889	; 0x379
 80088f4:	4913      	ldr	r1, [pc, #76]	; (8008944 <netconn_recv+0xf0>)
 80088f6:	4811      	ldr	r0, [pc, #68]	; (800893c <netconn_recv+0xe8>)
 80088f8:	f010 fb1c 	bl	8018f34 <iprintf>

    buf->p = p;
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2200      	movs	r2, #0
 800890c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2200      	movs	r2, #0
 8008912:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	e005      	b.n	800892a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800891e:	2200      	movs	r2, #0
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff fe1a 	bl	800855c <netconn_recv_data>
 8008928:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	0801a474 	.word	0x0801a474
 8008938:	0801a68c 	.word	0x0801a68c
 800893c:	0801a4cc 	.word	0x0801a4cc
 8008940:	0801a6ac 	.word	0x0801a6ac
 8008944:	0801a724 	.word	0x0801a724

08008948 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b088      	sub	sp, #32
 800894c:	af02      	add	r7, sp, #8
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
 8008954:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800895e:	78fa      	ldrb	r2, [r7, #3]
 8008960:	f107 0110 	add.w	r1, r7, #16
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	2201      	movs	r2, #1
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 f805 	bl	800897c <netconn_write_vectors_partly>
 8008972:	4603      	mov	r3, r0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b092      	sub	sp, #72	; 0x48
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	4611      	mov	r1, r2
 8008988:	461a      	mov	r2, r3
 800898a:	460b      	mov	r3, r1
 800898c:	80fb      	strh	r3, [r7, #6]
 800898e:	4613      	mov	r3, r2
 8008990:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <netconn_write_vectors_partly+0x30>
 8008998:	4b4e      	ldr	r3, [pc, #312]	; (8008ad4 <netconn_write_vectors_partly+0x158>)
 800899a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800899e:	494e      	ldr	r1, [pc, #312]	; (8008ad8 <netconn_write_vectors_partly+0x15c>)
 80089a0:	484e      	ldr	r0, [pc, #312]	; (8008adc <netconn_write_vectors_partly+0x160>)
 80089a2:	f010 fac7 	bl	8018f34 <iprintf>
 80089a6:	f06f 030f 	mvn.w	r3, #15
 80089aa:	e08e      	b.n	8008aca <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089b4:	2b10      	cmp	r3, #16
 80089b6:	d009      	beq.n	80089cc <netconn_write_vectors_partly+0x50>
 80089b8:	4b46      	ldr	r3, [pc, #280]	; (8008ad4 <netconn_write_vectors_partly+0x158>)
 80089ba:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80089be:	4948      	ldr	r1, [pc, #288]	; (8008ae0 <netconn_write_vectors_partly+0x164>)
 80089c0:	4846      	ldr	r0, [pc, #280]	; (8008adc <netconn_write_vectors_partly+0x160>)
 80089c2:	f010 fab7 	bl	8018f34 <iprintf>
 80089c6:	f06f 0305 	mvn.w	r3, #5
 80089ca:	e07e      	b.n	8008aca <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	7f1b      	ldrb	r3, [r3, #28]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d104      	bne.n	80089e2 <netconn_write_vectors_partly+0x66>
 80089d8:	797b      	ldrb	r3, [r7, #5]
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <netconn_write_vectors_partly+0x6a>
 80089e2:	2301      	movs	r3, #1
 80089e4:	e000      	b.n	80089e8 <netconn_write_vectors_partly+0x6c>
 80089e6:	2300      	movs	r3, #0
 80089e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80089ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d005      	beq.n	8008a00 <netconn_write_vectors_partly+0x84>
 80089f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d102      	bne.n	8008a00 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80089fa:	f06f 0305 	mvn.w	r3, #5
 80089fe:	e064      	b.n	8008aca <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008a04:	2300      	movs	r3, #0
 8008a06:	643b      	str	r3, [r7, #64]	; 0x40
 8008a08:	e015      	b.n	8008a36 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a0c:	00db      	lsls	r3, r3, #3
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	4413      	add	r3, r2
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a16:	4413      	add	r3, r2
 8008a18:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a1c:	00db      	lsls	r3, r3, #3
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	4413      	add	r3, r2
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d202      	bcs.n	8008a30 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008a2a:	f06f 0305 	mvn.w	r3, #5
 8008a2e:	e04c      	b.n	8008aca <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a32:	3301      	adds	r3, #1
 8008a34:	643b      	str	r3, [r7, #64]	; 0x40
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	dbe5      	blt.n	8008a0a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	e040      	b.n	8008aca <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	da0a      	bge.n	8008a64 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d102      	bne.n	8008a5a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008a54:	f06f 0305 	mvn.w	r3, #5
 8008a58:	e037      	b.n	8008aca <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008a5a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008a5e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a62:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008a6c:	88fb      	ldrh	r3, [r7, #6]
 8008a6e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008a74:	797b      	ldrb	r3, [r7, #5]
 8008a76:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008a82:	f107 0314 	add.w	r3, r7, #20
 8008a86:	4619      	mov	r1, r3
 8008a88:	4816      	ldr	r0, [pc, #88]	; (8008ae4 <netconn_write_vectors_partly+0x168>)
 8008a8a:	f7ff fb67 	bl	800815c <netconn_apimsg>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008a94:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d114      	bne.n	8008ac6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008aa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10a      	bne.n	8008ac6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d006      	beq.n	8008ac6 <netconn_write_vectors_partly+0x14a>
 8008ab8:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <netconn_write_vectors_partly+0x158>)
 8008aba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008abe:	490a      	ldr	r1, [pc, #40]	; (8008ae8 <netconn_write_vectors_partly+0x16c>)
 8008ac0:	4806      	ldr	r0, [pc, #24]	; (8008adc <netconn_write_vectors_partly+0x160>)
 8008ac2:	f010 fa37 	bl	8018f34 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008ac6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3748      	adds	r7, #72	; 0x48
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	0801a474 	.word	0x0801a474
 8008ad8:	0801a74c 	.word	0x0801a74c
 8008adc:	0801a4cc 	.word	0x0801a4cc
 8008ae0:	0801a768 	.word	0x0801a768
 8008ae4:	0800a3b5 	.word	0x0800a3b5
 8008ae8:	0801a78c 	.word	0x0801a78c

08008aec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08c      	sub	sp, #48	; 0x30
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d109      	bne.n	8008b12 <netconn_close_shutdown+0x26>
 8008afe:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <netconn_close_shutdown+0x50>)
 8008b00:	f240 4247 	movw	r2, #1095	; 0x447
 8008b04:	490e      	ldr	r1, [pc, #56]	; (8008b40 <netconn_close_shutdown+0x54>)
 8008b06:	480f      	ldr	r0, [pc, #60]	; (8008b44 <netconn_close_shutdown+0x58>)
 8008b08:	f010 fa14 	bl	8018f34 <iprintf>
 8008b0c:	f06f 030f 	mvn.w	r3, #15
 8008b10:	e010      	b.n	8008b34 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008b16:	78fb      	ldrb	r3, [r7, #3]
 8008b18:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008b1a:	2329      	movs	r3, #41	; 0x29
 8008b1c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008b1e:	f107 030c 	add.w	r3, r7, #12
 8008b22:	4619      	mov	r1, r3
 8008b24:	4808      	ldr	r0, [pc, #32]	; (8008b48 <netconn_close_shutdown+0x5c>)
 8008b26:	f7ff fb19 	bl	800815c <netconn_apimsg>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008b30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3730      	adds	r7, #48	; 0x30
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	0801a474 	.word	0x0801a474
 8008b40:	0801a7b0 	.word	0x0801a7b0
 8008b44:	0801a4cc 	.word	0x0801a4cc
 8008b48:	0800a4cd 	.word	0x0800a4cd

08008b4c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008b54:	2103      	movs	r1, #3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff ffc8 	bl	8008aec <netconn_close_shutdown>
 8008b5c:	4603      	mov	r3, r0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <netconn_err+0x12>
    return ERR_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	e00d      	b.n	8008b94 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008b78:	f00f ffcc 	bl	8018b14 <sys_arch_protect>
 8008b7c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	7a1b      	ldrb	r3, [r3, #8]
 8008b82:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f00f ffd0 	bl	8018b30 <sys_arch_unprotect>
  return err;
 8008b90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008baa:	f113 0f0d 	cmn.w	r3, #13
 8008bae:	d009      	beq.n	8008bc4 <lwip_netconn_err_to_msg+0x28>
 8008bb0:	f113 0f0d 	cmn.w	r3, #13
 8008bb4:	dc0c      	bgt.n	8008bd0 <lwip_netconn_err_to_msg+0x34>
 8008bb6:	f113 0f0f 	cmn.w	r3, #15
 8008bba:	d007      	beq.n	8008bcc <lwip_netconn_err_to_msg+0x30>
 8008bbc:	f113 0f0e 	cmn.w	r3, #14
 8008bc0:	d002      	beq.n	8008bc8 <lwip_netconn_err_to_msg+0x2c>
 8008bc2:	e005      	b.n	8008bd0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008bc4:	4b0a      	ldr	r3, [pc, #40]	; (8008bf0 <lwip_netconn_err_to_msg+0x54>)
 8008bc6:	e00e      	b.n	8008be6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008bc8:	4b0a      	ldr	r3, [pc, #40]	; (8008bf4 <lwip_netconn_err_to_msg+0x58>)
 8008bca:	e00c      	b.n	8008be6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <lwip_netconn_err_to_msg+0x5c>)
 8008bce:	e00a      	b.n	8008be6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d005      	beq.n	8008be4 <lwip_netconn_err_to_msg+0x48>
 8008bd8:	4b08      	ldr	r3, [pc, #32]	; (8008bfc <lwip_netconn_err_to_msg+0x60>)
 8008bda:	227d      	movs	r2, #125	; 0x7d
 8008bdc:	4908      	ldr	r1, [pc, #32]	; (8008c00 <lwip_netconn_err_to_msg+0x64>)
 8008bde:	4809      	ldr	r0, [pc, #36]	; (8008c04 <lwip_netconn_err_to_msg+0x68>)
 8008be0:	f010 f9a8 	bl	8018f34 <iprintf>
      return NULL;
 8008be4:	2300      	movs	r3, #0
  }
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	0801df28 	.word	0x0801df28
 8008bf4:	0801df29 	.word	0x0801df29
 8008bf8:	0801df2a 	.word	0x0801df2a
 8008bfc:	0801a7cc 	.word	0x0801a7cc
 8008c00:	0801a800 	.word	0x0801a800
 8008c04:	0801a810 	.word	0x0801a810

08008c08 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <lwip_netconn_is_err_msg+0x1c>
 8008c18:	4b12      	ldr	r3, [pc, #72]	; (8008c64 <lwip_netconn_is_err_msg+0x5c>)
 8008c1a:	2285      	movs	r2, #133	; 0x85
 8008c1c:	4912      	ldr	r1, [pc, #72]	; (8008c68 <lwip_netconn_is_err_msg+0x60>)
 8008c1e:	4813      	ldr	r0, [pc, #76]	; (8008c6c <lwip_netconn_is_err_msg+0x64>)
 8008c20:	f010 f988 	bl	8018f34 <iprintf>

  if (msg == &netconn_aborted) {
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a12      	ldr	r2, [pc, #72]	; (8008c70 <lwip_netconn_is_err_msg+0x68>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d104      	bne.n	8008c36 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	22f3      	movs	r2, #243	; 0xf3
 8008c30:	701a      	strb	r2, [r3, #0]
    return 1;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e012      	b.n	8008c5c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a0e      	ldr	r2, [pc, #56]	; (8008c74 <lwip_netconn_is_err_msg+0x6c>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d104      	bne.n	8008c48 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	22f2      	movs	r2, #242	; 0xf2
 8008c42:	701a      	strb	r2, [r3, #0]
    return 1;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e009      	b.n	8008c5c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a0b      	ldr	r2, [pc, #44]	; (8008c78 <lwip_netconn_is_err_msg+0x70>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d104      	bne.n	8008c5a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	22f1      	movs	r2, #241	; 0xf1
 8008c54:	701a      	strb	r2, [r3, #0]
    return 1;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e000      	b.n	8008c5c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	0801a7cc 	.word	0x0801a7cc
 8008c68:	0801a838 	.word	0x0801a838
 8008c6c:	0801a810 	.word	0x0801a810
 8008c70:	0801df28 	.word	0x0801df28
 8008c74:	0801df29 	.word	0x0801df29
 8008c78:	0801df2a 	.word	0x0801df2a

08008c7c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
 8008c88:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d105      	bne.n	8008c9c <recv_udp+0x20>
 8008c90:	4b34      	ldr	r3, [pc, #208]	; (8008d64 <recv_udp+0xe8>)
 8008c92:	22e5      	movs	r2, #229	; 0xe5
 8008c94:	4934      	ldr	r1, [pc, #208]	; (8008d68 <recv_udp+0xec>)
 8008c96:	4835      	ldr	r0, [pc, #212]	; (8008d6c <recv_udp+0xf0>)
 8008c98:	f010 f94c 	bl	8018f34 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d105      	bne.n	8008cae <recv_udp+0x32>
 8008ca2:	4b30      	ldr	r3, [pc, #192]	; (8008d64 <recv_udp+0xe8>)
 8008ca4:	22e6      	movs	r2, #230	; 0xe6
 8008ca6:	4932      	ldr	r1, [pc, #200]	; (8008d70 <recv_udp+0xf4>)
 8008ca8:	4830      	ldr	r0, [pc, #192]	; (8008d6c <recv_udp+0xf0>)
 8008caa:	f010 f943 	bl	8018f34 <iprintf>
  conn = (struct netconn *)arg;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d103      	bne.n	8008cc0 <recv_udp+0x44>
    pbuf_free(p);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f004 f933 	bl	800cf24 <pbuf_free>
    return;
 8008cbe:	e04d      	b.n	8008d5c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d005      	beq.n	8008cd6 <recv_udp+0x5a>
 8008cca:	4b26      	ldr	r3, [pc, #152]	; (8008d64 <recv_udp+0xe8>)
 8008ccc:	22ee      	movs	r2, #238	; 0xee
 8008cce:	4929      	ldr	r1, [pc, #164]	; (8008d74 <recv_udp+0xf8>)
 8008cd0:	4826      	ldr	r0, [pc, #152]	; (8008d6c <recv_udp+0xf0>)
 8008cd2:	f010 f92f 	bl	8018f34 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	3310      	adds	r3, #16
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f00f fdff 	bl	80188de <sys_mbox_valid>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d103      	bne.n	8008cee <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f004 f91c 	bl	800cf24 <pbuf_free>
    return;
 8008cec:	e036      	b.n	8008d5c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008cee:	2006      	movs	r0, #6
 8008cf0:	f003 f9f2 	bl	800c0d8 <memp_malloc>
 8008cf4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d103      	bne.n	8008d04 <recv_udp+0x88>
    pbuf_free(p);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f004 f911 	bl	800cf24 <pbuf_free>
    return;
 8008d02:	e02b      	b.n	8008d5c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d002      	beq.n	8008d1c <recv_udp+0xa0>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	e000      	b.n	8008d1e <recv_udp+0xa2>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008d26:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	891b      	ldrh	r3, [r3, #8]
 8008d2c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	3310      	adds	r3, #16
 8008d32:	69b9      	ldr	r1, [r7, #24]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f00f fd5d 	bl	80187f4 <sys_mbox_trypost>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008d40:	69b8      	ldr	r0, [r7, #24]
 8008d42:	f001 fc4f 	bl	800a5e4 <netbuf_delete>
    return;
 8008d46:	e009      	b.n	8008d5c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d005      	beq.n	8008d5c <recv_udp+0xe0>
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	8afa      	ldrh	r2, [r7, #22]
 8008d56:	2100      	movs	r1, #0
 8008d58:	69f8      	ldr	r0, [r7, #28]
 8008d5a:	4798      	blx	r3
  }
}
 8008d5c:	3720      	adds	r7, #32
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	0801a7cc 	.word	0x0801a7cc
 8008d68:	0801a844 	.word	0x0801a844
 8008d6c:	0801a810 	.word	0x0801a810
 8008d70:	0801a868 	.word	0x0801a868
 8008d74:	0801a888 	.word	0x0801a888

08008d78 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d106      	bne.n	8008d9a <recv_tcp+0x22>
 8008d8c:	4b36      	ldr	r3, [pc, #216]	; (8008e68 <recv_tcp+0xf0>)
 8008d8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008d92:	4936      	ldr	r1, [pc, #216]	; (8008e6c <recv_tcp+0xf4>)
 8008d94:	4836      	ldr	r0, [pc, #216]	; (8008e70 <recv_tcp+0xf8>)
 8008d96:	f010 f8cd 	bl	8018f34 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d106      	bne.n	8008dae <recv_tcp+0x36>
 8008da0:	4b31      	ldr	r3, [pc, #196]	; (8008e68 <recv_tcp+0xf0>)
 8008da2:	f240 122d 	movw	r2, #301	; 0x12d
 8008da6:	4933      	ldr	r1, [pc, #204]	; (8008e74 <recv_tcp+0xfc>)
 8008da8:	4831      	ldr	r0, [pc, #196]	; (8008e70 <recv_tcp+0xf8>)
 8008daa:	f010 f8c3 	bl	8018f34 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d006      	beq.n	8008dc4 <recv_tcp+0x4c>
 8008db6:	4b2c      	ldr	r3, [pc, #176]	; (8008e68 <recv_tcp+0xf0>)
 8008db8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008dbc:	492e      	ldr	r1, [pc, #184]	; (8008e78 <recv_tcp+0x100>)
 8008dbe:	482c      	ldr	r0, [pc, #176]	; (8008e70 <recv_tcp+0xf8>)
 8008dc0:	f010 f8b8 	bl	8018f34 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d102      	bne.n	8008dd4 <recv_tcp+0x5c>
    return ERR_VAL;
 8008dce:	f06f 0305 	mvn.w	r3, #5
 8008dd2:	e045      	b.n	8008e60 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d006      	beq.n	8008dec <recv_tcp+0x74>
 8008dde:	4b22      	ldr	r3, [pc, #136]	; (8008e68 <recv_tcp+0xf0>)
 8008de0:	f240 1235 	movw	r2, #309	; 0x135
 8008de4:	4925      	ldr	r1, [pc, #148]	; (8008e7c <recv_tcp+0x104>)
 8008de6:	4822      	ldr	r0, [pc, #136]	; (8008e70 <recv_tcp+0xf8>)
 8008de8:	f010 f8a4 	bl	8018f34 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	3310      	adds	r3, #16
 8008df0:	4618      	mov	r0, r3
 8008df2:	f00f fd74 	bl	80188de <sys_mbox_valid>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10d      	bne.n	8008e18 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d008      	beq.n	8008e14 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	891b      	ldrh	r3, [r3, #8]
 8008e06:	4619      	mov	r1, r3
 8008e08:	68b8      	ldr	r0, [r7, #8]
 8008e0a:	f005 f865 	bl	800ded8 <tcp_recved>
      pbuf_free(p);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f004 f888 	bl	800cf24 <pbuf_free>
    }
    return ERR_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	e023      	b.n	8008e60 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d005      	beq.n	8008e2a <recv_tcp+0xb2>
    msg = p;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	891b      	ldrh	r3, [r3, #8]
 8008e26:	83fb      	strh	r3, [r7, #30]
 8008e28:	e003      	b.n	8008e32 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008e2a:	4b15      	ldr	r3, [pc, #84]	; (8008e80 <recv_tcp+0x108>)
 8008e2c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	3310      	adds	r3, #16
 8008e36:	69b9      	ldr	r1, [r7, #24]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f00f fcdb 	bl	80187f4 <sys_mbox_trypost>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008e44:	f04f 33ff 	mov.w	r3, #4294967295
 8008e48:	e00a      	b.n	8008e60 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d005      	beq.n	8008e5e <recv_tcp+0xe6>
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	8bfa      	ldrh	r2, [r7, #30]
 8008e58:	2100      	movs	r1, #0
 8008e5a:	6978      	ldr	r0, [r7, #20]
 8008e5c:	4798      	blx	r3
  }

  return ERR_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3720      	adds	r7, #32
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	0801a7cc 	.word	0x0801a7cc
 8008e6c:	0801a8a8 	.word	0x0801a8a8
 8008e70:	0801a810 	.word	0x0801a810
 8008e74:	0801a8cc 	.word	0x0801a8cc
 8008e78:	0801a8ec 	.word	0x0801a8ec
 8008e7c:	0801a904 	.word	0x0801a904
 8008e80:	0801df2a 	.word	0x0801df2a

08008e84 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d106      	bne.n	8008ea6 <poll_tcp+0x22>
 8008e98:	4b29      	ldr	r3, [pc, #164]	; (8008f40 <poll_tcp+0xbc>)
 8008e9a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008e9e:	4929      	ldr	r1, [pc, #164]	; (8008f44 <poll_tcp+0xc0>)
 8008ea0:	4829      	ldr	r0, [pc, #164]	; (8008f48 <poll_tcp+0xc4>)
 8008ea2:	f010 f847 	bl	8018f34 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	785b      	ldrb	r3, [r3, #1]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d104      	bne.n	8008eb8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008eae:	2101      	movs	r1, #1
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f001 f8b3 	bl	800a01c <lwip_netconn_do_writemore>
 8008eb6:	e016      	b.n	8008ee6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	785b      	ldrb	r3, [r3, #1]
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d112      	bne.n	8008ee6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6a1b      	ldr	r3, [r3, #32]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00a      	beq.n	8008ede <poll_tcp+0x5a>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6a1b      	ldr	r3, [r3, #32]
 8008ecc:	7a5b      	ldrb	r3, [r3, #9]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d005      	beq.n	8008ede <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	7a5a      	ldrb	r2, [r3, #9]
 8008ed8:	3a01      	subs	r2, #1
 8008eda:	b2d2      	uxtb	r2, r2
 8008edc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008ede:	2101      	movs	r1, #1
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 fbf7 	bl	80096d4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	7f1b      	ldrb	r3, [r3, #28]
 8008eea:	f003 0310 	and.w	r3, r3, #16
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d021      	beq.n	8008f36 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d01d      	beq.n	8008f36 <poll_tcp+0xb2>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008f02:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008f06:	d316      	bcc.n	8008f36 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008f10:	2b04      	cmp	r3, #4
 8008f12:	d810      	bhi.n	8008f36 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	7f1b      	ldrb	r3, [r3, #28]
 8008f18:	f023 0310 	bic.w	r3, r3, #16
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d005      	beq.n	8008f36 <poll_tcp+0xb2>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2102      	movs	r1, #2
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	0801a7cc 	.word	0x0801a7cc
 8008f44:	0801a924 	.word	0x0801a924
 8008f48:	0801a810 	.word	0x0801a810

08008f4c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	4613      	mov	r3, r2
 8008f58:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <sent_tcp+0x26>
 8008f64:	4b20      	ldr	r3, [pc, #128]	; (8008fe8 <sent_tcp+0x9c>)
 8008f66:	f240 1293 	movw	r2, #403	; 0x193
 8008f6a:	4920      	ldr	r1, [pc, #128]	; (8008fec <sent_tcp+0xa0>)
 8008f6c:	4820      	ldr	r0, [pc, #128]	; (8008ff0 <sent_tcp+0xa4>)
 8008f6e:	f00f ffe1 	bl	8018f34 <iprintf>

  if (conn) {
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d032      	beq.n	8008fde <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	785b      	ldrb	r3, [r3, #1]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d104      	bne.n	8008f8a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008f80:	2101      	movs	r1, #1
 8008f82:	6978      	ldr	r0, [r7, #20]
 8008f84:	f001 f84a 	bl	800a01c <lwip_netconn_do_writemore>
 8008f88:	e007      	b.n	8008f9a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	785b      	ldrb	r3, [r3, #1]
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	d103      	bne.n	8008f9a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008f92:	2101      	movs	r1, #1
 8008f94:	6978      	ldr	r0, [r7, #20]
 8008f96:	f000 fb9d 	bl	80096d4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d01d      	beq.n	8008fde <sent_tcp+0x92>
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008faa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008fae:	d316      	bcc.n	8008fde <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d810      	bhi.n	8008fde <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	7f1b      	ldrb	r3, [r3, #28]
 8008fc0:	f023 0310 	bic.w	r3, r3, #16
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <sent_tcp+0x92>
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	88fa      	ldrh	r2, [r7, #6]
 8008fd8:	2102      	movs	r1, #2
 8008fda:	6978      	ldr	r0, [r7, #20]
 8008fdc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	0801a7cc 	.word	0x0801a7cc
 8008fec:	0801a924 	.word	0x0801a924
 8008ff0:	0801a810 	.word	0x0801a810

08008ff4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d106      	bne.n	8009018 <err_tcp+0x24>
 800900a:	4b5f      	ldr	r3, [pc, #380]	; (8009188 <err_tcp+0x194>)
 800900c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009010:	495e      	ldr	r1, [pc, #376]	; (800918c <err_tcp+0x198>)
 8009012:	485f      	ldr	r0, [pc, #380]	; (8009190 <err_tcp+0x19c>)
 8009014:	f00f ff8e 	bl	8018f34 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009018:	f00f fd7c 	bl	8018b14 <sys_arch_protect>
 800901c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	2200      	movs	r2, #0
 8009022:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	78fa      	ldrb	r2, [r7, #3]
 8009028:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	7f1b      	ldrb	r3, [r3, #28]
 800902e:	f043 0301 	orr.w	r3, r3, #1
 8009032:	b2da      	uxtb	r2, r3
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	785b      	ldrb	r3, [r3, #1]
 800903c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2200      	movs	r2, #0
 8009042:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009044:	69b8      	ldr	r0, [r7, #24]
 8009046:	f00f fd73 	bl	8018b30 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	2b00      	cmp	r3, #0
 8009050:	d005      	beq.n	800905e <err_tcp+0x6a>
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	2200      	movs	r2, #0
 8009058:	2104      	movs	r1, #4
 800905a:	69f8      	ldr	r0, [r7, #28]
 800905c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <err_tcp+0x7e>
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	2200      	movs	r2, #0
 800906c:	2100      	movs	r1, #0
 800906e:	69f8      	ldr	r0, [r7, #28]
 8009070:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009076:	2b00      	cmp	r3, #0
 8009078:	d005      	beq.n	8009086 <err_tcp+0x92>
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	2200      	movs	r2, #0
 8009080:	2102      	movs	r1, #2
 8009082:	69f8      	ldr	r0, [r7, #28]
 8009084:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800908a:	4618      	mov	r0, r3
 800908c:	f7ff fd86 	bl	8008b9c <lwip_netconn_err_to_msg>
 8009090:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	3310      	adds	r3, #16
 8009096:	4618      	mov	r0, r3
 8009098:	f00f fc21 	bl	80188de <sys_mbox_valid>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d005      	beq.n	80090ae <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	3310      	adds	r3, #16
 80090a6:	6939      	ldr	r1, [r7, #16]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f00f fba3 	bl	80187f4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	3314      	adds	r3, #20
 80090b2:	4618      	mov	r0, r3
 80090b4:	f00f fc13 	bl	80188de <sys_mbox_valid>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d005      	beq.n	80090ca <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	3314      	adds	r3, #20
 80090c2:	6939      	ldr	r1, [r7, #16]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f00f fb95 	bl	80187f4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d005      	beq.n	80090dc <err_tcp+0xe8>
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d002      	beq.n	80090dc <err_tcp+0xe8>
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d143      	bne.n	8009164 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	7f1b      	ldrb	r3, [r3, #28]
 80090e0:	f003 0304 	and.w	r3, r3, #4
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bf14      	ite	ne
 80090e8:	2301      	movne	r3, #1
 80090ea:	2300      	moveq	r3, #0
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	7f1b      	ldrb	r3, [r3, #28]
 80090f4:	f023 0304 	bic.w	r3, r3, #4
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d13b      	bne.n	800917c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	6a1b      	ldr	r3, [r3, #32]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d106      	bne.n	800911a <err_tcp+0x126>
 800910c:	4b1e      	ldr	r3, [pc, #120]	; (8009188 <err_tcp+0x194>)
 800910e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009112:	4920      	ldr	r1, [pc, #128]	; (8009194 <err_tcp+0x1a0>)
 8009114:	481e      	ldr	r0, [pc, #120]	; (8009190 <err_tcp+0x19c>)
 8009116:	f00f ff0d 	bl	8018f34 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800911a:	7dfb      	ldrb	r3, [r7, #23]
 800911c:	2b04      	cmp	r3, #4
 800911e:	d104      	bne.n	800912a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	2200      	movs	r2, #0
 8009126:	711a      	strb	r2, [r3, #4]
 8009128:	e003      	b.n	8009132 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	78fa      	ldrb	r2, [r7, #3]
 8009130:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	330c      	adds	r3, #12
 800913a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800913c:	68b8      	ldr	r0, [r7, #8]
 800913e:	f00f fc5f 	bl	8018a00 <sys_sem_valid>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d106      	bne.n	8009156 <err_tcp+0x162>
 8009148:	4b0f      	ldr	r3, [pc, #60]	; (8009188 <err_tcp+0x194>)
 800914a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800914e:	4912      	ldr	r1, [pc, #72]	; (8009198 <err_tcp+0x1a4>)
 8009150:	480f      	ldr	r0, [pc, #60]	; (8009190 <err_tcp+0x19c>)
 8009152:	f00f feef 	bl	8018f34 <iprintf>
      conn->current_msg = NULL;
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	2200      	movs	r2, #0
 800915a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800915c:	68b8      	ldr	r0, [r7, #8]
 800915e:	f00f fc35 	bl	80189cc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009162:	e00b      	b.n	800917c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d008      	beq.n	800917e <err_tcp+0x18a>
 800916c:	4b06      	ldr	r3, [pc, #24]	; (8009188 <err_tcp+0x194>)
 800916e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009172:	490a      	ldr	r1, [pc, #40]	; (800919c <err_tcp+0x1a8>)
 8009174:	4806      	ldr	r0, [pc, #24]	; (8009190 <err_tcp+0x19c>)
 8009176:	f00f fedd 	bl	8018f34 <iprintf>
  }
}
 800917a:	e000      	b.n	800917e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800917c:	bf00      	nop
}
 800917e:	bf00      	nop
 8009180:	3720      	adds	r7, #32
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	0801a7cc 	.word	0x0801a7cc
 800918c:	0801a924 	.word	0x0801a924
 8009190:	0801a810 	.word	0x0801a810
 8009194:	0801a934 	.word	0x0801a934
 8009198:	0801a950 	.word	0x0801a950
 800919c:	0801a96c 	.word	0x0801a96c

080091a0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80091ae:	6879      	ldr	r1, [r7, #4]
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f005 fe8d 	bl	800eed0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80091b6:	490a      	ldr	r1, [pc, #40]	; (80091e0 <setup_tcp+0x40>)
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f005 fe9b 	bl	800eef4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80091be:	4909      	ldr	r1, [pc, #36]	; (80091e4 <setup_tcp+0x44>)
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f005 feb9 	bl	800ef38 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80091c6:	2202      	movs	r2, #2
 80091c8:	4907      	ldr	r1, [pc, #28]	; (80091e8 <setup_tcp+0x48>)
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f005 ff10 	bl	800eff0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80091d0:	4906      	ldr	r1, [pc, #24]	; (80091ec <setup_tcp+0x4c>)
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f005 fed2 	bl	800ef7c <tcp_err>
}
 80091d8:	bf00      	nop
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	08008d79 	.word	0x08008d79
 80091e4:	08008f4d 	.word	0x08008f4d
 80091e8:	08008e85 	.word	0x08008e85
 80091ec:	08008ff5 	.word	0x08008ff5

080091f0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80091f0:	b590      	push	{r4, r7, lr}
 80091f2:	b089      	sub	sp, #36	; 0x24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	4613      	mov	r3, r2
 80091fc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <accept_function+0x1e>
    return ERR_VAL;
 8009208:	f06f 0305 	mvn.w	r3, #5
 800920c:	e0a1      	b.n	8009352 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	3314      	adds	r3, #20
 8009212:	4618      	mov	r0, r3
 8009214:	f00f fb63 	bl	80188de <sys_mbox_valid>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d102      	bne.n	8009224 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800921e:	f06f 0305 	mvn.w	r3, #5
 8009222:	e096      	b.n	8009352 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d11b      	bne.n	8009262 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	f103 0414 	add.w	r4, r3, #20
 8009230:	f06f 000c 	mvn.w	r0, #12
 8009234:	f7ff fcb2 	bl	8008b9c <lwip_netconn_err_to_msg>
 8009238:	4603      	mov	r3, r0
 800923a:	4619      	mov	r1, r3
 800923c:	4620      	mov	r0, r4
 800923e:	f00f fad9 	bl	80187f4 <sys_mbox_trypost>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d109      	bne.n	800925c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924c:	2b00      	cmp	r3, #0
 800924e:	d005      	beq.n	800925c <accept_function+0x6c>
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009254:	2200      	movs	r2, #0
 8009256:	2100      	movs	r1, #0
 8009258:	69f8      	ldr	r0, [r7, #28]
 800925a:	4798      	blx	r3
    }
    return ERR_VAL;
 800925c:	f06f 0305 	mvn.w	r3, #5
 8009260:	e077      	b.n	8009352 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d006      	beq.n	8009278 <accept_function+0x88>
 800926a:	4b3c      	ldr	r3, [pc, #240]	; (800935c <accept_function+0x16c>)
 800926c:	f240 222a 	movw	r2, #554	; 0x22a
 8009270:	493b      	ldr	r1, [pc, #236]	; (8009360 <accept_function+0x170>)
 8009272:	483c      	ldr	r0, [pc, #240]	; (8009364 <accept_function+0x174>)
 8009274:	f00f fe5e 	bl	8018f34 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	781a      	ldrb	r2, [r3, #0]
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f000 f8f0 	bl	8009468 <netconn_alloc>
 8009288:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d11b      	bne.n	80092c8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f103 0414 	add.w	r4, r3, #20
 8009296:	f06f 000c 	mvn.w	r0, #12
 800929a:	f7ff fc7f 	bl	8008b9c <lwip_netconn_err_to_msg>
 800929e:	4603      	mov	r3, r0
 80092a0:	4619      	mov	r1, r3
 80092a2:	4620      	mov	r0, r4
 80092a4:	f00f faa6 	bl	80187f4 <sys_mbox_trypost>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d109      	bne.n	80092c2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d005      	beq.n	80092c2 <accept_function+0xd2>
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ba:	2200      	movs	r2, #0
 80092bc:	2100      	movs	r1, #0
 80092be:	69f8      	ldr	r0, [r7, #28]
 80092c0:	4798      	blx	r3
    }
    return ERR_MEM;
 80092c2:	f04f 33ff 	mov.w	r3, #4294967295
 80092c6:	e044      	b.n	8009352 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80092ce:	69b8      	ldr	r0, [r7, #24]
 80092d0:	f7ff ff66 	bl	80091a0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	3314      	adds	r3, #20
 80092d8:	69b9      	ldr	r1, [r7, #24]
 80092da:	4618      	mov	r0, r3
 80092dc:	f00f fa8a 	bl	80187f4 <sys_mbox_trypost>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d02a      	beq.n	800933c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80092ec:	2100      	movs	r1, #0
 80092ee:	6978      	ldr	r0, [r7, #20]
 80092f0:	f005 fdee 	bl	800eed0 <tcp_arg>
    tcp_recv(pcb, NULL);
 80092f4:	2100      	movs	r1, #0
 80092f6:	6978      	ldr	r0, [r7, #20]
 80092f8:	f005 fdfc 	bl	800eef4 <tcp_recv>
    tcp_sent(pcb, NULL);
 80092fc:	2100      	movs	r1, #0
 80092fe:	6978      	ldr	r0, [r7, #20]
 8009300:	f005 fe1a 	bl	800ef38 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009304:	2200      	movs	r2, #0
 8009306:	2100      	movs	r1, #0
 8009308:	6978      	ldr	r0, [r7, #20]
 800930a:	f005 fe71 	bl	800eff0 <tcp_poll>
    tcp_err(pcb, NULL);
 800930e:	2100      	movs	r1, #0
 8009310:	6978      	ldr	r0, [r7, #20]
 8009312:	f005 fe33 	bl	800ef7c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	2200      	movs	r2, #0
 800931a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	3310      	adds	r3, #16
 8009320:	4618      	mov	r0, r3
 8009322:	f00f fa55 	bl	80187d0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	3310      	adds	r3, #16
 800932a:	4618      	mov	r0, r3
 800932c:	f00f fae8 	bl	8018900 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009330:	69b8      	ldr	r0, [r7, #24]
 8009332:	f000 f907 	bl	8009544 <netconn_free>
    return ERR_MEM;
 8009336:	f04f 33ff 	mov.w	r3, #4294967295
 800933a:	e00a      	b.n	8009352 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <accept_function+0x160>
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	2200      	movs	r2, #0
 800934a:	2100      	movs	r1, #0
 800934c:	69f8      	ldr	r0, [r7, #28]
 800934e:	4798      	blx	r3
  }

  return ERR_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3724      	adds	r7, #36	; 0x24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd90      	pop	{r4, r7, pc}
 800935a:	bf00      	nop
 800935c:	0801a7cc 	.word	0x0801a7cc
 8009360:	0801a988 	.word	0x0801a988
 8009364:	0801a810 	.word	0x0801a810

08009368 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009368:	b590      	push	{r4, r7, lr}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009370:	2300      	movs	r3, #0
 8009372:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d006      	beq.n	800938c <pcb_new+0x24>
 800937e:	4b2b      	ldr	r3, [pc, #172]	; (800942c <pcb_new+0xc4>)
 8009380:	f240 2265 	movw	r2, #613	; 0x265
 8009384:	492a      	ldr	r1, [pc, #168]	; (8009430 <pcb_new+0xc8>)
 8009386:	482b      	ldr	r0, [pc, #172]	; (8009434 <pcb_new+0xcc>)
 8009388:	f00f fdd4 	bl	8018f34 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009396:	2b10      	cmp	r3, #16
 8009398:	d022      	beq.n	80093e0 <pcb_new+0x78>
 800939a:	2b20      	cmp	r3, #32
 800939c:	d133      	bne.n	8009406 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681c      	ldr	r4, [r3, #0]
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f00b f83a 	bl	801441e <udp_new_ip_type>
 80093aa:	4603      	mov	r3, r0
 80093ac:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d02a      	beq.n	800940e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	2b22      	cmp	r3, #34	; 0x22
 80093c0:	d104      	bne.n	80093cc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	2201      	movs	r2, #1
 80093ca:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6858      	ldr	r0, [r3, #4]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	4917      	ldr	r1, [pc, #92]	; (8009438 <pcb_new+0xd0>)
 80093da:	f00a ffa7 	bl	801432c <udp_recv>
      }
      break;
 80093de:	e016      	b.n	800940e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681c      	ldr	r4, [r3, #0]
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f005 fd64 	bl	800eeb4 <tcp_new_ip_type>
 80093ec:	4603      	mov	r3, r0
 80093ee:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00b      	beq.n	8009412 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4618      	mov	r0, r3
 8009400:	f7ff fece 	bl	80091a0 <setup_tcp>
      }
      break;
 8009404:	e005      	b.n	8009412 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	22fa      	movs	r2, #250	; 0xfa
 800940a:	711a      	strb	r2, [r3, #4]
      return;
 800940c:	e00a      	b.n	8009424 <pcb_new+0xbc>
      break;
 800940e:	bf00      	nop
 8009410:	e000      	b.n	8009414 <pcb_new+0xac>
      break;
 8009412:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d102      	bne.n	8009424 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	22ff      	movs	r2, #255	; 0xff
 8009422:	711a      	strb	r2, [r3, #4]
  }
}
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	bd90      	pop	{r4, r7, pc}
 800942a:	bf00      	nop
 800942c:	0801a7cc 	.word	0x0801a7cc
 8009430:	0801a9b0 	.word	0x0801a9b0
 8009434:	0801a810 	.word	0x0801a810
 8009438:	08008c7d 	.word	0x08008c7d

0800943c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d102      	bne.n	800945e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f7ff ff85 	bl	8009368 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800945e:	bf00      	nop
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	4603      	mov	r3, r0
 8009470:	6039      	str	r1, [r7, #0]
 8009472:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009478:	2007      	movs	r0, #7
 800947a:	f002 fe2d 	bl	800c0d8 <memp_malloc>
 800947e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <netconn_alloc+0x22>
    return NULL;
 8009486:	2300      	movs	r3, #0
 8009488:	e052      	b.n	8009530 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	79fa      	ldrb	r2, [r7, #7]
 8009494:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094a2:	2b10      	cmp	r3, #16
 80094a4:	d004      	beq.n	80094b0 <netconn_alloc+0x48>
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	d105      	bne.n	80094b6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80094aa:	2306      	movs	r3, #6
 80094ac:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80094ae:	e00a      	b.n	80094c6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80094b0:	2306      	movs	r3, #6
 80094b2:	617b      	str	r3, [r7, #20]
      break;
 80094b4:	e007      	b.n	80094c6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80094b6:	4b20      	ldr	r3, [pc, #128]	; (8009538 <netconn_alloc+0xd0>)
 80094b8:	f240 22e5 	movw	r2, #741	; 0x2e5
 80094bc:	491f      	ldr	r1, [pc, #124]	; (800953c <netconn_alloc+0xd4>)
 80094be:	4820      	ldr	r0, [pc, #128]	; (8009540 <netconn_alloc+0xd8>)
 80094c0:	f00f fd38 	bl	8018f34 <iprintf>
      goto free_and_return;
 80094c4:	e02f      	b.n	8009526 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3310      	adds	r3, #16
 80094ca:	6979      	ldr	r1, [r7, #20]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f00f f95d 	bl	801878c <sys_mbox_new>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d125      	bne.n	8009524 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	330c      	adds	r3, #12
 80094dc:	2100      	movs	r1, #0
 80094de:	4618      	mov	r0, r3
 80094e0:	f00f fa1b 	bl	801891a <sys_sem_new>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d005      	beq.n	80094f6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	3310      	adds	r3, #16
 80094ee:	4618      	mov	r0, r3
 80094f0:	f00f f96e 	bl	80187d0 <sys_mbox_free>
    goto free_and_return;
 80094f4:	e017      	b.n	8009526 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3314      	adds	r3, #20
 80094fa:	4618      	mov	r0, r3
 80094fc:	f00f fa00 	bl	8018900 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f04f 32ff 	mov.w	r2, #4294967295
 800950c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	7cfa      	ldrb	r2, [r7, #19]
 800951e:	771a      	strb	r2, [r3, #28]
  return conn;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	e005      	b.n	8009530 <netconn_alloc+0xc8>
    goto free_and_return;
 8009524:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009526:	68f9      	ldr	r1, [r7, #12]
 8009528:	2007      	movs	r0, #7
 800952a:	f002 fe4b 	bl	800c1c4 <memp_free>
  return NULL;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3718      	adds	r7, #24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	0801a7cc 	.word	0x0801a7cc
 800953c:	0801a9d0 	.word	0x0801a9d0
 8009540:	0801a810 	.word	0x0801a810

08009544 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d006      	beq.n	8009562 <netconn_free+0x1e>
 8009554:	4b1b      	ldr	r3, [pc, #108]	; (80095c4 <netconn_free+0x80>)
 8009556:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800955a:	491b      	ldr	r1, [pc, #108]	; (80095c8 <netconn_free+0x84>)
 800955c:	481b      	ldr	r0, [pc, #108]	; (80095cc <netconn_free+0x88>)
 800955e:	f00f fce9 	bl	8018f34 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	3310      	adds	r3, #16
 8009566:	4618      	mov	r0, r3
 8009568:	f00f f9b9 	bl	80188de <sys_mbox_valid>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d006      	beq.n	8009580 <netconn_free+0x3c>
 8009572:	4b14      	ldr	r3, [pc, #80]	; (80095c4 <netconn_free+0x80>)
 8009574:	f240 3223 	movw	r2, #803	; 0x323
 8009578:	4915      	ldr	r1, [pc, #84]	; (80095d0 <netconn_free+0x8c>)
 800957a:	4814      	ldr	r0, [pc, #80]	; (80095cc <netconn_free+0x88>)
 800957c:	f00f fcda 	bl	8018f34 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3314      	adds	r3, #20
 8009584:	4618      	mov	r0, r3
 8009586:	f00f f9aa 	bl	80188de <sys_mbox_valid>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d006      	beq.n	800959e <netconn_free+0x5a>
 8009590:	4b0c      	ldr	r3, [pc, #48]	; (80095c4 <netconn_free+0x80>)
 8009592:	f240 3226 	movw	r2, #806	; 0x326
 8009596:	490f      	ldr	r1, [pc, #60]	; (80095d4 <netconn_free+0x90>)
 8009598:	480c      	ldr	r0, [pc, #48]	; (80095cc <netconn_free+0x88>)
 800959a:	f00f fccb 	bl	8018f34 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	330c      	adds	r3, #12
 80095a2:	4618      	mov	r0, r3
 80095a4:	f00f fa1f 	bl	80189e6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	330c      	adds	r3, #12
 80095ac:	4618      	mov	r0, r3
 80095ae:	f00f fa38 	bl	8018a22 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80095b2:	6879      	ldr	r1, [r7, #4]
 80095b4:	2007      	movs	r0, #7
 80095b6:	f002 fe05 	bl	800c1c4 <memp_free>
}
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	0801a7cc 	.word	0x0801a7cc
 80095c8:	0801a9f8 	.word	0x0801a9f8
 80095cc:	0801a810 	.word	0x0801a810
 80095d0:	0801aa28 	.word	0x0801aa28
 80095d4:	0801aa64 	.word	0x0801aa64

080095d8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3310      	adds	r3, #16
 80095e4:	4618      	mov	r0, r3
 80095e6:	f00f f97a 	bl	80188de <sys_mbox_valid>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d02f      	beq.n	8009650 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80095f0:	e018      	b.n	8009624 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095fa:	2b10      	cmp	r3, #16
 80095fc:	d10e      	bne.n	800961c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	f107 020f 	add.w	r2, r7, #15
 8009604:	4611      	mov	r1, r2
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff fafe 	bl	8008c08 <lwip_netconn_is_err_msg>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d108      	bne.n	8009624 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	4618      	mov	r0, r3
 8009616:	f003 fc85 	bl	800cf24 <pbuf_free>
 800961a:	e003      	b.n	8009624 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	4618      	mov	r0, r3
 8009620:	f000 ffe0 	bl	800a5e4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3310      	adds	r3, #16
 8009628:	f107 0210 	add.w	r2, r7, #16
 800962c:	4611      	mov	r1, r2
 800962e:	4618      	mov	r0, r3
 8009630:	f00f f939 	bl	80188a6 <sys_arch_mbox_tryfetch>
 8009634:	4603      	mov	r3, r0
 8009636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963a:	d1da      	bne.n	80095f2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	3310      	adds	r3, #16
 8009640:	4618      	mov	r0, r3
 8009642:	f00f f8c5 	bl	80187d0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3310      	adds	r3, #16
 800964a:	4618      	mov	r0, r3
 800964c:	f00f f958 	bl	8018900 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3314      	adds	r3, #20
 8009654:	4618      	mov	r0, r3
 8009656:	f00f f942 	bl	80188de <sys_mbox_valid>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d034      	beq.n	80096ca <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009660:	e01d      	b.n	800969e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	f107 020e 	add.w	r2, r7, #14
 8009668:	4611      	mov	r1, r2
 800966a:	4618      	mov	r0, r3
 800966c:	f7ff facc 	bl	8008c08 <lwip_netconn_is_err_msg>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d113      	bne.n	800969e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800967a:	6978      	ldr	r0, [r7, #20]
 800967c:	f7ff ffac 	bl	80095d8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d007      	beq.n	8009698 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	4618      	mov	r0, r3
 800968e:	f004 fa49 	bl	800db24 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2200      	movs	r2, #0
 8009696:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009698:	6978      	ldr	r0, [r7, #20]
 800969a:	f7ff ff53 	bl	8009544 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	3314      	adds	r3, #20
 80096a2:	f107 0210 	add.w	r2, r7, #16
 80096a6:	4611      	mov	r1, r2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f00f f8fc 	bl	80188a6 <sys_arch_mbox_tryfetch>
 80096ae:	4603      	mov	r3, r0
 80096b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b4:	d1d5      	bne.n	8009662 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	3314      	adds	r3, #20
 80096ba:	4618      	mov	r0, r3
 80096bc:	f00f f888 	bl	80187d0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3314      	adds	r3, #20
 80096c4:	4618      	mov	r0, r3
 80096c6:	f00f f91b 	bl	8018900 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80096ca:	bf00      	nop
 80096cc:	3718      	adds	r7, #24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d106      	bne.n	80096f8 <lwip_netconn_do_close_internal+0x24>
 80096ea:	4b87      	ldr	r3, [pc, #540]	; (8009908 <lwip_netconn_do_close_internal+0x234>)
 80096ec:	f240 32a2 	movw	r2, #930	; 0x3a2
 80096f0:	4986      	ldr	r1, [pc, #536]	; (800990c <lwip_netconn_do_close_internal+0x238>)
 80096f2:	4887      	ldr	r0, [pc, #540]	; (8009910 <lwip_netconn_do_close_internal+0x23c>)
 80096f4:	f00f fc1e 	bl	8018f34 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009700:	2b10      	cmp	r3, #16
 8009702:	d006      	beq.n	8009712 <lwip_netconn_do_close_internal+0x3e>
 8009704:	4b80      	ldr	r3, [pc, #512]	; (8009908 <lwip_netconn_do_close_internal+0x234>)
 8009706:	f240 32a3 	movw	r2, #931	; 0x3a3
 800970a:	4982      	ldr	r1, [pc, #520]	; (8009914 <lwip_netconn_do_close_internal+0x240>)
 800970c:	4880      	ldr	r0, [pc, #512]	; (8009910 <lwip_netconn_do_close_internal+0x23c>)
 800970e:	f00f fc11 	bl	8018f34 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	785b      	ldrb	r3, [r3, #1]
 8009716:	2b04      	cmp	r3, #4
 8009718:	d006      	beq.n	8009728 <lwip_netconn_do_close_internal+0x54>
 800971a:	4b7b      	ldr	r3, [pc, #492]	; (8009908 <lwip_netconn_do_close_internal+0x234>)
 800971c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009720:	497d      	ldr	r1, [pc, #500]	; (8009918 <lwip_netconn_do_close_internal+0x244>)
 8009722:	487b      	ldr	r0, [pc, #492]	; (8009910 <lwip_netconn_do_close_internal+0x23c>)
 8009724:	f00f fc06 	bl	8018f34 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d106      	bne.n	800973e <lwip_netconn_do_close_internal+0x6a>
 8009730:	4b75      	ldr	r3, [pc, #468]	; (8009908 <lwip_netconn_do_close_internal+0x234>)
 8009732:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009736:	4979      	ldr	r1, [pc, #484]	; (800991c <lwip_netconn_do_close_internal+0x248>)
 8009738:	4875      	ldr	r0, [pc, #468]	; (8009910 <lwip_netconn_do_close_internal+0x23c>)
 800973a:	f00f fbfb 	bl	8018f34 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d106      	bne.n	8009754 <lwip_netconn_do_close_internal+0x80>
 8009746:	4b70      	ldr	r3, [pc, #448]	; (8009908 <lwip_netconn_do_close_internal+0x234>)
 8009748:	f240 32a6 	movw	r2, #934	; 0x3a6
 800974c:	4974      	ldr	r1, [pc, #464]	; (8009920 <lwip_netconn_do_close_internal+0x24c>)
 800974e:	4870      	ldr	r0, [pc, #448]	; (8009910 <lwip_netconn_do_close_internal+0x23c>)
 8009750:	f00f fbf0 	bl	8018f34 <iprintf>

  tpcb = conn->pcb.tcp;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	7a1b      	ldrb	r3, [r3, #8]
 8009760:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
 800976c:	f003 0302 	and.w	r3, r3, #2
 8009770:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009772:	7bfb      	ldrb	r3, [r7, #15]
 8009774:	2b03      	cmp	r3, #3
 8009776:	d102      	bne.n	800977e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009778:	2301      	movs	r3, #1
 800977a:	75bb      	strb	r3, [r7, #22]
 800977c:	e01f      	b.n	80097be <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800977e:	7bbb      	ldrb	r3, [r7, #14]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00e      	beq.n	80097a2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009788:	2b05      	cmp	r3, #5
 800978a:	d007      	beq.n	800979c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009790:	2b06      	cmp	r3, #6
 8009792:	d003      	beq.n	800979c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009798:	2b08      	cmp	r3, #8
 800979a:	d102      	bne.n	80097a2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800979c:	2301      	movs	r3, #1
 800979e:	75bb      	strb	r3, [r7, #22]
 80097a0:	e00d      	b.n	80097be <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80097a2:	7b7b      	ldrb	r3, [r7, #13]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d008      	beq.n	80097ba <lwip_netconn_do_close_internal+0xe6>
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	8b5b      	ldrh	r3, [r3, #26]
 80097ac:	f003 0310 	and.w	r3, r3, #16
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80097b4:	2301      	movs	r3, #1
 80097b6:	75bb      	strb	r3, [r7, #22]
 80097b8:	e001      	b.n	80097be <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80097be:	7dbb      	ldrb	r3, [r7, #22]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80097c4:	2100      	movs	r1, #0
 80097c6:	6938      	ldr	r0, [r7, #16]
 80097c8:	f005 fb82 	bl	800eed0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	7d1b      	ldrb	r3, [r3, #20]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d104      	bne.n	80097de <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80097d4:	2100      	movs	r1, #0
 80097d6:	6938      	ldr	r0, [r7, #16]
 80097d8:	f005 fbf2 	bl	800efc0 <tcp_accept>
 80097dc:	e01d      	b.n	800981a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d007      	beq.n	80097f4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80097e4:	2100      	movs	r1, #0
 80097e6:	6938      	ldr	r0, [r7, #16]
 80097e8:	f005 fb84 	bl	800eef4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80097ec:	2100      	movs	r1, #0
 80097ee:	6938      	ldr	r0, [r7, #16]
 80097f0:	f005 fbe6 	bl	800efc0 <tcp_accept>
    }
    if (shut_tx) {
 80097f4:	7b7b      	ldrb	r3, [r7, #13]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d003      	beq.n	8009802 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80097fa:	2100      	movs	r1, #0
 80097fc:	6938      	ldr	r0, [r7, #16]
 80097fe:	f005 fb9b 	bl	800ef38 <tcp_sent>
    }
    if (shut_close) {
 8009802:	7dbb      	ldrb	r3, [r7, #22]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d008      	beq.n	800981a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009808:	2200      	movs	r2, #0
 800980a:	2100      	movs	r1, #0
 800980c:	6938      	ldr	r0, [r7, #16]
 800980e:	f005 fbef 	bl	800eff0 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009812:	2100      	movs	r1, #0
 8009814:	6938      	ldr	r0, [r7, #16]
 8009816:	f005 fbb1 	bl	800ef7c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800981a:	7dbb      	ldrb	r3, [r7, #22]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d005      	beq.n	800982c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009820:	6938      	ldr	r0, [r7, #16]
 8009822:	f004 f839 	bl	800d898 <tcp_close>
 8009826:	4603      	mov	r3, r0
 8009828:	75fb      	strb	r3, [r7, #23]
 800982a:	e007      	b.n	800983c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	7b7a      	ldrb	r2, [r7, #13]
 8009830:	4619      	mov	r1, r3
 8009832:	6938      	ldr	r0, [r7, #16]
 8009834:	f004 f85c 	bl	800d8f0 <tcp_shutdown>
 8009838:	4603      	mov	r3, r0
 800983a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800983c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d102      	bne.n	800984a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009844:	2301      	movs	r3, #1
 8009846:	757b      	strb	r3, [r7, #21]
 8009848:	e016      	b.n	8009878 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800984a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800984e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009852:	d10f      	bne.n	8009874 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a1b      	ldr	r3, [r3, #32]
 8009858:	7a5b      	ldrb	r3, [r3, #9]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10c      	bne.n	8009878 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800985e:	2301      	movs	r3, #1
 8009860:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009862:	7dbb      	ldrb	r3, [r7, #22]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d007      	beq.n	8009878 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009868:	6938      	ldr	r0, [r7, #16]
 800986a:	f004 f95b 	bl	800db24 <tcp_abort>
          err = ERR_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	75fb      	strb	r3, [r7, #23]
 8009872:	e001      	b.n	8009878 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009874:	2301      	movs	r3, #1
 8009876:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009878:	7d7b      	ldrb	r3, [r7, #21]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d052      	beq.n	8009924 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	330c      	adds	r3, #12
 8009886:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	7dfa      	ldrb	r2, [r7, #23]
 800988e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800989c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d129      	bne.n	80098f8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80098a4:	7dbb      	ldrb	r3, [r7, #22]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00c      	beq.n	80098c4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d005      	beq.n	80098c4 <lwip_netconn_do_close_internal+0x1f0>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098bc:	2200      	movs	r2, #0
 80098be:	2104      	movs	r1, #4
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	4798      	blx	r3
      }
      if (shut_rx) {
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d009      	beq.n	80098de <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d005      	beq.n	80098de <lwip_netconn_do_close_internal+0x20a>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	2200      	movs	r2, #0
 80098d8:	2100      	movs	r1, #0
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	4798      	blx	r3
      }
      if (shut_tx) {
 80098de:	7b7b      	ldrb	r3, [r7, #13]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d009      	beq.n	80098f8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d005      	beq.n	80098f8 <lwip_netconn_do_close_internal+0x224>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f0:	2200      	movs	r2, #0
 80098f2:	2102      	movs	r1, #2
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d002      	beq.n	8009904 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80098fe:	68b8      	ldr	r0, [r7, #8]
 8009900:	f00f f864 	bl	80189cc <sys_sem_signal>
    }
    return ERR_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	e03c      	b.n	8009982 <lwip_netconn_do_close_internal+0x2ae>
 8009908:	0801a7cc 	.word	0x0801a7cc
 800990c:	0801aaa0 	.word	0x0801aaa0
 8009910:	0801a810 	.word	0x0801a810
 8009914:	0801aab0 	.word	0x0801aab0
 8009918:	0801aad0 	.word	0x0801aad0
 800991c:	0801aaf4 	.word	0x0801aaf4
 8009920:	0801a934 	.word	0x0801a934
  }
  if (!close_finished) {
 8009924:	7d7b      	ldrb	r3, [r7, #21]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d11e      	bne.n	8009968 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	7d1b      	ldrb	r3, [r3, #20]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d106      	bne.n	8009940 <lwip_netconn_do_close_internal+0x26c>
 8009932:	4b16      	ldr	r3, [pc, #88]	; (800998c <lwip_netconn_do_close_internal+0x2b8>)
 8009934:	f240 4241 	movw	r2, #1089	; 0x441
 8009938:	4915      	ldr	r1, [pc, #84]	; (8009990 <lwip_netconn_do_close_internal+0x2bc>)
 800993a:	4816      	ldr	r0, [pc, #88]	; (8009994 <lwip_netconn_do_close_internal+0x2c0>)
 800993c:	f00f fafa 	bl	8018f34 <iprintf>
    if (shut_tx) {
 8009940:	7b7b      	ldrb	r3, [r7, #13]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009946:	4914      	ldr	r1, [pc, #80]	; (8009998 <lwip_netconn_do_close_internal+0x2c4>)
 8009948:	6938      	ldr	r0, [r7, #16]
 800994a:	f005 faf5 	bl	800ef38 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800994e:	2201      	movs	r2, #1
 8009950:	4912      	ldr	r1, [pc, #72]	; (800999c <lwip_netconn_do_close_internal+0x2c8>)
 8009952:	6938      	ldr	r0, [r7, #16]
 8009954:	f005 fb4c 	bl	800eff0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009958:	4911      	ldr	r1, [pc, #68]	; (80099a0 <lwip_netconn_do_close_internal+0x2cc>)
 800995a:	6938      	ldr	r0, [r7, #16]
 800995c:	f005 fb0e 	bl	800ef7c <tcp_err>
    tcp_arg(tpcb, conn);
 8009960:	6879      	ldr	r1, [r7, #4]
 8009962:	6938      	ldr	r0, [r7, #16]
 8009964:	f005 fab4 	bl	800eed0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d106      	bne.n	800997e <lwip_netconn_do_close_internal+0x2aa>
 8009970:	4b06      	ldr	r3, [pc, #24]	; (800998c <lwip_netconn_do_close_internal+0x2b8>)
 8009972:	f240 424d 	movw	r2, #1101	; 0x44d
 8009976:	490b      	ldr	r1, [pc, #44]	; (80099a4 <lwip_netconn_do_close_internal+0x2d0>)
 8009978:	4806      	ldr	r0, [pc, #24]	; (8009994 <lwip_netconn_do_close_internal+0x2c0>)
 800997a:	f00f fadb 	bl	8018f34 <iprintf>
  return err;
 800997e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3718      	adds	r7, #24
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	0801a7cc 	.word	0x0801a7cc
 8009990:	0801ab08 	.word	0x0801ab08
 8009994:	0801a810 	.word	0x0801a810
 8009998:	08008f4d 	.word	0x08008f4d
 800999c:	08008e85 	.word	0x08008e85
 80099a0:	08008ff5 	.word	0x08008ff5
 80099a4:	0801ab2c 	.word	0x0801ab2c

080099a8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	785b      	ldrb	r3, [r3, #1]
 80099ba:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80099bc:	7afb      	ldrb	r3, [r7, #11]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00d      	beq.n	80099de <lwip_netconn_do_delconn+0x36>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099cc:	2b10      	cmp	r3, #16
 80099ce:	d006      	beq.n	80099de <lwip_netconn_do_delconn+0x36>
 80099d0:	4b60      	ldr	r3, [pc, #384]	; (8009b54 <lwip_netconn_do_delconn+0x1ac>)
 80099d2:	f240 425e 	movw	r2, #1118	; 0x45e
 80099d6:	4960      	ldr	r1, [pc, #384]	; (8009b58 <lwip_netconn_do_delconn+0x1b0>)
 80099d8:	4860      	ldr	r0, [pc, #384]	; (8009b5c <lwip_netconn_do_delconn+0x1b4>)
 80099da:	f00f faab 	bl	8018f34 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80099de:	7afb      	ldrb	r3, [r7, #11]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d005      	beq.n	80099f0 <lwip_netconn_do_delconn+0x48>
 80099e4:	7afb      	ldrb	r3, [r7, #11]
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d002      	beq.n	80099f0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80099ea:	7afb      	ldrb	r3, [r7, #11]
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d109      	bne.n	8009a04 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80099f0:	7afb      	ldrb	r3, [r7, #11]
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	d10a      	bne.n	8009a0c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	7f1b      	ldrb	r3, [r3, #28]
 80099fc:	f003 0304 	and.w	r3, r3, #4
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d103      	bne.n	8009a0c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	22fb      	movs	r2, #251	; 0xfb
 8009a08:	711a      	strb	r2, [r3, #4]
 8009a0a:	e097      	b.n	8009b3c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009a0c:	7afb      	ldrb	r3, [r7, #11]
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d10d      	bne.n	8009a2e <lwip_netconn_do_delconn+0x86>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	7f1b      	ldrb	r3, [r3, #28]
 8009a18:	f003 0304 	and.w	r3, r3, #4
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d106      	bne.n	8009a2e <lwip_netconn_do_delconn+0x86>
 8009a20:	4b4c      	ldr	r3, [pc, #304]	; (8009b54 <lwip_netconn_do_delconn+0x1ac>)
 8009a22:	f240 427a 	movw	r2, #1146	; 0x47a
 8009a26:	494e      	ldr	r1, [pc, #312]	; (8009b60 <lwip_netconn_do_delconn+0x1b8>)
 8009a28:	484c      	ldr	r0, [pc, #304]	; (8009b5c <lwip_netconn_do_delconn+0x1b4>)
 8009a2a:	f00f fa83 	bl	8018f34 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7ff fdcd 	bl	80095d8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d05f      	beq.n	8009b08 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a52:	2b10      	cmp	r3, #16
 8009a54:	d00d      	beq.n	8009a72 <lwip_netconn_do_delconn+0xca>
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	d151      	bne.n	8009afe <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f00a fc7e 	bl	801436c <udp_remove>
          break;
 8009a70:	e046      	b.n	8009b00 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d006      	beq.n	8009a8a <lwip_netconn_do_delconn+0xe2>
 8009a7c:	4b35      	ldr	r3, [pc, #212]	; (8009b54 <lwip_netconn_do_delconn+0x1ac>)
 8009a7e:	f240 4294 	movw	r2, #1172	; 0x494
 8009a82:	4938      	ldr	r1, [pc, #224]	; (8009b64 <lwip_netconn_do_delconn+0x1bc>)
 8009a84:	4835      	ldr	r0, [pc, #212]	; (8009b5c <lwip_netconn_do_delconn+0x1b4>)
 8009a86:	f00f fa55 	bl	8018f34 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2204      	movs	r2, #4
 8009a90:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2203      	movs	r2, #3
 8009a96:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7ff fe14 	bl	80096d4 <lwip_netconn_do_close_internal>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d04b      	beq.n	8009b4a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	785b      	ldrb	r3, [r3, #1]
 8009ab8:	2b04      	cmp	r3, #4
 8009aba:	d006      	beq.n	8009aca <lwip_netconn_do_delconn+0x122>
 8009abc:	4b25      	ldr	r3, [pc, #148]	; (8009b54 <lwip_netconn_do_delconn+0x1ac>)
 8009abe:	f240 429a 	movw	r2, #1178	; 0x49a
 8009ac2:	4929      	ldr	r1, [pc, #164]	; (8009b68 <lwip_netconn_do_delconn+0x1c0>)
 8009ac4:	4825      	ldr	r0, [pc, #148]	; (8009b5c <lwip_netconn_do_delconn+0x1b4>)
 8009ac6:	f00f fa35 	bl	8018f34 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009aca:	4828      	ldr	r0, [pc, #160]	; (8009b6c <lwip_netconn_do_delconn+0x1c4>)
 8009acc:	f00e ffef 	bl	8018aae <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	330c      	adds	r3, #12
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f00e ff46 	bl	801896a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009ade:	4823      	ldr	r0, [pc, #140]	; (8009b6c <lwip_netconn_do_delconn+0x1c4>)
 8009ae0:	f00e ffd6 	bl	8018a90 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	785b      	ldrb	r3, [r3, #1]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d02d      	beq.n	8009b4a <lwip_netconn_do_delconn+0x1a2>
 8009aee:	4b19      	ldr	r3, [pc, #100]	; (8009b54 <lwip_netconn_do_delconn+0x1ac>)
 8009af0:	f240 429e 	movw	r2, #1182	; 0x49e
 8009af4:	491c      	ldr	r1, [pc, #112]	; (8009b68 <lwip_netconn_do_delconn+0x1c0>)
 8009af6:	4819      	ldr	r0, [pc, #100]	; (8009b5c <lwip_netconn_do_delconn+0x1b4>)
 8009af8:	f00f fa1c 	bl	8018f34 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009afc:	e025      	b.n	8009b4a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009afe:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2200      	movs	r2, #0
 8009b06:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d007      	beq.n	8009b22 <lwip_netconn_do_delconn+0x17a>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	6810      	ldr	r0, [r2, #0]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2100      	movs	r1, #0
 8009b20:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d007      	beq.n	8009b3c <lwip_netconn_do_delconn+0x194>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	6810      	ldr	r0, [r2, #0]
 8009b36:	2200      	movs	r2, #0
 8009b38:	2102      	movs	r1, #2
 8009b3a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	330c      	adds	r3, #12
 8009b42:	4618      	mov	r0, r3
 8009b44:	f00e ff5c 	bl	8018a00 <sys_sem_valid>
 8009b48:	e000      	b.n	8009b4c <lwip_netconn_do_delconn+0x1a4>
          return;
 8009b4a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	0801a7cc 	.word	0x0801a7cc
 8009b58:	0801ab3c 	.word	0x0801ab3c
 8009b5c:	0801a810 	.word	0x0801a810
 8009b60:	0801ab50 	.word	0x0801ab50
 8009b64:	0801ab70 	.word	0x0801ab70
 8009b68:	0801ab8c 	.word	0x0801ab8c
 8009b6c:	2000d9d4 	.word	0x2000d9d4

08009b70 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d025      	beq.n	8009bd2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b90:	2b10      	cmp	r3, #16
 8009b92:	d00e      	beq.n	8009bb2 <lwip_netconn_do_bind+0x42>
 8009b94:	2b20      	cmp	r3, #32
 8009b96:	d119      	bne.n	8009bcc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6858      	ldr	r0, [r3, #4]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	6899      	ldr	r1, [r3, #8]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	899b      	ldrh	r3, [r3, #12]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f00a faca 	bl	8014140 <udp_bind>
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]
        break;
 8009bb0:	e011      	b.n	8009bd6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6858      	ldr	r0, [r3, #4]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	6899      	ldr	r1, [r3, #8]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	899b      	ldrh	r3, [r3, #12]
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	f003 ffbb 	bl	800db3c <tcp_bind>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	73fb      	strb	r3, [r7, #15]
        break;
 8009bca:	e004      	b.n	8009bd6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009bcc:	23fa      	movs	r3, #250	; 0xfa
 8009bce:	73fb      	strb	r3, [r7, #15]
        break;
 8009bd0:	e001      	b.n	8009bd6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009bd2:	23fa      	movs	r3, #250	; 0xfa
 8009bd4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	7bfa      	ldrb	r2, [r7, #15]
 8009bda:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009bdc:	bf00      	nop
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d102      	bne.n	8009c06 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009c00:	f06f 0305 	mvn.w	r3, #5
 8009c04:	e070      	b.n	8009ce8 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	785b      	ldrb	r3, [r3, #1]
 8009c0a:	2b03      	cmp	r3, #3
 8009c0c:	d006      	beq.n	8009c1c <lwip_netconn_do_connected+0x38>
 8009c0e:	4b38      	ldr	r3, [pc, #224]	; (8009cf0 <lwip_netconn_do_connected+0x10c>)
 8009c10:	f240 5223 	movw	r2, #1315	; 0x523
 8009c14:	4937      	ldr	r1, [pc, #220]	; (8009cf4 <lwip_netconn_do_connected+0x110>)
 8009c16:	4838      	ldr	r0, [pc, #224]	; (8009cf8 <lwip_netconn_do_connected+0x114>)
 8009c18:	f00f f98c 	bl	8018f34 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	6a1b      	ldr	r3, [r3, #32]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10c      	bne.n	8009c3e <lwip_netconn_do_connected+0x5a>
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	7f1b      	ldrb	r3, [r3, #28]
 8009c28:	f003 0304 	and.w	r3, r3, #4
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d106      	bne.n	8009c3e <lwip_netconn_do_connected+0x5a>
 8009c30:	4b2f      	ldr	r3, [pc, #188]	; (8009cf0 <lwip_netconn_do_connected+0x10c>)
 8009c32:	f240 5224 	movw	r2, #1316	; 0x524
 8009c36:	4931      	ldr	r1, [pc, #196]	; (8009cfc <lwip_netconn_do_connected+0x118>)
 8009c38:	482f      	ldr	r0, [pc, #188]	; (8009cf8 <lwip_netconn_do_connected+0x114>)
 8009c3a:	f00f f97b 	bl	8018f34 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d008      	beq.n	8009c58 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	79fa      	ldrb	r2, [r7, #7]
 8009c4c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	330c      	adds	r3, #12
 8009c56:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c60:	2b10      	cmp	r3, #16
 8009c62:	d106      	bne.n	8009c72 <lwip_netconn_do_connected+0x8e>
 8009c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d102      	bne.n	8009c72 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8009c6c:	69b8      	ldr	r0, [r7, #24]
 8009c6e:	f7ff fa97 	bl	80091a0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	7f1b      	ldrb	r3, [r3, #28]
 8009c76:	f003 0304 	and.w	r3, r3, #4
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	bf0c      	ite	eq
 8009c7e:	2301      	moveq	r3, #1
 8009c80:	2300      	movne	r3, #0
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	7f1b      	ldrb	r3, [r3, #28]
 8009c8a:	f023 0304 	bic.w	r3, r3, #4
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d002      	beq.n	8009ca0 <lwip_netconn_do_connected+0xbc>
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10c      	bne.n	8009cba <lwip_netconn_do_connected+0xd6>
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d102      	bne.n	8009cac <lwip_netconn_do_connected+0xc8>
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d006      	beq.n	8009cba <lwip_netconn_do_connected+0xd6>
 8009cac:	4b10      	ldr	r3, [pc, #64]	; (8009cf0 <lwip_netconn_do_connected+0x10c>)
 8009cae:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8009cb2:	4913      	ldr	r1, [pc, #76]	; (8009d00 <lwip_netconn_do_connected+0x11c>)
 8009cb4:	4810      	ldr	r0, [pc, #64]	; (8009cf8 <lwip_netconn_do_connected+0x114>)
 8009cb6:	f00f f93d 	bl	8018f34 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d005      	beq.n	8009cda <lwip_netconn_do_connected+0xf6>
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2102      	movs	r1, #2
 8009cd6:	69b8      	ldr	r0, [r7, #24]
 8009cd8:	4798      	blx	r3

  if (was_blocking) {
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009ce0:	69f8      	ldr	r0, [r7, #28]
 8009ce2:	f00e fe73 	bl	80189cc <sys_sem_signal>
  }
  return ERR_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3720      	adds	r7, #32
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	0801a7cc 	.word	0x0801a7cc
 8009cf4:	0801ab94 	.word	0x0801ab94
 8009cf8:	0801a810 	.word	0x0801a810
 8009cfc:	0801abb4 	.word	0x0801abb4
 8009d00:	0801abf4 	.word	0x0801abf4

08009d04 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d102      	bne.n	8009d20 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009d1a:	23f1      	movs	r3, #241	; 0xf1
 8009d1c:	75fb      	strb	r3, [r7, #23]
 8009d1e:	e09b      	b.n	8009e58 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d2a:	2b10      	cmp	r3, #16
 8009d2c:	d00f      	beq.n	8009d4e <lwip_netconn_do_connect+0x4a>
 8009d2e:	2b20      	cmp	r3, #32
 8009d30:	f040 8087 	bne.w	8009e42 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6858      	ldr	r0, [r3, #4]
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	6899      	ldr	r1, [r3, #8]
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	899b      	ldrh	r3, [r3, #12]
 8009d42:	461a      	mov	r2, r3
 8009d44:	f00a fa84 	bl	8014250 <udp_connect>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	75fb      	strb	r3, [r7, #23]
        break;
 8009d4c:	e084      	b.n	8009e58 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	785b      	ldrb	r3, [r3, #1]
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d102      	bne.n	8009d5e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009d58:	23f7      	movs	r3, #247	; 0xf7
 8009d5a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009d5c:	e07b      	b.n	8009e56 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	785b      	ldrb	r3, [r3, #1]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009d68:	23f6      	movs	r3, #246	; 0xf6
 8009d6a:	75fb      	strb	r3, [r7, #23]
        break;
 8009d6c:	e073      	b.n	8009e56 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7ff fa14 	bl	80091a0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	6858      	ldr	r0, [r3, #4]
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	6899      	ldr	r1, [r3, #8]
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	899a      	ldrh	r2, [r3, #12]
 8009d86:	4b38      	ldr	r3, [pc, #224]	; (8009e68 <lwip_netconn_do_connect+0x164>)
 8009d88:	f004 f93c 	bl	800e004 <tcp_connect>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d15e      	bne.n	8009e56 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	7f1b      	ldrb	r3, [r3, #28]
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	bf14      	ite	ne
 8009da6:	2301      	movne	r3, #1
 8009da8:	2300      	moveq	r3, #0
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2203      	movs	r2, #3
 8009db4:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d009      	beq.n	8009dd0 <lwip_netconn_do_connect+0xcc>
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	7f1a      	ldrb	r2, [r3, #28]
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f042 0204 	orr.w	r2, r2, #4
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	771a      	strb	r2, [r3, #28]
 8009dce:	e008      	b.n	8009de2 <lwip_netconn_do_connect+0xde>
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	7f1a      	ldrb	r2, [r3, #28]
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f022 0204 	bic.w	r2, r2, #4
 8009dde:	b2d2      	uxtb	r2, r2
 8009de0:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8009de8:	23fb      	movs	r3, #251	; 0xfb
 8009dea:	75fb      	strb	r3, [r7, #23]
        break;
 8009dec:	e033      	b.n	8009e56 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	785b      	ldrb	r3, [r3, #1]
 8009dfc:	2b03      	cmp	r3, #3
 8009dfe:	d006      	beq.n	8009e0e <lwip_netconn_do_connect+0x10a>
 8009e00:	4b1a      	ldr	r3, [pc, #104]	; (8009e6c <lwip_netconn_do_connect+0x168>)
 8009e02:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8009e06:	491a      	ldr	r1, [pc, #104]	; (8009e70 <lwip_netconn_do_connect+0x16c>)
 8009e08:	481a      	ldr	r0, [pc, #104]	; (8009e74 <lwip_netconn_do_connect+0x170>)
 8009e0a:	f00f f893 	bl	8018f34 <iprintf>
              UNLOCK_TCPIP_CORE();
 8009e0e:	481a      	ldr	r0, [pc, #104]	; (8009e78 <lwip_netconn_do_connect+0x174>)
 8009e10:	f00e fe4d 	bl	8018aae <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	330c      	adds	r3, #12
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f00e fda4 	bl	801896a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009e22:	4815      	ldr	r0, [pc, #84]	; (8009e78 <lwip_netconn_do_connect+0x174>)
 8009e24:	f00e fe34 	bl	8018a90 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	785b      	ldrb	r3, [r3, #1]
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d116      	bne.n	8009e60 <lwip_netconn_do_connect+0x15c>
 8009e32:	4b0e      	ldr	r3, [pc, #56]	; (8009e6c <lwip_netconn_do_connect+0x168>)
 8009e34:	f240 5274 	movw	r2, #1396	; 0x574
 8009e38:	490d      	ldr	r1, [pc, #52]	; (8009e70 <lwip_netconn_do_connect+0x16c>)
 8009e3a:	480e      	ldr	r0, [pc, #56]	; (8009e74 <lwip_netconn_do_connect+0x170>)
 8009e3c:	f00f f87a 	bl	8018f34 <iprintf>
              return;
 8009e40:	e00e      	b.n	8009e60 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009e42:	4b0a      	ldr	r3, [pc, #40]	; (8009e6c <lwip_netconn_do_connect+0x168>)
 8009e44:	f240 527d 	movw	r2, #1405	; 0x57d
 8009e48:	490c      	ldr	r1, [pc, #48]	; (8009e7c <lwip_netconn_do_connect+0x178>)
 8009e4a:	480a      	ldr	r0, [pc, #40]	; (8009e74 <lwip_netconn_do_connect+0x170>)
 8009e4c:	f00f f872 	bl	8018f34 <iprintf>
 8009e50:	23fa      	movs	r3, #250	; 0xfa
 8009e52:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009e54:	e000      	b.n	8009e58 <lwip_netconn_do_connect+0x154>
        break;
 8009e56:	bf00      	nop
    }
  }
  msg->err = err;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	7dfa      	ldrb	r2, [r7, #23]
 8009e5c:	711a      	strb	r2, [r3, #4]
 8009e5e:	e000      	b.n	8009e62 <lwip_netconn_do_connect+0x15e>
              return;
 8009e60:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009e62:	3718      	adds	r7, #24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	08009be5 	.word	0x08009be5
 8009e6c:	0801a7cc 	.word	0x0801a7cc
 8009e70:	0801ab8c 	.word	0x0801ab8c
 8009e74:	0801a810 	.word	0x0801a810
 8009e78:	2000d9d4 	.word	0x2000d9d4
 8009e7c:	0801ac14 	.word	0x0801ac14

08009e80 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d07f      	beq.n	8009f96 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ea0:	2b10      	cmp	r3, #16
 8009ea2:	d175      	bne.n	8009f90 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	785b      	ldrb	r3, [r3, #1]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d165      	bne.n	8009f7a <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	7d1b      	ldrb	r3, [r3, #20]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d002      	beq.n	8009ec0 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009eba:	23fa      	movs	r3, #250	; 0xfa
 8009ebc:	72fb      	strb	r3, [r7, #11]
 8009ebe:	e06c      	b.n	8009f9a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009ec0:	23ff      	movs	r3, #255	; 0xff
 8009ec2:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	f107 020b 	add.w	r2, r7, #11
 8009ece:	7cf9      	ldrb	r1, [r7, #19]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f003 fefd 	bl	800dcd0 <tcp_listen_with_backlog_and_err>
 8009ed6:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d05d      	beq.n	8009f9a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3310      	adds	r3, #16
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f00e fcfa 	bl	80188de <sys_mbox_valid>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00b      	beq.n	8009f08 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3310      	adds	r3, #16
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f00e fc6a 	bl	80187d0 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3310      	adds	r3, #16
 8009f02:	4618      	mov	r0, r3
 8009f04:	f00e fcfc 	bl	8018900 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3314      	adds	r3, #20
 8009f12:	4618      	mov	r0, r3
 8009f14:	f00e fce3 	bl	80188de <sys_mbox_valid>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d108      	bne.n	8009f30 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	3314      	adds	r3, #20
 8009f24:	2106      	movs	r1, #6
 8009f26:	4618      	mov	r0, r3
 8009f28:	f00e fc30 	bl	801878c <sys_mbox_new>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009f30:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d118      	bne.n	8009f6a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	685a      	ldr	r2, [r3, #4]
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4619      	mov	r1, r3
 8009f54:	4610      	mov	r0, r2
 8009f56:	f004 ffbb 	bl	800eed0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	4912      	ldr	r1, [pc, #72]	; (8009fac <lwip_netconn_do_listen+0x12c>)
 8009f62:	4618      	mov	r0, r3
 8009f64:	f005 f82c 	bl	800efc0 <tcp_accept>
 8009f68:	e017      	b.n	8009f9a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f003 fc94 	bl	800d898 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2200      	movs	r2, #0
 8009f76:	605a      	str	r2, [r3, #4]
 8009f78:	e00f      	b.n	8009f9a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	785b      	ldrb	r3, [r3, #1]
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d102      	bne.n	8009f8a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	72fb      	strb	r3, [r7, #11]
 8009f88:	e007      	b.n	8009f9a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009f8a:	23f5      	movs	r3, #245	; 0xf5
 8009f8c:	72fb      	strb	r3, [r7, #11]
 8009f8e:	e004      	b.n	8009f9a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009f90:	23f0      	movs	r3, #240	; 0xf0
 8009f92:	72fb      	strb	r3, [r7, #11]
 8009f94:	e001      	b.n	8009f9a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009f96:	23f5      	movs	r3, #245	; 0xf5
 8009f98:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009f9a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009fa2:	bf00      	nop
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	080091f1 	.word	0x080091f1

08009fb0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d022      	beq.n	800a012 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fd6:	2b10      	cmp	r3, #16
 8009fd8:	d11b      	bne.n	800a012 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fe6:	d202      	bcs.n	8009fee <lwip_netconn_do_recv+0x3e>
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	e001      	b.n	8009ff2 <lwip_netconn_do_recv+0x42>
 8009fee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ff2:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	89fa      	ldrh	r2, [r7, #14]
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	4618      	mov	r0, r3
 800a000:	f003 ff6a 	bl	800ded8 <tcp_recved>
        remaining -= recved;
 800a004:	89fb      	ldrh	r3, [r7, #14]
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e6      	bne.n	8009fe0 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a012:	bf00      	nop
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
	...

0800a01c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b088      	sub	sp, #32
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a028:	2300      	movs	r3, #0
 800a02a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d106      	bne.n	800a040 <lwip_netconn_do_writemore+0x24>
 800a032:	4b96      	ldr	r3, [pc, #600]	; (800a28c <lwip_netconn_do_writemore+0x270>)
 800a034:	f240 6273 	movw	r2, #1651	; 0x673
 800a038:	4995      	ldr	r1, [pc, #596]	; (800a290 <lwip_netconn_do_writemore+0x274>)
 800a03a:	4896      	ldr	r0, [pc, #600]	; (800a294 <lwip_netconn_do_writemore+0x278>)
 800a03c:	f00e ff7a 	bl	8018f34 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	785b      	ldrb	r3, [r3, #1]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d006      	beq.n	800a056 <lwip_netconn_do_writemore+0x3a>
 800a048:	4b90      	ldr	r3, [pc, #576]	; (800a28c <lwip_netconn_do_writemore+0x270>)
 800a04a:	f240 6274 	movw	r2, #1652	; 0x674
 800a04e:	4992      	ldr	r1, [pc, #584]	; (800a298 <lwip_netconn_do_writemore+0x27c>)
 800a050:	4890      	ldr	r0, [pc, #576]	; (800a294 <lwip_netconn_do_writemore+0x278>)
 800a052:	f00e ff6f 	bl	8018f34 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d106      	bne.n	800a06c <lwip_netconn_do_writemore+0x50>
 800a05e:	4b8b      	ldr	r3, [pc, #556]	; (800a28c <lwip_netconn_do_writemore+0x270>)
 800a060:	f240 6275 	movw	r2, #1653	; 0x675
 800a064:	498d      	ldr	r1, [pc, #564]	; (800a29c <lwip_netconn_do_writemore+0x280>)
 800a066:	488b      	ldr	r0, [pc, #556]	; (800a294 <lwip_netconn_do_writemore+0x278>)
 800a068:	f00e ff64 	bl	8018f34 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d106      	bne.n	800a082 <lwip_netconn_do_writemore+0x66>
 800a074:	4b85      	ldr	r3, [pc, #532]	; (800a28c <lwip_netconn_do_writemore+0x270>)
 800a076:	f240 6276 	movw	r2, #1654	; 0x676
 800a07a:	4989      	ldr	r1, [pc, #548]	; (800a2a0 <lwip_netconn_do_writemore+0x284>)
 800a07c:	4885      	ldr	r0, [pc, #532]	; (800a294 <lwip_netconn_do_writemore+0x278>)
 800a07e:	f00e ff59 	bl	8018f34 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	699a      	ldr	r2, [r3, #24]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a1b      	ldr	r3, [r3, #32]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d306      	bcc.n	800a0a0 <lwip_netconn_do_writemore+0x84>
 800a092:	4b7e      	ldr	r3, [pc, #504]	; (800a28c <lwip_netconn_do_writemore+0x270>)
 800a094:	f240 6277 	movw	r2, #1655	; 0x677
 800a098:	4982      	ldr	r1, [pc, #520]	; (800a2a4 <lwip_netconn_do_writemore+0x288>)
 800a09a:	487e      	ldr	r0, [pc, #504]	; (800a294 <lwip_netconn_do_writemore+0x278>)
 800a09c:	f00e ff4a 	bl	8018f34 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	899b      	ldrh	r3, [r3, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d106      	bne.n	800a0b8 <lwip_netconn_do_writemore+0x9c>
 800a0aa:	4b78      	ldr	r3, [pc, #480]	; (800a28c <lwip_netconn_do_writemore+0x270>)
 800a0ac:	f240 6279 	movw	r2, #1657	; 0x679
 800a0b0:	497d      	ldr	r1, [pc, #500]	; (800a2a8 <lwip_netconn_do_writemore+0x28c>)
 800a0b2:	4878      	ldr	r0, [pc, #480]	; (800a294 <lwip_netconn_do_writemore+0x278>)
 800a0b4:	f00e ff3e 	bl	8018f34 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a1b      	ldr	r3, [r3, #32]
 800a0bc:	7f1b      	ldrb	r3, [r3, #28]
 800a0be:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	7f1b      	ldrb	r3, [r3, #28]
 800a0c4:	f003 0302 	and.w	r3, r3, #2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d104      	bne.n	800a0d6 <lwip_netconn_do_writemore+0xba>
 800a0cc:	7ebb      	ldrb	r3, [r7, #26]
 800a0ce:	f003 0304 	and.w	r3, r3, #4
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <lwip_netconn_do_writemore+0xbe>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e000      	b.n	800a0dc <lwip_netconn_do_writemore+0xc0>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	685a      	ldr	r2, [r3, #4]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a108:	d307      	bcc.n	800a11a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a10a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a10e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a110:	7ebb      	ldrb	r3, [r7, #26]
 800a112:	f043 0302 	orr.w	r3, r3, #2
 800a116:	76bb      	strb	r3, [r7, #26]
 800a118:	e001      	b.n	800a11e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a126:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a128:	89fa      	ldrh	r2, [r7, #14]
 800a12a:	8bbb      	ldrh	r3, [r7, #28]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d216      	bcs.n	800a15e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a130:	89fb      	ldrh	r3, [r7, #14]
 800a132:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a134:	7e3b      	ldrb	r3, [r7, #24]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00d      	beq.n	800a156 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a13a:	8bbb      	ldrh	r3, [r7, #28]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10e      	bne.n	800a15e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a1b      	ldr	r3, [r3, #32]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d102      	bne.n	800a150 <lwip_netconn_do_writemore+0x134>
 800a14a:	f06f 0306 	mvn.w	r3, #6
 800a14e:	e000      	b.n	800a152 <lwip_netconn_do_writemore+0x136>
 800a150:	2300      	movs	r3, #0
 800a152:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a154:	e07d      	b.n	800a252 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a156:	7ebb      	ldrb	r3, [r7, #26]
 800a158:	f043 0302 	orr.w	r3, r3, #2
 800a15c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	691a      	ldr	r2, [r3, #16]
 800a164:	8bbb      	ldrh	r3, [r7, #28]
 800a166:	441a      	add	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a1b      	ldr	r3, [r3, #32]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	429a      	cmp	r2, r3
 800a172:	d906      	bls.n	800a182 <lwip_netconn_do_writemore+0x166>
 800a174:	4b45      	ldr	r3, [pc, #276]	; (800a28c <lwip_netconn_do_writemore+0x270>)
 800a176:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a17a:	494c      	ldr	r1, [pc, #304]	; (800a2ac <lwip_netconn_do_writemore+0x290>)
 800a17c:	4845      	ldr	r0, [pc, #276]	; (800a294 <lwip_netconn_do_writemore+0x278>)
 800a17e:	f00e fed9 	bl	8018f34 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a182:	8bbb      	ldrh	r3, [r7, #28]
 800a184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a188:	4293      	cmp	r3, r2
 800a18a:	d103      	bne.n	800a194 <lwip_netconn_do_writemore+0x178>
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a192:	d209      	bcs.n	800a1a8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a198:	8bba      	ldrh	r2, [r7, #28]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d10b      	bne.n	800a1b6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	899b      	ldrh	r3, [r3, #12]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d906      	bls.n	800a1b6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a1ac:	7ebb      	ldrb	r3, [r7, #26]
 800a1ae:	f043 0302 	orr.w	r3, r3, #2
 800a1b2:	76bb      	strb	r3, [r7, #26]
 800a1b4:	e001      	b.n	800a1ba <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6858      	ldr	r0, [r3, #4]
 800a1be:	7ebb      	ldrb	r3, [r7, #26]
 800a1c0:	8bba      	ldrh	r2, [r7, #28]
 800a1c2:	6979      	ldr	r1, [r7, #20]
 800a1c4:	f007 fdc6 	bl	8011d54 <tcp_write>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a1cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d12c      	bne.n	800a22e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	6999      	ldr	r1, [r3, #24]
 800a1da:	8bba      	ldrh	r2, [r7, #28]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a1b      	ldr	r3, [r3, #32]
 800a1e0:	440a      	add	r2, r1
 800a1e2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a1b      	ldr	r3, [r3, #32]
 800a1e8:	6919      	ldr	r1, [r3, #16]
 800a1ea:	8bba      	ldrh	r2, [r7, #28]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	440a      	add	r2, r1
 800a1f2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	691a      	ldr	r2, [r3, #16]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	429a      	cmp	r2, r3
 800a204:	d113      	bne.n	800a22e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	899a      	ldrh	r2, [r3, #12]
 800a20c:	3a01      	subs	r2, #1
 800a20e:	b292      	uxth	r2, r2
 800a210:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	899b      	ldrh	r3, [r3, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d008      	beq.n	800a22e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a1b      	ldr	r3, [r3, #32]
 800a220:	689a      	ldr	r2, [r3, #8]
 800a222:	3208      	adds	r2, #8
 800a224:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	2200      	movs	r2, #0
 800a22c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a22e:	7e7b      	ldrb	r3, [r7, #25]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d004      	beq.n	800a23e <lwip_netconn_do_writemore+0x222>
 800a234:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f43f af50 	beq.w	800a0de <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a23e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d004      	beq.n	800a250 <lwip_netconn_do_writemore+0x234>
 800a246:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24e:	d146      	bne.n	800a2de <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a250:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a252:	7e3b      	ldrb	r3, [r7, #24]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d02b      	beq.n	800a2b0 <lwip_netconn_do_writemore+0x294>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a1b      	ldr	r3, [r3, #32]
 800a25c:	699a      	ldr	r2, [r3, #24]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	429a      	cmp	r2, r3
 800a266:	d223      	bcs.n	800a2b0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d005      	beq.n	800a27c <lwip_netconn_do_writemore+0x260>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	2200      	movs	r2, #0
 800a276:	2103      	movs	r1, #3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	7f1b      	ldrb	r3, [r3, #28]
 800a280:	f043 0310 	orr.w	r3, r3, #16
 800a284:	b2da      	uxtb	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	771a      	strb	r2, [r3, #28]
 800a28a:	e028      	b.n	800a2de <lwip_netconn_do_writemore+0x2c2>
 800a28c:	0801a7cc 	.word	0x0801a7cc
 800a290:	0801a924 	.word	0x0801a924
 800a294:	0801a810 	.word	0x0801a810
 800a298:	0801ac2c 	.word	0x0801ac2c
 800a29c:	0801a934 	.word	0x0801a934
 800a2a0:	0801ac4c 	.word	0x0801ac4c
 800a2a4:	0801ac64 	.word	0x0801ac64
 800a2a8:	0801aca4 	.word	0x0801aca4
 800a2ac:	0801accc 	.word	0x0801accc
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a2b8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a2bc:	d305      	bcc.n	800a2ca <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a2c6:	2b04      	cmp	r3, #4
 800a2c8:	d909      	bls.n	800a2de <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d005      	beq.n	800a2de <lwip_netconn_do_writemore+0x2c2>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	2103      	movs	r1, #3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a2de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d11d      	bne.n	800a322 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	699a      	ldr	r2, [r3, #24]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a1b      	ldr	r3, [r3, #32]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d002      	beq.n	800a2fc <lwip_netconn_do_writemore+0x2e0>
 800a2f6:	7e3b      	ldrb	r3, [r7, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	4618      	mov	r0, r3
 800a306:	f008 fb0f 	bl	8012928 <tcp_output>
 800a30a:	4603      	mov	r3, r0
 800a30c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a30e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a312:	f113 0f04 	cmn.w	r3, #4
 800a316:	d12c      	bne.n	800a372 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a318:	7b3b      	ldrb	r3, [r7, #12]
 800a31a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a31c:	2301      	movs	r3, #1
 800a31e:	76fb      	strb	r3, [r7, #27]
 800a320:	e027      	b.n	800a372 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a322:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32a:	d120      	bne.n	800a36e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	4618      	mov	r0, r3
 800a332:	f008 faf9 	bl	8012928 <tcp_output>
 800a336:	4603      	mov	r3, r0
 800a338:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a33a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a33e:	f113 0f04 	cmn.w	r3, #4
 800a342:	d104      	bne.n	800a34e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a344:	7b7b      	ldrb	r3, [r7, #13]
 800a346:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a348:	2301      	movs	r3, #1
 800a34a:	76fb      	strb	r3, [r7, #27]
 800a34c:	e011      	b.n	800a372 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a34e:	7e3b      	ldrb	r3, [r7, #24]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00e      	beq.n	800a372 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d102      	bne.n	800a364 <lwip_netconn_do_writemore+0x348>
 800a35e:	f06f 0306 	mvn.w	r3, #6
 800a362:	e000      	b.n	800a366 <lwip_netconn_do_writemore+0x34a>
 800a364:	2300      	movs	r3, #0
 800a366:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a368:	2301      	movs	r3, #1
 800a36a:	76fb      	strb	r3, [r7, #27]
 800a36c:	e001      	b.n	800a372 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a36e:	2301      	movs	r3, #1
 800a370:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a372:	7efb      	ldrb	r3, [r7, #27]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d015      	beq.n	800a3a4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a1b      	ldr	r3, [r3, #32]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	330c      	adds	r3, #12
 800a380:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	7ffa      	ldrb	r2, [r7, #31]
 800a388:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a396:	78fb      	ldrb	r3, [r7, #3]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d006      	beq.n	800a3aa <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a39c:	68b8      	ldr	r0, [r7, #8]
 800a39e:	f00e fb15 	bl	80189cc <sys_sem_signal>
 800a3a2:	e002      	b.n	800a3aa <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a8:	e000      	b.n	800a3ac <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3720      	adds	r7, #32
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fe fbce 	bl	8008b66 <netconn_err>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d166      	bne.n	800a4a4 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3e0:	2b10      	cmp	r3, #16
 800a3e2:	d15d      	bne.n	800a4a0 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	785b      	ldrb	r3, [r3, #1]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d002      	beq.n	800a3f4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a3ee:	23fb      	movs	r3, #251	; 0xfb
 800a3f0:	73fb      	strb	r3, [r7, #15]
 800a3f2:	e057      	b.n	800a4a4 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d04d      	beq.n	800a49a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2201      	movs	r2, #1
 800a404:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6a1b      	ldr	r3, [r3, #32]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d006      	beq.n	800a41e <lwip_netconn_do_write+0x6a>
 800a410:	4b28      	ldr	r3, [pc, #160]	; (800a4b4 <lwip_netconn_do_write+0x100>)
 800a412:	f240 7223 	movw	r2, #1827	; 0x723
 800a416:	4928      	ldr	r1, [pc, #160]	; (800a4b8 <lwip_netconn_do_write+0x104>)
 800a418:	4828      	ldr	r0, [pc, #160]	; (800a4bc <lwip_netconn_do_write+0x108>)
 800a41a:	f00e fd8b 	bl	8018f34 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <lwip_netconn_do_write+0x80>
 800a426:	4b23      	ldr	r3, [pc, #140]	; (800a4b4 <lwip_netconn_do_write+0x100>)
 800a428:	f240 7224 	movw	r2, #1828	; 0x724
 800a42c:	4924      	ldr	r1, [pc, #144]	; (800a4c0 <lwip_netconn_do_write+0x10c>)
 800a42e:	4823      	ldr	r0, [pc, #140]	; (800a4bc <lwip_netconn_do_write+0x108>)
 800a430:	f00e fd80 	bl	8018f34 <iprintf>
        msg->conn->current_msg = msg;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2100      	movs	r1, #0
 800a442:	4618      	mov	r0, r3
 800a444:	f7ff fdea 	bl	800a01c <lwip_netconn_do_writemore>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d02e      	beq.n	800a4ac <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	785b      	ldrb	r3, [r3, #1]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d006      	beq.n	800a466 <lwip_netconn_do_write+0xb2>
 800a458:	4b16      	ldr	r3, [pc, #88]	; (800a4b4 <lwip_netconn_do_write+0x100>)
 800a45a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a45e:	4919      	ldr	r1, [pc, #100]	; (800a4c4 <lwip_netconn_do_write+0x110>)
 800a460:	4816      	ldr	r0, [pc, #88]	; (800a4bc <lwip_netconn_do_write+0x108>)
 800a462:	f00e fd67 	bl	8018f34 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a466:	4818      	ldr	r0, [pc, #96]	; (800a4c8 <lwip_netconn_do_write+0x114>)
 800a468:	f00e fb21 	bl	8018aae <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	330c      	adds	r3, #12
 800a472:	2100      	movs	r1, #0
 800a474:	4618      	mov	r0, r3
 800a476:	f00e fa78 	bl	801896a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a47a:	4813      	ldr	r0, [pc, #76]	; (800a4c8 <lwip_netconn_do_write+0x114>)
 800a47c:	f00e fb08 	bl	8018a90 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	785b      	ldrb	r3, [r3, #1]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d110      	bne.n	800a4ac <lwip_netconn_do_write+0xf8>
 800a48a:	4b0a      	ldr	r3, [pc, #40]	; (800a4b4 <lwip_netconn_do_write+0x100>)
 800a48c:	f240 722c 	movw	r2, #1836	; 0x72c
 800a490:	490c      	ldr	r1, [pc, #48]	; (800a4c4 <lwip_netconn_do_write+0x110>)
 800a492:	480a      	ldr	r0, [pc, #40]	; (800a4bc <lwip_netconn_do_write+0x108>)
 800a494:	f00e fd4e 	bl	8018f34 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a498:	e008      	b.n	800a4ac <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a49a:	23f5      	movs	r3, #245	; 0xf5
 800a49c:	73fb      	strb	r3, [r7, #15]
 800a49e:	e001      	b.n	800a4a4 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a4a0:	23fa      	movs	r3, #250	; 0xfa
 800a4a2:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	7bfa      	ldrb	r2, [r7, #15]
 800a4a8:	711a      	strb	r2, [r3, #4]
 800a4aa:	e000      	b.n	800a4ae <lwip_netconn_do_write+0xfa>
        return;
 800a4ac:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	0801a7cc 	.word	0x0801a7cc
 800a4b8:	0801ab70 	.word	0x0801ab70
 800a4bc:	0801a810 	.word	0x0801a810
 800a4c0:	0801acf8 	.word	0x0801acf8
 800a4c4:	0801ab8c 	.word	0x0801ab8c
 800a4c8:	2000d9d4 	.word	0x2000d9d4

0800a4cc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	785b      	ldrb	r3, [r3, #1]
 800a4de:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d069      	beq.n	800a5be <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a4f4:	2b10      	cmp	r3, #16
 800a4f6:	d162      	bne.n	800a5be <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d002      	beq.n	800a506 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a500:	7afb      	ldrb	r3, [r7, #11]
 800a502:	2b02      	cmp	r3, #2
 800a504:	d05b      	beq.n	800a5be <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a506:	7afb      	ldrb	r3, [r7, #11]
 800a508:	2b03      	cmp	r3, #3
 800a50a:	d103      	bne.n	800a514 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	22f5      	movs	r2, #245	; 0xf5
 800a510:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a512:	e059      	b.n	800a5c8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a514:	7afb      	ldrb	r3, [r7, #11]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d103      	bne.n	800a522 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	22fb      	movs	r2, #251	; 0xfb
 800a51e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a520:	e052      	b.n	800a5c8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	7a1b      	ldrb	r3, [r3, #8]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d004      	beq.n	800a538 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff f850 	bl	80095d8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6a1b      	ldr	r3, [r3, #32]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d006      	beq.n	800a550 <lwip_netconn_do_close+0x84>
 800a542:	4b23      	ldr	r3, [pc, #140]	; (800a5d0 <lwip_netconn_do_close+0x104>)
 800a544:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a548:	4922      	ldr	r1, [pc, #136]	; (800a5d4 <lwip_netconn_do_close+0x108>)
 800a54a:	4823      	ldr	r0, [pc, #140]	; (800a5d8 <lwip_netconn_do_close+0x10c>)
 800a54c:	f00e fcf2 	bl	8018f34 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	2204      	movs	r2, #4
 800a556:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2100      	movs	r1, #0
 800a566:	4618      	mov	r0, r3
 800a568:	f7ff f8b4 	bl	80096d4 <lwip_netconn_do_close_internal>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d029      	beq.n	800a5c6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	785b      	ldrb	r3, [r3, #1]
 800a578:	2b04      	cmp	r3, #4
 800a57a:	d006      	beq.n	800a58a <lwip_netconn_do_close+0xbe>
 800a57c:	4b14      	ldr	r3, [pc, #80]	; (800a5d0 <lwip_netconn_do_close+0x104>)
 800a57e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a582:	4916      	ldr	r1, [pc, #88]	; (800a5dc <lwip_netconn_do_close+0x110>)
 800a584:	4814      	ldr	r0, [pc, #80]	; (800a5d8 <lwip_netconn_do_close+0x10c>)
 800a586:	f00e fcd5 	bl	8018f34 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a58a:	4815      	ldr	r0, [pc, #84]	; (800a5e0 <lwip_netconn_do_close+0x114>)
 800a58c:	f00e fa8f 	bl	8018aae <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	330c      	adds	r3, #12
 800a596:	2100      	movs	r1, #0
 800a598:	4618      	mov	r0, r3
 800a59a:	f00e f9e6 	bl	801896a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a59e:	4810      	ldr	r0, [pc, #64]	; (800a5e0 <lwip_netconn_do_close+0x114>)
 800a5a0:	f00e fa76 	bl	8018a90 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	785b      	ldrb	r3, [r3, #1]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00b      	beq.n	800a5c6 <lwip_netconn_do_close+0xfa>
 800a5ae:	4b08      	ldr	r3, [pc, #32]	; (800a5d0 <lwip_netconn_do_close+0x104>)
 800a5b0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a5b4:	4909      	ldr	r1, [pc, #36]	; (800a5dc <lwip_netconn_do_close+0x110>)
 800a5b6:	4808      	ldr	r0, [pc, #32]	; (800a5d8 <lwip_netconn_do_close+0x10c>)
 800a5b8:	f00e fcbc 	bl	8018f34 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a5bc:	e003      	b.n	800a5c6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	22f5      	movs	r2, #245	; 0xf5
 800a5c2:	711a      	strb	r2, [r3, #4]
 800a5c4:	e000      	b.n	800a5c8 <lwip_netconn_do_close+0xfc>
      return;
 800a5c6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	0801a7cc 	.word	0x0801a7cc
 800a5d4:	0801ab70 	.word	0x0801ab70
 800a5d8:	0801a810 	.word	0x0801a810
 800a5dc:	0801ab8c 	.word	0x0801ab8c
 800a5e0:	2000d9d4 	.word	0x2000d9d4

0800a5e4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d013      	beq.n	800a61a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00b      	beq.n	800a612 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f002 fc90 	bl	800cf24 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	605a      	str	r2, [r3, #4]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	685a      	ldr	r2, [r3, #4]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	2006      	movs	r0, #6
 800a616:	f001 fdd5 	bl	800c1c4 <memp_free>
  }
}
 800a61a:	bf00      	nop
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d108      	bne.n	800a648 <netbuf_data+0x24>
 800a636:	4b1b      	ldr	r3, [pc, #108]	; (800a6a4 <netbuf_data+0x80>)
 800a638:	22c6      	movs	r2, #198	; 0xc6
 800a63a:	491b      	ldr	r1, [pc, #108]	; (800a6a8 <netbuf_data+0x84>)
 800a63c:	481b      	ldr	r0, [pc, #108]	; (800a6ac <netbuf_data+0x88>)
 800a63e:	f00e fc79 	bl	8018f34 <iprintf>
 800a642:	f06f 030f 	mvn.w	r3, #15
 800a646:	e029      	b.n	800a69c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d108      	bne.n	800a660 <netbuf_data+0x3c>
 800a64e:	4b15      	ldr	r3, [pc, #84]	; (800a6a4 <netbuf_data+0x80>)
 800a650:	22c7      	movs	r2, #199	; 0xc7
 800a652:	4917      	ldr	r1, [pc, #92]	; (800a6b0 <netbuf_data+0x8c>)
 800a654:	4815      	ldr	r0, [pc, #84]	; (800a6ac <netbuf_data+0x88>)
 800a656:	f00e fc6d 	bl	8018f34 <iprintf>
 800a65a:	f06f 030f 	mvn.w	r3, #15
 800a65e:	e01d      	b.n	800a69c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d108      	bne.n	800a678 <netbuf_data+0x54>
 800a666:	4b0f      	ldr	r3, [pc, #60]	; (800a6a4 <netbuf_data+0x80>)
 800a668:	22c8      	movs	r2, #200	; 0xc8
 800a66a:	4912      	ldr	r1, [pc, #72]	; (800a6b4 <netbuf_data+0x90>)
 800a66c:	480f      	ldr	r0, [pc, #60]	; (800a6ac <netbuf_data+0x88>)
 800a66e:	f00e fc61 	bl	8018f34 <iprintf>
 800a672:	f06f 030f 	mvn.w	r3, #15
 800a676:	e011      	b.n	800a69c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d102      	bne.n	800a686 <netbuf_data+0x62>
    return ERR_BUF;
 800a680:	f06f 0301 	mvn.w	r3, #1
 800a684:	e00a      	b.n	800a69c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	895a      	ldrh	r2, [r3, #10]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	0801ad24 	.word	0x0801ad24
 800a6a8:	0801ae2c 	.word	0x0801ae2c
 800a6ac:	0801ad74 	.word	0x0801ad74
 800a6b0:	0801ae48 	.word	0x0801ae48
 800a6b4:	0801ae68 	.word	0x0801ae68

0800a6b8 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d108      	bne.n	800a6d8 <netbuf_next+0x20>
 800a6c6:	4b11      	ldr	r3, [pc, #68]	; (800a70c <netbuf_next+0x54>)
 800a6c8:	22e0      	movs	r2, #224	; 0xe0
 800a6ca:	4911      	ldr	r1, [pc, #68]	; (800a710 <netbuf_next+0x58>)
 800a6cc:	4811      	ldr	r0, [pc, #68]	; (800a714 <netbuf_next+0x5c>)
 800a6ce:	f00e fc31 	bl	8018f34 <iprintf>
 800a6d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d6:	e014      	b.n	800a702 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d102      	bne.n	800a6e8 <netbuf_next+0x30>
    return -1;
 800a6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e6:	e00c      	b.n	800a702 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <netbuf_next+0x48>
    return 1;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e000      	b.n	800a702 <netbuf_next+0x4a>
  }
  return 0;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	0801ad24 	.word	0x0801ad24
 800a710:	0801ae84 	.word	0x0801ae84
 800a714:	0801ad74 	.word	0x0801ad74

0800a718 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a722:	f009 f9b9 	bl	8013a98 <sys_timeouts_sleeptime>
 800a726:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72e:	d10b      	bne.n	800a748 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a730:	4813      	ldr	r0, [pc, #76]	; (800a780 <tcpip_timeouts_mbox_fetch+0x68>)
 800a732:	f00e f9bc 	bl	8018aae <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a736:	2200      	movs	r2, #0
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f00e f874 	bl	8018828 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a740:	480f      	ldr	r0, [pc, #60]	; (800a780 <tcpip_timeouts_mbox_fetch+0x68>)
 800a742:	f00e f9a5 	bl	8018a90 <sys_mutex_lock>
    return;
 800a746:	e018      	b.n	800a77a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d102      	bne.n	800a754 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a74e:	f009 f969 	bl	8013a24 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a752:	e7e6      	b.n	800a722 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a754:	480a      	ldr	r0, [pc, #40]	; (800a780 <tcpip_timeouts_mbox_fetch+0x68>)
 800a756:	f00e f9aa 	bl	8018aae <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	6839      	ldr	r1, [r7, #0]
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f00e f862 	bl	8018828 <sys_arch_mbox_fetch>
 800a764:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a766:	4806      	ldr	r0, [pc, #24]	; (800a780 <tcpip_timeouts_mbox_fetch+0x68>)
 800a768:	f00e f992 	bl	8018a90 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a772:	d102      	bne.n	800a77a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a774:	f009 f956 	bl	8013a24 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a778:	e7d3      	b.n	800a722 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	2000d9d4 	.word	0x2000d9d4

0800a784 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a78c:	4810      	ldr	r0, [pc, #64]	; (800a7d0 <tcpip_thread+0x4c>)
 800a78e:	f00e f97f 	bl	8018a90 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a792:	4b10      	ldr	r3, [pc, #64]	; (800a7d4 <tcpip_thread+0x50>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d005      	beq.n	800a7a6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a79a:	4b0e      	ldr	r3, [pc, #56]	; (800a7d4 <tcpip_thread+0x50>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a0e      	ldr	r2, [pc, #56]	; (800a7d8 <tcpip_thread+0x54>)
 800a7a0:	6812      	ldr	r2, [r2, #0]
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a7a6:	f107 030c 	add.w	r3, r7, #12
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	480b      	ldr	r0, [pc, #44]	; (800a7dc <tcpip_thread+0x58>)
 800a7ae:	f7ff ffb3 	bl	800a718 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d106      	bne.n	800a7c6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a7b8:	4b09      	ldr	r3, [pc, #36]	; (800a7e0 <tcpip_thread+0x5c>)
 800a7ba:	2291      	movs	r2, #145	; 0x91
 800a7bc:	4909      	ldr	r1, [pc, #36]	; (800a7e4 <tcpip_thread+0x60>)
 800a7be:	480a      	ldr	r0, [pc, #40]	; (800a7e8 <tcpip_thread+0x64>)
 800a7c0:	f00e fbb8 	bl	8018f34 <iprintf>
      continue;
 800a7c4:	e003      	b.n	800a7ce <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 f80f 	bl	800a7ec <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a7ce:	e7ea      	b.n	800a7a6 <tcpip_thread+0x22>
 800a7d0:	2000d9d4 	.word	0x2000d9d4
 800a7d4:	2000d9c8 	.word	0x2000d9c8
 800a7d8:	2000d9cc 	.word	0x2000d9cc
 800a7dc:	2000d9d0 	.word	0x2000d9d0
 800a7e0:	0801aebc 	.word	0x0801aebc
 800a7e4:	0801aeec 	.word	0x0801aeec
 800a7e8:	0801af0c 	.word	0x0801af0c

0800a7ec <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d026      	beq.n	800a84a <tcpip_thread_handle_msg+0x5e>
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	dc2b      	bgt.n	800a858 <tcpip_thread_handle_msg+0x6c>
 800a800:	2b00      	cmp	r3, #0
 800a802:	d002      	beq.n	800a80a <tcpip_thread_handle_msg+0x1e>
 800a804:	2b01      	cmp	r3, #1
 800a806:	d015      	beq.n	800a834 <tcpip_thread_handle_msg+0x48>
 800a808:	e026      	b.n	800a858 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	6850      	ldr	r0, [r2, #4]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	6892      	ldr	r2, [r2, #8]
 800a816:	4611      	mov	r1, r2
 800a818:	4798      	blx	r3
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	4618      	mov	r0, r3
 800a826:	f002 fb7d 	bl	800cf24 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a82a:	6879      	ldr	r1, [r7, #4]
 800a82c:	2009      	movs	r0, #9
 800a82e:	f001 fcc9 	bl	800c1c4 <memp_free>
      break;
 800a832:	e018      	b.n	800a866 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	6892      	ldr	r2, [r2, #8]
 800a83c:	4610      	mov	r0, r2
 800a83e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a840:	6879      	ldr	r1, [r7, #4]
 800a842:	2008      	movs	r0, #8
 800a844:	f001 fcbe 	bl	800c1c4 <memp_free>
      break;
 800a848:	e00d      	b.n	800a866 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	6892      	ldr	r2, [r2, #8]
 800a852:	4610      	mov	r0, r2
 800a854:	4798      	blx	r3
      break;
 800a856:	e006      	b.n	800a866 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a858:	4b05      	ldr	r3, [pc, #20]	; (800a870 <tcpip_thread_handle_msg+0x84>)
 800a85a:	22cf      	movs	r2, #207	; 0xcf
 800a85c:	4905      	ldr	r1, [pc, #20]	; (800a874 <tcpip_thread_handle_msg+0x88>)
 800a85e:	4806      	ldr	r0, [pc, #24]	; (800a878 <tcpip_thread_handle_msg+0x8c>)
 800a860:	f00e fb68 	bl	8018f34 <iprintf>
      break;
 800a864:	bf00      	nop
  }
}
 800a866:	bf00      	nop
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	0801aebc 	.word	0x0801aebc
 800a874:	0801aeec 	.word	0x0801aeec
 800a878:	0801af0c 	.word	0x0801af0c

0800a87c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a888:	481a      	ldr	r0, [pc, #104]	; (800a8f4 <tcpip_inpkt+0x78>)
 800a88a:	f00e f828 	bl	80188de <sys_mbox_valid>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d105      	bne.n	800a8a0 <tcpip_inpkt+0x24>
 800a894:	4b18      	ldr	r3, [pc, #96]	; (800a8f8 <tcpip_inpkt+0x7c>)
 800a896:	22fc      	movs	r2, #252	; 0xfc
 800a898:	4918      	ldr	r1, [pc, #96]	; (800a8fc <tcpip_inpkt+0x80>)
 800a89a:	4819      	ldr	r0, [pc, #100]	; (800a900 <tcpip_inpkt+0x84>)
 800a89c:	f00e fb4a 	bl	8018f34 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a8a0:	2009      	movs	r0, #9
 800a8a2:	f001 fc19 	bl	800c0d8 <memp_malloc>
 800a8a6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d102      	bne.n	800a8b4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b2:	e01a      	b.n	800a8ea <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a8cc:	6979      	ldr	r1, [r7, #20]
 800a8ce:	4809      	ldr	r0, [pc, #36]	; (800a8f4 <tcpip_inpkt+0x78>)
 800a8d0:	f00d ff90 	bl	80187f4 <sys_mbox_trypost>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d006      	beq.n	800a8e8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a8da:	6979      	ldr	r1, [r7, #20]
 800a8dc:	2009      	movs	r0, #9
 800a8de:	f001 fc71 	bl	800c1c4 <memp_free>
    return ERR_MEM;
 800a8e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e6:	e000      	b.n	800a8ea <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a8e8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	2000d9d0 	.word	0x2000d9d0
 800a8f8:	0801aebc 	.word	0x0801aebc
 800a8fc:	0801af34 	.word	0x0801af34
 800a900:	0801af0c 	.word	0x0801af0c

0800a904 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a914:	f003 0318 	and.w	r3, r3, #24
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d006      	beq.n	800a92a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a91c:	4a08      	ldr	r2, [pc, #32]	; (800a940 <tcpip_input+0x3c>)
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7ff ffab 	bl	800a87c <tcpip_inpkt>
 800a926:	4603      	mov	r3, r0
 800a928:	e005      	b.n	800a936 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a92a:	4a06      	ldr	r2, [pc, #24]	; (800a944 <tcpip_input+0x40>)
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f7ff ffa4 	bl	800a87c <tcpip_inpkt>
 800a934:	4603      	mov	r3, r0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	080185e1 	.word	0x080185e1
 800a944:	080174ad 	.word	0x080174ad

0800a948 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a952:	4819      	ldr	r0, [pc, #100]	; (800a9b8 <tcpip_try_callback+0x70>)
 800a954:	f00d ffc3 	bl	80188de <sys_mbox_valid>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d106      	bne.n	800a96c <tcpip_try_callback+0x24>
 800a95e:	4b17      	ldr	r3, [pc, #92]	; (800a9bc <tcpip_try_callback+0x74>)
 800a960:	f240 125d 	movw	r2, #349	; 0x15d
 800a964:	4916      	ldr	r1, [pc, #88]	; (800a9c0 <tcpip_try_callback+0x78>)
 800a966:	4817      	ldr	r0, [pc, #92]	; (800a9c4 <tcpip_try_callback+0x7c>)
 800a968:	f00e fae4 	bl	8018f34 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a96c:	2008      	movs	r0, #8
 800a96e:	f001 fbb3 	bl	800c0d8 <memp_malloc>
 800a972:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d102      	bne.n	800a980 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a97a:	f04f 33ff 	mov.w	r3, #4294967295
 800a97e:	e017      	b.n	800a9b0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2201      	movs	r2, #1
 800a984:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	683a      	ldr	r2, [r7, #0]
 800a990:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a992:	68f9      	ldr	r1, [r7, #12]
 800a994:	4808      	ldr	r0, [pc, #32]	; (800a9b8 <tcpip_try_callback+0x70>)
 800a996:	f00d ff2d 	bl	80187f4 <sys_mbox_trypost>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d006      	beq.n	800a9ae <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a9a0:	68f9      	ldr	r1, [r7, #12]
 800a9a2:	2008      	movs	r0, #8
 800a9a4:	f001 fc0e 	bl	800c1c4 <memp_free>
    return ERR_MEM;
 800a9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ac:	e000      	b.n	800a9b0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	2000d9d0 	.word	0x2000d9d0
 800a9bc:	0801aebc 	.word	0x0801aebc
 800a9c0:	0801af34 	.word	0x0801af34
 800a9c4:	0801af0c 	.word	0x0801af0c

0800a9c8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a9d4:	4806      	ldr	r0, [pc, #24]	; (800a9f0 <tcpip_send_msg_wait_sem+0x28>)
 800a9d6:	f00e f85b 	bl	8018a90 <sys_mutex_lock>
  fn(apimsg);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	68b8      	ldr	r0, [r7, #8]
 800a9de:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a9e0:	4803      	ldr	r0, [pc, #12]	; (800a9f0 <tcpip_send_msg_wait_sem+0x28>)
 800a9e2:	f00e f864 	bl	8018aae <sys_mutex_unlock>
  return ERR_OK;
 800a9e6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	2000d9d4 	.word	0x2000d9d4

0800a9f4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af02      	add	r7, sp, #8
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a9fe:	f000 fec1 	bl	800b784 <lwip_init>

  tcpip_init_done = initfunc;
 800aa02:	4a17      	ldr	r2, [pc, #92]	; (800aa60 <tcpip_init+0x6c>)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800aa08:	4a16      	ldr	r2, [pc, #88]	; (800aa64 <tcpip_init+0x70>)
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800aa0e:	2106      	movs	r1, #6
 800aa10:	4815      	ldr	r0, [pc, #84]	; (800aa68 <tcpip_init+0x74>)
 800aa12:	f00d febb 	bl	801878c <sys_mbox_new>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d006      	beq.n	800aa2a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800aa1c:	4b13      	ldr	r3, [pc, #76]	; (800aa6c <tcpip_init+0x78>)
 800aa1e:	f240 2261 	movw	r2, #609	; 0x261
 800aa22:	4913      	ldr	r1, [pc, #76]	; (800aa70 <tcpip_init+0x7c>)
 800aa24:	4813      	ldr	r0, [pc, #76]	; (800aa74 <tcpip_init+0x80>)
 800aa26:	f00e fa85 	bl	8018f34 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800aa2a:	4813      	ldr	r0, [pc, #76]	; (800aa78 <tcpip_init+0x84>)
 800aa2c:	f00e f814 	bl	8018a58 <sys_mutex_new>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d006      	beq.n	800aa44 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800aa36:	4b0d      	ldr	r3, [pc, #52]	; (800aa6c <tcpip_init+0x78>)
 800aa38:	f240 2265 	movw	r2, #613	; 0x265
 800aa3c:	490f      	ldr	r1, [pc, #60]	; (800aa7c <tcpip_init+0x88>)
 800aa3e:	480d      	ldr	r0, [pc, #52]	; (800aa74 <tcpip_init+0x80>)
 800aa40:	f00e fa78 	bl	8018f34 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800aa44:	2300      	movs	r3, #0
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	490c      	ldr	r1, [pc, #48]	; (800aa80 <tcpip_init+0x8c>)
 800aa50:	480c      	ldr	r0, [pc, #48]	; (800aa84 <tcpip_init+0x90>)
 800aa52:	f00e f839 	bl	8018ac8 <sys_thread_new>
}
 800aa56:	bf00      	nop
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	2000d9c8 	.word	0x2000d9c8
 800aa64:	2000d9cc 	.word	0x2000d9cc
 800aa68:	2000d9d0 	.word	0x2000d9d0
 800aa6c:	0801aebc 	.word	0x0801aebc
 800aa70:	0801af44 	.word	0x0801af44
 800aa74:	0801af0c 	.word	0x0801af0c
 800aa78:	2000d9d4 	.word	0x2000d9d4
 800aa7c:	0801af68 	.word	0x0801af68
 800aa80:	0800a785 	.word	0x0800a785
 800aa84:	0801af8c 	.word	0x0801af8c

0800aa88 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d002      	beq.n	800aa9e <fs_open+0x16>
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d102      	bne.n	800aaa4 <fs_open+0x1c>
    return ERR_ARG;
 800aa9e:	f06f 030f 	mvn.w	r3, #15
 800aaa2:	e028      	b.n	800aaf6 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800aaa4:	4b16      	ldr	r3, [pc, #88]	; (800ab00 <fs_open+0x78>)
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	e020      	b.n	800aaec <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	4619      	mov	r1, r3
 800aab0:	6838      	ldr	r0, [r7, #0]
 800aab2:	f7f5 fb9d 	bl	80001f0 <strcmp>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d114      	bne.n	800aae6 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	689a      	ldr	r2, [r3, #8]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	68da      	ldr	r2, [r3, #12]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	68da      	ldr	r2, [r3, #12]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	7c1a      	ldrb	r2, [r3, #16]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	e007      	b.n	800aaf6 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1db      	bne.n	800aaaa <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800aaf2:	f06f 0305 	mvn.w	r3, #5
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	08028028 	.word	0x08028028

0800ab04 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800ab0c:	bf00      	nop
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685a      	ldr	r2, [r3, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	1ad3      	subs	r3, r2, r3
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	370c      	adds	r7, #12
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b082      	sub	sp, #8
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800ab3e:	222c      	movs	r2, #44	; 0x2c
 800ab40:	2100      	movs	r1, #0
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f00e f959 	bl	8018dfa <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800ab48:	bf00      	nop
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800ab56:	202c      	movs	r0, #44	; 0x2c
 800ab58:	f001 f91a 	bl	800bd90 <mem_malloc>
 800ab5c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d002      	beq.n	800ab6a <http_state_alloc+0x1a>
    http_state_init(ret);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7ff ffe6 	bl	800ab36 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800ab6a:	687b      	ldr	r3, [r7, #4]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d007      	beq.n	800ab94 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7ff ffbb 	bl	800ab04 <fs_close>
    hs->handle = NULL;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d007      	beq.n	800abac <http_state_eof+0x38>
    pbuf_free(hs->req);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6a1b      	ldr	r3, [r3, #32]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f002 f9bf 	bl	800cf24 <pbuf_free>
    hs->req = NULL;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800abac:	bf00      	nop
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d005      	beq.n	800abce <http_state_free+0x1a>
    http_state_eof(hs);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7ff ffd6 	bl	800ab74 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 ff47 	bl	800ba5c <mem_free>
  }
}
 800abce:	bf00      	nop
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
 800abe4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d106      	bne.n	800abfa <http_write+0x22>
 800abec:	4b2c      	ldr	r3, [pc, #176]	; (800aca0 <http_write+0xc8>)
 800abee:	f240 2219 	movw	r2, #537	; 0x219
 800abf2:	492c      	ldr	r1, [pc, #176]	; (800aca4 <http_write+0xcc>)
 800abf4:	482c      	ldr	r0, [pc, #176]	; (800aca8 <http_write+0xd0>)
 800abf6:	f00e f99d 	bl	8018f34 <iprintf>
  len = *length;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800ac00:	8afb      	ldrh	r3, [r7, #22]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d101      	bne.n	800ac0a <http_write+0x32>
    return ERR_OK;
 800ac06:	2300      	movs	r3, #0
 800ac08:	e045      	b.n	800ac96 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac10:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800ac12:	8aba      	ldrh	r2, [r7, #20]
 800ac14:	8afb      	ldrh	r3, [r7, #22]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d201      	bcs.n	800ac1e <http_write+0x46>
    len = max_len;
 800ac1a:	8abb      	ldrh	r3, [r7, #20]
 800ac1c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac22:	005b      	lsls	r3, r3, #1
 800ac24:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800ac26:	8afa      	ldrh	r2, [r7, #22]
 800ac28:	8abb      	ldrh	r3, [r7, #20]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d901      	bls.n	800ac32 <http_write+0x5a>
    len = max_len;
 800ac2e:	8abb      	ldrh	r3, [r7, #20]
 800ac30:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800ac32:	78fb      	ldrb	r3, [r7, #3]
 800ac34:	8afa      	ldrh	r2, [r7, #22]
 800ac36:	68b9      	ldr	r1, [r7, #8]
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f007 f88b 	bl	8011d54 <tcp_write>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800ac42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4a:	d10f      	bne.n	800ac6c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d004      	beq.n	800ac60 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800ac5c:	2b08      	cmp	r3, #8
 800ac5e:	d902      	bls.n	800ac66 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800ac60:	2301      	movs	r3, #1
 800ac62:	82fb      	strh	r3, [r7, #22]
 800ac64:	e002      	b.n	800ac6c <http_write+0x94>
      } else {
        len /= 2;
 800ac66:	8afb      	ldrh	r3, [r7, #22]
 800ac68:	085b      	lsrs	r3, r3, #1
 800ac6a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800ac6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac74:	d102      	bne.n	800ac7c <http_write+0xa4>
 800ac76:	8afb      	ldrh	r3, [r7, #22]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d8da      	bhi.n	800ac32 <http_write+0x5a>

  if (err == ERR_OK) {
 800ac7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d103      	bne.n	800ac8c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	8afa      	ldrh	r2, [r7, #22]
 800ac88:	801a      	strh	r2, [r3, #0]
 800ac8a:	e002      	b.n	800ac92 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800ac92:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3718      	adds	r7, #24
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	0801afdc 	.word	0x0801afdc
 800aca4:	0801b014 	.word	0x0801b014
 800aca8:	0801b024 	.word	0x0801b024

0800acac <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	4613      	mov	r3, r2
 800acb8:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800acba:	2100      	movs	r1, #0
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f004 f907 	bl	800eed0 <tcp_arg>
  altcp_recv(pcb, NULL);
 800acc2:	2100      	movs	r1, #0
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f004 f915 	bl	800eef4 <tcp_recv>
  altcp_err(pcb, NULL);
 800acca:	2100      	movs	r1, #0
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f004 f955 	bl	800ef7c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800acd2:	2200      	movs	r2, #0
 800acd4:	2100      	movs	r1, #0
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f004 f98a 	bl	800eff0 <tcp_poll>
  altcp_sent(pcb, NULL);
 800acdc:	2100      	movs	r1, #0
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f004 f92a 	bl	800ef38 <tcp_sent>
  if (hs != NULL) {
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800acea:	68b8      	ldr	r0, [r7, #8]
 800acec:	f7ff ff62 	bl	800abb4 <http_state_free>
  }

  if (abort_conn) {
 800acf0:	79fb      	ldrb	r3, [r7, #7]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d004      	beq.n	800ad00 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f002 ff14 	bl	800db24 <tcp_abort>
    return ERR_OK;
 800acfc:	2300      	movs	r3, #0
 800acfe:	e00f      	b.n	800ad20 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f002 fdc9 	bl	800d898 <tcp_close>
 800ad06:	4603      	mov	r3, r0
 800ad08:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800ad0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d004      	beq.n	800ad1c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ad12:	2204      	movs	r2, #4
 800ad14:	4904      	ldr	r1, [pc, #16]	; (800ad28 <http_close_or_abort_conn+0x7c>)
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f004 f96a 	bl	800eff0 <tcp_poll>
  }
  return err;
 800ad1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	0800b3ef 	.word	0x0800b3ef

0800ad2c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800ad36:	2200      	movs	r2, #0
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff ffb6 	bl	800acac <http_close_or_abort_conn>
 800ad40:	4603      	mov	r3, r0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b082      	sub	sp, #8
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f7ff ffe8 	bl	800ad2c <http_close_conn>
  }
}
 800ad5c:	bf00      	nop
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	695b      	ldr	r3, [r3, #20]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d105      	bne.n	800ad82 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff ffe6 	bl	800ad4a <http_eof>
    return 0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	e016      	b.n	800adb0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	695b      	ldr	r3, [r3, #20]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7ff fec6 	bl	800ab18 <fs_bytes_left>
 800ad8c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	dc05      	bgt.n	800ada0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ad94:	6839      	ldr	r1, [r7, #0]
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff ffd7 	bl	800ad4a <http_eof>
    return 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	e007      	b.n	800adb0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800ada0:	4b05      	ldr	r3, [pc, #20]	; (800adb8 <http_check_eof+0x54>)
 800ada2:	f240 429d 	movw	r2, #1181	; 0x49d
 800ada6:	4905      	ldr	r1, [pc, #20]	; (800adbc <http_check_eof+0x58>)
 800ada8:	4805      	ldr	r0, [pc, #20]	; (800adc0 <http_check_eof+0x5c>)
 800adaa:	f00e f8c3 	bl	8018f34 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800adae:	2301      	movs	r3, #1
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	0801afdc 	.word	0x0801afdc
 800adbc:	0801b04c 	.word	0x0801b04c
 800adc0:	0801b024 	.word	0x0801b024

0800adc4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800adce:	2300      	movs	r3, #0
 800add0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800adda:	4293      	cmp	r3, r2
 800addc:	d803      	bhi.n	800ade6 <http_send_data_nonssi+0x22>
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	e001      	b.n	800adea <http_send_data_nonssi+0x26>
 800ade6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800adea:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	6999      	ldr	r1, [r3, #24]
 800adf0:	f107 020c 	add.w	r2, r7, #12
 800adf4:	2300      	movs	r3, #0
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7ff feee 	bl	800abd8 <http_write>
 800adfc:	4603      	mov	r3, r0
 800adfe:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800ae00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10d      	bne.n	800ae24 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	89ba      	ldrh	r2, [r7, #12]
 800ae12:	441a      	add	r2, r3
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	89ba      	ldrh	r2, [r7, #12]
 800ae1e:	1a9a      	subs	r2, r3, r2
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b084      	sub	sp, #16
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
 800ae36:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d101      	bne.n	800ae46 <http_send+0x18>
    return 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	e025      	b.n	800ae92 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d108      	bne.n	800ae60 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7ff ff87 	bl	800ad64 <http_check_eof>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <http_send+0x32>
      return 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	e018      	b.n	800ae92 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7ff ffae 	bl	800adc4 <http_send_data_nonssi>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10d      	bne.n	800ae90 <http_send+0x62>
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	695b      	ldr	r3, [r3, #20]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff fe4d 	bl	800ab18 <fs_bytes_left>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	dc05      	bgt.n	800ae90 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7ff ff5f 	bl	800ad4a <http_eof>
    return 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	e000      	b.n	800ae92 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
	...

0800ae9c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	4a1c      	ldr	r2, [pc, #112]	; (800af1c <http_get_404_file+0x80>)
 800aeaa:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	f7ff fde7 	bl	800aa88 <fs_open>
 800aeba:	4603      	mov	r3, r0
 800aebc:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800aebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d024      	beq.n	800af10 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	4a15      	ldr	r2, [pc, #84]	; (800af20 <http_get_404_file+0x84>)
 800aeca:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4619      	mov	r1, r3
 800aed4:	4610      	mov	r0, r2
 800aed6:	f7ff fdd7 	bl	800aa88 <fs_open>
 800aeda:	4603      	mov	r3, r0
 800aedc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800aede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d014      	beq.n	800af10 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	4a0e      	ldr	r2, [pc, #56]	; (800af24 <http_get_404_file+0x88>)
 800aeea:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4619      	mov	r1, r3
 800aef4:	4610      	mov	r0, r2
 800aef6:	f7ff fdc7 	bl	800aa88 <fs_open>
 800aefa:	4603      	mov	r3, r0
 800aefc:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800aefe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d004      	beq.n	800af10 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2200      	movs	r2, #0
 800af0a:	601a      	str	r2, [r3, #0]
        return NULL;
 800af0c:	2300      	movs	r3, #0
 800af0e:	e000      	b.n	800af12 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800af10:	687b      	ldr	r3, [r7, #4]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	0801b084 	.word	0x0801b084
 800af20:	0801b090 	.word	0x0801b090
 800af24:	0801b09c 	.word	0x0801b09c

0800af28 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b08e      	sub	sp, #56	; 0x38
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800af38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d106      	bne.n	800af4c <http_parse_request+0x24>
 800af3e:	4b65      	ldr	r3, [pc, #404]	; (800b0d4 <http_parse_request+0x1ac>)
 800af40:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800af44:	4964      	ldr	r1, [pc, #400]	; (800b0d8 <http_parse_request+0x1b0>)
 800af46:	4865      	ldr	r0, [pc, #404]	; (800b0dc <http_parse_request+0x1b4>)
 800af48:	f00d fff4 	bl	8018f34 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d106      	bne.n	800af60 <http_parse_request+0x38>
 800af52:	4b60      	ldr	r3, [pc, #384]	; (800b0d4 <http_parse_request+0x1ac>)
 800af54:	f240 72af 	movw	r2, #1967	; 0x7af
 800af58:	4961      	ldr	r1, [pc, #388]	; (800b0e0 <http_parse_request+0x1b8>)
 800af5a:	4860      	ldr	r0, [pc, #384]	; (800b0dc <http_parse_request+0x1b4>)
 800af5c:	f00d ffea 	bl	8018f34 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d103      	bne.n	800af70 <http_parse_request+0x48>
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800af70:	f06f 0307 	mvn.w	r3, #7
 800af74:	e0a9      	b.n	800b0ca <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d103      	bne.n	800af86 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af82:	621a      	str	r2, [r3, #32]
 800af84:	e005      	b.n	800af92 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af8c:	4618      	mov	r0, r3
 800af8e:	f002 f897 	bl	800d0c0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800af92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af94:	f002 f86c 	bl	800d070 <pbuf_ref>

  if (hs->req->next != NULL) {
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	6a1b      	ldr	r3, [r3, #32]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d012      	beq.n	800afc8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	891b      	ldrh	r3, [r3, #8]
 800afa8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800afac:	4293      	cmp	r3, r2
 800afae:	bf28      	it	cs
 800afb0:	4613      	movcs	r3, r2
 800afb2:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	6a18      	ldr	r0, [r3, #32]
 800afb8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800afba:	2300      	movs	r3, #0
 800afbc:	4949      	ldr	r1, [pc, #292]	; (800b0e4 <http_parse_request+0x1bc>)
 800afbe:	f002 f9b7 	bl	800d330 <pbuf_copy_partial>
    data = httpd_req_buf;
 800afc2:	4b48      	ldr	r3, [pc, #288]	; (800b0e4 <http_parse_request+0x1bc>)
 800afc4:	637b      	str	r3, [r7, #52]	; 0x34
 800afc6:	e005      	b.n	800afd4 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800afce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd0:	895b      	ldrh	r3, [r3, #10]
 800afd2:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800afd4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800afd6:	2b06      	cmp	r3, #6
 800afd8:	d962      	bls.n	800b0a0 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800afda:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800afdc:	461a      	mov	r2, r3
 800afde:	4942      	ldr	r1, [pc, #264]	; (800b0e8 <http_parse_request+0x1c0>)
 800afe0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800afe2:	f000 fb99 	bl	800b718 <lwip_strnstr>
 800afe6:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800afe8:	6a3b      	ldr	r3, [r7, #32]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d058      	beq.n	800b0a0 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800aff2:	2204      	movs	r2, #4
 800aff4:	493d      	ldr	r1, [pc, #244]	; (800b0ec <http_parse_request+0x1c4>)
 800aff6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aff8:	f00e f925 	bl	8019246 <strncmp>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d116      	bne.n	800b030 <http_parse_request+0x108>
        sp1 = data + 3;
 800b002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b004:	3303      	adds	r3, #3
 800b006:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	1c5a      	adds	r2, r3, #1
 800b00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	b29b      	uxth	r3, r3
 800b012:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	3301      	adds	r3, #1
 800b01c:	8b7a      	ldrh	r2, [r7, #26]
 800b01e:	4934      	ldr	r1, [pc, #208]	; (800b0f0 <http_parse_request+0x1c8>)
 800b020:	4618      	mov	r0, r3
 800b022:	f000 fb79 	bl	800b718 <lwip_strnstr>
 800b026:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800b028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d111      	bne.n	800b052 <http_parse_request+0x12a>
 800b02e:	e006      	b.n	800b03e <http_parse_request+0x116>
        data[4] = 0;
 800b030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b032:	3304      	adds	r3, #4
 800b034:	2200      	movs	r2, #0
 800b036:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800b038:	f06f 030f 	mvn.w	r3, #15
 800b03c:	e045      	b.n	800b0ca <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	3301      	adds	r3, #1
 800b042:	8b7a      	ldrh	r2, [r7, #26]
 800b044:	4928      	ldr	r1, [pc, #160]	; (800b0e8 <http_parse_request+0x1c0>)
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fb66 	bl	800b718 <lwip_strnstr>
 800b04c:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800b04e:	2301      	movs	r3, #1
 800b050:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	3301      	adds	r3, #1
 800b056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800b05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d01e      	beq.n	800b0a0 <http_parse_request+0x178>
 800b062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	429a      	cmp	r2, r3
 800b068:	d91a      	bls.n	800b0a0 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800b06a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b06c:	461a      	mov	r2, r3
 800b06e:	4921      	ldr	r1, [pc, #132]	; (800b0f4 <http_parse_request+0x1cc>)
 800b070:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b072:	f000 fb51 	bl	800b718 <lwip_strnstr>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d011      	beq.n	800b0a0 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	3301      	adds	r3, #1
 800b080:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	2200      	movs	r2, #0
 800b086:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800b088:	8b3b      	ldrh	r3, [r7, #24]
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	4413      	add	r3, r2
 800b08e:	2200      	movs	r2, #0
 800b090:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800b092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b094:	6979      	ldr	r1, [r7, #20]
 800b096:	68b8      	ldr	r0, [r7, #8]
 800b098:	f000 f82e 	bl	800b0f8 <http_find_file>
 800b09c:	4603      	mov	r3, r0
 800b09e:	e014      	b.n	800b0ca <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	6a1b      	ldr	r3, [r3, #32]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f001 ffcb 	bl	800d040 <pbuf_clen>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	891b      	ldrh	r3, [r3, #8]
 800b0b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0b8:	d205      	bcs.n	800b0c6 <http_parse_request+0x19e>
 800b0ba:	8a7b      	ldrh	r3, [r7, #18]
 800b0bc:	2b05      	cmp	r3, #5
 800b0be:	d802      	bhi.n	800b0c6 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800b0c0:	f06f 0304 	mvn.w	r3, #4
 800b0c4:	e001      	b.n	800b0ca <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800b0c6:	f06f 030f 	mvn.w	r3, #15
  }
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3738      	adds	r7, #56	; 0x38
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	0801afdc 	.word	0x0801afdc
 800b0d8:	0801b0a8 	.word	0x0801b0a8
 800b0dc:	0801b024 	.word	0x0801b024
 800b0e0:	0801b0b4 	.word	0x0801b0b4
 800b0e4:	2000d9d8 	.word	0x2000d9d8
 800b0e8:	0801b0c0 	.word	0x0801b0c0
 800b0ec:	0801b0c4 	.word	0x0801b0c4
 800b0f0:	0801b0cc 	.word	0x0801b0cc
 800b0f4:	0801b0d0 	.word	0x0801b0d0

0800b0f8 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b092      	sub	sp, #72	; 0x48
 800b0fc:	af02      	add	r7, sp, #8
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800b104:	2300      	movs	r3, #0
 800b106:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800b108:	2300      	movs	r3, #0
 800b10a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	4618      	mov	r0, r3
 800b116:	f7f5 f875 	bl	8000204 <strlen>
 800b11a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d06b      	beq.n	800b1fa <http_find_file+0x102>
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	3b01      	subs	r3, #1
 800b128:	4413      	add	r3, r2
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	2b2f      	cmp	r3, #47	; 0x2f
 800b12e:	d164      	bne.n	800b1fa <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b130:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b132:	4a53      	ldr	r2, [pc, #332]	; (800b280 <http_find_file+0x188>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d102      	bne.n	800b13e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d15d      	bne.n	800b1fa <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	3b01      	subs	r3, #1
 800b142:	2b3f      	cmp	r3, #63	; 0x3f
 800b144:	bf28      	it	cs
 800b146:	233f      	movcs	r3, #63	; 0x3f
 800b148:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00a      	beq.n	800b166 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b154:	4619      	mov	r1, r3
 800b156:	484a      	ldr	r0, [pc, #296]	; (800b280 <http_find_file+0x188>)
 800b158:	f00d fe27 	bl	8018daa <memcpy>
      http_uri_buf[copy_len] = 0;
 800b15c:	4a48      	ldr	r2, [pc, #288]	; (800b280 <http_find_file+0x188>)
 800b15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b160:	4413      	add	r3, r2
 800b162:	2200      	movs	r2, #0
 800b164:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b166:	2300      	movs	r3, #0
 800b168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b16a:	e043      	b.n	800b1f4 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d028      	beq.n	800b1c4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b174:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800b178:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d01e      	beq.n	800b1be <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800b180:	4a40      	ldr	r2, [pc, #256]	; (800b284 <http_find_file+0x18c>)
 800b182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b184:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f5 f83b 	bl	8000204 <strlen>
 800b18e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800b190:	69fa      	ldr	r2, [r7, #28]
 800b192:	6a3b      	ldr	r3, [r7, #32]
 800b194:	4293      	cmp	r3, r2
 800b196:	bf28      	it	cs
 800b198:	4613      	movcs	r3, r2
 800b19a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	4a38      	ldr	r2, [pc, #224]	; (800b280 <http_find_file+0x188>)
 800b1a0:	1898      	adds	r0, r3, r2
 800b1a2:	4a38      	ldr	r2, [pc, #224]	; (800b284 <http_find_file+0x18c>)
 800b1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	f00d fdfc 	bl	8018daa <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800b1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	4a31      	ldr	r2, [pc, #196]	; (800b280 <http_find_file+0x188>)
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800b1be:	4b30      	ldr	r3, [pc, #192]	; (800b280 <http_find_file+0x188>)
 800b1c0:	633b      	str	r3, [r7, #48]	; 0x30
 800b1c2:	e004      	b.n	800b1ce <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800b1c4:	4a2f      	ldr	r2, [pc, #188]	; (800b284 <http_find_file+0x18c>)
 800b1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1cc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7ff fc58 	bl	800aa88 <fs_open>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800b1dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d104      	bne.n	800b1ee <http_find_file+0xf6>
        uri = file_name;
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800b1ec:	e005      	b.n	800b1fa <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f6:	2b04      	cmp	r3, #4
 800b1f8:	d9b8      	bls.n	800b16c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d124      	bne.n	800b24a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	213f      	movs	r1, #63	; 0x3f
 800b204:	4618      	mov	r0, r3
 800b206:	f00e f811 	bl	801922c <strchr>
 800b20a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800b20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d005      	beq.n	800b21e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b214:	2200      	movs	r2, #0
 800b216:	701a      	strb	r2, [r3, #0]
      params++;
 800b218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b21a:	3301      	adds	r3, #1
 800b21c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	4611      	mov	r1, r2
 800b224:	4618      	mov	r0, r3
 800b226:	f7ff fc2f 	bl	800aa88 <fs_open>
 800b22a:	4603      	mov	r3, r0
 800b22c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b22e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d102      	bne.n	800b23c <http_find_file+0x144>
      file = &hs->file_handle;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	63bb      	str	r3, [r7, #56]	; 0x38
 800b23a:	e006      	b.n	800b24a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800b23c:	f107 0308 	add.w	r3, r7, #8
 800b240:	4619      	mov	r1, r3
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f7ff fe2a 	bl	800ae9c <http_get_404_file>
 800b248:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d106      	bne.n	800b25e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b250:	f107 0308 	add.w	r3, r7, #8
 800b254:	4619      	mov	r1, r3
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f7ff fe20 	bl	800ae9c <http_get_404_file>
 800b25c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	4613      	mov	r3, r2
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f000 f809 	bl	800b288 <http_init_file>
 800b276:	4603      	mov	r3, r0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3740      	adds	r7, #64	; 0x40
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	2000ddd8 	.word	0x2000ddd8
 800b284:	0802803c 	.word	0x0802803c

0800b288 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
 800b294:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d05c      	beq.n	800b356 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d106      	bne.n	800b2b2 <http_init_file+0x2a>
 800b2a4:	4b35      	ldr	r3, [pc, #212]	; (800b37c <http_init_file+0xf4>)
 800b2a6:	f640 120b 	movw	r2, #2315	; 0x90b
 800b2aa:	4935      	ldr	r1, [pc, #212]	; (800b380 <http_init_file+0xf8>)
 800b2ac:	4835      	ldr	r0, [pc, #212]	; (800b384 <http_init_file+0xfc>)
 800b2ae:	f00d fe41 	bl	8018f34 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	da06      	bge.n	800b2d6 <http_init_file+0x4e>
 800b2c8:	4b2c      	ldr	r3, [pc, #176]	; (800b37c <http_init_file+0xf4>)
 800b2ca:	f640 1234 	movw	r2, #2356	; 0x934
 800b2ce:	492e      	ldr	r1, [pc, #184]	; (800b388 <http_init_file+0x100>)
 800b2d0:	482c      	ldr	r0, [pc, #176]	; (800b384 <http_init_file+0xfc>)
 800b2d2:	f00d fe2f 	bl	8018f34 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	695b      	ldr	r3, [r3, #20]
 800b2ec:	7c1b      	ldrb	r3, [r3, #16]
 800b2ee:	f003 0301 	and.w	r3, r3, #1
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d106      	bne.n	800b304 <http_init_file+0x7c>
 800b2f6:	4b21      	ldr	r3, [pc, #132]	; (800b37c <http_init_file+0xf4>)
 800b2f8:	f640 1243 	movw	r2, #2371	; 0x943
 800b2fc:	4923      	ldr	r1, [pc, #140]	; (800b38c <http_init_file+0x104>)
 800b2fe:	4821      	ldr	r0, [pc, #132]	; (800b384 <http_init_file+0xfc>)
 800b300:	f00d fe18 	bl	8018f34 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d032      	beq.n	800b370 <http_init_file+0xe8>
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	7c1b      	ldrb	r3, [r3, #16]
 800b310:	f003 0301 	and.w	r3, r3, #1
 800b314:	2b00      	cmp	r3, #0
 800b316:	d02b      	beq.n	800b370 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6998      	ldr	r0, [r3, #24]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b320:	461a      	mov	r2, r3
 800b322:	491b      	ldr	r1, [pc, #108]	; (800b390 <http_init_file+0x108>)
 800b324:	f000 f9f8 	bl	800b718 <lwip_strnstr>
 800b328:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d01f      	beq.n	800b370 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	1d1a      	adds	r2, r3, #4
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	699b      	ldr	r3, [r3, #24]
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	699a      	ldr	r2, [r3, #24]
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	441a      	add	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	1ad2      	subs	r2, r2, r3
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	625a      	str	r2, [r3, #36]	; 0x24
 800b354:	e00c      	b.n	800b370 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	0801afdc 	.word	0x0801afdc
 800b380:	0801b0d8 	.word	0x0801b0d8
 800b384:	0801b024 	.word	0x0801b024
 800b388:	0801b0ec 	.word	0x0801b0ec
 800b38c:	0801b10c 	.word	0x0801b10c
 800b390:	0801b0d0 	.word	0x0801b0d0

0800b394 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d002      	beq.n	800b3b0 <http_err+0x1c>
    http_state_free(hs);
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f7ff fc02 	bl	800abb4 <http_state_free>
  }
}
 800b3b0:	bf00      	nop
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <http_sent+0x1c>
    return ERR_OK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	e008      	b.n	800b3e6 <http_sent+0x2e>
  }

  hs->retries = 0;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800b3dc:	6979      	ldr	r1, [r7, #20]
 800b3de:	68b8      	ldr	r0, [r7, #8]
 800b3e0:	f7ff fd25 	bl	800ae2e <http_send>

  return ERR_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3718      	adds	r7, #24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b084      	sub	sp, #16
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
 800b3f6:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d107      	bne.n	800b412 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b402:	2100      	movs	r1, #0
 800b404:	6838      	ldr	r0, [r7, #0]
 800b406:	f7ff fc91 	bl	800ad2c <http_close_conn>
 800b40a:	4603      	mov	r3, r0
 800b40c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b40e:	2300      	movs	r3, #0
 800b410:	e021      	b.n	800b456 <http_poll+0x68>
  } else {
    hs->retries++;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b418:	3301      	adds	r3, #1
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b428:	2b04      	cmp	r3, #4
 800b42a:	d105      	bne.n	800b438 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b42c:	68f9      	ldr	r1, [r7, #12]
 800b42e:	6838      	ldr	r0, [r7, #0]
 800b430:	f7ff fc7c 	bl	800ad2c <http_close_conn>
      return ERR_OK;
 800b434:	2300      	movs	r3, #0
 800b436:	e00e      	b.n	800b456 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	695b      	ldr	r3, [r3, #20]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d009      	beq.n	800b454 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b440:	68f9      	ldr	r1, [r7, #12]
 800b442:	6838      	ldr	r0, [r7, #0]
 800b444:	f7ff fcf3 	bl	800ae2e <http_send>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d002      	beq.n	800b454 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b44e:	6838      	ldr	r0, [r7, #0]
 800b450:	f007 fa6a 	bl	8012928 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
	...

0800b460 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
 800b46c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d105      	bne.n	800b486 <http_recv+0x26>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <http_recv+0x26>
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d111      	bne.n	800b4aa <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d008      	beq.n	800b49e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	891b      	ldrh	r3, [r3, #8]
 800b490:	4619      	mov	r1, r3
 800b492:	68b8      	ldr	r0, [r7, #8]
 800b494:	f002 fd20 	bl	800ded8 <tcp_recved>
      pbuf_free(p);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f001 fd43 	bl	800cf24 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b49e:	6979      	ldr	r1, [r7, #20]
 800b4a0:	68b8      	ldr	r0, [r7, #8]
 800b4a2:	f7ff fc43 	bl	800ad2c <http_close_conn>
    return ERR_OK;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	e055      	b.n	800b556 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	891b      	ldrh	r3, [r3, #8]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	68b8      	ldr	r0, [r7, #8]
 800b4b2:	f002 fd11 	bl	800ded8 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d147      	bne.n	800b54e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	6979      	ldr	r1, [r7, #20]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7ff fd30 	bl	800af28 <http_parse_request>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b4cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d015      	beq.n	800b500 <http_recv+0xa0>
 800b4d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4d8:	f113 0f05 	cmn.w	r3, #5
 800b4dc:	d010      	beq.n	800b500 <http_recv+0xa0>
 800b4de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4e2:	f113 0f10 	cmn.w	r3, #16
 800b4e6:	d00b      	beq.n	800b500 <http_recv+0xa0>
 800b4e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4ec:	f113 0f08 	cmn.w	r3, #8
 800b4f0:	d006      	beq.n	800b500 <http_recv+0xa0>
 800b4f2:	4b1b      	ldr	r3, [pc, #108]	; (800b560 <http_recv+0x100>)
 800b4f4:	f640 2204 	movw	r2, #2564	; 0xa04
 800b4f8:	491a      	ldr	r1, [pc, #104]	; (800b564 <http_recv+0x104>)
 800b4fa:	481b      	ldr	r0, [pc, #108]	; (800b568 <http_recv+0x108>)
 800b4fc:	f00d fd1a 	bl	8018f34 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b500:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b504:	f113 0f05 	cmn.w	r3, #5
 800b508:	d00b      	beq.n	800b522 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	6a1b      	ldr	r3, [r3, #32]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d007      	beq.n	800b522 <http_recv+0xc2>
          pbuf_free(hs->req);
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	4618      	mov	r0, r3
 800b518:	f001 fd04 	bl	800cf24 <pbuf_free>
          hs->req = NULL;
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2200      	movs	r2, #0
 800b520:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f001 fcfe 	bl	800cf24 <pbuf_free>
      if (parsed == ERR_OK) {
 800b528:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d104      	bne.n	800b53a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b530:	6979      	ldr	r1, [r7, #20]
 800b532:	68b8      	ldr	r0, [r7, #8]
 800b534:	f7ff fc7b 	bl	800ae2e <http_send>
 800b538:	e00c      	b.n	800b554 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800b53a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b53e:	f113 0f10 	cmn.w	r3, #16
 800b542:	d107      	bne.n	800b554 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b544:	6979      	ldr	r1, [r7, #20]
 800b546:	68b8      	ldr	r0, [r7, #8]
 800b548:	f7ff fbf0 	bl	800ad2c <http_close_conn>
 800b54c:	e002      	b.n	800b554 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f001 fce8 	bl	800cf24 <pbuf_free>
    }
  }
  return ERR_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3718      	adds	r7, #24
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	0801afdc 	.word	0x0801afdc
 800b564:	0801b138 	.word	0x0801b138
 800b568:	0801b024 	.word	0x0801b024

0800b56c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	4613      	mov	r3, r2
 800b578:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b57a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d102      	bne.n	800b588 <http_accept+0x1c>
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d102      	bne.n	800b58e <http_accept+0x22>
    return ERR_VAL;
 800b588:	f06f 0305 	mvn.w	r3, #5
 800b58c:	e025      	b.n	800b5da <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b58e:	2101      	movs	r1, #1
 800b590:	68b8      	ldr	r0, [r7, #8]
 800b592:	f003 fa9d 	bl	800ead0 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b596:	f7ff fadb 	bl	800ab50 <http_state_alloc>
 800b59a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d102      	bne.n	800b5a8 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a6:	e018      	b.n	800b5da <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b5ae:	6979      	ldr	r1, [r7, #20]
 800b5b0:	68b8      	ldr	r0, [r7, #8]
 800b5b2:	f003 fc8d 	bl	800eed0 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b5b6:	490b      	ldr	r1, [pc, #44]	; (800b5e4 <http_accept+0x78>)
 800b5b8:	68b8      	ldr	r0, [r7, #8]
 800b5ba:	f003 fc9b 	bl	800eef4 <tcp_recv>
  altcp_err(pcb, http_err);
 800b5be:	490a      	ldr	r1, [pc, #40]	; (800b5e8 <http_accept+0x7c>)
 800b5c0:	68b8      	ldr	r0, [r7, #8]
 800b5c2:	f003 fcdb 	bl	800ef7c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b5c6:	2204      	movs	r2, #4
 800b5c8:	4908      	ldr	r1, [pc, #32]	; (800b5ec <http_accept+0x80>)
 800b5ca:	68b8      	ldr	r0, [r7, #8]
 800b5cc:	f003 fd10 	bl	800eff0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b5d0:	4907      	ldr	r1, [pc, #28]	; (800b5f0 <http_accept+0x84>)
 800b5d2:	68b8      	ldr	r0, [r7, #8]
 800b5d4:	f003 fcb0 	bl	800ef38 <tcp_sent>

  return ERR_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	0800b461 	.word	0x0800b461
 800b5e8:	0800b395 	.word	0x0800b395
 800b5ec:	0800b3ef 	.word	0x0800b3ef
 800b5f0:	0800b3b9 	.word	0x0800b3b9

0800b5f4 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d029      	beq.n	800b65a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b606:	2101      	movs	r1, #1
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f003 fa61 	bl	800ead0 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b60e:	887b      	ldrh	r3, [r7, #2]
 800b610:	461a      	mov	r2, r3
 800b612:	4914      	ldr	r1, [pc, #80]	; (800b664 <httpd_init_pcb+0x70>)
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f002 fa91 	bl	800db3c <tcp_bind>
 800b61a:	4603      	mov	r3, r0
 800b61c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b61e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d006      	beq.n	800b634 <httpd_init_pcb+0x40>
 800b626:	4b10      	ldr	r3, [pc, #64]	; (800b668 <httpd_init_pcb+0x74>)
 800b628:	f640 2257 	movw	r2, #2647	; 0xa57
 800b62c:	490f      	ldr	r1, [pc, #60]	; (800b66c <httpd_init_pcb+0x78>)
 800b62e:	4810      	ldr	r0, [pc, #64]	; (800b670 <httpd_init_pcb+0x7c>)
 800b630:	f00d fc80 	bl	8018f34 <iprintf>
    pcb = altcp_listen(pcb);
 800b634:	21ff      	movs	r1, #255	; 0xff
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f002 fb38 	bl	800dcac <tcp_listen_with_backlog>
 800b63c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d106      	bne.n	800b652 <httpd_init_pcb+0x5e>
 800b644:	4b08      	ldr	r3, [pc, #32]	; (800b668 <httpd_init_pcb+0x74>)
 800b646:	f640 2259 	movw	r2, #2649	; 0xa59
 800b64a:	490a      	ldr	r1, [pc, #40]	; (800b674 <httpd_init_pcb+0x80>)
 800b64c:	4808      	ldr	r0, [pc, #32]	; (800b670 <httpd_init_pcb+0x7c>)
 800b64e:	f00d fc71 	bl	8018f34 <iprintf>
    altcp_accept(pcb, http_accept);
 800b652:	4909      	ldr	r1, [pc, #36]	; (800b678 <httpd_init_pcb+0x84>)
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f003 fcb3 	bl	800efc0 <tcp_accept>
  }
}
 800b65a:	bf00      	nop
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	08028184 	.word	0x08028184
 800b668:	0801afdc 	.word	0x0801afdc
 800b66c:	0801b164 	.word	0x0801b164
 800b670:	0801b024 	.word	0x0801b024
 800b674:	0801b180 	.word	0x0801b180
 800b678:	0800b56d 	.word	0x0800b56d

0800b67c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b682:	202e      	movs	r0, #46	; 0x2e
 800b684:	f003 fc16 	bl	800eeb4 <tcp_new_ip_type>
 800b688:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d106      	bne.n	800b69e <httpd_init+0x22>
 800b690:	4b07      	ldr	r3, [pc, #28]	; (800b6b0 <httpd_init+0x34>)
 800b692:	f640 2272 	movw	r2, #2674	; 0xa72
 800b696:	4907      	ldr	r1, [pc, #28]	; (800b6b4 <httpd_init+0x38>)
 800b698:	4807      	ldr	r0, [pc, #28]	; (800b6b8 <httpd_init+0x3c>)
 800b69a:	f00d fc4b 	bl	8018f34 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b69e:	2150      	movs	r1, #80	; 0x50
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff ffa7 	bl	800b5f4 <httpd_init_pcb>
}
 800b6a6:	bf00      	nop
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	0801afdc 	.word	0x0801afdc
 800b6b4:	0801b1a0 	.word	0x0801b1a0
 800b6b8:	0801b024 	.word	0x0801b024

0800b6bc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b6c6:	88fb      	ldrh	r3, [r7, #6]
 800b6c8:	021b      	lsls	r3, r3, #8
 800b6ca:	b21a      	sxth	r2, r3
 800b6cc:	88fb      	ldrh	r3, [r7, #6]
 800b6ce:	0a1b      	lsrs	r3, r3, #8
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	b21b      	sxth	r3, r3
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	b21b      	sxth	r3, r3
 800b6d8:	b29b      	uxth	r3, r3
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b083      	sub	sp, #12
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	061a      	lsls	r2, r3, #24
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	021b      	lsls	r3, r3, #8
 800b6f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	0a1b      	lsrs	r3, r3, #8
 800b700:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b704:	431a      	orrs	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	0e1b      	lsrs	r3, r3, #24
 800b70a:	4313      	orrs	r3, r2
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800b724:	68b8      	ldr	r0, [r7, #8]
 800b726:	f7f4 fd6d 	bl	8000204 <strlen>
 800b72a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	e022      	b.n	800b77c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	617b      	str	r3, [r7, #20]
 800b73a:	e012      	b.n	800b762 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	781a      	ldrb	r2, [r3, #0]
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	429a      	cmp	r2, r3
 800b746:	d109      	bne.n	800b75c <lwip_strnstr+0x44>
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	68b9      	ldr	r1, [r7, #8]
 800b74c:	6978      	ldr	r0, [r7, #20]
 800b74e:	f00d fd7a 	bl	8019246 <strncmp>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d101      	bne.n	800b75c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	e00f      	b.n	800b77c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	3301      	adds	r3, #1
 800b760:	617b      	str	r3, [r7, #20]
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d007      	beq.n	800b77a <lwip_strnstr+0x62>
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	441a      	add	r2, r3
 800b770:	68f9      	ldr	r1, [r7, #12]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	440b      	add	r3, r1
 800b776:	429a      	cmp	r2, r3
 800b778:	d9e0      	bls.n	800b73c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b78a:	2300      	movs	r3, #0
 800b78c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b78e:	f00d f955 	bl	8018a3c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b792:	f000 f8d5 	bl	800b940 <mem_init>
  memp_init();
 800b796:	f000 fc31 	bl	800bffc <memp_init>
  pbuf_init();
  netif_init();
 800b79a:	f000 fd3d 	bl	800c218 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b79e:	f008 f9b3 	bl	8013b08 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b7a2:	f001 fe69 	bl	800d478 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b7a6:	f008 f8f5 	bl	8013994 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b7aa:	bf00      	nop
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
	...

0800b7b4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b7be:	4b05      	ldr	r3, [pc, #20]	; (800b7d4 <ptr_to_mem+0x20>)
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	88fb      	ldrh	r3, [r7, #6]
 800b7c4:	4413      	add	r3, r2
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	370c      	adds	r7, #12
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop
 800b7d4:	2000e484 	.word	0x2000e484

0800b7d8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b7e0:	4b05      	ldr	r3, [pc, #20]	; (800b7f8 <mem_to_ptr+0x20>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	b29b      	uxth	r3, r3
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	370c      	adds	r7, #12
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	2000e484 	.word	0x2000e484

0800b7fc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b7fc:	b590      	push	{r4, r7, lr}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b804:	4b45      	ldr	r3, [pc, #276]	; (800b91c <plug_holes+0x120>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d206      	bcs.n	800b81c <plug_holes+0x20>
 800b80e:	4b44      	ldr	r3, [pc, #272]	; (800b920 <plug_holes+0x124>)
 800b810:	f240 12df 	movw	r2, #479	; 0x1df
 800b814:	4943      	ldr	r1, [pc, #268]	; (800b924 <plug_holes+0x128>)
 800b816:	4844      	ldr	r0, [pc, #272]	; (800b928 <plug_holes+0x12c>)
 800b818:	f00d fb8c 	bl	8018f34 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b81c:	4b43      	ldr	r3, [pc, #268]	; (800b92c <plug_holes+0x130>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	429a      	cmp	r2, r3
 800b824:	d306      	bcc.n	800b834 <plug_holes+0x38>
 800b826:	4b3e      	ldr	r3, [pc, #248]	; (800b920 <plug_holes+0x124>)
 800b828:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b82c:	4940      	ldr	r1, [pc, #256]	; (800b930 <plug_holes+0x134>)
 800b82e:	483e      	ldr	r0, [pc, #248]	; (800b928 <plug_holes+0x12c>)
 800b830:	f00d fb80 	bl	8018f34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	791b      	ldrb	r3, [r3, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d006      	beq.n	800b84a <plug_holes+0x4e>
 800b83c:	4b38      	ldr	r3, [pc, #224]	; (800b920 <plug_holes+0x124>)
 800b83e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b842:	493c      	ldr	r1, [pc, #240]	; (800b934 <plug_holes+0x138>)
 800b844:	4838      	ldr	r0, [pc, #224]	; (800b928 <plug_holes+0x12c>)
 800b846:	f00d fb75 	bl	8018f34 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	881b      	ldrh	r3, [r3, #0]
 800b84e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b852:	d906      	bls.n	800b862 <plug_holes+0x66>
 800b854:	4b32      	ldr	r3, [pc, #200]	; (800b920 <plug_holes+0x124>)
 800b856:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b85a:	4937      	ldr	r1, [pc, #220]	; (800b938 <plug_holes+0x13c>)
 800b85c:	4832      	ldr	r0, [pc, #200]	; (800b928 <plug_holes+0x12c>)
 800b85e:	f00d fb69 	bl	8018f34 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	881b      	ldrh	r3, [r3, #0]
 800b866:	4618      	mov	r0, r3
 800b868:	f7ff ffa4 	bl	800b7b4 <ptr_to_mem>
 800b86c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	429a      	cmp	r2, r3
 800b874:	d024      	beq.n	800b8c0 <plug_holes+0xc4>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	791b      	ldrb	r3, [r3, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d120      	bne.n	800b8c0 <plug_holes+0xc4>
 800b87e:	4b2b      	ldr	r3, [pc, #172]	; (800b92c <plug_holes+0x130>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	429a      	cmp	r2, r3
 800b886:	d01b      	beq.n	800b8c0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b888:	4b2c      	ldr	r3, [pc, #176]	; (800b93c <plug_holes+0x140>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d102      	bne.n	800b898 <plug_holes+0x9c>
      lfree = mem;
 800b892:	4a2a      	ldr	r2, [pc, #168]	; (800b93c <plug_holes+0x140>)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	881a      	ldrh	r2, [r3, #0]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8a8:	d00a      	beq.n	800b8c0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7ff ff80 	bl	800b7b4 <ptr_to_mem>
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7ff ff8e 	bl	800b7d8 <mem_to_ptr>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	885b      	ldrh	r3, [r3, #2]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7ff ff75 	bl	800b7b4 <ptr_to_mem>
 800b8ca:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d01f      	beq.n	800b914 <plug_holes+0x118>
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	791b      	ldrb	r3, [r3, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d11b      	bne.n	800b914 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b8dc:	4b17      	ldr	r3, [pc, #92]	; (800b93c <plug_holes+0x140>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d102      	bne.n	800b8ec <plug_holes+0xf0>
      lfree = pmem;
 800b8e6:	4a15      	ldr	r2, [pc, #84]	; (800b93c <plug_holes+0x140>)
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	881a      	ldrh	r2, [r3, #0]
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8fc:	d00a      	beq.n	800b914 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	881b      	ldrh	r3, [r3, #0]
 800b902:	4618      	mov	r0, r3
 800b904:	f7ff ff56 	bl	800b7b4 <ptr_to_mem>
 800b908:	4604      	mov	r4, r0
 800b90a:	68b8      	ldr	r0, [r7, #8]
 800b90c:	f7ff ff64 	bl	800b7d8 <mem_to_ptr>
 800b910:	4603      	mov	r3, r0
 800b912:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b914:	bf00      	nop
 800b916:	3714      	adds	r7, #20
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd90      	pop	{r4, r7, pc}
 800b91c:	2000e484 	.word	0x2000e484
 800b920:	0801b1bc 	.word	0x0801b1bc
 800b924:	0801b1ec 	.word	0x0801b1ec
 800b928:	0801b204 	.word	0x0801b204
 800b92c:	2000e488 	.word	0x2000e488
 800b930:	0801b22c 	.word	0x0801b22c
 800b934:	0801b248 	.word	0x0801b248
 800b938:	0801b264 	.word	0x0801b264
 800b93c:	2000e490 	.word	0x2000e490

0800b940 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b946:	4b1f      	ldr	r3, [pc, #124]	; (800b9c4 <mem_init+0x84>)
 800b948:	3303      	adds	r3, #3
 800b94a:	f023 0303 	bic.w	r3, r3, #3
 800b94e:	461a      	mov	r2, r3
 800b950:	4b1d      	ldr	r3, [pc, #116]	; (800b9c8 <mem_init+0x88>)
 800b952:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b954:	4b1c      	ldr	r3, [pc, #112]	; (800b9c8 <mem_init+0x88>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b960:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b96e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b972:	f7ff ff1f 	bl	800b7b4 <ptr_to_mem>
 800b976:	4603      	mov	r3, r0
 800b978:	4a14      	ldr	r2, [pc, #80]	; (800b9cc <mem_init+0x8c>)
 800b97a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b97c:	4b13      	ldr	r3, [pc, #76]	; (800b9cc <mem_init+0x8c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2201      	movs	r2, #1
 800b982:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b984:	4b11      	ldr	r3, [pc, #68]	; (800b9cc <mem_init+0x8c>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b98c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b98e:	4b0f      	ldr	r3, [pc, #60]	; (800b9cc <mem_init+0x8c>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b996:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b998:	4b0b      	ldr	r3, [pc, #44]	; (800b9c8 <mem_init+0x88>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a0c      	ldr	r2, [pc, #48]	; (800b9d0 <mem_init+0x90>)
 800b99e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b9a0:	480c      	ldr	r0, [pc, #48]	; (800b9d4 <mem_init+0x94>)
 800b9a2:	f00d f859 	bl	8018a58 <sys_mutex_new>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d006      	beq.n	800b9ba <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b9ac:	4b0a      	ldr	r3, [pc, #40]	; (800b9d8 <mem_init+0x98>)
 800b9ae:	f240 221f 	movw	r2, #543	; 0x21f
 800b9b2:	490a      	ldr	r1, [pc, #40]	; (800b9dc <mem_init+0x9c>)
 800b9b4:	480a      	ldr	r0, [pc, #40]	; (800b9e0 <mem_init+0xa0>)
 800b9b6:	f00d fabd 	bl	8018f34 <iprintf>
  }
}
 800b9ba:	bf00      	nop
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	2000de30 	.word	0x2000de30
 800b9c8:	2000e484 	.word	0x2000e484
 800b9cc:	2000e488 	.word	0x2000e488
 800b9d0:	2000e490 	.word	0x2000e490
 800b9d4:	2000e48c 	.word	0x2000e48c
 800b9d8:	0801b1bc 	.word	0x0801b1bc
 800b9dc:	0801b290 	.word	0x0801b290
 800b9e0:	0801b204 	.word	0x0801b204

0800b9e4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7ff fef3 	bl	800b7d8 <mem_to_ptr>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7ff feda 	bl	800b7b4 <ptr_to_mem>
 800ba00:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	885b      	ldrh	r3, [r3, #2]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7ff fed4 	bl	800b7b4 <ptr_to_mem>
 800ba0c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba16:	d818      	bhi.n	800ba4a <mem_link_valid+0x66>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	885b      	ldrh	r3, [r3, #2]
 800ba1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba20:	d813      	bhi.n	800ba4a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba26:	8afa      	ldrh	r2, [r7, #22]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d004      	beq.n	800ba36 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	881b      	ldrh	r3, [r3, #0]
 800ba30:	8afa      	ldrh	r2, [r7, #22]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d109      	bne.n	800ba4a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba36:	4b08      	ldr	r3, [pc, #32]	; (800ba58 <mem_link_valid+0x74>)
 800ba38:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d006      	beq.n	800ba4e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	885b      	ldrh	r3, [r3, #2]
 800ba44:	8afa      	ldrh	r2, [r7, #22]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d001      	beq.n	800ba4e <mem_link_valid+0x6a>
    return 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e000      	b.n	800ba50 <mem_link_valid+0x6c>
  }
  return 1;
 800ba4e:	2301      	movs	r3, #1
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3718      	adds	r7, #24
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	2000e488 	.word	0x2000e488

0800ba5c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b088      	sub	sp, #32
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d070      	beq.n	800bb4c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f003 0303 	and.w	r3, r3, #3
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00d      	beq.n	800ba90 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ba74:	4b37      	ldr	r3, [pc, #220]	; (800bb54 <mem_free+0xf8>)
 800ba76:	f240 2273 	movw	r2, #627	; 0x273
 800ba7a:	4937      	ldr	r1, [pc, #220]	; (800bb58 <mem_free+0xfc>)
 800ba7c:	4837      	ldr	r0, [pc, #220]	; (800bb5c <mem_free+0x100>)
 800ba7e:	f00d fa59 	bl	8018f34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba82:	f00d f847 	bl	8018b14 <sys_arch_protect>
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f00d f851 	bl	8018b30 <sys_arch_unprotect>
    return;
 800ba8e:	e05e      	b.n	800bb4e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	3b08      	subs	r3, #8
 800ba94:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ba96:	4b32      	ldr	r3, [pc, #200]	; (800bb60 <mem_free+0x104>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	69fa      	ldr	r2, [r7, #28]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d306      	bcc.n	800baae <mem_free+0x52>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f103 020c 	add.w	r2, r3, #12
 800baa6:	4b2f      	ldr	r3, [pc, #188]	; (800bb64 <mem_free+0x108>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d90d      	bls.n	800baca <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800baae:	4b29      	ldr	r3, [pc, #164]	; (800bb54 <mem_free+0xf8>)
 800bab0:	f240 227f 	movw	r2, #639	; 0x27f
 800bab4:	492c      	ldr	r1, [pc, #176]	; (800bb68 <mem_free+0x10c>)
 800bab6:	4829      	ldr	r0, [pc, #164]	; (800bb5c <mem_free+0x100>)
 800bab8:	f00d fa3c 	bl	8018f34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800babc:	f00d f82a 	bl	8018b14 <sys_arch_protect>
 800bac0:	6138      	str	r0, [r7, #16]
 800bac2:	6938      	ldr	r0, [r7, #16]
 800bac4:	f00d f834 	bl	8018b30 <sys_arch_unprotect>
    return;
 800bac8:	e041      	b.n	800bb4e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800baca:	4828      	ldr	r0, [pc, #160]	; (800bb6c <mem_free+0x110>)
 800bacc:	f00c ffe0 	bl	8018a90 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	791b      	ldrb	r3, [r3, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d110      	bne.n	800bafa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bad8:	4b1e      	ldr	r3, [pc, #120]	; (800bb54 <mem_free+0xf8>)
 800bada:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bade:	4924      	ldr	r1, [pc, #144]	; (800bb70 <mem_free+0x114>)
 800bae0:	481e      	ldr	r0, [pc, #120]	; (800bb5c <mem_free+0x100>)
 800bae2:	f00d fa27 	bl	8018f34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bae6:	4821      	ldr	r0, [pc, #132]	; (800bb6c <mem_free+0x110>)
 800bae8:	f00c ffe1 	bl	8018aae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800baec:	f00d f812 	bl	8018b14 <sys_arch_protect>
 800baf0:	6178      	str	r0, [r7, #20]
 800baf2:	6978      	ldr	r0, [r7, #20]
 800baf4:	f00d f81c 	bl	8018b30 <sys_arch_unprotect>
    return;
 800baf8:	e029      	b.n	800bb4e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bafa:	69f8      	ldr	r0, [r7, #28]
 800bafc:	f7ff ff72 	bl	800b9e4 <mem_link_valid>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d110      	bne.n	800bb28 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bb06:	4b13      	ldr	r3, [pc, #76]	; (800bb54 <mem_free+0xf8>)
 800bb08:	f240 2295 	movw	r2, #661	; 0x295
 800bb0c:	4919      	ldr	r1, [pc, #100]	; (800bb74 <mem_free+0x118>)
 800bb0e:	4813      	ldr	r0, [pc, #76]	; (800bb5c <mem_free+0x100>)
 800bb10:	f00d fa10 	bl	8018f34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bb14:	4815      	ldr	r0, [pc, #84]	; (800bb6c <mem_free+0x110>)
 800bb16:	f00c ffca 	bl	8018aae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb1a:	f00c fffb 	bl	8018b14 <sys_arch_protect>
 800bb1e:	61b8      	str	r0, [r7, #24]
 800bb20:	69b8      	ldr	r0, [r7, #24]
 800bb22:	f00d f805 	bl	8018b30 <sys_arch_unprotect>
    return;
 800bb26:	e012      	b.n	800bb4e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bb2e:	4b12      	ldr	r3, [pc, #72]	; (800bb78 <mem_free+0x11c>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	69fa      	ldr	r2, [r7, #28]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d202      	bcs.n	800bb3e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bb38:	4a0f      	ldr	r2, [pc, #60]	; (800bb78 <mem_free+0x11c>)
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bb3e:	69f8      	ldr	r0, [r7, #28]
 800bb40:	f7ff fe5c 	bl	800b7fc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bb44:	4809      	ldr	r0, [pc, #36]	; (800bb6c <mem_free+0x110>)
 800bb46:	f00c ffb2 	bl	8018aae <sys_mutex_unlock>
 800bb4a:	e000      	b.n	800bb4e <mem_free+0xf2>
    return;
 800bb4c:	bf00      	nop
}
 800bb4e:	3720      	adds	r7, #32
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	0801b1bc 	.word	0x0801b1bc
 800bb58:	0801b2ac 	.word	0x0801b2ac
 800bb5c:	0801b204 	.word	0x0801b204
 800bb60:	2000e484 	.word	0x2000e484
 800bb64:	2000e488 	.word	0x2000e488
 800bb68:	0801b2d0 	.word	0x0801b2d0
 800bb6c:	2000e48c 	.word	0x2000e48c
 800bb70:	0801b2ec 	.word	0x0801b2ec
 800bb74:	0801b314 	.word	0x0801b314
 800bb78:	2000e490 	.word	0x2000e490

0800bb7c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b088      	sub	sp, #32
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	460b      	mov	r3, r1
 800bb86:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bb88:	887b      	ldrh	r3, [r7, #2]
 800bb8a:	3303      	adds	r3, #3
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	f023 0303 	bic.w	r3, r3, #3
 800bb92:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bb94:	8bfb      	ldrh	r3, [r7, #30]
 800bb96:	2b0b      	cmp	r3, #11
 800bb98:	d801      	bhi.n	800bb9e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bb9a:	230c      	movs	r3, #12
 800bb9c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bb9e:	8bfb      	ldrh	r3, [r7, #30]
 800bba0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bba4:	d803      	bhi.n	800bbae <mem_trim+0x32>
 800bba6:	8bfa      	ldrh	r2, [r7, #30]
 800bba8:	887b      	ldrh	r3, [r7, #2]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d201      	bcs.n	800bbb2 <mem_trim+0x36>
    return NULL;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	e0d8      	b.n	800bd64 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bbb2:	4b6e      	ldr	r3, [pc, #440]	; (800bd6c <mem_trim+0x1f0>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d304      	bcc.n	800bbc6 <mem_trim+0x4a>
 800bbbc:	4b6c      	ldr	r3, [pc, #432]	; (800bd70 <mem_trim+0x1f4>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d306      	bcc.n	800bbd4 <mem_trim+0x58>
 800bbc6:	4b6b      	ldr	r3, [pc, #428]	; (800bd74 <mem_trim+0x1f8>)
 800bbc8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bbcc:	496a      	ldr	r1, [pc, #424]	; (800bd78 <mem_trim+0x1fc>)
 800bbce:	486b      	ldr	r0, [pc, #428]	; (800bd7c <mem_trim+0x200>)
 800bbd0:	f00d f9b0 	bl	8018f34 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bbd4:	4b65      	ldr	r3, [pc, #404]	; (800bd6c <mem_trim+0x1f0>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d304      	bcc.n	800bbe8 <mem_trim+0x6c>
 800bbde:	4b64      	ldr	r3, [pc, #400]	; (800bd70 <mem_trim+0x1f4>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d307      	bcc.n	800bbf8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbe8:	f00c ff94 	bl	8018b14 <sys_arch_protect>
 800bbec:	60b8      	str	r0, [r7, #8]
 800bbee:	68b8      	ldr	r0, [r7, #8]
 800bbf0:	f00c ff9e 	bl	8018b30 <sys_arch_unprotect>
    return rmem;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	e0b5      	b.n	800bd64 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	3b08      	subs	r3, #8
 800bbfc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bbfe:	69b8      	ldr	r0, [r7, #24]
 800bc00:	f7ff fdea 	bl	800b7d8 <mem_to_ptr>
 800bc04:	4603      	mov	r3, r0
 800bc06:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	881a      	ldrh	r2, [r3, #0]
 800bc0c:	8afb      	ldrh	r3, [r7, #22]
 800bc0e:	1ad3      	subs	r3, r2, r3
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	3b08      	subs	r3, #8
 800bc14:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bc16:	8bfa      	ldrh	r2, [r7, #30]
 800bc18:	8abb      	ldrh	r3, [r7, #20]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d906      	bls.n	800bc2c <mem_trim+0xb0>
 800bc1e:	4b55      	ldr	r3, [pc, #340]	; (800bd74 <mem_trim+0x1f8>)
 800bc20:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bc24:	4956      	ldr	r1, [pc, #344]	; (800bd80 <mem_trim+0x204>)
 800bc26:	4855      	ldr	r0, [pc, #340]	; (800bd7c <mem_trim+0x200>)
 800bc28:	f00d f984 	bl	8018f34 <iprintf>
  if (newsize > size) {
 800bc2c:	8bfa      	ldrh	r2, [r7, #30]
 800bc2e:	8abb      	ldrh	r3, [r7, #20]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d901      	bls.n	800bc38 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bc34:	2300      	movs	r3, #0
 800bc36:	e095      	b.n	800bd64 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bc38:	8bfa      	ldrh	r2, [r7, #30]
 800bc3a:	8abb      	ldrh	r3, [r7, #20]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d101      	bne.n	800bc44 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	e08f      	b.n	800bd64 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bc44:	484f      	ldr	r0, [pc, #316]	; (800bd84 <mem_trim+0x208>)
 800bc46:	f00c ff23 	bl	8018a90 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7ff fdb0 	bl	800b7b4 <ptr_to_mem>
 800bc54:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	791b      	ldrb	r3, [r3, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d13f      	bne.n	800bcde <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	881b      	ldrh	r3, [r3, #0]
 800bc62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc66:	d106      	bne.n	800bc76 <mem_trim+0xfa>
 800bc68:	4b42      	ldr	r3, [pc, #264]	; (800bd74 <mem_trim+0x1f8>)
 800bc6a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bc6e:	4946      	ldr	r1, [pc, #280]	; (800bd88 <mem_trim+0x20c>)
 800bc70:	4842      	ldr	r0, [pc, #264]	; (800bd7c <mem_trim+0x200>)
 800bc72:	f00d f95f 	bl	8018f34 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc7c:	8afa      	ldrh	r2, [r7, #22]
 800bc7e:	8bfb      	ldrh	r3, [r7, #30]
 800bc80:	4413      	add	r3, r2
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	3308      	adds	r3, #8
 800bc86:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bc88:	4b40      	ldr	r3, [pc, #256]	; (800bd8c <mem_trim+0x210>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d106      	bne.n	800bca0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bc92:	89fb      	ldrh	r3, [r7, #14]
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7ff fd8d 	bl	800b7b4 <ptr_to_mem>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	4a3b      	ldr	r2, [pc, #236]	; (800bd8c <mem_trim+0x210>)
 800bc9e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bca0:	89fb      	ldrh	r3, [r7, #14]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7ff fd86 	bl	800b7b4 <ptr_to_mem>
 800bca8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	2200      	movs	r2, #0
 800bcae:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	89ba      	ldrh	r2, [r7, #12]
 800bcb4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	8afa      	ldrh	r2, [r7, #22]
 800bcba:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	89fa      	ldrh	r2, [r7, #14]
 800bcc0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	881b      	ldrh	r3, [r3, #0]
 800bcc6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcca:	d047      	beq.n	800bd5c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	881b      	ldrh	r3, [r3, #0]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7ff fd6f 	bl	800b7b4 <ptr_to_mem>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	89fb      	ldrh	r3, [r7, #14]
 800bcda:	8053      	strh	r3, [r2, #2]
 800bcdc:	e03e      	b.n	800bd5c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bcde:	8bfb      	ldrh	r3, [r7, #30]
 800bce0:	f103 0214 	add.w	r2, r3, #20
 800bce4:	8abb      	ldrh	r3, [r7, #20]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d838      	bhi.n	800bd5c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bcea:	8afa      	ldrh	r2, [r7, #22]
 800bcec:	8bfb      	ldrh	r3, [r7, #30]
 800bcee:	4413      	add	r3, r2
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	3308      	adds	r3, #8
 800bcf4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcfe:	d106      	bne.n	800bd0e <mem_trim+0x192>
 800bd00:	4b1c      	ldr	r3, [pc, #112]	; (800bd74 <mem_trim+0x1f8>)
 800bd02:	f240 3216 	movw	r2, #790	; 0x316
 800bd06:	4920      	ldr	r1, [pc, #128]	; (800bd88 <mem_trim+0x20c>)
 800bd08:	481c      	ldr	r0, [pc, #112]	; (800bd7c <mem_trim+0x200>)
 800bd0a:	f00d f913 	bl	8018f34 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bd0e:	89fb      	ldrh	r3, [r7, #14]
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7ff fd4f 	bl	800b7b4 <ptr_to_mem>
 800bd16:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bd18:	4b1c      	ldr	r3, [pc, #112]	; (800bd8c <mem_trim+0x210>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	693a      	ldr	r2, [r7, #16]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d202      	bcs.n	800bd28 <mem_trim+0x1ac>
      lfree = mem2;
 800bd22:	4a1a      	ldr	r2, [pc, #104]	; (800bd8c <mem_trim+0x210>)
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	881a      	ldrh	r2, [r3, #0]
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	8afa      	ldrh	r2, [r7, #22]
 800bd3a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	89fa      	ldrh	r2, [r7, #14]
 800bd40:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd4a:	d007      	beq.n	800bd5c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	881b      	ldrh	r3, [r3, #0]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7ff fd2f 	bl	800b7b4 <ptr_to_mem>
 800bd56:	4602      	mov	r2, r0
 800bd58:	89fb      	ldrh	r3, [r7, #14]
 800bd5a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bd5c:	4809      	ldr	r0, [pc, #36]	; (800bd84 <mem_trim+0x208>)
 800bd5e:	f00c fea6 	bl	8018aae <sys_mutex_unlock>
  return rmem;
 800bd62:	687b      	ldr	r3, [r7, #4]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3720      	adds	r7, #32
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	2000e484 	.word	0x2000e484
 800bd70:	2000e488 	.word	0x2000e488
 800bd74:	0801b1bc 	.word	0x0801b1bc
 800bd78:	0801b348 	.word	0x0801b348
 800bd7c:	0801b204 	.word	0x0801b204
 800bd80:	0801b360 	.word	0x0801b360
 800bd84:	2000e48c 	.word	0x2000e48c
 800bd88:	0801b380 	.word	0x0801b380
 800bd8c:	2000e490 	.word	0x2000e490

0800bd90 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	4603      	mov	r3, r0
 800bd98:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bd9a:	88fb      	ldrh	r3, [r7, #6]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d101      	bne.n	800bda4 <mem_malloc+0x14>
    return NULL;
 800bda0:	2300      	movs	r3, #0
 800bda2:	e0e2      	b.n	800bf6a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bda4:	88fb      	ldrh	r3, [r7, #6]
 800bda6:	3303      	adds	r3, #3
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	f023 0303 	bic.w	r3, r3, #3
 800bdae:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bdb0:	8bbb      	ldrh	r3, [r7, #28]
 800bdb2:	2b0b      	cmp	r3, #11
 800bdb4:	d801      	bhi.n	800bdba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bdb6:	230c      	movs	r3, #12
 800bdb8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bdba:	8bbb      	ldrh	r3, [r7, #28]
 800bdbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bdc0:	d803      	bhi.n	800bdca <mem_malloc+0x3a>
 800bdc2:	8bba      	ldrh	r2, [r7, #28]
 800bdc4:	88fb      	ldrh	r3, [r7, #6]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d201      	bcs.n	800bdce <mem_malloc+0x3e>
    return NULL;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	e0cd      	b.n	800bf6a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bdce:	4869      	ldr	r0, [pc, #420]	; (800bf74 <mem_malloc+0x1e4>)
 800bdd0:	f00c fe5e 	bl	8018a90 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bdd4:	4b68      	ldr	r3, [pc, #416]	; (800bf78 <mem_malloc+0x1e8>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7ff fcfd 	bl	800b7d8 <mem_to_ptr>
 800bdde:	4603      	mov	r3, r0
 800bde0:	83fb      	strh	r3, [r7, #30]
 800bde2:	e0b7      	b.n	800bf54 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bde4:	8bfb      	ldrh	r3, [r7, #30]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7ff fce4 	bl	800b7b4 <ptr_to_mem>
 800bdec:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	791b      	ldrb	r3, [r3, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f040 80a7 	bne.w	800bf46 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	881b      	ldrh	r3, [r3, #0]
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	8bfb      	ldrh	r3, [r7, #30]
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	f1a3 0208 	sub.w	r2, r3, #8
 800be06:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800be08:	429a      	cmp	r2, r3
 800be0a:	f0c0 809c 	bcc.w	800bf46 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	881b      	ldrh	r3, [r3, #0]
 800be12:	461a      	mov	r2, r3
 800be14:	8bfb      	ldrh	r3, [r7, #30]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	f1a3 0208 	sub.w	r2, r3, #8
 800be1c:	8bbb      	ldrh	r3, [r7, #28]
 800be1e:	3314      	adds	r3, #20
 800be20:	429a      	cmp	r2, r3
 800be22:	d333      	bcc.n	800be8c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800be24:	8bfa      	ldrh	r2, [r7, #30]
 800be26:	8bbb      	ldrh	r3, [r7, #28]
 800be28:	4413      	add	r3, r2
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	3308      	adds	r3, #8
 800be2e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800be30:	8a7b      	ldrh	r3, [r7, #18]
 800be32:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be36:	d106      	bne.n	800be46 <mem_malloc+0xb6>
 800be38:	4b50      	ldr	r3, [pc, #320]	; (800bf7c <mem_malloc+0x1ec>)
 800be3a:	f240 3287 	movw	r2, #903	; 0x387
 800be3e:	4950      	ldr	r1, [pc, #320]	; (800bf80 <mem_malloc+0x1f0>)
 800be40:	4850      	ldr	r0, [pc, #320]	; (800bf84 <mem_malloc+0x1f4>)
 800be42:	f00d f877 	bl	8018f34 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800be46:	8a7b      	ldrh	r3, [r7, #18]
 800be48:	4618      	mov	r0, r3
 800be4a:	f7ff fcb3 	bl	800b7b4 <ptr_to_mem>
 800be4e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	881a      	ldrh	r2, [r3, #0]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	8bfa      	ldrh	r2, [r7, #30]
 800be62:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	8a7a      	ldrh	r2, [r7, #18]
 800be68:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	2201      	movs	r2, #1
 800be6e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	881b      	ldrh	r3, [r3, #0]
 800be74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be78:	d00b      	beq.n	800be92 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	881b      	ldrh	r3, [r3, #0]
 800be7e:	4618      	mov	r0, r3
 800be80:	f7ff fc98 	bl	800b7b4 <ptr_to_mem>
 800be84:	4602      	mov	r2, r0
 800be86:	8a7b      	ldrh	r3, [r7, #18]
 800be88:	8053      	strh	r3, [r2, #2]
 800be8a:	e002      	b.n	800be92 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	2201      	movs	r2, #1
 800be90:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800be92:	4b39      	ldr	r3, [pc, #228]	; (800bf78 <mem_malloc+0x1e8>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	697a      	ldr	r2, [r7, #20]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d127      	bne.n	800beec <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800be9c:	4b36      	ldr	r3, [pc, #216]	; (800bf78 <mem_malloc+0x1e8>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bea2:	e005      	b.n	800beb0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	881b      	ldrh	r3, [r3, #0]
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7ff fc83 	bl	800b7b4 <ptr_to_mem>
 800beae:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	791b      	ldrb	r3, [r3, #4]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d004      	beq.n	800bec2 <mem_malloc+0x132>
 800beb8:	4b33      	ldr	r3, [pc, #204]	; (800bf88 <mem_malloc+0x1f8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	69ba      	ldr	r2, [r7, #24]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d1f0      	bne.n	800bea4 <mem_malloc+0x114>
          }
          lfree = cur;
 800bec2:	4a2d      	ldr	r2, [pc, #180]	; (800bf78 <mem_malloc+0x1e8>)
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bec8:	4b2b      	ldr	r3, [pc, #172]	; (800bf78 <mem_malloc+0x1e8>)
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	4b2e      	ldr	r3, [pc, #184]	; (800bf88 <mem_malloc+0x1f8>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d00b      	beq.n	800beec <mem_malloc+0x15c>
 800bed4:	4b28      	ldr	r3, [pc, #160]	; (800bf78 <mem_malloc+0x1e8>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	791b      	ldrb	r3, [r3, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d006      	beq.n	800beec <mem_malloc+0x15c>
 800bede:	4b27      	ldr	r3, [pc, #156]	; (800bf7c <mem_malloc+0x1ec>)
 800bee0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bee4:	4929      	ldr	r1, [pc, #164]	; (800bf8c <mem_malloc+0x1fc>)
 800bee6:	4827      	ldr	r0, [pc, #156]	; (800bf84 <mem_malloc+0x1f4>)
 800bee8:	f00d f824 	bl	8018f34 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800beec:	4821      	ldr	r0, [pc, #132]	; (800bf74 <mem_malloc+0x1e4>)
 800beee:	f00c fdde 	bl	8018aae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bef2:	8bba      	ldrh	r2, [r7, #28]
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	4413      	add	r3, r2
 800bef8:	3308      	adds	r3, #8
 800befa:	4a23      	ldr	r2, [pc, #140]	; (800bf88 <mem_malloc+0x1f8>)
 800befc:	6812      	ldr	r2, [r2, #0]
 800befe:	4293      	cmp	r3, r2
 800bf00:	d906      	bls.n	800bf10 <mem_malloc+0x180>
 800bf02:	4b1e      	ldr	r3, [pc, #120]	; (800bf7c <mem_malloc+0x1ec>)
 800bf04:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bf08:	4921      	ldr	r1, [pc, #132]	; (800bf90 <mem_malloc+0x200>)
 800bf0a:	481e      	ldr	r0, [pc, #120]	; (800bf84 <mem_malloc+0x1f4>)
 800bf0c:	f00d f812 	bl	8018f34 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	f003 0303 	and.w	r3, r3, #3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d006      	beq.n	800bf28 <mem_malloc+0x198>
 800bf1a:	4b18      	ldr	r3, [pc, #96]	; (800bf7c <mem_malloc+0x1ec>)
 800bf1c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800bf20:	491c      	ldr	r1, [pc, #112]	; (800bf94 <mem_malloc+0x204>)
 800bf22:	4818      	ldr	r0, [pc, #96]	; (800bf84 <mem_malloc+0x1f4>)
 800bf24:	f00d f806 	bl	8018f34 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	f003 0303 	and.w	r3, r3, #3
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d006      	beq.n	800bf40 <mem_malloc+0x1b0>
 800bf32:	4b12      	ldr	r3, [pc, #72]	; (800bf7c <mem_malloc+0x1ec>)
 800bf34:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bf38:	4917      	ldr	r1, [pc, #92]	; (800bf98 <mem_malloc+0x208>)
 800bf3a:	4812      	ldr	r0, [pc, #72]	; (800bf84 <mem_malloc+0x1f4>)
 800bf3c:	f00c fffa 	bl	8018f34 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	3308      	adds	r3, #8
 800bf44:	e011      	b.n	800bf6a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bf46:	8bfb      	ldrh	r3, [r7, #30]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7ff fc33 	bl	800b7b4 <ptr_to_mem>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	881b      	ldrh	r3, [r3, #0]
 800bf52:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf54:	8bfa      	ldrh	r2, [r7, #30]
 800bf56:	8bbb      	ldrh	r3, [r7, #28]
 800bf58:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	f4ff af41 	bcc.w	800bde4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bf62:	4804      	ldr	r0, [pc, #16]	; (800bf74 <mem_malloc+0x1e4>)
 800bf64:	f00c fda3 	bl	8018aae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3720      	adds	r7, #32
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	2000e48c 	.word	0x2000e48c
 800bf78:	2000e490 	.word	0x2000e490
 800bf7c:	0801b1bc 	.word	0x0801b1bc
 800bf80:	0801b380 	.word	0x0801b380
 800bf84:	0801b204 	.word	0x0801b204
 800bf88:	2000e488 	.word	0x2000e488
 800bf8c:	0801b394 	.word	0x0801b394
 800bf90:	0801b3b0 	.word	0x0801b3b0
 800bf94:	0801b3e0 	.word	0x0801b3e0
 800bf98:	0801b410 	.word	0x0801b410

0800bf9c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	3303      	adds	r3, #3
 800bfb2:	f023 0303 	bic.w	r3, r3, #3
 800bfb6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bfb8:	2300      	movs	r3, #0
 800bfba:	60fb      	str	r3, [r7, #12]
 800bfbc:	e011      	b.n	800bfe2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	4413      	add	r3, r2
 800bfda:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	60fb      	str	r3, [r7, #12]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	885b      	ldrh	r3, [r3, #2]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	4293      	cmp	r3, r2
 800bfec:	dbe7      	blt.n	800bfbe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bfee:	bf00      	nop
 800bff0:	bf00      	nop
 800bff2:	3714      	adds	r7, #20
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c002:	2300      	movs	r3, #0
 800c004:	80fb      	strh	r3, [r7, #6]
 800c006:	e009      	b.n	800c01c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c008:	88fb      	ldrh	r3, [r7, #6]
 800c00a:	4a08      	ldr	r2, [pc, #32]	; (800c02c <memp_init+0x30>)
 800c00c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c010:	4618      	mov	r0, r3
 800c012:	f7ff ffc3 	bl	800bf9c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c016:	88fb      	ldrh	r3, [r7, #6]
 800c018:	3301      	adds	r3, #1
 800c01a:	80fb      	strh	r3, [r7, #6]
 800c01c:	88fb      	ldrh	r3, [r7, #6]
 800c01e:	2b0c      	cmp	r3, #12
 800c020:	d9f2      	bls.n	800c008 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c022:	bf00      	nop
 800c024:	bf00      	nop
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	08028100 	.word	0x08028100

0800c030 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c038:	f00c fd6c 	bl	8018b14 <sys_arch_protect>
 800c03c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d015      	beq.n	800c078 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	6812      	ldr	r2, [r2, #0]
 800c054:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	f003 0303 	and.w	r3, r3, #3
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d006      	beq.n	800c06e <do_memp_malloc_pool+0x3e>
 800c060:	4b09      	ldr	r3, [pc, #36]	; (800c088 <do_memp_malloc_pool+0x58>)
 800c062:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c066:	4909      	ldr	r1, [pc, #36]	; (800c08c <do_memp_malloc_pool+0x5c>)
 800c068:	4809      	ldr	r0, [pc, #36]	; (800c090 <do_memp_malloc_pool+0x60>)
 800c06a:	f00c ff63 	bl	8018f34 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f00c fd5e 	bl	8018b30 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	e003      	b.n	800c080 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f00c fd59 	bl	8018b30 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	3710      	adds	r7, #16
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	0801b434 	.word	0x0801b434
 800c08c:	0801b464 	.word	0x0801b464
 800c090:	0801b488 	.word	0x0801b488

0800c094 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d106      	bne.n	800c0b0 <memp_malloc_pool+0x1c>
 800c0a2:	4b0a      	ldr	r3, [pc, #40]	; (800c0cc <memp_malloc_pool+0x38>)
 800c0a4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c0a8:	4909      	ldr	r1, [pc, #36]	; (800c0d0 <memp_malloc_pool+0x3c>)
 800c0aa:	480a      	ldr	r0, [pc, #40]	; (800c0d4 <memp_malloc_pool+0x40>)
 800c0ac:	f00c ff42 	bl	8018f34 <iprintf>
  if (desc == NULL) {
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d101      	bne.n	800c0ba <memp_malloc_pool+0x26>
    return NULL;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	e003      	b.n	800c0c2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f7ff ffb8 	bl	800c030 <do_memp_malloc_pool>
 800c0c0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	0801b434 	.word	0x0801b434
 800c0d0:	0801b4b0 	.word	0x0801b4b0
 800c0d4:	0801b488 	.word	0x0801b488

0800c0d8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	4603      	mov	r3, r0
 800c0e0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c0e2:	79fb      	ldrb	r3, [r7, #7]
 800c0e4:	2b0c      	cmp	r3, #12
 800c0e6:	d908      	bls.n	800c0fa <memp_malloc+0x22>
 800c0e8:	4b0a      	ldr	r3, [pc, #40]	; (800c114 <memp_malloc+0x3c>)
 800c0ea:	f240 1257 	movw	r2, #343	; 0x157
 800c0ee:	490a      	ldr	r1, [pc, #40]	; (800c118 <memp_malloc+0x40>)
 800c0f0:	480a      	ldr	r0, [pc, #40]	; (800c11c <memp_malloc+0x44>)
 800c0f2:	f00c ff1f 	bl	8018f34 <iprintf>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	e008      	b.n	800c10c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c0fa:	79fb      	ldrb	r3, [r7, #7]
 800c0fc:	4a08      	ldr	r2, [pc, #32]	; (800c120 <memp_malloc+0x48>)
 800c0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c102:	4618      	mov	r0, r3
 800c104:	f7ff ff94 	bl	800c030 <do_memp_malloc_pool>
 800c108:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c10a:	68fb      	ldr	r3, [r7, #12]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	0801b434 	.word	0x0801b434
 800c118:	0801b4c4 	.word	0x0801b4c4
 800c11c:	0801b488 	.word	0x0801b488
 800c120:	08028100 	.word	0x08028100

0800c124 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	f003 0303 	and.w	r3, r3, #3
 800c134:	2b00      	cmp	r3, #0
 800c136:	d006      	beq.n	800c146 <do_memp_free_pool+0x22>
 800c138:	4b0d      	ldr	r3, [pc, #52]	; (800c170 <do_memp_free_pool+0x4c>)
 800c13a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c13e:	490d      	ldr	r1, [pc, #52]	; (800c174 <do_memp_free_pool+0x50>)
 800c140:	480d      	ldr	r0, [pc, #52]	; (800c178 <do_memp_free_pool+0x54>)
 800c142:	f00c fef7 	bl	8018f34 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c14a:	f00c fce3 	bl	8018b14 <sys_arch_protect>
 800c14e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c162:	68b8      	ldr	r0, [r7, #8]
 800c164:	f00c fce4 	bl	8018b30 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c168:	bf00      	nop
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	0801b434 	.word	0x0801b434
 800c174:	0801b4e4 	.word	0x0801b4e4
 800c178:	0801b488 	.word	0x0801b488

0800c17c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d106      	bne.n	800c19a <memp_free_pool+0x1e>
 800c18c:	4b0a      	ldr	r3, [pc, #40]	; (800c1b8 <memp_free_pool+0x3c>)
 800c18e:	f240 1295 	movw	r2, #405	; 0x195
 800c192:	490a      	ldr	r1, [pc, #40]	; (800c1bc <memp_free_pool+0x40>)
 800c194:	480a      	ldr	r0, [pc, #40]	; (800c1c0 <memp_free_pool+0x44>)
 800c196:	f00c fecd 	bl	8018f34 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d007      	beq.n	800c1b0 <memp_free_pool+0x34>
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d004      	beq.n	800c1b0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c1a6:	6839      	ldr	r1, [r7, #0]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f7ff ffbb 	bl	800c124 <do_memp_free_pool>
 800c1ae:	e000      	b.n	800c1b2 <memp_free_pool+0x36>
    return;
 800c1b0:	bf00      	nop
}
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	0801b434 	.word	0x0801b434
 800c1bc:	0801b4b0 	.word	0x0801b4b0
 800c1c0:	0801b488 	.word	0x0801b488

0800c1c4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	6039      	str	r1, [r7, #0]
 800c1ce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c1d0:	79fb      	ldrb	r3, [r7, #7]
 800c1d2:	2b0c      	cmp	r3, #12
 800c1d4:	d907      	bls.n	800c1e6 <memp_free+0x22>
 800c1d6:	4b0c      	ldr	r3, [pc, #48]	; (800c208 <memp_free+0x44>)
 800c1d8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c1dc:	490b      	ldr	r1, [pc, #44]	; (800c20c <memp_free+0x48>)
 800c1de:	480c      	ldr	r0, [pc, #48]	; (800c210 <memp_free+0x4c>)
 800c1e0:	f00c fea8 	bl	8018f34 <iprintf>
 800c1e4:	e00c      	b.n	800c200 <memp_free+0x3c>

  if (mem == NULL) {
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d008      	beq.n	800c1fe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c1ec:	79fb      	ldrb	r3, [r7, #7]
 800c1ee:	4a09      	ldr	r2, [pc, #36]	; (800c214 <memp_free+0x50>)
 800c1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7ff ff94 	bl	800c124 <do_memp_free_pool>
 800c1fc:	e000      	b.n	800c200 <memp_free+0x3c>
    return;
 800c1fe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	0801b434 	.word	0x0801b434
 800c20c:	0801b504 	.word	0x0801b504
 800c210:	0801b488 	.word	0x0801b488
 800c214:	08028100 	.word	0x08028100

0800c218 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c218:	b480      	push	{r7}
 800c21a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c21c:	bf00      	nop
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
	...

0800c228 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b086      	sub	sp, #24
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d108      	bne.n	800c24e <netif_add+0x26>
 800c23c:	4b5b      	ldr	r3, [pc, #364]	; (800c3ac <netif_add+0x184>)
 800c23e:	f240 1227 	movw	r2, #295	; 0x127
 800c242:	495b      	ldr	r1, [pc, #364]	; (800c3b0 <netif_add+0x188>)
 800c244:	485b      	ldr	r0, [pc, #364]	; (800c3b4 <netif_add+0x18c>)
 800c246:	f00c fe75 	bl	8018f34 <iprintf>
 800c24a:	2300      	movs	r3, #0
 800c24c:	e0a9      	b.n	800c3a2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c250:	2b00      	cmp	r3, #0
 800c252:	d108      	bne.n	800c266 <netif_add+0x3e>
 800c254:	4b55      	ldr	r3, [pc, #340]	; (800c3ac <netif_add+0x184>)
 800c256:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c25a:	4957      	ldr	r1, [pc, #348]	; (800c3b8 <netif_add+0x190>)
 800c25c:	4855      	ldr	r0, [pc, #340]	; (800c3b4 <netif_add+0x18c>)
 800c25e:	f00c fe69 	bl	8018f34 <iprintf>
 800c262:	2300      	movs	r3, #0
 800c264:	e09d      	b.n	800c3a2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c26c:	4b53      	ldr	r3, [pc, #332]	; (800c3bc <netif_add+0x194>)
 800c26e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d101      	bne.n	800c27a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c276:	4b51      	ldr	r3, [pc, #324]	; (800c3bc <netif_add+0x194>)
 800c278:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d101      	bne.n	800c284 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c280:	4b4e      	ldr	r3, [pc, #312]	; (800c3bc <netif_add+0x194>)
 800c282:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	4a49      	ldr	r2, [pc, #292]	; (800c3c0 <netif_add+0x198>)
 800c29a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	3324      	adds	r3, #36	; 0x24
 800c2ae:	2204      	movs	r2, #4
 800c2b0:	2100      	movs	r1, #0
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f00c fda1 	bl	8018dfa <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6a3a      	ldr	r2, [r7, #32]
 800c2c2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c2c4:	4b3f      	ldr	r3, [pc, #252]	; (800c3c4 <netif_add+0x19c>)
 800c2c6:	781a      	ldrb	r2, [r3, #0]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2d2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	68b9      	ldr	r1, [r7, #8]
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f000 f914 	bl	800c508 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	4798      	blx	r3
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <netif_add+0xc8>
    return NULL;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	e058      	b.n	800c3a2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c2f6:	2bff      	cmp	r3, #255	; 0xff
 800c2f8:	d103      	bne.n	800c302 <netif_add+0xda>
        netif->num = 0;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c302:	2300      	movs	r3, #0
 800c304:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c306:	4b30      	ldr	r3, [pc, #192]	; (800c3c8 <netif_add+0x1a0>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	617b      	str	r3, [r7, #20]
 800c30c:	e02b      	b.n	800c366 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	429a      	cmp	r2, r3
 800c314:	d106      	bne.n	800c324 <netif_add+0xfc>
 800c316:	4b25      	ldr	r3, [pc, #148]	; (800c3ac <netif_add+0x184>)
 800c318:	f240 128b 	movw	r2, #395	; 0x18b
 800c31c:	492b      	ldr	r1, [pc, #172]	; (800c3cc <netif_add+0x1a4>)
 800c31e:	4825      	ldr	r0, [pc, #148]	; (800c3b4 <netif_add+0x18c>)
 800c320:	f00c fe08 	bl	8018f34 <iprintf>
        num_netifs++;
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	3301      	adds	r3, #1
 800c328:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	2bff      	cmp	r3, #255	; 0xff
 800c32e:	dd06      	ble.n	800c33e <netif_add+0x116>
 800c330:	4b1e      	ldr	r3, [pc, #120]	; (800c3ac <netif_add+0x184>)
 800c332:	f240 128d 	movw	r2, #397	; 0x18d
 800c336:	4926      	ldr	r1, [pc, #152]	; (800c3d0 <netif_add+0x1a8>)
 800c338:	481e      	ldr	r0, [pc, #120]	; (800c3b4 <netif_add+0x18c>)
 800c33a:	f00c fdfb 	bl	8018f34 <iprintf>
        if (netif2->num == netif->num) {
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d108      	bne.n	800c360 <netif_add+0x138>
          netif->num++;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c354:	3301      	adds	r3, #1
 800c356:	b2da      	uxtb	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c35e:	e005      	b.n	800c36c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	617b      	str	r3, [r7, #20]
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1d0      	bne.n	800c30e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d1be      	bne.n	800c2f0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c378:	2bfe      	cmp	r3, #254	; 0xfe
 800c37a:	d103      	bne.n	800c384 <netif_add+0x15c>
    netif_num = 0;
 800c37c:	4b11      	ldr	r3, [pc, #68]	; (800c3c4 <netif_add+0x19c>)
 800c37e:	2200      	movs	r2, #0
 800c380:	701a      	strb	r2, [r3, #0]
 800c382:	e006      	b.n	800c392 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c38a:	3301      	adds	r3, #1
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	4b0d      	ldr	r3, [pc, #52]	; (800c3c4 <netif_add+0x19c>)
 800c390:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c392:	4b0d      	ldr	r3, [pc, #52]	; (800c3c8 <netif_add+0x1a0>)
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c39a:	4a0b      	ldr	r2, [pc, #44]	; (800c3c8 <netif_add+0x1a0>)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3718      	adds	r7, #24
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	0801b520 	.word	0x0801b520
 800c3b0:	0801b5b4 	.word	0x0801b5b4
 800c3b4:	0801b570 	.word	0x0801b570
 800c3b8:	0801b5d0 	.word	0x0801b5d0
 800c3bc:	08028184 	.word	0x08028184
 800c3c0:	0800c7eb 	.word	0x0800c7eb
 800c3c4:	20011588 	.word	0x20011588
 800c3c8:	20011580 	.word	0x20011580
 800c3cc:	0801b5f4 	.word	0x0801b5f4
 800c3d0:	0801b608 	.word	0x0801b608

0800c3d4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c3de:	6839      	ldr	r1, [r7, #0]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f002 ffab 	bl	800f33c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f008 f825 	bl	8014438 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c3ee:	bf00      	nop
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
	...

0800c3f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d106      	bne.n	800c418 <netif_do_set_ipaddr+0x20>
 800c40a:	4b1d      	ldr	r3, [pc, #116]	; (800c480 <netif_do_set_ipaddr+0x88>)
 800c40c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c410:	491c      	ldr	r1, [pc, #112]	; (800c484 <netif_do_set_ipaddr+0x8c>)
 800c412:	481d      	ldr	r0, [pc, #116]	; (800c488 <netif_do_set_ipaddr+0x90>)
 800c414:	f00c fd8e 	bl	8018f34 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d106      	bne.n	800c42c <netif_do_set_ipaddr+0x34>
 800c41e:	4b18      	ldr	r3, [pc, #96]	; (800c480 <netif_do_set_ipaddr+0x88>)
 800c420:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c424:	4917      	ldr	r1, [pc, #92]	; (800c484 <netif_do_set_ipaddr+0x8c>)
 800c426:	4818      	ldr	r0, [pc, #96]	; (800c488 <netif_do_set_ipaddr+0x90>)
 800c428:	f00c fd84 	bl	8018f34 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	3304      	adds	r3, #4
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	429a      	cmp	r2, r3
 800c438:	d01c      	beq.n	800c474 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	3304      	adds	r3, #4
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c44a:	f107 0314 	add.w	r3, r7, #20
 800c44e:	4619      	mov	r1, r3
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7ff ffbf 	bl	800c3d4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <netif_do_set_ipaddr+0x6a>
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	e000      	b.n	800c464 <netif_do_set_ipaddr+0x6c>
 800c462:	2300      	movs	r3, #0
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c468:	2101      	movs	r1, #1
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	f000 f8d2 	bl	800c614 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c470:	2301      	movs	r3, #1
 800c472:	e000      	b.n	800c476 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3718      	adds	r7, #24
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	0801b520 	.word	0x0801b520
 800c484:	0801b638 	.word	0x0801b638
 800c488:	0801b570 	.word	0x0801b570

0800c48c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	3308      	adds	r3, #8
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d00a      	beq.n	800c4bc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d002      	beq.n	800c4b2 <netif_do_set_netmask+0x26>
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	e000      	b.n	800c4b4 <netif_do_set_netmask+0x28>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e000      	b.n	800c4be <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3714      	adds	r7, #20
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr

0800c4ca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c4ca:	b480      	push	{r7}
 800c4cc:	b085      	sub	sp, #20
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	60f8      	str	r0, [r7, #12]
 800c4d2:	60b9      	str	r1, [r7, #8]
 800c4d4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	330c      	adds	r3, #12
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d00a      	beq.n	800c4fa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d002      	beq.n	800c4f0 <netif_do_set_gw+0x26>
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	e000      	b.n	800c4f2 <netif_do_set_gw+0x28>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3714      	adds	r7, #20
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b088      	sub	sp, #32
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
 800c514:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c516:	2300      	movs	r3, #0
 800c518:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c51a:	2300      	movs	r3, #0
 800c51c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d101      	bne.n	800c528 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c524:	4b1c      	ldr	r3, [pc, #112]	; (800c598 <netif_set_addr+0x90>)
 800c526:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d101      	bne.n	800c532 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c52e:	4b1a      	ldr	r3, [pc, #104]	; (800c598 <netif_set_addr+0x90>)
 800c530:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d101      	bne.n	800c53c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c538:	4b17      	ldr	r3, [pc, #92]	; (800c598 <netif_set_addr+0x90>)
 800c53a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d003      	beq.n	800c54a <netif_set_addr+0x42>
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d101      	bne.n	800c54e <netif_set_addr+0x46>
 800c54a:	2301      	movs	r3, #1
 800c54c:	e000      	b.n	800c550 <netif_set_addr+0x48>
 800c54e:	2300      	movs	r3, #0
 800c550:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d006      	beq.n	800c566 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c558:	f107 0310 	add.w	r3, r7, #16
 800c55c:	461a      	mov	r2, r3
 800c55e:	68b9      	ldr	r1, [r7, #8]
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f7ff ff49 	bl	800c3f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c566:	69fa      	ldr	r2, [r7, #28]
 800c568:	6879      	ldr	r1, [r7, #4]
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f7ff ff8e 	bl	800c48c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c570:	69ba      	ldr	r2, [r7, #24]
 800c572:	6839      	ldr	r1, [r7, #0]
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f7ff ffa8 	bl	800c4ca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d106      	bne.n	800c58e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c580:	f107 0310 	add.w	r3, r7, #16
 800c584:	461a      	mov	r2, r3
 800c586:	68b9      	ldr	r1, [r7, #8]
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f7ff ff35 	bl	800c3f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c58e:	bf00      	nop
 800c590:	3720      	adds	r7, #32
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	08028184 	.word	0x08028184

0800c59c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c5a4:	4a04      	ldr	r2, [pc, #16]	; (800c5b8 <netif_set_default+0x1c>)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c5aa:	bf00      	nop
 800c5ac:	370c      	adds	r7, #12
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
 800c5b6:	bf00      	nop
 800c5b8:	20011584 	.word	0x20011584

0800c5bc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d107      	bne.n	800c5da <netif_set_up+0x1e>
 800c5ca:	4b0f      	ldr	r3, [pc, #60]	; (800c608 <netif_set_up+0x4c>)
 800c5cc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c5d0:	490e      	ldr	r1, [pc, #56]	; (800c60c <netif_set_up+0x50>)
 800c5d2:	480f      	ldr	r0, [pc, #60]	; (800c610 <netif_set_up+0x54>)
 800c5d4:	f00c fcae 	bl	8018f34 <iprintf>
 800c5d8:	e013      	b.n	800c602 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c5e0:	f003 0301 	and.w	r3, r3, #1
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d10c      	bne.n	800c602 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c5ee:	f043 0301 	orr.w	r3, r3, #1
 800c5f2:	b2da      	uxtb	r2, r3
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c5fa:	2103      	movs	r1, #3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 f809 	bl	800c614 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	0801b520 	.word	0x0801b520
 800c60c:	0801b6a8 	.word	0x0801b6a8
 800c610:	0801b570 	.word	0x0801b570

0800c614 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	460b      	mov	r3, r1
 800c61e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d106      	bne.n	800c634 <netif_issue_reports+0x20>
 800c626:	4b18      	ldr	r3, [pc, #96]	; (800c688 <netif_issue_reports+0x74>)
 800c628:	f240 326d 	movw	r2, #877	; 0x36d
 800c62c:	4917      	ldr	r1, [pc, #92]	; (800c68c <netif_issue_reports+0x78>)
 800c62e:	4818      	ldr	r0, [pc, #96]	; (800c690 <netif_issue_reports+0x7c>)
 800c630:	f00c fc80 	bl	8018f34 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c63a:	f003 0304 	and.w	r3, r3, #4
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d01e      	beq.n	800c680 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c648:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d017      	beq.n	800c680 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c650:	78fb      	ldrb	r3, [r7, #3]
 800c652:	f003 0301 	and.w	r3, r3, #1
 800c656:	2b00      	cmp	r3, #0
 800c658:	d013      	beq.n	800c682 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	3304      	adds	r3, #4
 800c65e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00e      	beq.n	800c682 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c66a:	f003 0308 	and.w	r3, r3, #8
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d007      	beq.n	800c682 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	3304      	adds	r3, #4
 800c676:	4619      	mov	r1, r3
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f00a fcdd 	bl	8017038 <etharp_request>
 800c67e:	e000      	b.n	800c682 <netif_issue_reports+0x6e>
    return;
 800c680:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	0801b520 	.word	0x0801b520
 800c68c:	0801b6c4 	.word	0x0801b6c4
 800c690:	0801b570 	.word	0x0801b570

0800c694 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d107      	bne.n	800c6b2 <netif_set_down+0x1e>
 800c6a2:	4b12      	ldr	r3, [pc, #72]	; (800c6ec <netif_set_down+0x58>)
 800c6a4:	f240 329b 	movw	r2, #923	; 0x39b
 800c6a8:	4911      	ldr	r1, [pc, #68]	; (800c6f0 <netif_set_down+0x5c>)
 800c6aa:	4812      	ldr	r0, [pc, #72]	; (800c6f4 <netif_set_down+0x60>)
 800c6ac:	f00c fc42 	bl	8018f34 <iprintf>
 800c6b0:	e019      	b.n	800c6e6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6b8:	f003 0301 	and.w	r3, r3, #1
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d012      	beq.n	800c6e6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6c6:	f023 0301 	bic.w	r3, r3, #1
 800c6ca:	b2da      	uxtb	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6d8:	f003 0308 	and.w	r3, r3, #8
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f00a f863 	bl	80167ac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	0801b520 	.word	0x0801b520
 800c6f0:	0801b6e8 	.word	0x0801b6e8
 800c6f4:	0801b570 	.word	0x0801b570

0800c6f8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d107      	bne.n	800c716 <netif_set_link_up+0x1e>
 800c706:	4b15      	ldr	r3, [pc, #84]	; (800c75c <netif_set_link_up+0x64>)
 800c708:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c70c:	4914      	ldr	r1, [pc, #80]	; (800c760 <netif_set_link_up+0x68>)
 800c70e:	4815      	ldr	r0, [pc, #84]	; (800c764 <netif_set_link_up+0x6c>)
 800c710:	f00c fc10 	bl	8018f34 <iprintf>
 800c714:	e01e      	b.n	800c754 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c71c:	f003 0304 	and.w	r3, r3, #4
 800c720:	2b00      	cmp	r3, #0
 800c722:	d117      	bne.n	800c754 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c72a:	f043 0304 	orr.w	r3, r3, #4
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f008 faa8 	bl	8014c8c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c73c:	2103      	movs	r1, #3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7ff ff68 	bl	800c614 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	69db      	ldr	r3, [r3, #28]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d003      	beq.n	800c754 <netif_set_link_up+0x5c>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	69db      	ldr	r3, [r3, #28]
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	0801b520 	.word	0x0801b520
 800c760:	0801b708 	.word	0x0801b708
 800c764:	0801b570 	.word	0x0801b570

0800c768 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d107      	bne.n	800c786 <netif_set_link_down+0x1e>
 800c776:	4b11      	ldr	r3, [pc, #68]	; (800c7bc <netif_set_link_down+0x54>)
 800c778:	f240 4206 	movw	r2, #1030	; 0x406
 800c77c:	4910      	ldr	r1, [pc, #64]	; (800c7c0 <netif_set_link_down+0x58>)
 800c77e:	4811      	ldr	r0, [pc, #68]	; (800c7c4 <netif_set_link_down+0x5c>)
 800c780:	f00c fbd8 	bl	8018f34 <iprintf>
 800c784:	e017      	b.n	800c7b6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c78c:	f003 0304 	and.w	r3, r3, #4
 800c790:	2b00      	cmp	r3, #0
 800c792:	d010      	beq.n	800c7b6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c79a:	f023 0304 	bic.w	r3, r3, #4
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	69db      	ldr	r3, [r3, #28]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d003      	beq.n	800c7b6 <netif_set_link_down+0x4e>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	69db      	ldr	r3, [r3, #28]
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	0801b520 	.word	0x0801b520
 800c7c0:	0801b72c 	.word	0x0801b72c
 800c7c4:	0801b570 	.word	0x0801b570

0800c7c8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d002      	beq.n	800c7de <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	683a      	ldr	r2, [r7, #0]
 800c7dc:	61da      	str	r2, [r3, #28]
  }
}
 800c7de:	bf00      	nop
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b085      	sub	sp, #20
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	60f8      	str	r0, [r7, #12]
 800c7f2:	60b9      	str	r1, [r7, #8]
 800c7f4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c7f6:	f06f 030b 	mvn.w	r3, #11
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3714      	adds	r7, #20
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
	...

0800c808 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	4603      	mov	r3, r0
 800c810:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c812:	79fb      	ldrb	r3, [r7, #7]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d013      	beq.n	800c840 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c818:	4b0d      	ldr	r3, [pc, #52]	; (800c850 <netif_get_by_index+0x48>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	60fb      	str	r3, [r7, #12]
 800c81e:	e00c      	b.n	800c83a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c826:	3301      	adds	r3, #1
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	79fa      	ldrb	r2, [r7, #7]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d101      	bne.n	800c834 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	e006      	b.n	800c842 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	60fb      	str	r3, [r7, #12]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d1ef      	bne.n	800c820 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	20011580 	.word	0x20011580

0800c854 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c85a:	f00c f95b 	bl	8018b14 <sys_arch_protect>
 800c85e:	6038      	str	r0, [r7, #0]
 800c860:	4b0d      	ldr	r3, [pc, #52]	; (800c898 <pbuf_free_ooseq+0x44>)
 800c862:	2200      	movs	r2, #0
 800c864:	701a      	strb	r2, [r3, #0]
 800c866:	6838      	ldr	r0, [r7, #0]
 800c868:	f00c f962 	bl	8018b30 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c86c:	4b0b      	ldr	r3, [pc, #44]	; (800c89c <pbuf_free_ooseq+0x48>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	607b      	str	r3, [r7, #4]
 800c872:	e00a      	b.n	800c88a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d003      	beq.n	800c884 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f002 fd9b 	bl	800f3b8 <tcp_free_ooseq>
      return;
 800c882:	e005      	b.n	800c890 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	607b      	str	r3, [r7, #4]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1f1      	bne.n	800c874 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	20011589 	.word	0x20011589
 800c89c:	20011598 	.word	0x20011598

0800c8a0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c8a8:	f7ff ffd4 	bl	800c854 <pbuf_free_ooseq>
}
 800c8ac:	bf00      	nop
 800c8ae:	3708      	adds	r7, #8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c8ba:	f00c f92b 	bl	8018b14 <sys_arch_protect>
 800c8be:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c8c0:	4b0f      	ldr	r3, [pc, #60]	; (800c900 <pbuf_pool_is_empty+0x4c>)
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c8c6:	4b0e      	ldr	r3, [pc, #56]	; (800c900 <pbuf_pool_is_empty+0x4c>)
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f00c f92f 	bl	8018b30 <sys_arch_unprotect>

  if (!queued) {
 800c8d2:	78fb      	ldrb	r3, [r7, #3]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10f      	bne.n	800c8f8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c8d8:	2100      	movs	r1, #0
 800c8da:	480a      	ldr	r0, [pc, #40]	; (800c904 <pbuf_pool_is_empty+0x50>)
 800c8dc:	f7fe f834 	bl	800a948 <tcpip_try_callback>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d008      	beq.n	800c8f8 <pbuf_pool_is_empty+0x44>
 800c8e6:	f00c f915 	bl	8018b14 <sys_arch_protect>
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	4b04      	ldr	r3, [pc, #16]	; (800c900 <pbuf_pool_is_empty+0x4c>)
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	701a      	strb	r2, [r3, #0]
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f00c f91c 	bl	8018b30 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c8f8:	bf00      	nop
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	20011589 	.word	0x20011589
 800c904:	0800c8a1 	.word	0x0800c8a1

0800c908 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	4611      	mov	r1, r2
 800c914:	461a      	mov	r2, r3
 800c916:	460b      	mov	r3, r1
 800c918:	80fb      	strh	r3, [r7, #6]
 800c91a:	4613      	mov	r3, r2
 800c91c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2200      	movs	r2, #0
 800c922:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	88fa      	ldrh	r2, [r7, #6]
 800c92e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	88ba      	ldrh	r2, [r7, #4]
 800c934:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c936:	8b3b      	ldrh	r3, [r7, #24]
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	7f3a      	ldrb	r2, [r7, #28]
 800c942:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2201      	movs	r2, #1
 800c948:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2200      	movs	r2, #0
 800c94e:	73da      	strb	r2, [r3, #15]
}
 800c950:	bf00      	nop
 800c952:	3714      	adds	r7, #20
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b08c      	sub	sp, #48	; 0x30
 800c960:	af02      	add	r7, sp, #8
 800c962:	4603      	mov	r3, r0
 800c964:	71fb      	strb	r3, [r7, #7]
 800c966:	460b      	mov	r3, r1
 800c968:	80bb      	strh	r3, [r7, #4]
 800c96a:	4613      	mov	r3, r2
 800c96c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c96e:	79fb      	ldrb	r3, [r7, #7]
 800c970:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c972:	887b      	ldrh	r3, [r7, #2]
 800c974:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c978:	d07f      	beq.n	800ca7a <pbuf_alloc+0x11e>
 800c97a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c97e:	f300 80c8 	bgt.w	800cb12 <pbuf_alloc+0x1b6>
 800c982:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c986:	d010      	beq.n	800c9aa <pbuf_alloc+0x4e>
 800c988:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c98c:	f300 80c1 	bgt.w	800cb12 <pbuf_alloc+0x1b6>
 800c990:	2b01      	cmp	r3, #1
 800c992:	d002      	beq.n	800c99a <pbuf_alloc+0x3e>
 800c994:	2b41      	cmp	r3, #65	; 0x41
 800c996:	f040 80bc 	bne.w	800cb12 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c99a:	887a      	ldrh	r2, [r7, #2]
 800c99c:	88bb      	ldrh	r3, [r7, #4]
 800c99e:	4619      	mov	r1, r3
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	f000 f8d1 	bl	800cb48 <pbuf_alloc_reference>
 800c9a6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c9a8:	e0bd      	b.n	800cb26 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c9b2:	88bb      	ldrh	r3, [r7, #4]
 800c9b4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c9b6:	200c      	movs	r0, #12
 800c9b8:	f7ff fb8e 	bl	800c0d8 <memp_malloc>
 800c9bc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d109      	bne.n	800c9d8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c9c4:	f7ff ff76 	bl	800c8b4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d002      	beq.n	800c9d4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c9ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9d0:	f000 faa8 	bl	800cf24 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	e0a7      	b.n	800cb28 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c9d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9da:	3303      	adds	r3, #3
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	f023 0303 	bic.w	r3, r3, #3
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	8b7a      	ldrh	r2, [r7, #26]
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	bf28      	it	cs
 800c9f0:	4613      	movcs	r3, r2
 800c9f2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c9f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9f6:	3310      	adds	r3, #16
 800c9f8:	693a      	ldr	r2, [r7, #16]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	3303      	adds	r3, #3
 800c9fe:	f023 0303 	bic.w	r3, r3, #3
 800ca02:	4618      	mov	r0, r3
 800ca04:	89f9      	ldrh	r1, [r7, #14]
 800ca06:	8b7a      	ldrh	r2, [r7, #26]
 800ca08:	2300      	movs	r3, #0
 800ca0a:	9301      	str	r3, [sp, #4]
 800ca0c:	887b      	ldrh	r3, [r7, #2]
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	460b      	mov	r3, r1
 800ca12:	4601      	mov	r1, r0
 800ca14:	6938      	ldr	r0, [r7, #16]
 800ca16:	f7ff ff77 	bl	800c908 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	f003 0303 	and.w	r3, r3, #3
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d006      	beq.n	800ca34 <pbuf_alloc+0xd8>
 800ca26:	4b42      	ldr	r3, [pc, #264]	; (800cb30 <pbuf_alloc+0x1d4>)
 800ca28:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca2c:	4941      	ldr	r1, [pc, #260]	; (800cb34 <pbuf_alloc+0x1d8>)
 800ca2e:	4842      	ldr	r0, [pc, #264]	; (800cb38 <pbuf_alloc+0x1dc>)
 800ca30:	f00c fa80 	bl	8018f34 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ca34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca36:	3303      	adds	r3, #3
 800ca38:	f023 0303 	bic.w	r3, r3, #3
 800ca3c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ca40:	d106      	bne.n	800ca50 <pbuf_alloc+0xf4>
 800ca42:	4b3b      	ldr	r3, [pc, #236]	; (800cb30 <pbuf_alloc+0x1d4>)
 800ca44:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ca48:	493c      	ldr	r1, [pc, #240]	; (800cb3c <pbuf_alloc+0x1e0>)
 800ca4a:	483b      	ldr	r0, [pc, #236]	; (800cb38 <pbuf_alloc+0x1dc>)
 800ca4c:	f00c fa72 	bl	8018f34 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d102      	bne.n	800ca5c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	627b      	str	r3, [r7, #36]	; 0x24
 800ca5a:	e002      	b.n	800ca62 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	693a      	ldr	r2, [r7, #16]
 800ca60:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ca66:	8b7a      	ldrh	r2, [r7, #26]
 800ca68:	89fb      	ldrh	r3, [r7, #14]
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ca72:	8b7b      	ldrh	r3, [r7, #26]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d19e      	bne.n	800c9b6 <pbuf_alloc+0x5a>
      break;
 800ca78:	e055      	b.n	800cb26 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ca7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca7c:	3303      	adds	r3, #3
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	f023 0303 	bic.w	r3, r3, #3
 800ca84:	b29a      	uxth	r2, r3
 800ca86:	88bb      	ldrh	r3, [r7, #4]
 800ca88:	3303      	adds	r3, #3
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	f023 0303 	bic.w	r3, r3, #3
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	4413      	add	r3, r2
 800ca94:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ca96:	8b3b      	ldrh	r3, [r7, #24]
 800ca98:	3310      	adds	r3, #16
 800ca9a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ca9c:	8b3a      	ldrh	r2, [r7, #24]
 800ca9e:	88bb      	ldrh	r3, [r7, #4]
 800caa0:	3303      	adds	r3, #3
 800caa2:	f023 0303 	bic.w	r3, r3, #3
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d306      	bcc.n	800cab8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800caaa:	8afa      	ldrh	r2, [r7, #22]
 800caac:	88bb      	ldrh	r3, [r7, #4]
 800caae:	3303      	adds	r3, #3
 800cab0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d201      	bcs.n	800cabc <pbuf_alloc+0x160>
        return NULL;
 800cab8:	2300      	movs	r3, #0
 800caba:	e035      	b.n	800cb28 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cabc:	8afb      	ldrh	r3, [r7, #22]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7ff f966 	bl	800bd90 <mem_malloc>
 800cac4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d101      	bne.n	800cad0 <pbuf_alloc+0x174>
        return NULL;
 800cacc:	2300      	movs	r3, #0
 800cace:	e02b      	b.n	800cb28 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cad2:	3310      	adds	r3, #16
 800cad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cad6:	4413      	add	r3, r2
 800cad8:	3303      	adds	r3, #3
 800cada:	f023 0303 	bic.w	r3, r3, #3
 800cade:	4618      	mov	r0, r3
 800cae0:	88b9      	ldrh	r1, [r7, #4]
 800cae2:	88ba      	ldrh	r2, [r7, #4]
 800cae4:	2300      	movs	r3, #0
 800cae6:	9301      	str	r3, [sp, #4]
 800cae8:	887b      	ldrh	r3, [r7, #2]
 800caea:	9300      	str	r3, [sp, #0]
 800caec:	460b      	mov	r3, r1
 800caee:	4601      	mov	r1, r0
 800caf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800caf2:	f7ff ff09 	bl	800c908 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800caf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	f003 0303 	and.w	r3, r3, #3
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d010      	beq.n	800cb24 <pbuf_alloc+0x1c8>
 800cb02:	4b0b      	ldr	r3, [pc, #44]	; (800cb30 <pbuf_alloc+0x1d4>)
 800cb04:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cb08:	490d      	ldr	r1, [pc, #52]	; (800cb40 <pbuf_alloc+0x1e4>)
 800cb0a:	480b      	ldr	r0, [pc, #44]	; (800cb38 <pbuf_alloc+0x1dc>)
 800cb0c:	f00c fa12 	bl	8018f34 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cb10:	e008      	b.n	800cb24 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cb12:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <pbuf_alloc+0x1d4>)
 800cb14:	f240 1227 	movw	r2, #295	; 0x127
 800cb18:	490a      	ldr	r1, [pc, #40]	; (800cb44 <pbuf_alloc+0x1e8>)
 800cb1a:	4807      	ldr	r0, [pc, #28]	; (800cb38 <pbuf_alloc+0x1dc>)
 800cb1c:	f00c fa0a 	bl	8018f34 <iprintf>
      return NULL;
 800cb20:	2300      	movs	r3, #0
 800cb22:	e001      	b.n	800cb28 <pbuf_alloc+0x1cc>
      break;
 800cb24:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3728      	adds	r7, #40	; 0x28
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	0801b750 	.word	0x0801b750
 800cb34:	0801b780 	.word	0x0801b780
 800cb38:	0801b7b0 	.word	0x0801b7b0
 800cb3c:	0801b7d8 	.word	0x0801b7d8
 800cb40:	0801b80c 	.word	0x0801b80c
 800cb44:	0801b838 	.word	0x0801b838

0800cb48 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b086      	sub	sp, #24
 800cb4c:	af02      	add	r7, sp, #8
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	460b      	mov	r3, r1
 800cb52:	807b      	strh	r3, [r7, #2]
 800cb54:	4613      	mov	r3, r2
 800cb56:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cb58:	883b      	ldrh	r3, [r7, #0]
 800cb5a:	2b41      	cmp	r3, #65	; 0x41
 800cb5c:	d009      	beq.n	800cb72 <pbuf_alloc_reference+0x2a>
 800cb5e:	883b      	ldrh	r3, [r7, #0]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d006      	beq.n	800cb72 <pbuf_alloc_reference+0x2a>
 800cb64:	4b0f      	ldr	r3, [pc, #60]	; (800cba4 <pbuf_alloc_reference+0x5c>)
 800cb66:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cb6a:	490f      	ldr	r1, [pc, #60]	; (800cba8 <pbuf_alloc_reference+0x60>)
 800cb6c:	480f      	ldr	r0, [pc, #60]	; (800cbac <pbuf_alloc_reference+0x64>)
 800cb6e:	f00c f9e1 	bl	8018f34 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cb72:	200b      	movs	r0, #11
 800cb74:	f7ff fab0 	bl	800c0d8 <memp_malloc>
 800cb78:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d101      	bne.n	800cb84 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cb80:	2300      	movs	r3, #0
 800cb82:	e00b      	b.n	800cb9c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cb84:	8879      	ldrh	r1, [r7, #2]
 800cb86:	887a      	ldrh	r2, [r7, #2]
 800cb88:	2300      	movs	r3, #0
 800cb8a:	9301      	str	r3, [sp, #4]
 800cb8c:	883b      	ldrh	r3, [r7, #0]
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	460b      	mov	r3, r1
 800cb92:	6879      	ldr	r1, [r7, #4]
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f7ff feb7 	bl	800c908 <pbuf_init_alloced_pbuf>
  return p;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	0801b750 	.word	0x0801b750
 800cba8:	0801b854 	.word	0x0801b854
 800cbac:	0801b7b0 	.word	0x0801b7b0

0800cbb0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b088      	sub	sp, #32
 800cbb4:	af02      	add	r7, sp, #8
 800cbb6:	607b      	str	r3, [r7, #4]
 800cbb8:	4603      	mov	r3, r0
 800cbba:	73fb      	strb	r3, [r7, #15]
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	81bb      	strh	r3, [r7, #12]
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
 800cbc6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cbc8:	8a7b      	ldrh	r3, [r7, #18]
 800cbca:	3303      	adds	r3, #3
 800cbcc:	f023 0203 	bic.w	r2, r3, #3
 800cbd0:	89bb      	ldrh	r3, [r7, #12]
 800cbd2:	441a      	add	r2, r3
 800cbd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d901      	bls.n	800cbde <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	e018      	b.n	800cc10 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d007      	beq.n	800cbf4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cbe4:	8a7b      	ldrh	r3, [r7, #18]
 800cbe6:	3303      	adds	r3, #3
 800cbe8:	f023 0303 	bic.w	r3, r3, #3
 800cbec:	6a3a      	ldr	r2, [r7, #32]
 800cbee:	4413      	add	r3, r2
 800cbf0:	617b      	str	r3, [r7, #20]
 800cbf2:	e001      	b.n	800cbf8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	89b9      	ldrh	r1, [r7, #12]
 800cbfc:	89ba      	ldrh	r2, [r7, #12]
 800cbfe:	2302      	movs	r3, #2
 800cc00:	9301      	str	r3, [sp, #4]
 800cc02:	897b      	ldrh	r3, [r7, #10]
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	460b      	mov	r3, r1
 800cc08:	6979      	ldr	r1, [r7, #20]
 800cc0a:	f7ff fe7d 	bl	800c908 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cc0e:	687b      	ldr	r3, [r7, #4]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3718      	adds	r7, #24
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	460b      	mov	r3, r1
 800cc22:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d106      	bne.n	800cc38 <pbuf_realloc+0x20>
 800cc2a:	4b3a      	ldr	r3, [pc, #232]	; (800cd14 <pbuf_realloc+0xfc>)
 800cc2c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cc30:	4939      	ldr	r1, [pc, #228]	; (800cd18 <pbuf_realloc+0x100>)
 800cc32:	483a      	ldr	r0, [pc, #232]	; (800cd1c <pbuf_realloc+0x104>)
 800cc34:	f00c f97e 	bl	8018f34 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	891b      	ldrh	r3, [r3, #8]
 800cc3c:	887a      	ldrh	r2, [r7, #2]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d263      	bcs.n	800cd0a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	891a      	ldrh	r2, [r3, #8]
 800cc46:	887b      	ldrh	r3, [r7, #2]
 800cc48:	1ad3      	subs	r3, r2, r3
 800cc4a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cc4c:	887b      	ldrh	r3, [r7, #2]
 800cc4e:	817b      	strh	r3, [r7, #10]
  q = p;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cc54:	e018      	b.n	800cc88 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	895b      	ldrh	r3, [r3, #10]
 800cc5a:	897a      	ldrh	r2, [r7, #10]
 800cc5c:	1ad3      	subs	r3, r2, r3
 800cc5e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	891a      	ldrh	r2, [r3, #8]
 800cc64:	893b      	ldrh	r3, [r7, #8]
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d106      	bne.n	800cc88 <pbuf_realloc+0x70>
 800cc7a:	4b26      	ldr	r3, [pc, #152]	; (800cd14 <pbuf_realloc+0xfc>)
 800cc7c:	f240 12af 	movw	r2, #431	; 0x1af
 800cc80:	4927      	ldr	r1, [pc, #156]	; (800cd20 <pbuf_realloc+0x108>)
 800cc82:	4826      	ldr	r0, [pc, #152]	; (800cd1c <pbuf_realloc+0x104>)
 800cc84:	f00c f956 	bl	8018f34 <iprintf>
  while (rem_len > q->len) {
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	895b      	ldrh	r3, [r3, #10]
 800cc8c:	897a      	ldrh	r2, [r7, #10]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d8e1      	bhi.n	800cc56 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	7b1b      	ldrb	r3, [r3, #12]
 800cc96:	f003 030f 	and.w	r3, r3, #15
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d121      	bne.n	800cce2 <pbuf_realloc+0xca>
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	895b      	ldrh	r3, [r3, #10]
 800cca2:	897a      	ldrh	r2, [r7, #10]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d01c      	beq.n	800cce2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	7b5b      	ldrb	r3, [r3, #13]
 800ccac:	f003 0302 	and.w	r3, r3, #2
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d116      	bne.n	800cce2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	685a      	ldr	r2, [r3, #4]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	897b      	ldrh	r3, [r7, #10]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f7fe ff58 	bl	800bb7c <mem_trim>
 800cccc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d106      	bne.n	800cce2 <pbuf_realloc+0xca>
 800ccd4:	4b0f      	ldr	r3, [pc, #60]	; (800cd14 <pbuf_realloc+0xfc>)
 800ccd6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ccda:	4912      	ldr	r1, [pc, #72]	; (800cd24 <pbuf_realloc+0x10c>)
 800ccdc:	480f      	ldr	r0, [pc, #60]	; (800cd1c <pbuf_realloc+0x104>)
 800ccde:	f00c f929 	bl	8018f34 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	897a      	ldrh	r2, [r7, #10]
 800cce6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	895a      	ldrh	r2, [r3, #10]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d004      	beq.n	800cd02 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 f911 	bl	800cf24 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]
 800cd08:	e000      	b.n	800cd0c <pbuf_realloc+0xf4>
    return;
 800cd0a:	bf00      	nop

}
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	0801b750 	.word	0x0801b750
 800cd18:	0801b868 	.word	0x0801b868
 800cd1c:	0801b7b0 	.word	0x0801b7b0
 800cd20:	0801b880 	.word	0x0801b880
 800cd24:	0801b898 	.word	0x0801b898

0800cd28 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	4613      	mov	r3, r2
 800cd34:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d106      	bne.n	800cd4a <pbuf_add_header_impl+0x22>
 800cd3c:	4b2b      	ldr	r3, [pc, #172]	; (800cdec <pbuf_add_header_impl+0xc4>)
 800cd3e:	f240 12df 	movw	r2, #479	; 0x1df
 800cd42:	492b      	ldr	r1, [pc, #172]	; (800cdf0 <pbuf_add_header_impl+0xc8>)
 800cd44:	482b      	ldr	r0, [pc, #172]	; (800cdf4 <pbuf_add_header_impl+0xcc>)
 800cd46:	f00c f8f5 	bl	8018f34 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d003      	beq.n	800cd58 <pbuf_add_header_impl+0x30>
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd56:	d301      	bcc.n	800cd5c <pbuf_add_header_impl+0x34>
    return 1;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	e043      	b.n	800cde4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d101      	bne.n	800cd66 <pbuf_add_header_impl+0x3e>
    return 0;
 800cd62:	2300      	movs	r3, #0
 800cd64:	e03e      	b.n	800cde4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	891a      	ldrh	r2, [r3, #8]
 800cd6e:	8a7b      	ldrh	r3, [r7, #18]
 800cd70:	4413      	add	r3, r2
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	8a7a      	ldrh	r2, [r7, #18]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d901      	bls.n	800cd7e <pbuf_add_header_impl+0x56>
    return 1;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e032      	b.n	800cde4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	7b1b      	ldrb	r3, [r3, #12]
 800cd82:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cd84:	8a3b      	ldrh	r3, [r7, #16]
 800cd86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00c      	beq.n	800cda8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	685a      	ldr	r2, [r3, #4]
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	425b      	negs	r3, r3
 800cd96:	4413      	add	r3, r2
 800cd98:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	3310      	adds	r3, #16
 800cd9e:	697a      	ldr	r2, [r7, #20]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d20d      	bcs.n	800cdc0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cda4:	2301      	movs	r3, #1
 800cda6:	e01d      	b.n	800cde4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cda8:	79fb      	ldrb	r3, [r7, #7]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d006      	beq.n	800cdbc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	685a      	ldr	r2, [r3, #4]
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	425b      	negs	r3, r3
 800cdb6:	4413      	add	r3, r2
 800cdb8:	617b      	str	r3, [r7, #20]
 800cdba:	e001      	b.n	800cdc0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	e011      	b.n	800cde4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	895a      	ldrh	r2, [r3, #10]
 800cdca:	8a7b      	ldrh	r3, [r7, #18]
 800cdcc:	4413      	add	r3, r2
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	891a      	ldrh	r2, [r3, #8]
 800cdd8:	8a7b      	ldrh	r3, [r7, #18]
 800cdda:	4413      	add	r3, r2
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	811a      	strh	r2, [r3, #8]


  return 0;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3718      	adds	r7, #24
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	0801b750 	.word	0x0801b750
 800cdf0:	0801b8b4 	.word	0x0801b8b4
 800cdf4:	0801b7b0 	.word	0x0801b7b0

0800cdf8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ce02:	2200      	movs	r2, #0
 800ce04:	6839      	ldr	r1, [r7, #0]
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7ff ff8e 	bl	800cd28 <pbuf_add_header_impl>
 800ce0c:	4603      	mov	r3, r0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
	...

0800ce18 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d106      	bne.n	800ce36 <pbuf_remove_header+0x1e>
 800ce28:	4b20      	ldr	r3, [pc, #128]	; (800ceac <pbuf_remove_header+0x94>)
 800ce2a:	f240 224b 	movw	r2, #587	; 0x24b
 800ce2e:	4920      	ldr	r1, [pc, #128]	; (800ceb0 <pbuf_remove_header+0x98>)
 800ce30:	4820      	ldr	r0, [pc, #128]	; (800ceb4 <pbuf_remove_header+0x9c>)
 800ce32:	f00c f87f 	bl	8018f34 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d003      	beq.n	800ce44 <pbuf_remove_header+0x2c>
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce42:	d301      	bcc.n	800ce48 <pbuf_remove_header+0x30>
    return 1;
 800ce44:	2301      	movs	r3, #1
 800ce46:	e02c      	b.n	800cea2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d101      	bne.n	800ce52 <pbuf_remove_header+0x3a>
    return 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	e027      	b.n	800cea2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	895b      	ldrh	r3, [r3, #10]
 800ce5a:	89fa      	ldrh	r2, [r7, #14]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d908      	bls.n	800ce72 <pbuf_remove_header+0x5a>
 800ce60:	4b12      	ldr	r3, [pc, #72]	; (800ceac <pbuf_remove_header+0x94>)
 800ce62:	f240 2255 	movw	r2, #597	; 0x255
 800ce66:	4914      	ldr	r1, [pc, #80]	; (800ceb8 <pbuf_remove_header+0xa0>)
 800ce68:	4812      	ldr	r0, [pc, #72]	; (800ceb4 <pbuf_remove_header+0x9c>)
 800ce6a:	f00c f863 	bl	8018f34 <iprintf>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e017      	b.n	800cea2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	685a      	ldr	r2, [r3, #4]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	441a      	add	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	895a      	ldrh	r2, [r3, #10]
 800ce88:	89fb      	ldrh	r3, [r7, #14]
 800ce8a:	1ad3      	subs	r3, r2, r3
 800ce8c:	b29a      	uxth	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	891a      	ldrh	r2, [r3, #8]
 800ce96:	89fb      	ldrh	r3, [r7, #14]
 800ce98:	1ad3      	subs	r3, r2, r3
 800ce9a:	b29a      	uxth	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	0801b750 	.word	0x0801b750
 800ceb0:	0801b8b4 	.word	0x0801b8b4
 800ceb4:	0801b7b0 	.word	0x0801b7b0
 800ceb8:	0801b8c0 	.word	0x0801b8c0

0800cebc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	460b      	mov	r3, r1
 800cec6:	807b      	strh	r3, [r7, #2]
 800cec8:	4613      	mov	r3, r2
 800ceca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cecc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	da08      	bge.n	800cee6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ced4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ced8:	425b      	negs	r3, r3
 800ceda:	4619      	mov	r1, r3
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff ff9b 	bl	800ce18 <pbuf_remove_header>
 800cee2:	4603      	mov	r3, r0
 800cee4:	e007      	b.n	800cef6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cee6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ceea:	787a      	ldrb	r2, [r7, #1]
 800ceec:	4619      	mov	r1, r3
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f7ff ff1a 	bl	800cd28 <pbuf_add_header_impl>
 800cef4:	4603      	mov	r3, r0
  }
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b082      	sub	sp, #8
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	460b      	mov	r3, r1
 800cf08:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cf0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	4619      	mov	r1, r3
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7ff ffd2 	bl	800cebc <pbuf_header_impl>
 800cf18:	4603      	mov	r3, r0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3708      	adds	r7, #8
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
	...

0800cf24 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b088      	sub	sp, #32
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d10b      	bne.n	800cf4a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d106      	bne.n	800cf46 <pbuf_free+0x22>
 800cf38:	4b3b      	ldr	r3, [pc, #236]	; (800d028 <pbuf_free+0x104>)
 800cf3a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cf3e:	493b      	ldr	r1, [pc, #236]	; (800d02c <pbuf_free+0x108>)
 800cf40:	483b      	ldr	r0, [pc, #236]	; (800d030 <pbuf_free+0x10c>)
 800cf42:	f00b fff7 	bl	8018f34 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	e069      	b.n	800d01e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cf4e:	e062      	b.n	800d016 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cf50:	f00b fde0 	bl	8018b14 <sys_arch_protect>
 800cf54:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	7b9b      	ldrb	r3, [r3, #14]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d106      	bne.n	800cf6c <pbuf_free+0x48>
 800cf5e:	4b32      	ldr	r3, [pc, #200]	; (800d028 <pbuf_free+0x104>)
 800cf60:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cf64:	4933      	ldr	r1, [pc, #204]	; (800d034 <pbuf_free+0x110>)
 800cf66:	4832      	ldr	r0, [pc, #200]	; (800d030 <pbuf_free+0x10c>)
 800cf68:	f00b ffe4 	bl	8018f34 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	7b9b      	ldrb	r3, [r3, #14]
 800cf70:	3b01      	subs	r3, #1
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	739a      	strb	r2, [r3, #14]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	7b9b      	ldrb	r3, [r3, #14]
 800cf7c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cf7e:	69b8      	ldr	r0, [r7, #24]
 800cf80:	f00b fdd6 	bl	8018b30 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cf84:	7dfb      	ldrb	r3, [r7, #23]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d143      	bne.n	800d012 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	7b1b      	ldrb	r3, [r3, #12]
 800cf94:	f003 030f 	and.w	r3, r3, #15
 800cf98:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	7b5b      	ldrb	r3, [r3, #13]
 800cf9e:	f003 0302 	and.w	r3, r3, #2
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d011      	beq.n	800cfca <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	691b      	ldr	r3, [r3, #16]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d106      	bne.n	800cfc0 <pbuf_free+0x9c>
 800cfb2:	4b1d      	ldr	r3, [pc, #116]	; (800d028 <pbuf_free+0x104>)
 800cfb4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800cfb8:	491f      	ldr	r1, [pc, #124]	; (800d038 <pbuf_free+0x114>)
 800cfba:	481d      	ldr	r0, [pc, #116]	; (800d030 <pbuf_free+0x10c>)
 800cfbc:	f00b ffba 	bl	8018f34 <iprintf>
        pc->custom_free_function(p);
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	4798      	blx	r3
 800cfc8:	e01d      	b.n	800d006 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cfca:	7bfb      	ldrb	r3, [r7, #15]
 800cfcc:	2b02      	cmp	r3, #2
 800cfce:	d104      	bne.n	800cfda <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cfd0:	6879      	ldr	r1, [r7, #4]
 800cfd2:	200c      	movs	r0, #12
 800cfd4:	f7ff f8f6 	bl	800c1c4 <memp_free>
 800cfd8:	e015      	b.n	800d006 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cfda:	7bfb      	ldrb	r3, [r7, #15]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d104      	bne.n	800cfea <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800cfe0:	6879      	ldr	r1, [r7, #4]
 800cfe2:	200b      	movs	r0, #11
 800cfe4:	f7ff f8ee 	bl	800c1c4 <memp_free>
 800cfe8:	e00d      	b.n	800d006 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cfea:	7bfb      	ldrb	r3, [r7, #15]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d103      	bne.n	800cff8 <pbuf_free+0xd4>
          mem_free(p);
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f7fe fd33 	bl	800ba5c <mem_free>
 800cff6:	e006      	b.n	800d006 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cff8:	4b0b      	ldr	r3, [pc, #44]	; (800d028 <pbuf_free+0x104>)
 800cffa:	f240 320f 	movw	r2, #783	; 0x30f
 800cffe:	490f      	ldr	r1, [pc, #60]	; (800d03c <pbuf_free+0x118>)
 800d000:	480b      	ldr	r0, [pc, #44]	; (800d030 <pbuf_free+0x10c>)
 800d002:	f00b ff97 	bl	8018f34 <iprintf>
        }
      }
      count++;
 800d006:	7ffb      	ldrb	r3, [r7, #31]
 800d008:	3301      	adds	r3, #1
 800d00a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	607b      	str	r3, [r7, #4]
 800d010:	e001      	b.n	800d016 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d012:	2300      	movs	r3, #0
 800d014:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d199      	bne.n	800cf50 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d01c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3720      	adds	r7, #32
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	0801b750 	.word	0x0801b750
 800d02c:	0801b8b4 	.word	0x0801b8b4
 800d030:	0801b7b0 	.word	0x0801b7b0
 800d034:	0801b8e0 	.word	0x0801b8e0
 800d038:	0801b8f8 	.word	0x0801b8f8
 800d03c:	0801b91c 	.word	0x0801b91c

0800d040 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d048:	2300      	movs	r3, #0
 800d04a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d04c:	e005      	b.n	800d05a <pbuf_clen+0x1a>
    ++len;
 800d04e:	89fb      	ldrh	r3, [r7, #14]
 800d050:	3301      	adds	r3, #1
 800d052:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d1f6      	bne.n	800d04e <pbuf_clen+0xe>
  }
  return len;
 800d060:	89fb      	ldrh	r3, [r7, #14]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3714      	adds	r7, #20
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr
	...

0800d070 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d016      	beq.n	800d0ac <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d07e:	f00b fd49 	bl	8018b14 <sys_arch_protect>
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	7b9b      	ldrb	r3, [r3, #14]
 800d088:	3301      	adds	r3, #1
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	739a      	strb	r2, [r3, #14]
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f00b fd4d 	bl	8018b30 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	7b9b      	ldrb	r3, [r3, #14]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d106      	bne.n	800d0ac <pbuf_ref+0x3c>
 800d09e:	4b05      	ldr	r3, [pc, #20]	; (800d0b4 <pbuf_ref+0x44>)
 800d0a0:	f240 3242 	movw	r2, #834	; 0x342
 800d0a4:	4904      	ldr	r1, [pc, #16]	; (800d0b8 <pbuf_ref+0x48>)
 800d0a6:	4805      	ldr	r0, [pc, #20]	; (800d0bc <pbuf_ref+0x4c>)
 800d0a8:	f00b ff44 	bl	8018f34 <iprintf>
  }
}
 800d0ac:	bf00      	nop
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	0801b750 	.word	0x0801b750
 800d0b8:	0801b930 	.word	0x0801b930
 800d0bc:	0801b7b0 	.word	0x0801b7b0

0800d0c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d002      	beq.n	800d0d6 <pbuf_cat+0x16>
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d107      	bne.n	800d0e6 <pbuf_cat+0x26>
 800d0d6:	4b20      	ldr	r3, [pc, #128]	; (800d158 <pbuf_cat+0x98>)
 800d0d8:	f240 3259 	movw	r2, #857	; 0x359
 800d0dc:	491f      	ldr	r1, [pc, #124]	; (800d15c <pbuf_cat+0x9c>)
 800d0de:	4820      	ldr	r0, [pc, #128]	; (800d160 <pbuf_cat+0xa0>)
 800d0e0:	f00b ff28 	bl	8018f34 <iprintf>
 800d0e4:	e034      	b.n	800d150 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	60fb      	str	r3, [r7, #12]
 800d0ea:	e00a      	b.n	800d102 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	891a      	ldrh	r2, [r3, #8]
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	891b      	ldrh	r3, [r3, #8]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	b29a      	uxth	r2, r3
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	60fb      	str	r3, [r7, #12]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d1f0      	bne.n	800d0ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	891a      	ldrh	r2, [r3, #8]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	895b      	ldrh	r3, [r3, #10]
 800d112:	429a      	cmp	r2, r3
 800d114:	d006      	beq.n	800d124 <pbuf_cat+0x64>
 800d116:	4b10      	ldr	r3, [pc, #64]	; (800d158 <pbuf_cat+0x98>)
 800d118:	f240 3262 	movw	r2, #866	; 0x362
 800d11c:	4911      	ldr	r1, [pc, #68]	; (800d164 <pbuf_cat+0xa4>)
 800d11e:	4810      	ldr	r0, [pc, #64]	; (800d160 <pbuf_cat+0xa0>)
 800d120:	f00b ff08 	bl	8018f34 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d006      	beq.n	800d13a <pbuf_cat+0x7a>
 800d12c:	4b0a      	ldr	r3, [pc, #40]	; (800d158 <pbuf_cat+0x98>)
 800d12e:	f240 3263 	movw	r2, #867	; 0x363
 800d132:	490d      	ldr	r1, [pc, #52]	; (800d168 <pbuf_cat+0xa8>)
 800d134:	480a      	ldr	r0, [pc, #40]	; (800d160 <pbuf_cat+0xa0>)
 800d136:	f00b fefd 	bl	8018f34 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	891a      	ldrh	r2, [r3, #8]
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	891b      	ldrh	r3, [r3, #8]
 800d142:	4413      	add	r3, r2
 800d144:	b29a      	uxth	r2, r3
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	683a      	ldr	r2, [r7, #0]
 800d14e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	0801b750 	.word	0x0801b750
 800d15c:	0801b944 	.word	0x0801b944
 800d160:	0801b7b0 	.word	0x0801b7b0
 800d164:	0801b97c 	.word	0x0801b97c
 800d168:	0801b9ac 	.word	0x0801b9ac

0800d16c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d176:	6839      	ldr	r1, [r7, #0]
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f7ff ffa1 	bl	800d0c0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d17e:	6838      	ldr	r0, [r7, #0]
 800d180:	f7ff ff76 	bl	800d070 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d184:	bf00      	nop
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b086      	sub	sp, #24
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d196:	2300      	movs	r3, #0
 800d198:	617b      	str	r3, [r7, #20]
 800d19a:	2300      	movs	r3, #0
 800d19c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d008      	beq.n	800d1b6 <pbuf_copy+0x2a>
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d005      	beq.n	800d1b6 <pbuf_copy+0x2a>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	891a      	ldrh	r2, [r3, #8]
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	891b      	ldrh	r3, [r3, #8]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d209      	bcs.n	800d1ca <pbuf_copy+0x3e>
 800d1b6:	4b57      	ldr	r3, [pc, #348]	; (800d314 <pbuf_copy+0x188>)
 800d1b8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d1bc:	4956      	ldr	r1, [pc, #344]	; (800d318 <pbuf_copy+0x18c>)
 800d1be:	4857      	ldr	r0, [pc, #348]	; (800d31c <pbuf_copy+0x190>)
 800d1c0:	f00b feb8 	bl	8018f34 <iprintf>
 800d1c4:	f06f 030f 	mvn.w	r3, #15
 800d1c8:	e09f      	b.n	800d30a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	895b      	ldrh	r3, [r3, #10]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	1ad2      	subs	r2, r2, r3
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	895b      	ldrh	r3, [r3, #10]
 800d1d8:	4619      	mov	r1, r3
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	1acb      	subs	r3, r1, r3
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d306      	bcc.n	800d1f0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	895b      	ldrh	r3, [r3, #10]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	60fb      	str	r3, [r7, #12]
 800d1ee:	e005      	b.n	800d1fc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	895b      	ldrh	r3, [r3, #10]
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	1ad3      	subs	r3, r2, r3
 800d1fa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	685a      	ldr	r2, [r3, #4]
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	18d0      	adds	r0, r2, r3
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	685a      	ldr	r2, [r3, #4]
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	4413      	add	r3, r2
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	4619      	mov	r1, r3
 800d210:	f00b fdcb 	bl	8018daa <memcpy>
    offset_to += len;
 800d214:	697a      	ldr	r2, [r7, #20]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	4413      	add	r3, r2
 800d21a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d21c:	693a      	ldr	r2, [r7, #16]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	4413      	add	r3, r2
 800d222:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	895b      	ldrh	r3, [r3, #10]
 800d228:	461a      	mov	r2, r3
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d906      	bls.n	800d23e <pbuf_copy+0xb2>
 800d230:	4b38      	ldr	r3, [pc, #224]	; (800d314 <pbuf_copy+0x188>)
 800d232:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d236:	493a      	ldr	r1, [pc, #232]	; (800d320 <pbuf_copy+0x194>)
 800d238:	4838      	ldr	r0, [pc, #224]	; (800d31c <pbuf_copy+0x190>)
 800d23a:	f00b fe7b 	bl	8018f34 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	895b      	ldrh	r3, [r3, #10]
 800d242:	461a      	mov	r2, r3
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	4293      	cmp	r3, r2
 800d248:	d906      	bls.n	800d258 <pbuf_copy+0xcc>
 800d24a:	4b32      	ldr	r3, [pc, #200]	; (800d314 <pbuf_copy+0x188>)
 800d24c:	f240 32da 	movw	r2, #986	; 0x3da
 800d250:	4934      	ldr	r1, [pc, #208]	; (800d324 <pbuf_copy+0x198>)
 800d252:	4832      	ldr	r0, [pc, #200]	; (800d31c <pbuf_copy+0x190>)
 800d254:	f00b fe6e 	bl	8018f34 <iprintf>
    if (offset_from >= p_from->len) {
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	895b      	ldrh	r3, [r3, #10]
 800d25c:	461a      	mov	r2, r3
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	4293      	cmp	r3, r2
 800d262:	d304      	bcc.n	800d26e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d264:	2300      	movs	r3, #0
 800d266:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	895b      	ldrh	r3, [r3, #10]
 800d272:	461a      	mov	r2, r3
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	4293      	cmp	r3, r2
 800d278:	d114      	bne.n	800d2a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10c      	bne.n	800d2a4 <pbuf_copy+0x118>
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d009      	beq.n	800d2a4 <pbuf_copy+0x118>
 800d290:	4b20      	ldr	r3, [pc, #128]	; (800d314 <pbuf_copy+0x188>)
 800d292:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d296:	4924      	ldr	r1, [pc, #144]	; (800d328 <pbuf_copy+0x19c>)
 800d298:	4820      	ldr	r0, [pc, #128]	; (800d31c <pbuf_copy+0x190>)
 800d29a:	f00b fe4b 	bl	8018f34 <iprintf>
 800d29e:	f06f 030f 	mvn.w	r3, #15
 800d2a2:	e032      	b.n	800d30a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d013      	beq.n	800d2d2 <pbuf_copy+0x146>
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	895a      	ldrh	r2, [r3, #10]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	891b      	ldrh	r3, [r3, #8]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d10d      	bne.n	800d2d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d009      	beq.n	800d2d2 <pbuf_copy+0x146>
 800d2be:	4b15      	ldr	r3, [pc, #84]	; (800d314 <pbuf_copy+0x188>)
 800d2c0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d2c4:	4919      	ldr	r1, [pc, #100]	; (800d32c <pbuf_copy+0x1a0>)
 800d2c6:	4815      	ldr	r0, [pc, #84]	; (800d31c <pbuf_copy+0x190>)
 800d2c8:	f00b fe34 	bl	8018f34 <iprintf>
 800d2cc:	f06f 0305 	mvn.w	r3, #5
 800d2d0:	e01b      	b.n	800d30a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d013      	beq.n	800d300 <pbuf_copy+0x174>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	895a      	ldrh	r2, [r3, #10]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	891b      	ldrh	r3, [r3, #8]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d10d      	bne.n	800d300 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d009      	beq.n	800d300 <pbuf_copy+0x174>
 800d2ec:	4b09      	ldr	r3, [pc, #36]	; (800d314 <pbuf_copy+0x188>)
 800d2ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d2f2:	490e      	ldr	r1, [pc, #56]	; (800d32c <pbuf_copy+0x1a0>)
 800d2f4:	4809      	ldr	r0, [pc, #36]	; (800d31c <pbuf_copy+0x190>)
 800d2f6:	f00b fe1d 	bl	8018f34 <iprintf>
 800d2fa:	f06f 0305 	mvn.w	r3, #5
 800d2fe:	e004      	b.n	800d30a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	f47f af61 	bne.w	800d1ca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3718      	adds	r7, #24
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	0801b750 	.word	0x0801b750
 800d318:	0801b9f8 	.word	0x0801b9f8
 800d31c:	0801b7b0 	.word	0x0801b7b0
 800d320:	0801ba28 	.word	0x0801ba28
 800d324:	0801ba40 	.word	0x0801ba40
 800d328:	0801ba5c 	.word	0x0801ba5c
 800d32c:	0801ba6c 	.word	0x0801ba6c

0800d330 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	4611      	mov	r1, r2
 800d33c:	461a      	mov	r2, r3
 800d33e:	460b      	mov	r3, r1
 800d340:	80fb      	strh	r3, [r7, #6]
 800d342:	4613      	mov	r3, r2
 800d344:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d346:	2300      	movs	r3, #0
 800d348:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d108      	bne.n	800d366 <pbuf_copy_partial+0x36>
 800d354:	4b2b      	ldr	r3, [pc, #172]	; (800d404 <pbuf_copy_partial+0xd4>)
 800d356:	f240 420a 	movw	r2, #1034	; 0x40a
 800d35a:	492b      	ldr	r1, [pc, #172]	; (800d408 <pbuf_copy_partial+0xd8>)
 800d35c:	482b      	ldr	r0, [pc, #172]	; (800d40c <pbuf_copy_partial+0xdc>)
 800d35e:	f00b fde9 	bl	8018f34 <iprintf>
 800d362:	2300      	movs	r3, #0
 800d364:	e04a      	b.n	800d3fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d108      	bne.n	800d37e <pbuf_copy_partial+0x4e>
 800d36c:	4b25      	ldr	r3, [pc, #148]	; (800d404 <pbuf_copy_partial+0xd4>)
 800d36e:	f240 420b 	movw	r2, #1035	; 0x40b
 800d372:	4927      	ldr	r1, [pc, #156]	; (800d410 <pbuf_copy_partial+0xe0>)
 800d374:	4825      	ldr	r0, [pc, #148]	; (800d40c <pbuf_copy_partial+0xdc>)
 800d376:	f00b fddd 	bl	8018f34 <iprintf>
 800d37a:	2300      	movs	r3, #0
 800d37c:	e03e      	b.n	800d3fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	61fb      	str	r3, [r7, #28]
 800d382:	e034      	b.n	800d3ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d384:	88bb      	ldrh	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00a      	beq.n	800d3a0 <pbuf_copy_partial+0x70>
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	895b      	ldrh	r3, [r3, #10]
 800d38e:	88ba      	ldrh	r2, [r7, #4]
 800d390:	429a      	cmp	r2, r3
 800d392:	d305      	bcc.n	800d3a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	895b      	ldrh	r3, [r3, #10]
 800d398:	88ba      	ldrh	r2, [r7, #4]
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	80bb      	strh	r3, [r7, #4]
 800d39e:	e023      	b.n	800d3e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	895a      	ldrh	r2, [r3, #10]
 800d3a4:	88bb      	ldrh	r3, [r7, #4]
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d3aa:	8b3a      	ldrh	r2, [r7, #24]
 800d3ac:	88fb      	ldrh	r3, [r7, #6]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d901      	bls.n	800d3b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d3b2:	88fb      	ldrh	r3, [r7, #6]
 800d3b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d3b6:	8b7b      	ldrh	r3, [r7, #26]
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	18d0      	adds	r0, r2, r3
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	685a      	ldr	r2, [r3, #4]
 800d3c0:	88bb      	ldrh	r3, [r7, #4]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	8b3a      	ldrh	r2, [r7, #24]
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	f00b fcef 	bl	8018daa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d3cc:	8afa      	ldrh	r2, [r7, #22]
 800d3ce:	8b3b      	ldrh	r3, [r7, #24]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d3d4:	8b7a      	ldrh	r2, [r7, #26]
 800d3d6:	8b3b      	ldrh	r3, [r7, #24]
 800d3d8:	4413      	add	r3, r2
 800d3da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d3dc:	88fa      	ldrh	r2, [r7, #6]
 800d3de:	8b3b      	ldrh	r3, [r7, #24]
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	61fb      	str	r3, [r7, #28]
 800d3ee:	88fb      	ldrh	r3, [r7, #6]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d002      	beq.n	800d3fa <pbuf_copy_partial+0xca>
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d1c4      	bne.n	800d384 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d3fa:	8afb      	ldrh	r3, [r7, #22]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3720      	adds	r7, #32
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	0801b750 	.word	0x0801b750
 800d408:	0801ba98 	.word	0x0801ba98
 800d40c:	0801b7b0 	.word	0x0801b7b0
 800d410:	0801bab8 	.word	0x0801bab8

0800d414 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	4603      	mov	r3, r0
 800d41c:	603a      	str	r2, [r7, #0]
 800d41e:	71fb      	strb	r3, [r7, #7]
 800d420:	460b      	mov	r3, r1
 800d422:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	8919      	ldrh	r1, [r3, #8]
 800d428:	88ba      	ldrh	r2, [r7, #4]
 800d42a:	79fb      	ldrb	r3, [r7, #7]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7ff fa95 	bl	800c95c <pbuf_alloc>
 800d432:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d101      	bne.n	800d43e <pbuf_clone+0x2a>
    return NULL;
 800d43a:	2300      	movs	r3, #0
 800d43c:	e011      	b.n	800d462 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d43e:	6839      	ldr	r1, [r7, #0]
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f7ff fea3 	bl	800d18c <pbuf_copy>
 800d446:	4603      	mov	r3, r0
 800d448:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d44a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d006      	beq.n	800d460 <pbuf_clone+0x4c>
 800d452:	4b06      	ldr	r3, [pc, #24]	; (800d46c <pbuf_clone+0x58>)
 800d454:	f240 5224 	movw	r2, #1316	; 0x524
 800d458:	4905      	ldr	r1, [pc, #20]	; (800d470 <pbuf_clone+0x5c>)
 800d45a:	4806      	ldr	r0, [pc, #24]	; (800d474 <pbuf_clone+0x60>)
 800d45c:	f00b fd6a 	bl	8018f34 <iprintf>
  return q;
 800d460:	68fb      	ldr	r3, [r7, #12]
}
 800d462:	4618      	mov	r0, r3
 800d464:	3710      	adds	r7, #16
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	0801b750 	.word	0x0801b750
 800d470:	0801bbc4 	.word	0x0801bbc4
 800d474:	0801b7b0 	.word	0x0801b7b0

0800d478 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d47c:	f00b fda0 	bl	8018fc0 <rand>
 800d480:	4603      	mov	r3, r0
 800d482:	b29b      	uxth	r3, r3
 800d484:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d488:	b29b      	uxth	r3, r3
 800d48a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d48e:	b29a      	uxth	r2, r3
 800d490:	4b01      	ldr	r3, [pc, #4]	; (800d498 <tcp_init+0x20>)
 800d492:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d494:	bf00      	nop
 800d496:	bd80      	pop	{r7, pc}
 800d498:	20000024 	.word	0x20000024

0800d49c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	7d1b      	ldrb	r3, [r3, #20]
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d105      	bne.n	800d4b8 <tcp_free+0x1c>
 800d4ac:	4b06      	ldr	r3, [pc, #24]	; (800d4c8 <tcp_free+0x2c>)
 800d4ae:	22d4      	movs	r2, #212	; 0xd4
 800d4b0:	4906      	ldr	r1, [pc, #24]	; (800d4cc <tcp_free+0x30>)
 800d4b2:	4807      	ldr	r0, [pc, #28]	; (800d4d0 <tcp_free+0x34>)
 800d4b4:	f00b fd3e 	bl	8018f34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d4b8:	6879      	ldr	r1, [r7, #4]
 800d4ba:	2001      	movs	r0, #1
 800d4bc:	f7fe fe82 	bl	800c1c4 <memp_free>
}
 800d4c0:	bf00      	nop
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	0801bc50 	.word	0x0801bc50
 800d4cc:	0801bc80 	.word	0x0801bc80
 800d4d0:	0801bc94 	.word	0x0801bc94

0800d4d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	7d1b      	ldrb	r3, [r3, #20]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d105      	bne.n	800d4f0 <tcp_free_listen+0x1c>
 800d4e4:	4b06      	ldr	r3, [pc, #24]	; (800d500 <tcp_free_listen+0x2c>)
 800d4e6:	22df      	movs	r2, #223	; 0xdf
 800d4e8:	4906      	ldr	r1, [pc, #24]	; (800d504 <tcp_free_listen+0x30>)
 800d4ea:	4807      	ldr	r0, [pc, #28]	; (800d508 <tcp_free_listen+0x34>)
 800d4ec:	f00b fd22 	bl	8018f34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d4f0:	6879      	ldr	r1, [r7, #4]
 800d4f2:	2002      	movs	r0, #2
 800d4f4:	f7fe fe66 	bl	800c1c4 <memp_free>
}
 800d4f8:	bf00      	nop
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	0801bc50 	.word	0x0801bc50
 800d504:	0801bcbc 	.word	0x0801bcbc
 800d508:	0801bc94 	.word	0x0801bc94

0800d50c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d510:	f001 f9d0 	bl	800e8b4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d514:	4b07      	ldr	r3, [pc, #28]	; (800d534 <tcp_tmr+0x28>)
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	3301      	adds	r3, #1
 800d51a:	b2da      	uxtb	r2, r3
 800d51c:	4b05      	ldr	r3, [pc, #20]	; (800d534 <tcp_tmr+0x28>)
 800d51e:	701a      	strb	r2, [r3, #0]
 800d520:	4b04      	ldr	r3, [pc, #16]	; (800d534 <tcp_tmr+0x28>)
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	f003 0301 	and.w	r3, r3, #1
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d001      	beq.n	800d530 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d52c:	f000 fe82 	bl	800e234 <tcp_slowtmr>
  }
}
 800d530:	bf00      	nop
 800d532:	bd80      	pop	{r7, pc}
 800d534:	200115a1 	.word	0x200115a1

0800d538 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d105      	bne.n	800d554 <tcp_remove_listener+0x1c>
 800d548:	4b0d      	ldr	r3, [pc, #52]	; (800d580 <tcp_remove_listener+0x48>)
 800d54a:	22ff      	movs	r2, #255	; 0xff
 800d54c:	490d      	ldr	r1, [pc, #52]	; (800d584 <tcp_remove_listener+0x4c>)
 800d54e:	480e      	ldr	r0, [pc, #56]	; (800d588 <tcp_remove_listener+0x50>)
 800d550:	f00b fcf0 	bl	8018f34 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	60fb      	str	r3, [r7, #12]
 800d558:	e00a      	b.n	800d570 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d55e:	683a      	ldr	r2, [r7, #0]
 800d560:	429a      	cmp	r2, r3
 800d562:	d102      	bne.n	800d56a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2200      	movs	r2, #0
 800d568:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	60fb      	str	r3, [r7, #12]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1f1      	bne.n	800d55a <tcp_remove_listener+0x22>
    }
  }
}
 800d576:	bf00      	nop
 800d578:	bf00      	nop
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	0801bc50 	.word	0x0801bc50
 800d584:	0801bcd8 	.word	0x0801bcd8
 800d588:	0801bc94 	.word	0x0801bc94

0800d58c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d106      	bne.n	800d5a8 <tcp_listen_closed+0x1c>
 800d59a:	4b14      	ldr	r3, [pc, #80]	; (800d5ec <tcp_listen_closed+0x60>)
 800d59c:	f240 1211 	movw	r2, #273	; 0x111
 800d5a0:	4913      	ldr	r1, [pc, #76]	; (800d5f0 <tcp_listen_closed+0x64>)
 800d5a2:	4814      	ldr	r0, [pc, #80]	; (800d5f4 <tcp_listen_closed+0x68>)
 800d5a4:	f00b fcc6 	bl	8018f34 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	7d1b      	ldrb	r3, [r3, #20]
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d006      	beq.n	800d5be <tcp_listen_closed+0x32>
 800d5b0:	4b0e      	ldr	r3, [pc, #56]	; (800d5ec <tcp_listen_closed+0x60>)
 800d5b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d5b6:	4910      	ldr	r1, [pc, #64]	; (800d5f8 <tcp_listen_closed+0x6c>)
 800d5b8:	480e      	ldr	r0, [pc, #56]	; (800d5f4 <tcp_listen_closed+0x68>)
 800d5ba:	f00b fcbb 	bl	8018f34 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d5be:	2301      	movs	r3, #1
 800d5c0:	60fb      	str	r3, [r7, #12]
 800d5c2:	e00b      	b.n	800d5dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d5c4:	4a0d      	ldr	r2, [pc, #52]	; (800d5fc <tcp_listen_closed+0x70>)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	6879      	ldr	r1, [r7, #4]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7ff ffb1 	bl	800d538 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	3301      	adds	r3, #1
 800d5da:	60fb      	str	r3, [r7, #12]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2b03      	cmp	r3, #3
 800d5e0:	d9f0      	bls.n	800d5c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d5e2:	bf00      	nop
 800d5e4:	bf00      	nop
 800d5e6:	3710      	adds	r7, #16
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	0801bc50 	.word	0x0801bc50
 800d5f0:	0801bd00 	.word	0x0801bd00
 800d5f4:	0801bc94 	.word	0x0801bc94
 800d5f8:	0801bd0c 	.word	0x0801bd0c
 800d5fc:	0802814c 	.word	0x0802814c

0800d600 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d600:	b5b0      	push	{r4, r5, r7, lr}
 800d602:	b088      	sub	sp, #32
 800d604:	af04      	add	r7, sp, #16
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	460b      	mov	r3, r1
 800d60a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d106      	bne.n	800d620 <tcp_close_shutdown+0x20>
 800d612:	4b63      	ldr	r3, [pc, #396]	; (800d7a0 <tcp_close_shutdown+0x1a0>)
 800d614:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d618:	4962      	ldr	r1, [pc, #392]	; (800d7a4 <tcp_close_shutdown+0x1a4>)
 800d61a:	4863      	ldr	r0, [pc, #396]	; (800d7a8 <tcp_close_shutdown+0x1a8>)
 800d61c:	f00b fc8a 	bl	8018f34 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d620:	78fb      	ldrb	r3, [r7, #3]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d066      	beq.n	800d6f4 <tcp_close_shutdown+0xf4>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	7d1b      	ldrb	r3, [r3, #20]
 800d62a:	2b04      	cmp	r3, #4
 800d62c:	d003      	beq.n	800d636 <tcp_close_shutdown+0x36>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	7d1b      	ldrb	r3, [r3, #20]
 800d632:	2b07      	cmp	r3, #7
 800d634:	d15e      	bne.n	800d6f4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d104      	bne.n	800d648 <tcp_close_shutdown+0x48>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d642:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d646:	d055      	beq.n	800d6f4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	8b5b      	ldrh	r3, [r3, #26]
 800d64c:	f003 0310 	and.w	r3, r3, #16
 800d650:	2b00      	cmp	r3, #0
 800d652:	d106      	bne.n	800d662 <tcp_close_shutdown+0x62>
 800d654:	4b52      	ldr	r3, [pc, #328]	; (800d7a0 <tcp_close_shutdown+0x1a0>)
 800d656:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d65a:	4954      	ldr	r1, [pc, #336]	; (800d7ac <tcp_close_shutdown+0x1ac>)
 800d65c:	4852      	ldr	r0, [pc, #328]	; (800d7a8 <tcp_close_shutdown+0x1a8>)
 800d65e:	f00b fc69 	bl	8018f34 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d66a:	687d      	ldr	r5, [r7, #4]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	3304      	adds	r3, #4
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	8ad2      	ldrh	r2, [r2, #22]
 800d674:	6879      	ldr	r1, [r7, #4]
 800d676:	8b09      	ldrh	r1, [r1, #24]
 800d678:	9102      	str	r1, [sp, #8]
 800d67a:	9201      	str	r2, [sp, #4]
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	462b      	mov	r3, r5
 800d680:	4622      	mov	r2, r4
 800d682:	4601      	mov	r1, r0
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f005 ff03 	bl	8013490 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f001 fce0 	bl	800f050 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d690:	4b47      	ldr	r3, [pc, #284]	; (800d7b0 <tcp_close_shutdown+0x1b0>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	429a      	cmp	r2, r3
 800d698:	d105      	bne.n	800d6a6 <tcp_close_shutdown+0xa6>
 800d69a:	4b45      	ldr	r3, [pc, #276]	; (800d7b0 <tcp_close_shutdown+0x1b0>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	68db      	ldr	r3, [r3, #12]
 800d6a0:	4a43      	ldr	r2, [pc, #268]	; (800d7b0 <tcp_close_shutdown+0x1b0>)
 800d6a2:	6013      	str	r3, [r2, #0]
 800d6a4:	e013      	b.n	800d6ce <tcp_close_shutdown+0xce>
 800d6a6:	4b42      	ldr	r3, [pc, #264]	; (800d7b0 <tcp_close_shutdown+0x1b0>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	60fb      	str	r3, [r7, #12]
 800d6ac:	e00c      	b.n	800d6c8 <tcp_close_shutdown+0xc8>
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d104      	bne.n	800d6c2 <tcp_close_shutdown+0xc2>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	68da      	ldr	r2, [r3, #12]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	60da      	str	r2, [r3, #12]
 800d6c0:	e005      	b.n	800d6ce <tcp_close_shutdown+0xce>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	60fb      	str	r3, [r7, #12]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1ef      	bne.n	800d6ae <tcp_close_shutdown+0xae>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	60da      	str	r2, [r3, #12]
 800d6d4:	4b37      	ldr	r3, [pc, #220]	; (800d7b4 <tcp_close_shutdown+0x1b4>)
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d6da:	4b37      	ldr	r3, [pc, #220]	; (800d7b8 <tcp_close_shutdown+0x1b8>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d102      	bne.n	800d6ea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d6e4:	f004 f978 	bl	80119d8 <tcp_trigger_input_pcb_close>
 800d6e8:	e002      	b.n	800d6f0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f7ff fed6 	bl	800d49c <tcp_free>
      }
      return ERR_OK;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	e050      	b.n	800d796 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	7d1b      	ldrb	r3, [r3, #20]
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	d03b      	beq.n	800d774 <tcp_close_shutdown+0x174>
 800d6fc:	2b02      	cmp	r3, #2
 800d6fe:	dc44      	bgt.n	800d78a <tcp_close_shutdown+0x18a>
 800d700:	2b00      	cmp	r3, #0
 800d702:	d002      	beq.n	800d70a <tcp_close_shutdown+0x10a>
 800d704:	2b01      	cmp	r3, #1
 800d706:	d02a      	beq.n	800d75e <tcp_close_shutdown+0x15e>
 800d708:	e03f      	b.n	800d78a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	8adb      	ldrh	r3, [r3, #22]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d021      	beq.n	800d756 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d712:	4b2a      	ldr	r3, [pc, #168]	; (800d7bc <tcp_close_shutdown+0x1bc>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d105      	bne.n	800d728 <tcp_close_shutdown+0x128>
 800d71c:	4b27      	ldr	r3, [pc, #156]	; (800d7bc <tcp_close_shutdown+0x1bc>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	4a26      	ldr	r2, [pc, #152]	; (800d7bc <tcp_close_shutdown+0x1bc>)
 800d724:	6013      	str	r3, [r2, #0]
 800d726:	e013      	b.n	800d750 <tcp_close_shutdown+0x150>
 800d728:	4b24      	ldr	r3, [pc, #144]	; (800d7bc <tcp_close_shutdown+0x1bc>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	60bb      	str	r3, [r7, #8]
 800d72e:	e00c      	b.n	800d74a <tcp_close_shutdown+0x14a>
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	429a      	cmp	r2, r3
 800d738:	d104      	bne.n	800d744 <tcp_close_shutdown+0x144>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	68da      	ldr	r2, [r3, #12]
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	60da      	str	r2, [r3, #12]
 800d742:	e005      	b.n	800d750 <tcp_close_shutdown+0x150>
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	60bb      	str	r3, [r7, #8]
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d1ef      	bne.n	800d730 <tcp_close_shutdown+0x130>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2200      	movs	r2, #0
 800d754:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f7ff fea0 	bl	800d49c <tcp_free>
      break;
 800d75c:	e01a      	b.n	800d794 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7ff ff14 	bl	800d58c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d764:	6879      	ldr	r1, [r7, #4]
 800d766:	4816      	ldr	r0, [pc, #88]	; (800d7c0 <tcp_close_shutdown+0x1c0>)
 800d768:	f001 fcc2 	bl	800f0f0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f7ff feb1 	bl	800d4d4 <tcp_free_listen>
      break;
 800d772:	e00f      	b.n	800d794 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d774:	6879      	ldr	r1, [r7, #4]
 800d776:	480e      	ldr	r0, [pc, #56]	; (800d7b0 <tcp_close_shutdown+0x1b0>)
 800d778:	f001 fcba 	bl	800f0f0 <tcp_pcb_remove>
 800d77c:	4b0d      	ldr	r3, [pc, #52]	; (800d7b4 <tcp_close_shutdown+0x1b4>)
 800d77e:	2201      	movs	r2, #1
 800d780:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7ff fe8a 	bl	800d49c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d788:	e004      	b.n	800d794 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f81a 	bl	800d7c4 <tcp_close_shutdown_fin>
 800d790:	4603      	mov	r3, r0
 800d792:	e000      	b.n	800d796 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bdb0      	pop	{r4, r5, r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	0801bc50 	.word	0x0801bc50
 800d7a4:	0801bd24 	.word	0x0801bd24
 800d7a8:	0801bc94 	.word	0x0801bc94
 800d7ac:	0801bd44 	.word	0x0801bd44
 800d7b0:	20011598 	.word	0x20011598
 800d7b4:	200115a0 	.word	0x200115a0
 800d7b8:	200115d8 	.word	0x200115d8
 800d7bc:	20011590 	.word	0x20011590
 800d7c0:	20011594 	.word	0x20011594

0800d7c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d106      	bne.n	800d7e0 <tcp_close_shutdown_fin+0x1c>
 800d7d2:	4b2e      	ldr	r3, [pc, #184]	; (800d88c <tcp_close_shutdown_fin+0xc8>)
 800d7d4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d7d8:	492d      	ldr	r1, [pc, #180]	; (800d890 <tcp_close_shutdown_fin+0xcc>)
 800d7da:	482e      	ldr	r0, [pc, #184]	; (800d894 <tcp_close_shutdown_fin+0xd0>)
 800d7dc:	f00b fbaa 	bl	8018f34 <iprintf>

  switch (pcb->state) {
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	7d1b      	ldrb	r3, [r3, #20]
 800d7e4:	2b07      	cmp	r3, #7
 800d7e6:	d020      	beq.n	800d82a <tcp_close_shutdown_fin+0x66>
 800d7e8:	2b07      	cmp	r3, #7
 800d7ea:	dc2b      	bgt.n	800d844 <tcp_close_shutdown_fin+0x80>
 800d7ec:	2b03      	cmp	r3, #3
 800d7ee:	d002      	beq.n	800d7f6 <tcp_close_shutdown_fin+0x32>
 800d7f0:	2b04      	cmp	r3, #4
 800d7f2:	d00d      	beq.n	800d810 <tcp_close_shutdown_fin+0x4c>
 800d7f4:	e026      	b.n	800d844 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f004 ff58 	bl	80126ac <tcp_send_fin>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d11f      	bne.n	800d848 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2205      	movs	r2, #5
 800d80c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d80e:	e01b      	b.n	800d848 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f004 ff4b 	bl	80126ac <tcp_send_fin>
 800d816:	4603      	mov	r3, r0
 800d818:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d81a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d114      	bne.n	800d84c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2205      	movs	r2, #5
 800d826:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d828:	e010      	b.n	800d84c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f004 ff3e 	bl	80126ac <tcp_send_fin>
 800d830:	4603      	mov	r3, r0
 800d832:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d109      	bne.n	800d850 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2209      	movs	r2, #9
 800d840:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d842:	e005      	b.n	800d850 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d844:	2300      	movs	r3, #0
 800d846:	e01c      	b.n	800d882 <tcp_close_shutdown_fin+0xbe>
      break;
 800d848:	bf00      	nop
 800d84a:	e002      	b.n	800d852 <tcp_close_shutdown_fin+0x8e>
      break;
 800d84c:	bf00      	nop
 800d84e:	e000      	b.n	800d852 <tcp_close_shutdown_fin+0x8e>
      break;
 800d850:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d103      	bne.n	800d862 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f005 f864 	bl	8012928 <tcp_output>
 800d860:	e00d      	b.n	800d87e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d86a:	d108      	bne.n	800d87e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	8b5b      	ldrh	r3, [r3, #26]
 800d870:	f043 0308 	orr.w	r3, r3, #8
 800d874:	b29a      	uxth	r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d87a:	2300      	movs	r3, #0
 800d87c:	e001      	b.n	800d882 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d87e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	0801bc50 	.word	0x0801bc50
 800d890:	0801bd00 	.word	0x0801bd00
 800d894:	0801bc94 	.word	0x0801bc94

0800d898 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d109      	bne.n	800d8ba <tcp_close+0x22>
 800d8a6:	4b0f      	ldr	r3, [pc, #60]	; (800d8e4 <tcp_close+0x4c>)
 800d8a8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d8ac:	490e      	ldr	r1, [pc, #56]	; (800d8e8 <tcp_close+0x50>)
 800d8ae:	480f      	ldr	r0, [pc, #60]	; (800d8ec <tcp_close+0x54>)
 800d8b0:	f00b fb40 	bl	8018f34 <iprintf>
 800d8b4:	f06f 030f 	mvn.w	r3, #15
 800d8b8:	e00f      	b.n	800d8da <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	7d1b      	ldrb	r3, [r3, #20]
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d006      	beq.n	800d8d0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	8b5b      	ldrh	r3, [r3, #26]
 800d8c6:	f043 0310 	orr.w	r3, r3, #16
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d8d0:	2101      	movs	r1, #1
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f7ff fe94 	bl	800d600 <tcp_close_shutdown>
 800d8d8:	4603      	mov	r3, r0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	0801bc50 	.word	0x0801bc50
 800d8e8:	0801bd60 	.word	0x0801bd60
 800d8ec:	0801bc94 	.word	0x0801bc94

0800d8f0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d109      	bne.n	800d916 <tcp_shutdown+0x26>
 800d902:	4b26      	ldr	r3, [pc, #152]	; (800d99c <tcp_shutdown+0xac>)
 800d904:	f240 2207 	movw	r2, #519	; 0x207
 800d908:	4925      	ldr	r1, [pc, #148]	; (800d9a0 <tcp_shutdown+0xb0>)
 800d90a:	4826      	ldr	r0, [pc, #152]	; (800d9a4 <tcp_shutdown+0xb4>)
 800d90c:	f00b fb12 	bl	8018f34 <iprintf>
 800d910:	f06f 030f 	mvn.w	r3, #15
 800d914:	e03d      	b.n	800d992 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	7d1b      	ldrb	r3, [r3, #20]
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d102      	bne.n	800d924 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d91e:	f06f 030a 	mvn.w	r3, #10
 800d922:	e036      	b.n	800d992 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d01b      	beq.n	800d962 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	8b5b      	ldrh	r3, [r3, #26]
 800d92e:	f043 0310 	orr.w	r3, r3, #16
 800d932:	b29a      	uxth	r2, r3
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d005      	beq.n	800d94a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d93e:	2101      	movs	r1, #1
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f7ff fe5d 	bl	800d600 <tcp_close_shutdown>
 800d946:	4603      	mov	r3, r0
 800d948:	e023      	b.n	800d992 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d007      	beq.n	800d962 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d956:	4618      	mov	r0, r3
 800d958:	f7ff fae4 	bl	800cf24 <pbuf_free>
      pcb->refused_data = NULL;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2200      	movs	r2, #0
 800d960:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d013      	beq.n	800d990 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	7d1b      	ldrb	r3, [r3, #20]
 800d96c:	2b04      	cmp	r3, #4
 800d96e:	dc02      	bgt.n	800d976 <tcp_shutdown+0x86>
 800d970:	2b03      	cmp	r3, #3
 800d972:	da02      	bge.n	800d97a <tcp_shutdown+0x8a>
 800d974:	e009      	b.n	800d98a <tcp_shutdown+0x9a>
 800d976:	2b07      	cmp	r3, #7
 800d978:	d107      	bne.n	800d98a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	4619      	mov	r1, r3
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f7ff fe3d 	bl	800d600 <tcp_close_shutdown>
 800d986:	4603      	mov	r3, r0
 800d988:	e003      	b.n	800d992 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d98a:	f06f 030a 	mvn.w	r3, #10
 800d98e:	e000      	b.n	800d992 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	3710      	adds	r7, #16
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	0801bc50 	.word	0x0801bc50
 800d9a0:	0801bd78 	.word	0x0801bd78
 800d9a4:	0801bc94 	.word	0x0801bc94

0800d9a8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08e      	sub	sp, #56	; 0x38
 800d9ac:	af04      	add	r7, sp, #16
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d107      	bne.n	800d9c8 <tcp_abandon+0x20>
 800d9b8:	4b52      	ldr	r3, [pc, #328]	; (800db04 <tcp_abandon+0x15c>)
 800d9ba:	f240 223d 	movw	r2, #573	; 0x23d
 800d9be:	4952      	ldr	r1, [pc, #328]	; (800db08 <tcp_abandon+0x160>)
 800d9c0:	4852      	ldr	r0, [pc, #328]	; (800db0c <tcp_abandon+0x164>)
 800d9c2:	f00b fab7 	bl	8018f34 <iprintf>
 800d9c6:	e099      	b.n	800dafc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	7d1b      	ldrb	r3, [r3, #20]
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d106      	bne.n	800d9de <tcp_abandon+0x36>
 800d9d0:	4b4c      	ldr	r3, [pc, #304]	; (800db04 <tcp_abandon+0x15c>)
 800d9d2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d9d6:	494e      	ldr	r1, [pc, #312]	; (800db10 <tcp_abandon+0x168>)
 800d9d8:	484c      	ldr	r0, [pc, #304]	; (800db0c <tcp_abandon+0x164>)
 800d9da:	f00b faab 	bl	8018f34 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	7d1b      	ldrb	r3, [r3, #20]
 800d9e2:	2b0a      	cmp	r3, #10
 800d9e4:	d107      	bne.n	800d9f6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d9e6:	6879      	ldr	r1, [r7, #4]
 800d9e8:	484a      	ldr	r0, [pc, #296]	; (800db14 <tcp_abandon+0x16c>)
 800d9ea:	f001 fb81 	bl	800f0f0 <tcp_pcb_remove>
    tcp_free(pcb);
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7ff fd54 	bl	800d49c <tcp_free>
 800d9f4:	e082      	b.n	800dafc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da02:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da08:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da10:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	691b      	ldr	r3, [r3, #16]
 800da16:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	7d1b      	ldrb	r3, [r3, #20]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d126      	bne.n	800da6e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	8adb      	ldrh	r3, [r3, #22]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d02e      	beq.n	800da86 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800da28:	4b3b      	ldr	r3, [pc, #236]	; (800db18 <tcp_abandon+0x170>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d105      	bne.n	800da3e <tcp_abandon+0x96>
 800da32:	4b39      	ldr	r3, [pc, #228]	; (800db18 <tcp_abandon+0x170>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	4a37      	ldr	r2, [pc, #220]	; (800db18 <tcp_abandon+0x170>)
 800da3a:	6013      	str	r3, [r2, #0]
 800da3c:	e013      	b.n	800da66 <tcp_abandon+0xbe>
 800da3e:	4b36      	ldr	r3, [pc, #216]	; (800db18 <tcp_abandon+0x170>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	61fb      	str	r3, [r7, #28]
 800da44:	e00c      	b.n	800da60 <tcp_abandon+0xb8>
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	68db      	ldr	r3, [r3, #12]
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d104      	bne.n	800da5a <tcp_abandon+0xb2>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	68da      	ldr	r2, [r3, #12]
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	60da      	str	r2, [r3, #12]
 800da58:	e005      	b.n	800da66 <tcp_abandon+0xbe>
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	61fb      	str	r3, [r7, #28]
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d1ef      	bne.n	800da46 <tcp_abandon+0x9e>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	60da      	str	r2, [r3, #12]
 800da6c:	e00b      	b.n	800da86 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	8adb      	ldrh	r3, [r3, #22]
 800da76:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800da78:	6879      	ldr	r1, [r7, #4]
 800da7a:	4828      	ldr	r0, [pc, #160]	; (800db1c <tcp_abandon+0x174>)
 800da7c:	f001 fb38 	bl	800f0f0 <tcp_pcb_remove>
 800da80:	4b27      	ldr	r3, [pc, #156]	; (800db20 <tcp_abandon+0x178>)
 800da82:	2201      	movs	r2, #1
 800da84:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d004      	beq.n	800da98 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da92:	4618      	mov	r0, r3
 800da94:	f000 ffee 	bl	800ea74 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d004      	beq.n	800daaa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daa4:	4618      	mov	r0, r3
 800daa6:	f000 ffe5 	bl	800ea74 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d004      	beq.n	800dabc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dab6:	4618      	mov	r0, r3
 800dab8:	f000 ffdc 	bl	800ea74 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00e      	beq.n	800dae0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dac2:	6879      	ldr	r1, [r7, #4]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	3304      	adds	r3, #4
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	8b12      	ldrh	r2, [r2, #24]
 800dacc:	9202      	str	r2, [sp, #8]
 800dace:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dad0:	9201      	str	r2, [sp, #4]
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	460b      	mov	r3, r1
 800dad6:	697a      	ldr	r2, [r7, #20]
 800dad8:	69b9      	ldr	r1, [r7, #24]
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f005 fcd8 	bl	8013490 <tcp_rst>
    }
    last_state = pcb->state;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	7d1b      	ldrb	r3, [r3, #20]
 800dae4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f7ff fcd8 	bl	800d49c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d004      	beq.n	800dafc <tcp_abandon+0x154>
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	f06f 010c 	mvn.w	r1, #12
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	4798      	blx	r3
  }
}
 800dafc:	3728      	adds	r7, #40	; 0x28
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	0801bc50 	.word	0x0801bc50
 800db08:	0801bd94 	.word	0x0801bd94
 800db0c:	0801bc94 	.word	0x0801bc94
 800db10:	0801bdb0 	.word	0x0801bdb0
 800db14:	2001159c 	.word	0x2001159c
 800db18:	20011590 	.word	0x20011590
 800db1c:	20011598 	.word	0x20011598
 800db20:	200115a0 	.word	0x200115a0

0800db24 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800db2c:	2101      	movs	r1, #1
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f7ff ff3a 	bl	800d9a8 <tcp_abandon>
}
 800db34:	bf00      	nop
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b088      	sub	sp, #32
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	4613      	mov	r3, r2
 800db48:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800db4a:	2304      	movs	r3, #4
 800db4c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d101      	bne.n	800db58 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800db54:	4b3e      	ldr	r3, [pc, #248]	; (800dc50 <tcp_bind+0x114>)
 800db56:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d109      	bne.n	800db72 <tcp_bind+0x36>
 800db5e:	4b3d      	ldr	r3, [pc, #244]	; (800dc54 <tcp_bind+0x118>)
 800db60:	f240 22a9 	movw	r2, #681	; 0x2a9
 800db64:	493c      	ldr	r1, [pc, #240]	; (800dc58 <tcp_bind+0x11c>)
 800db66:	483d      	ldr	r0, [pc, #244]	; (800dc5c <tcp_bind+0x120>)
 800db68:	f00b f9e4 	bl	8018f34 <iprintf>
 800db6c:	f06f 030f 	mvn.w	r3, #15
 800db70:	e06a      	b.n	800dc48 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	7d1b      	ldrb	r3, [r3, #20]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d009      	beq.n	800db8e <tcp_bind+0x52>
 800db7a:	4b36      	ldr	r3, [pc, #216]	; (800dc54 <tcp_bind+0x118>)
 800db7c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800db80:	4937      	ldr	r1, [pc, #220]	; (800dc60 <tcp_bind+0x124>)
 800db82:	4836      	ldr	r0, [pc, #216]	; (800dc5c <tcp_bind+0x120>)
 800db84:	f00b f9d6 	bl	8018f34 <iprintf>
 800db88:	f06f 0305 	mvn.w	r3, #5
 800db8c:	e05c      	b.n	800dc48 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800db8e:	88fb      	ldrh	r3, [r7, #6]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d109      	bne.n	800dba8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800db94:	f000 f9f0 	bl	800df78 <tcp_new_port>
 800db98:	4603      	mov	r3, r0
 800db9a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800db9c:	88fb      	ldrh	r3, [r7, #6]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d135      	bne.n	800dc0e <tcp_bind+0xd2>
      return ERR_BUF;
 800dba2:	f06f 0301 	mvn.w	r3, #1
 800dba6:	e04f      	b.n	800dc48 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dba8:	2300      	movs	r3, #0
 800dbaa:	61fb      	str	r3, [r7, #28]
 800dbac:	e02b      	b.n	800dc06 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dbae:	4a2d      	ldr	r2, [pc, #180]	; (800dc64 <tcp_bind+0x128>)
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	61bb      	str	r3, [r7, #24]
 800dbba:	e01e      	b.n	800dbfa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	8adb      	ldrh	r3, [r3, #22]
 800dbc0:	88fa      	ldrh	r2, [r7, #6]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d116      	bne.n	800dbf4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800dbc6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d010      	beq.n	800dbee <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d00c      	beq.n	800dbee <tcp_bind+0xb2>
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d009      	beq.n	800dbee <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d005      	beq.n	800dbee <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d102      	bne.n	800dbf4 <tcp_bind+0xb8>
              return ERR_USE;
 800dbee:	f06f 0307 	mvn.w	r3, #7
 800dbf2:	e029      	b.n	800dc48 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	61bb      	str	r3, [r7, #24]
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d1dd      	bne.n	800dbbc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	3301      	adds	r3, #1
 800dc04:	61fb      	str	r3, [r7, #28]
 800dc06:	69fa      	ldr	r2, [r7, #28]
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	dbcf      	blt.n	800dbae <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00c      	beq.n	800dc2e <tcp_bind+0xf2>
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d008      	beq.n	800dc2e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d002      	beq.n	800dc28 <tcp_bind+0xec>
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	e000      	b.n	800dc2a <tcp_bind+0xee>
 800dc28:	2300      	movs	r3, #0
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	88fa      	ldrh	r2, [r7, #6]
 800dc32:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dc34:	4b0c      	ldr	r3, [pc, #48]	; (800dc68 <tcp_bind+0x12c>)
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	60da      	str	r2, [r3, #12]
 800dc3c:	4a0a      	ldr	r2, [pc, #40]	; (800dc68 <tcp_bind+0x12c>)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6013      	str	r3, [r2, #0]
 800dc42:	f005 fde7 	bl	8013814 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800dc46:	2300      	movs	r3, #0
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3720      	adds	r7, #32
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	08028184 	.word	0x08028184
 800dc54:	0801bc50 	.word	0x0801bc50
 800dc58:	0801bde4 	.word	0x0801bde4
 800dc5c:	0801bc94 	.word	0x0801bc94
 800dc60:	0801bdfc 	.word	0x0801bdfc
 800dc64:	0802814c 	.word	0x0802814c
 800dc68:	20011590 	.word	0x20011590

0800dc6c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	4613      	mov	r3, r2
 800dc78:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d106      	bne.n	800dc8e <tcp_accept_null+0x22>
 800dc80:	4b07      	ldr	r3, [pc, #28]	; (800dca0 <tcp_accept_null+0x34>)
 800dc82:	f240 320f 	movw	r2, #783	; 0x30f
 800dc86:	4907      	ldr	r1, [pc, #28]	; (800dca4 <tcp_accept_null+0x38>)
 800dc88:	4807      	ldr	r0, [pc, #28]	; (800dca8 <tcp_accept_null+0x3c>)
 800dc8a:	f00b f953 	bl	8018f34 <iprintf>

  tcp_abort(pcb);
 800dc8e:	68b8      	ldr	r0, [r7, #8]
 800dc90:	f7ff ff48 	bl	800db24 <tcp_abort>

  return ERR_ABRT;
 800dc94:	f06f 030c 	mvn.w	r3, #12
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3710      	adds	r7, #16
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	0801bc50 	.word	0x0801bc50
 800dca4:	0801be24 	.word	0x0801be24
 800dca8:	0801bc94 	.word	0x0801bc94

0800dcac <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800dcb8:	78fb      	ldrb	r3, [r7, #3]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f806 	bl	800dcd0 <tcp_listen_with_backlog_and_err>
 800dcc4:	4603      	mov	r3, r0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3708      	adds	r7, #8
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
	...

0800dcd0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b088      	sub	sp, #32
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	460b      	mov	r3, r1
 800dcda:	607a      	str	r2, [r7, #4]
 800dcdc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800dcde:	2300      	movs	r3, #0
 800dce0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d109      	bne.n	800dcfc <tcp_listen_with_backlog_and_err+0x2c>
 800dce8:	4b47      	ldr	r3, [pc, #284]	; (800de08 <tcp_listen_with_backlog_and_err+0x138>)
 800dcea:	f240 3259 	movw	r2, #857	; 0x359
 800dcee:	4947      	ldr	r1, [pc, #284]	; (800de0c <tcp_listen_with_backlog_and_err+0x13c>)
 800dcf0:	4847      	ldr	r0, [pc, #284]	; (800de10 <tcp_listen_with_backlog_and_err+0x140>)
 800dcf2:	f00b f91f 	bl	8018f34 <iprintf>
 800dcf6:	23f0      	movs	r3, #240	; 0xf0
 800dcf8:	76fb      	strb	r3, [r7, #27]
 800dcfa:	e079      	b.n	800ddf0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	7d1b      	ldrb	r3, [r3, #20]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d009      	beq.n	800dd18 <tcp_listen_with_backlog_and_err+0x48>
 800dd04:	4b40      	ldr	r3, [pc, #256]	; (800de08 <tcp_listen_with_backlog_and_err+0x138>)
 800dd06:	f240 325a 	movw	r2, #858	; 0x35a
 800dd0a:	4942      	ldr	r1, [pc, #264]	; (800de14 <tcp_listen_with_backlog_and_err+0x144>)
 800dd0c:	4840      	ldr	r0, [pc, #256]	; (800de10 <tcp_listen_with_backlog_and_err+0x140>)
 800dd0e:	f00b f911 	bl	8018f34 <iprintf>
 800dd12:	23f1      	movs	r3, #241	; 0xf1
 800dd14:	76fb      	strb	r3, [r7, #27]
 800dd16:	e06b      	b.n	800ddf0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	7d1b      	ldrb	r3, [r3, #20]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d104      	bne.n	800dd2a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800dd24:	23f7      	movs	r3, #247	; 0xf7
 800dd26:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dd28:	e062      	b.n	800ddf0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800dd2a:	2002      	movs	r0, #2
 800dd2c:	f7fe f9d4 	bl	800c0d8 <memp_malloc>
 800dd30:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800dd32:	69fb      	ldr	r3, [r7, #28]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d102      	bne.n	800dd3e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800dd38:	23ff      	movs	r3, #255	; 0xff
 800dd3a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dd3c:	e058      	b.n	800ddf0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	691a      	ldr	r2, [r3, #16]
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	8ada      	ldrh	r2, [r3, #22]
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	2201      	movs	r2, #1
 800dd52:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	7d5a      	ldrb	r2, [r3, #21]
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	7a5a      	ldrb	r2, [r3, #9]
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	2200      	movs	r2, #0
 800dd68:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	7ada      	ldrb	r2, [r3, #11]
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	7a9a      	ldrb	r2, [r3, #10]
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	8adb      	ldrh	r3, [r3, #22]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d021      	beq.n	800ddce <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd8a:	4b23      	ldr	r3, [pc, #140]	; (800de18 <tcp_listen_with_backlog_and_err+0x148>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68fa      	ldr	r2, [r7, #12]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d105      	bne.n	800dda0 <tcp_listen_with_backlog_and_err+0xd0>
 800dd94:	4b20      	ldr	r3, [pc, #128]	; (800de18 <tcp_listen_with_backlog_and_err+0x148>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	4a1f      	ldr	r2, [pc, #124]	; (800de18 <tcp_listen_with_backlog_and_err+0x148>)
 800dd9c:	6013      	str	r3, [r2, #0]
 800dd9e:	e013      	b.n	800ddc8 <tcp_listen_with_backlog_and_err+0xf8>
 800dda0:	4b1d      	ldr	r3, [pc, #116]	; (800de18 <tcp_listen_with_backlog_and_err+0x148>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	617b      	str	r3, [r7, #20]
 800dda6:	e00c      	b.n	800ddc2 <tcp_listen_with_backlog_and_err+0xf2>
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	68fa      	ldr	r2, [r7, #12]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d104      	bne.n	800ddbc <tcp_listen_with_backlog_and_err+0xec>
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	68da      	ldr	r2, [r3, #12]
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	60da      	str	r2, [r3, #12]
 800ddba:	e005      	b.n	800ddc8 <tcp_listen_with_backlog_and_err+0xf8>
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	617b      	str	r3, [r7, #20]
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1ef      	bne.n	800dda8 <tcp_listen_with_backlog_and_err+0xd8>
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800ddce:	68f8      	ldr	r0, [r7, #12]
 800ddd0:	f7ff fb64 	bl	800d49c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	4a11      	ldr	r2, [pc, #68]	; (800de1c <tcp_listen_with_backlog_and_err+0x14c>)
 800ddd8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ddda:	4b11      	ldr	r3, [pc, #68]	; (800de20 <tcp_listen_with_backlog_and_err+0x150>)
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	60da      	str	r2, [r3, #12]
 800dde2:	4a0f      	ldr	r2, [pc, #60]	; (800de20 <tcp_listen_with_backlog_and_err+0x150>)
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	6013      	str	r3, [r2, #0]
 800dde8:	f005 fd14 	bl	8013814 <tcp_timer_needed>
  res = ERR_OK;
 800ddec:	2300      	movs	r3, #0
 800ddee:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d002      	beq.n	800ddfc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	7efa      	ldrb	r2, [r7, #27]
 800ddfa:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ddfc:	69fb      	ldr	r3, [r7, #28]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3720      	adds	r7, #32
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	0801bc50 	.word	0x0801bc50
 800de0c:	0801be44 	.word	0x0801be44
 800de10:	0801bc94 	.word	0x0801bc94
 800de14:	0801be74 	.word	0x0801be74
 800de18:	20011590 	.word	0x20011590
 800de1c:	0800dc6d 	.word	0x0800dc6d
 800de20:	20011594 	.word	0x20011594

0800de24 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d106      	bne.n	800de40 <tcp_update_rcv_ann_wnd+0x1c>
 800de32:	4b25      	ldr	r3, [pc, #148]	; (800dec8 <tcp_update_rcv_ann_wnd+0xa4>)
 800de34:	f240 32a6 	movw	r2, #934	; 0x3a6
 800de38:	4924      	ldr	r1, [pc, #144]	; (800decc <tcp_update_rcv_ann_wnd+0xa8>)
 800de3a:	4825      	ldr	r0, [pc, #148]	; (800ded0 <tcp_update_rcv_ann_wnd+0xac>)
 800de3c:	f00b f87a 	bl	8018f34 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800de48:	4413      	add	r3, r2
 800de4a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800de54:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800de58:	bf28      	it	cs
 800de5a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800de5e:	b292      	uxth	r2, r2
 800de60:	4413      	add	r3, r2
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	2b00      	cmp	r3, #0
 800de68:	db08      	blt.n	800de7c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de76:	68fa      	ldr	r2, [r7, #12]
 800de78:	1ad3      	subs	r3, r2, r3
 800de7a:	e020      	b.n	800debe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de84:	1ad3      	subs	r3, r2, r3
 800de86:	2b00      	cmp	r3, #0
 800de88:	dd03      	ble.n	800de92 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800de90:	e014      	b.n	800debc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9a:	1ad3      	subs	r3, r2, r3
 800de9c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dea4:	d306      	bcc.n	800deb4 <tcp_update_rcv_ann_wnd+0x90>
 800dea6:	4b08      	ldr	r3, [pc, #32]	; (800dec8 <tcp_update_rcv_ann_wnd+0xa4>)
 800dea8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800deac:	4909      	ldr	r1, [pc, #36]	; (800ded4 <tcp_update_rcv_ann_wnd+0xb0>)
 800deae:	4808      	ldr	r0, [pc, #32]	; (800ded0 <tcp_update_rcv_ann_wnd+0xac>)
 800deb0:	f00b f840 	bl	8018f34 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	b29a      	uxth	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800debc:	2300      	movs	r3, #0
  }
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	0801bc50 	.word	0x0801bc50
 800decc:	0801beac 	.word	0x0801beac
 800ded0:	0801bc94 	.word	0x0801bc94
 800ded4:	0801bed0 	.word	0x0801bed0

0800ded8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	460b      	mov	r3, r1
 800dee2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d107      	bne.n	800defa <tcp_recved+0x22>
 800deea:	4b1f      	ldr	r3, [pc, #124]	; (800df68 <tcp_recved+0x90>)
 800deec:	f240 32cf 	movw	r2, #975	; 0x3cf
 800def0:	491e      	ldr	r1, [pc, #120]	; (800df6c <tcp_recved+0x94>)
 800def2:	481f      	ldr	r0, [pc, #124]	; (800df70 <tcp_recved+0x98>)
 800def4:	f00b f81e 	bl	8018f34 <iprintf>
 800def8:	e032      	b.n	800df60 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	7d1b      	ldrb	r3, [r3, #20]
 800defe:	2b01      	cmp	r3, #1
 800df00:	d106      	bne.n	800df10 <tcp_recved+0x38>
 800df02:	4b19      	ldr	r3, [pc, #100]	; (800df68 <tcp_recved+0x90>)
 800df04:	f240 32d2 	movw	r2, #978	; 0x3d2
 800df08:	491a      	ldr	r1, [pc, #104]	; (800df74 <tcp_recved+0x9c>)
 800df0a:	4819      	ldr	r0, [pc, #100]	; (800df70 <tcp_recved+0x98>)
 800df0c:	f00b f812 	bl	8018f34 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800df14:	887b      	ldrh	r3, [r7, #2]
 800df16:	4413      	add	r3, r2
 800df18:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800df1a:	89fb      	ldrh	r3, [r7, #14]
 800df1c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800df20:	d804      	bhi.n	800df2c <tcp_recved+0x54>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df26:	89fa      	ldrh	r2, [r7, #14]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d204      	bcs.n	800df36 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800df32:	851a      	strh	r2, [r3, #40]	; 0x28
 800df34:	e002      	b.n	800df3c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	89fa      	ldrh	r2, [r7, #14]
 800df3a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7ff ff71 	bl	800de24 <tcp_update_rcv_ann_wnd>
 800df42:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800df4a:	d309      	bcc.n	800df60 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	8b5b      	ldrh	r3, [r3, #26]
 800df50:	f043 0302 	orr.w	r3, r3, #2
 800df54:	b29a      	uxth	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f004 fce4 	bl	8012928 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	0801bc50 	.word	0x0801bc50
 800df6c:	0801beec 	.word	0x0801beec
 800df70:	0801bc94 	.word	0x0801bc94
 800df74:	0801bf04 	.word	0x0801bf04

0800df78 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800df7e:	2300      	movs	r3, #0
 800df80:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800df82:	4b1e      	ldr	r3, [pc, #120]	; (800dffc <tcp_new_port+0x84>)
 800df84:	881b      	ldrh	r3, [r3, #0]
 800df86:	3301      	adds	r3, #1
 800df88:	b29a      	uxth	r2, r3
 800df8a:	4b1c      	ldr	r3, [pc, #112]	; (800dffc <tcp_new_port+0x84>)
 800df8c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800df8e:	4b1b      	ldr	r3, [pc, #108]	; (800dffc <tcp_new_port+0x84>)
 800df90:	881b      	ldrh	r3, [r3, #0]
 800df92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df96:	4293      	cmp	r3, r2
 800df98:	d103      	bne.n	800dfa2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800df9a:	4b18      	ldr	r3, [pc, #96]	; (800dffc <tcp_new_port+0x84>)
 800df9c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800dfa0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	71fb      	strb	r3, [r7, #7]
 800dfa6:	e01e      	b.n	800dfe6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dfa8:	79fb      	ldrb	r3, [r7, #7]
 800dfaa:	4a15      	ldr	r2, [pc, #84]	; (800e000 <tcp_new_port+0x88>)
 800dfac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	603b      	str	r3, [r7, #0]
 800dfb4:	e011      	b.n	800dfda <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	8ada      	ldrh	r2, [r3, #22]
 800dfba:	4b10      	ldr	r3, [pc, #64]	; (800dffc <tcp_new_port+0x84>)
 800dfbc:	881b      	ldrh	r3, [r3, #0]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d108      	bne.n	800dfd4 <tcp_new_port+0x5c>
        n++;
 800dfc2:	88bb      	ldrh	r3, [r7, #4]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800dfc8:	88bb      	ldrh	r3, [r7, #4]
 800dfca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dfce:	d3d8      	bcc.n	800df82 <tcp_new_port+0xa>
          return 0;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	e00d      	b.n	800dff0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	603b      	str	r3, [r7, #0]
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d1ea      	bne.n	800dfb6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dfe0:	79fb      	ldrb	r3, [r7, #7]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	71fb      	strb	r3, [r7, #7]
 800dfe6:	79fb      	ldrb	r3, [r7, #7]
 800dfe8:	2b03      	cmp	r3, #3
 800dfea:	d9dd      	bls.n	800dfa8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800dfec:	4b03      	ldr	r3, [pc, #12]	; (800dffc <tcp_new_port+0x84>)
 800dfee:	881b      	ldrh	r3, [r3, #0]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	370c      	adds	r7, #12
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr
 800dffc:	20000024 	.word	0x20000024
 800e000:	0802814c 	.word	0x0802814c

0800e004 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b08a      	sub	sp, #40	; 0x28
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	603b      	str	r3, [r7, #0]
 800e010:	4613      	mov	r3, r2
 800e012:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e014:	2300      	movs	r3, #0
 800e016:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d109      	bne.n	800e032 <tcp_connect+0x2e>
 800e01e:	4b7d      	ldr	r3, [pc, #500]	; (800e214 <tcp_connect+0x210>)
 800e020:	f240 4235 	movw	r2, #1077	; 0x435
 800e024:	497c      	ldr	r1, [pc, #496]	; (800e218 <tcp_connect+0x214>)
 800e026:	487d      	ldr	r0, [pc, #500]	; (800e21c <tcp_connect+0x218>)
 800e028:	f00a ff84 	bl	8018f34 <iprintf>
 800e02c:	f06f 030f 	mvn.w	r3, #15
 800e030:	e0ec      	b.n	800e20c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d109      	bne.n	800e04c <tcp_connect+0x48>
 800e038:	4b76      	ldr	r3, [pc, #472]	; (800e214 <tcp_connect+0x210>)
 800e03a:	f240 4236 	movw	r2, #1078	; 0x436
 800e03e:	4978      	ldr	r1, [pc, #480]	; (800e220 <tcp_connect+0x21c>)
 800e040:	4876      	ldr	r0, [pc, #472]	; (800e21c <tcp_connect+0x218>)
 800e042:	f00a ff77 	bl	8018f34 <iprintf>
 800e046:	f06f 030f 	mvn.w	r3, #15
 800e04a:	e0df      	b.n	800e20c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	7d1b      	ldrb	r3, [r3, #20]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d009      	beq.n	800e068 <tcp_connect+0x64>
 800e054:	4b6f      	ldr	r3, [pc, #444]	; (800e214 <tcp_connect+0x210>)
 800e056:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e05a:	4972      	ldr	r1, [pc, #456]	; (800e224 <tcp_connect+0x220>)
 800e05c:	486f      	ldr	r0, [pc, #444]	; (800e21c <tcp_connect+0x218>)
 800e05e:	f00a ff69 	bl	8018f34 <iprintf>
 800e062:	f06f 0309 	mvn.w	r3, #9
 800e066:	e0d1      	b.n	800e20c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d002      	beq.n	800e074 <tcp_connect+0x70>
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	e000      	b.n	800e076 <tcp_connect+0x72>
 800e074:	2300      	movs	r3, #0
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	88fa      	ldrh	r2, [r7, #6]
 800e07e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	7a1b      	ldrb	r3, [r3, #8]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d006      	beq.n	800e096 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	7a1b      	ldrb	r3, [r3, #8]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fe fbbb 	bl	800c808 <netif_get_by_index>
 800e092:	6278      	str	r0, [r7, #36]	; 0x24
 800e094:	e005      	b.n	800e0a2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	3304      	adds	r3, #4
 800e09a:	4618      	mov	r0, r3
 800e09c:	f009 f96c 	bl	8017378 <ip4_route>
 800e0a0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800e0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d102      	bne.n	800e0ae <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e0a8:	f06f 0303 	mvn.w	r3, #3
 800e0ac:	e0ae      	b.n	800e20c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d003      	beq.n	800e0bc <tcp_connect+0xb8>
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d111      	bne.n	800e0e0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d002      	beq.n	800e0c8 <tcp_connect+0xc4>
 800e0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c4:	3304      	adds	r3, #4
 800e0c6:	e000      	b.n	800e0ca <tcp_connect+0xc6>
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d102      	bne.n	800e0d8 <tcp_connect+0xd4>
      return ERR_RTE;
 800e0d2:	f06f 0303 	mvn.w	r3, #3
 800e0d6:	e099      	b.n	800e20c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	8adb      	ldrh	r3, [r3, #22]
 800e0e4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	8adb      	ldrh	r3, [r3, #22]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d10c      	bne.n	800e108 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e0ee:	f7ff ff43 	bl	800df78 <tcp_new_port>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	8adb      	ldrh	r3, [r3, #22]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d102      	bne.n	800e108 <tcp_connect+0x104>
      return ERR_BUF;
 800e102:	f06f 0301 	mvn.w	r3, #1
 800e106:	e081      	b.n	800e20c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	f001 f885 	bl	800f218 <tcp_next_iss>
 800e10e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2200      	movs	r2, #0
 800e114:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	697a      	ldr	r2, [r7, #20]
 800e11a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	1e5a      	subs	r2, r3, #1
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	1e5a      	subs	r2, r3, #1
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	1e5a      	subs	r2, r3, #1
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e13a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e152:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e15c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	3304      	adds	r3, #4
 800e166:	461a      	mov	r2, r3
 800e168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e16a:	f001 f87b 	bl	800f264 <tcp_eff_send_mss_netif>
 800e16e:	4603      	mov	r3, r0
 800e170:	461a      	mov	r2, r3
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2201      	movs	r2, #1
 800e17a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	683a      	ldr	r2, [r7, #0]
 800e182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e186:	2102      	movs	r1, #2
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f004 fadf 	bl	801274c <tcp_enqueue_flags>
 800e18e:	4603      	mov	r3, r0
 800e190:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e192:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d136      	bne.n	800e208 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2202      	movs	r2, #2
 800e19e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e1a0:	8b7b      	ldrh	r3, [r7, #26]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d021      	beq.n	800e1ea <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e1a6:	4b20      	ldr	r3, [pc, #128]	; (800e228 <tcp_connect+0x224>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	68fa      	ldr	r2, [r7, #12]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d105      	bne.n	800e1bc <tcp_connect+0x1b8>
 800e1b0:	4b1d      	ldr	r3, [pc, #116]	; (800e228 <tcp_connect+0x224>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	4a1c      	ldr	r2, [pc, #112]	; (800e228 <tcp_connect+0x224>)
 800e1b8:	6013      	str	r3, [r2, #0]
 800e1ba:	e013      	b.n	800e1e4 <tcp_connect+0x1e0>
 800e1bc:	4b1a      	ldr	r3, [pc, #104]	; (800e228 <tcp_connect+0x224>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	623b      	str	r3, [r7, #32]
 800e1c2:	e00c      	b.n	800e1de <tcp_connect+0x1da>
 800e1c4:	6a3b      	ldr	r3, [r7, #32]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d104      	bne.n	800e1d8 <tcp_connect+0x1d4>
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	68da      	ldr	r2, [r3, #12]
 800e1d2:	6a3b      	ldr	r3, [r7, #32]
 800e1d4:	60da      	str	r2, [r3, #12]
 800e1d6:	e005      	b.n	800e1e4 <tcp_connect+0x1e0>
 800e1d8:	6a3b      	ldr	r3, [r7, #32]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	623b      	str	r3, [r7, #32]
 800e1de:	6a3b      	ldr	r3, [r7, #32]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d1ef      	bne.n	800e1c4 <tcp_connect+0x1c0>
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e1ea:	4b10      	ldr	r3, [pc, #64]	; (800e22c <tcp_connect+0x228>)
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	60da      	str	r2, [r3, #12]
 800e1f2:	4a0e      	ldr	r2, [pc, #56]	; (800e22c <tcp_connect+0x228>)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6013      	str	r3, [r2, #0]
 800e1f8:	f005 fb0c 	bl	8013814 <tcp_timer_needed>
 800e1fc:	4b0c      	ldr	r3, [pc, #48]	; (800e230 <tcp_connect+0x22c>)
 800e1fe:	2201      	movs	r2, #1
 800e200:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	f004 fb90 	bl	8012928 <tcp_output>
  }
  return ret;
 800e208:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3728      	adds	r7, #40	; 0x28
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	0801bc50 	.word	0x0801bc50
 800e218:	0801bf2c 	.word	0x0801bf2c
 800e21c:	0801bc94 	.word	0x0801bc94
 800e220:	0801bf48 	.word	0x0801bf48
 800e224:	0801bf64 	.word	0x0801bf64
 800e228:	20011590 	.word	0x20011590
 800e22c:	20011598 	.word	0x20011598
 800e230:	200115a0 	.word	0x200115a0

0800e234 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e234:	b5b0      	push	{r4, r5, r7, lr}
 800e236:	b090      	sub	sp, #64	; 0x40
 800e238:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e23a:	2300      	movs	r3, #0
 800e23c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e240:	4b94      	ldr	r3, [pc, #592]	; (800e494 <tcp_slowtmr+0x260>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	3301      	adds	r3, #1
 800e246:	4a93      	ldr	r2, [pc, #588]	; (800e494 <tcp_slowtmr+0x260>)
 800e248:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e24a:	4b93      	ldr	r3, [pc, #588]	; (800e498 <tcp_slowtmr+0x264>)
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	3301      	adds	r3, #1
 800e250:	b2da      	uxtb	r2, r3
 800e252:	4b91      	ldr	r3, [pc, #580]	; (800e498 <tcp_slowtmr+0x264>)
 800e254:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e256:	2300      	movs	r3, #0
 800e258:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e25a:	4b90      	ldr	r3, [pc, #576]	; (800e49c <tcp_slowtmr+0x268>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e260:	e29f      	b.n	800e7a2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e264:	7d1b      	ldrb	r3, [r3, #20]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d106      	bne.n	800e278 <tcp_slowtmr+0x44>
 800e26a:	4b8d      	ldr	r3, [pc, #564]	; (800e4a0 <tcp_slowtmr+0x26c>)
 800e26c:	f240 42be 	movw	r2, #1214	; 0x4be
 800e270:	498c      	ldr	r1, [pc, #560]	; (800e4a4 <tcp_slowtmr+0x270>)
 800e272:	488d      	ldr	r0, [pc, #564]	; (800e4a8 <tcp_slowtmr+0x274>)
 800e274:	f00a fe5e 	bl	8018f34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27a:	7d1b      	ldrb	r3, [r3, #20]
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d106      	bne.n	800e28e <tcp_slowtmr+0x5a>
 800e280:	4b87      	ldr	r3, [pc, #540]	; (800e4a0 <tcp_slowtmr+0x26c>)
 800e282:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e286:	4989      	ldr	r1, [pc, #548]	; (800e4ac <tcp_slowtmr+0x278>)
 800e288:	4887      	ldr	r0, [pc, #540]	; (800e4a8 <tcp_slowtmr+0x274>)
 800e28a:	f00a fe53 	bl	8018f34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e290:	7d1b      	ldrb	r3, [r3, #20]
 800e292:	2b0a      	cmp	r3, #10
 800e294:	d106      	bne.n	800e2a4 <tcp_slowtmr+0x70>
 800e296:	4b82      	ldr	r3, [pc, #520]	; (800e4a0 <tcp_slowtmr+0x26c>)
 800e298:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e29c:	4984      	ldr	r1, [pc, #528]	; (800e4b0 <tcp_slowtmr+0x27c>)
 800e29e:	4882      	ldr	r0, [pc, #520]	; (800e4a8 <tcp_slowtmr+0x274>)
 800e2a0:	f00a fe48 	bl	8018f34 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a6:	7f9a      	ldrb	r2, [r3, #30]
 800e2a8:	4b7b      	ldr	r3, [pc, #492]	; (800e498 <tcp_slowtmr+0x264>)
 800e2aa:	781b      	ldrb	r3, [r3, #0]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d105      	bne.n	800e2bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b6:	68db      	ldr	r3, [r3, #12]
 800e2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e2ba:	e272      	b.n	800e7a2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e2bc:	4b76      	ldr	r3, [pc, #472]	; (800e498 <tcp_slowtmr+0x264>)
 800e2be:	781a      	ldrb	r2, [r3, #0]
 800e2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d2:	7d1b      	ldrb	r3, [r3, #20]
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d10a      	bne.n	800e2ee <tcp_slowtmr+0xba>
 800e2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e2de:	2b05      	cmp	r3, #5
 800e2e0:	d905      	bls.n	800e2ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e2e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2ec:	e11e      	b.n	800e52c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e2f4:	2b0b      	cmp	r3, #11
 800e2f6:	d905      	bls.n	800e304 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e302:	e113      	b.n	800e52c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e306:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d075      	beq.n	800e3fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e312:	2b00      	cmp	r3, #0
 800e314:	d006      	beq.n	800e324 <tcp_slowtmr+0xf0>
 800e316:	4b62      	ldr	r3, [pc, #392]	; (800e4a0 <tcp_slowtmr+0x26c>)
 800e318:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e31c:	4965      	ldr	r1, [pc, #404]	; (800e4b4 <tcp_slowtmr+0x280>)
 800e31e:	4862      	ldr	r0, [pc, #392]	; (800e4a8 <tcp_slowtmr+0x274>)
 800e320:	f00a fe08 	bl	8018f34 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d106      	bne.n	800e33a <tcp_slowtmr+0x106>
 800e32c:	4b5c      	ldr	r3, [pc, #368]	; (800e4a0 <tcp_slowtmr+0x26c>)
 800e32e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e332:	4961      	ldr	r1, [pc, #388]	; (800e4b8 <tcp_slowtmr+0x284>)
 800e334:	485c      	ldr	r0, [pc, #368]	; (800e4a8 <tcp_slowtmr+0x274>)
 800e336:	f00a fdfd 	bl	8018f34 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e340:	2b0b      	cmp	r3, #11
 800e342:	d905      	bls.n	800e350 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e348:	3301      	adds	r3, #1
 800e34a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e34e:	e0ed      	b.n	800e52c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e352:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e356:	3b01      	subs	r3, #1
 800e358:	4a58      	ldr	r2, [pc, #352]	; (800e4bc <tcp_slowtmr+0x288>)
 800e35a:	5cd3      	ldrb	r3, [r2, r3]
 800e35c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e360:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e364:	7c7a      	ldrb	r2, [r7, #17]
 800e366:	429a      	cmp	r2, r3
 800e368:	d907      	bls.n	800e37a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e370:	3301      	adds	r3, #1
 800e372:	b2da      	uxtb	r2, r3
 800e374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e376:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e380:	7c7a      	ldrb	r2, [r7, #17]
 800e382:	429a      	cmp	r2, r3
 800e384:	f200 80d2 	bhi.w	800e52c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e388:	2301      	movs	r3, #1
 800e38a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e392:	2b00      	cmp	r3, #0
 800e394:	d108      	bne.n	800e3a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e398:	f005 f96e 	bl	8013678 <tcp_zero_window_probe>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d014      	beq.n	800e3cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	623b      	str	r3, [r7, #32]
 800e3a6:	e011      	b.n	800e3cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3b2:	f004 f833 	bl	801241c <tcp_split_unsent_seg>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d107      	bne.n	800e3cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e3bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3be:	f004 fab3 	bl	8012928 <tcp_output>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d101      	bne.n	800e3cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e3cc:	6a3b      	ldr	r3, [r7, #32]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	f000 80ac 	beq.w	800e52c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e3e2:	2b06      	cmp	r3, #6
 800e3e4:	f200 80a2 	bhi.w	800e52c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e3f8:	e098      	b.n	800e52c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e400:	2b00      	cmp	r3, #0
 800e402:	db0f      	blt.n	800e424 <tcp_slowtmr+0x1f0>
 800e404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e406:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e40a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e40e:	4293      	cmp	r3, r2
 800e410:	d008      	beq.n	800e424 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e414:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e418:	b29b      	uxth	r3, r3
 800e41a:	3301      	adds	r3, #1
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	b21a      	sxth	r2, r3
 800e420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e422:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e430:	429a      	cmp	r2, r3
 800e432:	db7b      	blt.n	800e52c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e436:	f004 fd69 	bl	8012f0c <tcp_rexmit_rto_prepare>
 800e43a:	4603      	mov	r3, r0
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d007      	beq.n	800e450 <tcp_slowtmr+0x21c>
 800e440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e444:	2b00      	cmp	r3, #0
 800e446:	d171      	bne.n	800e52c <tcp_slowtmr+0x2f8>
 800e448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d06d      	beq.n	800e52c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e452:	7d1b      	ldrb	r3, [r3, #20]
 800e454:	2b02      	cmp	r3, #2
 800e456:	d03a      	beq.n	800e4ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e45e:	2b0c      	cmp	r3, #12
 800e460:	bf28      	it	cs
 800e462:	230c      	movcs	r3, #12
 800e464:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e468:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e46c:	10db      	asrs	r3, r3, #3
 800e46e:	b21b      	sxth	r3, r3
 800e470:	461a      	mov	r2, r3
 800e472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e474:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e478:	4413      	add	r3, r2
 800e47a:	7efa      	ldrb	r2, [r7, #27]
 800e47c:	4910      	ldr	r1, [pc, #64]	; (800e4c0 <tcp_slowtmr+0x28c>)
 800e47e:	5c8a      	ldrb	r2, [r1, r2]
 800e480:	4093      	lsls	r3, r2
 800e482:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e48a:	4293      	cmp	r3, r2
 800e48c:	dc1a      	bgt.n	800e4c4 <tcp_slowtmr+0x290>
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	b21a      	sxth	r2, r3
 800e492:	e019      	b.n	800e4c8 <tcp_slowtmr+0x294>
 800e494:	2001158c 	.word	0x2001158c
 800e498:	200115a2 	.word	0x200115a2
 800e49c:	20011598 	.word	0x20011598
 800e4a0:	0801bc50 	.word	0x0801bc50
 800e4a4:	0801bf94 	.word	0x0801bf94
 800e4a8:	0801bc94 	.word	0x0801bc94
 800e4ac:	0801bfc0 	.word	0x0801bfc0
 800e4b0:	0801bfec 	.word	0x0801bfec
 800e4b4:	0801c01c 	.word	0x0801c01c
 800e4b8:	0801c050 	.word	0x0801c050
 800e4bc:	08028144 	.word	0x08028144
 800e4c0:	08028134 	.word	0x08028134
 800e4c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	bf28      	it	cs
 800e4e4:	4613      	movcs	r3, r2
 800e4e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e4e8:	8a7b      	ldrh	r3, [r7, #18]
 800e4ea:	085b      	lsrs	r3, r3, #1
 800e4ec:	b29a      	uxth	r2, r3
 800e4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4fe:	005b      	lsls	r3, r3, #1
 800e500:	b29b      	uxth	r3, r3
 800e502:	429a      	cmp	r2, r3
 800e504:	d206      	bcs.n	800e514 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e50a:	005b      	lsls	r3, r3, #1
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e516:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e520:	2200      	movs	r2, #0
 800e522:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e528:	f004 fd60 	bl	8012fec <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52e:	7d1b      	ldrb	r3, [r3, #20]
 800e530:	2b06      	cmp	r3, #6
 800e532:	d111      	bne.n	800e558 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e536:	8b5b      	ldrh	r3, [r3, #26]
 800e538:	f003 0310 	and.w	r3, r3, #16
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d00b      	beq.n	800e558 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e540:	4b9d      	ldr	r3, [pc, #628]	; (800e7b8 <tcp_slowtmr+0x584>)
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e546:	6a1b      	ldr	r3, [r3, #32]
 800e548:	1ad3      	subs	r3, r2, r3
 800e54a:	2b28      	cmp	r3, #40	; 0x28
 800e54c:	d904      	bls.n	800e558 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e54e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e552:	3301      	adds	r3, #1
 800e554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55a:	7a5b      	ldrb	r3, [r3, #9]
 800e55c:	f003 0308 	and.w	r3, r3, #8
 800e560:	2b00      	cmp	r3, #0
 800e562:	d04c      	beq.n	800e5fe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e566:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e568:	2b04      	cmp	r3, #4
 800e56a:	d003      	beq.n	800e574 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e570:	2b07      	cmp	r3, #7
 800e572:	d144      	bne.n	800e5fe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e574:	4b90      	ldr	r3, [pc, #576]	; (800e7b8 <tcp_slowtmr+0x584>)
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57a:	6a1b      	ldr	r3, [r3, #32]
 800e57c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e584:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e588:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e58c:	498b      	ldr	r1, [pc, #556]	; (800e7bc <tcp_slowtmr+0x588>)
 800e58e:	fba1 1303 	umull	r1, r3, r1, r3
 800e592:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e594:	429a      	cmp	r2, r3
 800e596:	d90a      	bls.n	800e5ae <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e59c:	3301      	adds	r3, #1
 800e59e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e5a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e5ac:	e027      	b.n	800e5fe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5ae:	4b82      	ldr	r3, [pc, #520]	; (800e7b8 <tcp_slowtmr+0x584>)
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b4:	6a1b      	ldr	r3, [r3, #32]
 800e5b6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	4b7e      	ldr	r3, [pc, #504]	; (800e7c0 <tcp_slowtmr+0x58c>)
 800e5c8:	fb00 f303 	mul.w	r3, r0, r3
 800e5cc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e5ce:	497b      	ldr	r1, [pc, #492]	; (800e7bc <tcp_slowtmr+0x588>)
 800e5d0:	fba1 1303 	umull	r1, r3, r1, r3
 800e5d4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d911      	bls.n	800e5fe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e5da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5dc:	f005 f80c 	bl	80135f8 <tcp_keepalive>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e5e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d107      	bne.n	800e5fe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e5f4:	3301      	adds	r3, #1
 800e5f6:	b2da      	uxtb	r2, r3
 800e5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e602:	2b00      	cmp	r3, #0
 800e604:	d011      	beq.n	800e62a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e606:	4b6c      	ldr	r3, [pc, #432]	; (800e7b8 <tcp_slowtmr+0x584>)
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60c:	6a1b      	ldr	r3, [r3, #32]
 800e60e:	1ad2      	subs	r2, r2, r3
 800e610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e612:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e616:	4619      	mov	r1, r3
 800e618:	460b      	mov	r3, r1
 800e61a:	005b      	lsls	r3, r3, #1
 800e61c:	440b      	add	r3, r1
 800e61e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e620:	429a      	cmp	r2, r3
 800e622:	d302      	bcc.n	800e62a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e626:	f000 fec7 	bl	800f3b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e62c:	7d1b      	ldrb	r3, [r3, #20]
 800e62e:	2b03      	cmp	r3, #3
 800e630:	d10b      	bne.n	800e64a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e632:	4b61      	ldr	r3, [pc, #388]	; (800e7b8 <tcp_slowtmr+0x584>)
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e638:	6a1b      	ldr	r3, [r3, #32]
 800e63a:	1ad3      	subs	r3, r2, r3
 800e63c:	2b28      	cmp	r3, #40	; 0x28
 800e63e:	d904      	bls.n	800e64a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e644:	3301      	adds	r3, #1
 800e646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64c:	7d1b      	ldrb	r3, [r3, #20]
 800e64e:	2b09      	cmp	r3, #9
 800e650:	d10b      	bne.n	800e66a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e652:	4b59      	ldr	r3, [pc, #356]	; (800e7b8 <tcp_slowtmr+0x584>)
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e658:	6a1b      	ldr	r3, [r3, #32]
 800e65a:	1ad3      	subs	r3, r2, r3
 800e65c:	2bf0      	cmp	r3, #240	; 0xf0
 800e65e:	d904      	bls.n	800e66a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e664:	3301      	adds	r3, #1
 800e666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e66a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d060      	beq.n	800e734 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e678:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e67a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e67c:	f000 fce8 	bl	800f050 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e682:	2b00      	cmp	r3, #0
 800e684:	d010      	beq.n	800e6a8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e686:	4b4f      	ldr	r3, [pc, #316]	; (800e7c4 <tcp_slowtmr+0x590>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d106      	bne.n	800e69e <tcp_slowtmr+0x46a>
 800e690:	4b4d      	ldr	r3, [pc, #308]	; (800e7c8 <tcp_slowtmr+0x594>)
 800e692:	f240 526d 	movw	r2, #1389	; 0x56d
 800e696:	494d      	ldr	r1, [pc, #308]	; (800e7cc <tcp_slowtmr+0x598>)
 800e698:	484d      	ldr	r0, [pc, #308]	; (800e7d0 <tcp_slowtmr+0x59c>)
 800e69a:	f00a fc4b 	bl	8018f34 <iprintf>
        prev->next = pcb->next;
 800e69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a0:	68da      	ldr	r2, [r3, #12]
 800e6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a4:	60da      	str	r2, [r3, #12]
 800e6a6:	e00f      	b.n	800e6c8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e6a8:	4b46      	ldr	r3, [pc, #280]	; (800e7c4 <tcp_slowtmr+0x590>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d006      	beq.n	800e6c0 <tcp_slowtmr+0x48c>
 800e6b2:	4b45      	ldr	r3, [pc, #276]	; (800e7c8 <tcp_slowtmr+0x594>)
 800e6b4:	f240 5271 	movw	r2, #1393	; 0x571
 800e6b8:	4946      	ldr	r1, [pc, #280]	; (800e7d4 <tcp_slowtmr+0x5a0>)
 800e6ba:	4845      	ldr	r0, [pc, #276]	; (800e7d0 <tcp_slowtmr+0x59c>)
 800e6bc:	f00a fc3a 	bl	8018f34 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	4a3f      	ldr	r2, [pc, #252]	; (800e7c4 <tcp_slowtmr+0x590>)
 800e6c6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e6c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d013      	beq.n	800e6f8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e6d8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6dc:	3304      	adds	r3, #4
 800e6de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6e0:	8ad2      	ldrh	r2, [r2, #22]
 800e6e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6e4:	8b09      	ldrh	r1, [r1, #24]
 800e6e6:	9102      	str	r1, [sp, #8]
 800e6e8:	9201      	str	r2, [sp, #4]
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	462b      	mov	r3, r5
 800e6ee:	4622      	mov	r2, r4
 800e6f0:	4601      	mov	r1, r0
 800e6f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6f4:	f004 fecc 	bl	8013490 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	691b      	ldr	r3, [r3, #16]
 800e6fc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e700:	7d1b      	ldrb	r3, [r3, #20]
 800e702:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e706:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e70e:	6838      	ldr	r0, [r7, #0]
 800e710:	f7fe fec4 	bl	800d49c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e714:	4b30      	ldr	r3, [pc, #192]	; (800e7d8 <tcp_slowtmr+0x5a4>)
 800e716:	2200      	movs	r2, #0
 800e718:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d004      	beq.n	800e72a <tcp_slowtmr+0x4f6>
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f06f 010c 	mvn.w	r1, #12
 800e726:	68b8      	ldr	r0, [r7, #8]
 800e728:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e72a:	4b2b      	ldr	r3, [pc, #172]	; (800e7d8 <tcp_slowtmr+0x5a4>)
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d037      	beq.n	800e7a2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e732:	e590      	b.n	800e256 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e740:	7f1b      	ldrb	r3, [r3, #28]
 800e742:	3301      	adds	r3, #1
 800e744:	b2da      	uxtb	r2, r3
 800e746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e748:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74c:	7f1a      	ldrb	r2, [r3, #28]
 800e74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e750:	7f5b      	ldrb	r3, [r3, #29]
 800e752:	429a      	cmp	r2, r3
 800e754:	d325      	bcc.n	800e7a2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e758:	2200      	movs	r2, #0
 800e75a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e75c:	4b1e      	ldr	r3, [pc, #120]	; (800e7d8 <tcp_slowtmr+0x5a4>)
 800e75e:	2200      	movs	r2, #0
 800e760:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d00b      	beq.n	800e784 <tcp_slowtmr+0x550>
 800e76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e774:	6912      	ldr	r2, [r2, #16]
 800e776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e778:	4610      	mov	r0, r2
 800e77a:	4798      	blx	r3
 800e77c:	4603      	mov	r3, r0
 800e77e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e782:	e002      	b.n	800e78a <tcp_slowtmr+0x556>
 800e784:	2300      	movs	r3, #0
 800e786:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e78a:	4b13      	ldr	r3, [pc, #76]	; (800e7d8 <tcp_slowtmr+0x5a4>)
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d000      	beq.n	800e794 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e792:	e560      	b.n	800e256 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e794:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d102      	bne.n	800e7a2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e79c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e79e:	f004 f8c3 	bl	8012928 <tcp_output>
  while (pcb != NULL) {
 800e7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f47f ad5c 	bne.w	800e262 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e7ae:	4b0b      	ldr	r3, [pc, #44]	; (800e7dc <tcp_slowtmr+0x5a8>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e7b4:	e067      	b.n	800e886 <tcp_slowtmr+0x652>
 800e7b6:	bf00      	nop
 800e7b8:	2001158c 	.word	0x2001158c
 800e7bc:	10624dd3 	.word	0x10624dd3
 800e7c0:	000124f8 	.word	0x000124f8
 800e7c4:	20011598 	.word	0x20011598
 800e7c8:	0801bc50 	.word	0x0801bc50
 800e7cc:	0801c088 	.word	0x0801c088
 800e7d0:	0801bc94 	.word	0x0801bc94
 800e7d4:	0801c0b4 	.word	0x0801c0b4
 800e7d8:	200115a0 	.word	0x200115a0
 800e7dc:	2001159c 	.word	0x2001159c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e2:	7d1b      	ldrb	r3, [r3, #20]
 800e7e4:	2b0a      	cmp	r3, #10
 800e7e6:	d006      	beq.n	800e7f6 <tcp_slowtmr+0x5c2>
 800e7e8:	4b2b      	ldr	r3, [pc, #172]	; (800e898 <tcp_slowtmr+0x664>)
 800e7ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e7ee:	492b      	ldr	r1, [pc, #172]	; (800e89c <tcp_slowtmr+0x668>)
 800e7f0:	482b      	ldr	r0, [pc, #172]	; (800e8a0 <tcp_slowtmr+0x66c>)
 800e7f2:	f00a fb9f 	bl	8018f34 <iprintf>
    pcb_remove = 0;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e7fc:	4b29      	ldr	r3, [pc, #164]	; (800e8a4 <tcp_slowtmr+0x670>)
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e802:	6a1b      	ldr	r3, [r3, #32]
 800e804:	1ad3      	subs	r3, r2, r3
 800e806:	2bf0      	cmp	r3, #240	; 0xf0
 800e808:	d904      	bls.n	800e814 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e80a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e80e:	3301      	adds	r3, #1
 800e810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d02f      	beq.n	800e87c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e81c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e81e:	f000 fc17 	bl	800f050 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	2b00      	cmp	r3, #0
 800e826:	d010      	beq.n	800e84a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e828:	4b1f      	ldr	r3, [pc, #124]	; (800e8a8 <tcp_slowtmr+0x674>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e82e:	429a      	cmp	r2, r3
 800e830:	d106      	bne.n	800e840 <tcp_slowtmr+0x60c>
 800e832:	4b19      	ldr	r3, [pc, #100]	; (800e898 <tcp_slowtmr+0x664>)
 800e834:	f240 52af 	movw	r2, #1455	; 0x5af
 800e838:	491c      	ldr	r1, [pc, #112]	; (800e8ac <tcp_slowtmr+0x678>)
 800e83a:	4819      	ldr	r0, [pc, #100]	; (800e8a0 <tcp_slowtmr+0x66c>)
 800e83c:	f00a fb7a 	bl	8018f34 <iprintf>
        prev->next = pcb->next;
 800e840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e842:	68da      	ldr	r2, [r3, #12]
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	60da      	str	r2, [r3, #12]
 800e848:	e00f      	b.n	800e86a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e84a:	4b17      	ldr	r3, [pc, #92]	; (800e8a8 <tcp_slowtmr+0x674>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e850:	429a      	cmp	r2, r3
 800e852:	d006      	beq.n	800e862 <tcp_slowtmr+0x62e>
 800e854:	4b10      	ldr	r3, [pc, #64]	; (800e898 <tcp_slowtmr+0x664>)
 800e856:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e85a:	4915      	ldr	r1, [pc, #84]	; (800e8b0 <tcp_slowtmr+0x67c>)
 800e85c:	4810      	ldr	r0, [pc, #64]	; (800e8a0 <tcp_slowtmr+0x66c>)
 800e85e:	f00a fb69 	bl	8018f34 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	4a10      	ldr	r2, [pc, #64]	; (800e8a8 <tcp_slowtmr+0x674>)
 800e868:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e870:	68db      	ldr	r3, [r3, #12]
 800e872:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e874:	69f8      	ldr	r0, [r7, #28]
 800e876:	f7fe fe11 	bl	800d49c <tcp_free>
 800e87a:	e004      	b.n	800e886 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e882:	68db      	ldr	r3, [r3, #12]
 800e884:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d1a9      	bne.n	800e7e0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e88c:	bf00      	nop
 800e88e:	bf00      	nop
 800e890:	3730      	adds	r7, #48	; 0x30
 800e892:	46bd      	mov	sp, r7
 800e894:	bdb0      	pop	{r4, r5, r7, pc}
 800e896:	bf00      	nop
 800e898:	0801bc50 	.word	0x0801bc50
 800e89c:	0801c0e0 	.word	0x0801c0e0
 800e8a0:	0801bc94 	.word	0x0801bc94
 800e8a4:	2001158c 	.word	0x2001158c
 800e8a8:	2001159c 	.word	0x2001159c
 800e8ac:	0801c110 	.word	0x0801c110
 800e8b0:	0801c138 	.word	0x0801c138

0800e8b4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e8ba:	4b2d      	ldr	r3, [pc, #180]	; (800e970 <tcp_fasttmr+0xbc>)
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	b2da      	uxtb	r2, r3
 800e8c2:	4b2b      	ldr	r3, [pc, #172]	; (800e970 <tcp_fasttmr+0xbc>)
 800e8c4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e8c6:	4b2b      	ldr	r3, [pc, #172]	; (800e974 <tcp_fasttmr+0xc0>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e8cc:	e048      	b.n	800e960 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	7f9a      	ldrb	r2, [r3, #30]
 800e8d2:	4b27      	ldr	r3, [pc, #156]	; (800e970 <tcp_fasttmr+0xbc>)
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d03f      	beq.n	800e95a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e8da:	4b25      	ldr	r3, [pc, #148]	; (800e970 <tcp_fasttmr+0xbc>)
 800e8dc:	781a      	ldrb	r2, [r3, #0]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	8b5b      	ldrh	r3, [r3, #26]
 800e8e6:	f003 0301 	and.w	r3, r3, #1
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d010      	beq.n	800e910 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	8b5b      	ldrh	r3, [r3, #26]
 800e8f2:	f043 0302 	orr.w	r3, r3, #2
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f004 f813 	bl	8012928 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	8b5b      	ldrh	r3, [r3, #26]
 800e906:	f023 0303 	bic.w	r3, r3, #3
 800e90a:	b29a      	uxth	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	8b5b      	ldrh	r3, [r3, #26]
 800e914:	f003 0308 	and.w	r3, r3, #8
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d009      	beq.n	800e930 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	8b5b      	ldrh	r3, [r3, #26]
 800e920:	f023 0308 	bic.w	r3, r3, #8
 800e924:	b29a      	uxth	r2, r3
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f7fe ff4a 	bl	800d7c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	68db      	ldr	r3, [r3, #12]
 800e934:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00a      	beq.n	800e954 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e93e:	4b0e      	ldr	r3, [pc, #56]	; (800e978 <tcp_fasttmr+0xc4>)
 800e940:	2200      	movs	r2, #0
 800e942:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 f819 	bl	800e97c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e94a:	4b0b      	ldr	r3, [pc, #44]	; (800e978 <tcp_fasttmr+0xc4>)
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d000      	beq.n	800e954 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e952:	e7b8      	b.n	800e8c6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	607b      	str	r3, [r7, #4]
 800e958:	e002      	b.n	800e960 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d1b3      	bne.n	800e8ce <tcp_fasttmr+0x1a>
    }
  }
}
 800e966:	bf00      	nop
 800e968:	bf00      	nop
 800e96a:	3708      	adds	r7, #8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	200115a2 	.word	0x200115a2
 800e974:	20011598 	.word	0x20011598
 800e978:	200115a0 	.word	0x200115a0

0800e97c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e97c:	b590      	push	{r4, r7, lr}
 800e97e:	b085      	sub	sp, #20
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d109      	bne.n	800e99e <tcp_process_refused_data+0x22>
 800e98a:	4b37      	ldr	r3, [pc, #220]	; (800ea68 <tcp_process_refused_data+0xec>)
 800e98c:	f240 6209 	movw	r2, #1545	; 0x609
 800e990:	4936      	ldr	r1, [pc, #216]	; (800ea6c <tcp_process_refused_data+0xf0>)
 800e992:	4837      	ldr	r0, [pc, #220]	; (800ea70 <tcp_process_refused_data+0xf4>)
 800e994:	f00a face 	bl	8018f34 <iprintf>
 800e998:	f06f 030f 	mvn.w	r3, #15
 800e99c:	e060      	b.n	800ea60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9a2:	7b5b      	ldrb	r3, [r3, #13]
 800e9a4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9aa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00b      	beq.n	800e9d4 <tcp_process_refused_data+0x58>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6918      	ldr	r0, [r3, #16]
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	68ba      	ldr	r2, [r7, #8]
 800e9ca:	6879      	ldr	r1, [r7, #4]
 800e9cc:	47a0      	blx	r4
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	73fb      	strb	r3, [r7, #15]
 800e9d2:	e007      	b.n	800e9e4 <tcp_process_refused_data+0x68>
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	68ba      	ldr	r2, [r7, #8]
 800e9d8:	6879      	ldr	r1, [r7, #4]
 800e9da:	2000      	movs	r0, #0
 800e9dc:	f000 f8c2 	bl	800eb64 <tcp_recv_null>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e9e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d12a      	bne.n	800ea42 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e9ec:	7bbb      	ldrb	r3, [r7, #14]
 800e9ee:	f003 0320 	and.w	r3, r3, #32
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d033      	beq.n	800ea5e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e9fe:	d005      	beq.n	800ea0c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea04:	3301      	adds	r3, #1
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00b      	beq.n	800ea2e <tcp_process_refused_data+0xb2>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6918      	ldr	r0, [r3, #16]
 800ea20:	2300      	movs	r3, #0
 800ea22:	2200      	movs	r2, #0
 800ea24:	6879      	ldr	r1, [r7, #4]
 800ea26:	47a0      	blx	r4
 800ea28:	4603      	mov	r3, r0
 800ea2a:	73fb      	strb	r3, [r7, #15]
 800ea2c:	e001      	b.n	800ea32 <tcp_process_refused_data+0xb6>
 800ea2e:	2300      	movs	r3, #0
 800ea30:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ea32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea36:	f113 0f0d 	cmn.w	r3, #13
 800ea3a:	d110      	bne.n	800ea5e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ea3c:	f06f 030c 	mvn.w	r3, #12
 800ea40:	e00e      	b.n	800ea60 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ea42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea46:	f113 0f0d 	cmn.w	r3, #13
 800ea4a:	d102      	bne.n	800ea52 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ea4c:	f06f 030c 	mvn.w	r3, #12
 800ea50:	e006      	b.n	800ea60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	68ba      	ldr	r2, [r7, #8]
 800ea56:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ea58:	f06f 0304 	mvn.w	r3, #4
 800ea5c:	e000      	b.n	800ea60 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ea5e:	2300      	movs	r3, #0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3714      	adds	r7, #20
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd90      	pop	{r4, r7, pc}
 800ea68:	0801bc50 	.word	0x0801bc50
 800ea6c:	0801c160 	.word	0x0801c160
 800ea70:	0801bc94 	.word	0x0801bc94

0800ea74 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ea7c:	e007      	b.n	800ea8e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 f80a 	bl	800ea9e <tcp_seg_free>
    seg = next;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d1f4      	bne.n	800ea7e <tcp_segs_free+0xa>
  }
}
 800ea94:	bf00      	nop
 800ea96:	bf00      	nop
 800ea98:	3710      	adds	r7, #16
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b082      	sub	sp, #8
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d00c      	beq.n	800eac6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d004      	beq.n	800eabe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fe fa33 	bl	800cf24 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800eabe:	6879      	ldr	r1, [r7, #4]
 800eac0:	2003      	movs	r0, #3
 800eac2:	f7fd fb7f 	bl	800c1c4 <memp_free>
  }
}
 800eac6:	bf00      	nop
 800eac8:	3708      	adds	r7, #8
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
	...

0800ead0 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	460b      	mov	r3, r1
 800eada:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d107      	bne.n	800eaf2 <tcp_setprio+0x22>
 800eae2:	4b07      	ldr	r3, [pc, #28]	; (800eb00 <tcp_setprio+0x30>)
 800eae4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800eae8:	4906      	ldr	r1, [pc, #24]	; (800eb04 <tcp_setprio+0x34>)
 800eaea:	4807      	ldr	r0, [pc, #28]	; (800eb08 <tcp_setprio+0x38>)
 800eaec:	f00a fa22 	bl	8018f34 <iprintf>
 800eaf0:	e002      	b.n	800eaf8 <tcp_setprio+0x28>

  pcb->prio = prio;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	78fa      	ldrb	r2, [r7, #3]
 800eaf6:	755a      	strb	r2, [r3, #21]
}
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	0801bc50 	.word	0x0801bc50
 800eb04:	0801c188 	.word	0x0801c188
 800eb08:	0801bc94 	.word	0x0801bc94

0800eb0c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d106      	bne.n	800eb28 <tcp_seg_copy+0x1c>
 800eb1a:	4b0f      	ldr	r3, [pc, #60]	; (800eb58 <tcp_seg_copy+0x4c>)
 800eb1c:	f240 6282 	movw	r2, #1666	; 0x682
 800eb20:	490e      	ldr	r1, [pc, #56]	; (800eb5c <tcp_seg_copy+0x50>)
 800eb22:	480f      	ldr	r0, [pc, #60]	; (800eb60 <tcp_seg_copy+0x54>)
 800eb24:	f00a fa06 	bl	8018f34 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800eb28:	2003      	movs	r0, #3
 800eb2a:	f7fd fad5 	bl	800c0d8 <memp_malloc>
 800eb2e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d101      	bne.n	800eb3a <tcp_seg_copy+0x2e>
    return NULL;
 800eb36:	2300      	movs	r3, #0
 800eb38:	e00a      	b.n	800eb50 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800eb3a:	2210      	movs	r2, #16
 800eb3c:	6879      	ldr	r1, [r7, #4]
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f00a f933 	bl	8018daa <memcpy>
  pbuf_ref(cseg->p);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fe fa91 	bl	800d070 <pbuf_ref>
  return cseg;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	0801bc50 	.word	0x0801bc50
 800eb5c:	0801c1a4 	.word	0x0801c1a4
 800eb60:	0801bc94 	.word	0x0801bc94

0800eb64 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	607a      	str	r2, [r7, #4]
 800eb70:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d109      	bne.n	800eb8c <tcp_recv_null+0x28>
 800eb78:	4b12      	ldr	r3, [pc, #72]	; (800ebc4 <tcp_recv_null+0x60>)
 800eb7a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800eb7e:	4912      	ldr	r1, [pc, #72]	; (800ebc8 <tcp_recv_null+0x64>)
 800eb80:	4812      	ldr	r0, [pc, #72]	; (800ebcc <tcp_recv_null+0x68>)
 800eb82:	f00a f9d7 	bl	8018f34 <iprintf>
 800eb86:	f06f 030f 	mvn.w	r3, #15
 800eb8a:	e016      	b.n	800ebba <tcp_recv_null+0x56>

  if (p != NULL) {
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d009      	beq.n	800eba6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	891b      	ldrh	r3, [r3, #8]
 800eb96:	4619      	mov	r1, r3
 800eb98:	68b8      	ldr	r0, [r7, #8]
 800eb9a:	f7ff f99d 	bl	800ded8 <tcp_recved>
    pbuf_free(p);
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f7fe f9c0 	bl	800cf24 <pbuf_free>
 800eba4:	e008      	b.n	800ebb8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800eba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d104      	bne.n	800ebb8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ebae:	68b8      	ldr	r0, [r7, #8]
 800ebb0:	f7fe fe72 	bl	800d898 <tcp_close>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	e000      	b.n	800ebba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ebb8:	2300      	movs	r3, #0
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	0801bc50 	.word	0x0801bc50
 800ebc8:	0801c1c0 	.word	0x0801c1c0
 800ebcc:	0801bc94 	.word	0x0801bc94

0800ebd0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b086      	sub	sp, #24
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ebda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	db01      	blt.n	800ebe6 <tcp_kill_prio+0x16>
 800ebe2:	79fb      	ldrb	r3, [r7, #7]
 800ebe4:	e000      	b.n	800ebe8 <tcp_kill_prio+0x18>
 800ebe6:	237f      	movs	r3, #127	; 0x7f
 800ebe8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ebea:	7afb      	ldrb	r3, [r7, #11]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d034      	beq.n	800ec5a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ebf0:	7afb      	ldrb	r3, [r7, #11]
 800ebf2:	3b01      	subs	r3, #1
 800ebf4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebfe:	4b19      	ldr	r3, [pc, #100]	; (800ec64 <tcp_kill_prio+0x94>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	617b      	str	r3, [r7, #20]
 800ec04:	e01f      	b.n	800ec46 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	7d5b      	ldrb	r3, [r3, #21]
 800ec0a:	7afa      	ldrb	r2, [r7, #11]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d80c      	bhi.n	800ec2a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ec14:	7afa      	ldrb	r2, [r7, #11]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d112      	bne.n	800ec40 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ec1a:	4b13      	ldr	r3, [pc, #76]	; (800ec68 <tcp_kill_prio+0x98>)
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	1ad3      	subs	r3, r2, r3
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d80a      	bhi.n	800ec40 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ec2a:	4b0f      	ldr	r3, [pc, #60]	; (800ec68 <tcp_kill_prio+0x98>)
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	6a1b      	ldr	r3, [r3, #32]
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	7d5b      	ldrb	r3, [r3, #21]
 800ec3e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	68db      	ldr	r3, [r3, #12]
 800ec44:	617b      	str	r3, [r7, #20]
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d1dc      	bne.n	800ec06 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d004      	beq.n	800ec5c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec52:	6938      	ldr	r0, [r7, #16]
 800ec54:	f7fe ff66 	bl	800db24 <tcp_abort>
 800ec58:	e000      	b.n	800ec5c <tcp_kill_prio+0x8c>
    return;
 800ec5a:	bf00      	nop
  }
}
 800ec5c:	3718      	adds	r7, #24
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	20011598 	.word	0x20011598
 800ec68:	2001158c 	.word	0x2001158c

0800ec6c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b086      	sub	sp, #24
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	4603      	mov	r3, r0
 800ec74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ec76:	79fb      	ldrb	r3, [r7, #7]
 800ec78:	2b08      	cmp	r3, #8
 800ec7a:	d009      	beq.n	800ec90 <tcp_kill_state+0x24>
 800ec7c:	79fb      	ldrb	r3, [r7, #7]
 800ec7e:	2b09      	cmp	r3, #9
 800ec80:	d006      	beq.n	800ec90 <tcp_kill_state+0x24>
 800ec82:	4b1a      	ldr	r3, [pc, #104]	; (800ecec <tcp_kill_state+0x80>)
 800ec84:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ec88:	4919      	ldr	r1, [pc, #100]	; (800ecf0 <tcp_kill_state+0x84>)
 800ec8a:	481a      	ldr	r0, [pc, #104]	; (800ecf4 <tcp_kill_state+0x88>)
 800ec8c:	f00a f952 	bl	8018f34 <iprintf>

  inactivity = 0;
 800ec90:	2300      	movs	r3, #0
 800ec92:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ec94:	2300      	movs	r3, #0
 800ec96:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec98:	4b17      	ldr	r3, [pc, #92]	; (800ecf8 <tcp_kill_state+0x8c>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	617b      	str	r3, [r7, #20]
 800ec9e:	e017      	b.n	800ecd0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	7d1b      	ldrb	r3, [r3, #20]
 800eca4:	79fa      	ldrb	r2, [r7, #7]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d10f      	bne.n	800ecca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ecaa:	4b14      	ldr	r3, [pc, #80]	; (800ecfc <tcp_kill_state+0x90>)
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	6a1b      	ldr	r3, [r3, #32]
 800ecb2:	1ad3      	subs	r3, r2, r3
 800ecb4:	68fa      	ldr	r2, [r7, #12]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d807      	bhi.n	800ecca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ecba:	4b10      	ldr	r3, [pc, #64]	; (800ecfc <tcp_kill_state+0x90>)
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	6a1b      	ldr	r3, [r3, #32]
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	68db      	ldr	r3, [r3, #12]
 800ecce:	617b      	str	r3, [r7, #20]
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d1e4      	bne.n	800eca0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d003      	beq.n	800ece4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ecdc:	2100      	movs	r1, #0
 800ecde:	6938      	ldr	r0, [r7, #16]
 800ece0:	f7fe fe62 	bl	800d9a8 <tcp_abandon>
  }
}
 800ece4:	bf00      	nop
 800ece6:	3718      	adds	r7, #24
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	0801bc50 	.word	0x0801bc50
 800ecf0:	0801c1dc 	.word	0x0801c1dc
 800ecf4:	0801bc94 	.word	0x0801bc94
 800ecf8:	20011598 	.word	0x20011598
 800ecfc:	2001158c 	.word	0x2001158c

0800ed00 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ed06:	2300      	movs	r3, #0
 800ed08:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed0e:	4b12      	ldr	r3, [pc, #72]	; (800ed58 <tcp_kill_timewait+0x58>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	60fb      	str	r3, [r7, #12]
 800ed14:	e012      	b.n	800ed3c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ed16:	4b11      	ldr	r3, [pc, #68]	; (800ed5c <tcp_kill_timewait+0x5c>)
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6a1b      	ldr	r3, [r3, #32]
 800ed1e:	1ad3      	subs	r3, r2, r3
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d807      	bhi.n	800ed36 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ed26:	4b0d      	ldr	r3, [pc, #52]	; (800ed5c <tcp_kill_timewait+0x5c>)
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	6a1b      	ldr	r3, [r3, #32]
 800ed2e:	1ad3      	subs	r3, r2, r3
 800ed30:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	60fb      	str	r3, [r7, #12]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1e9      	bne.n	800ed16 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d002      	beq.n	800ed4e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed48:	68b8      	ldr	r0, [r7, #8]
 800ed4a:	f7fe feeb 	bl	800db24 <tcp_abort>
  }
}
 800ed4e:	bf00      	nop
 800ed50:	3710      	adds	r7, #16
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	2001159c 	.word	0x2001159c
 800ed5c:	2001158c 	.word	0x2001158c

0800ed60 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ed66:	4b10      	ldr	r3, [pc, #64]	; (800eda8 <tcp_handle_closepend+0x48>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ed6c:	e014      	b.n	800ed98 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	8b5b      	ldrh	r3, [r3, #26]
 800ed78:	f003 0308 	and.w	r3, r3, #8
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d009      	beq.n	800ed94 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	8b5b      	ldrh	r3, [r3, #26]
 800ed84:	f023 0308 	bic.w	r3, r3, #8
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7fe fd18 	bl	800d7c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d1e7      	bne.n	800ed6e <tcp_handle_closepend+0xe>
  }
}
 800ed9e:	bf00      	nop
 800eda0:	bf00      	nop
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	20011598 	.word	0x20011598

0800edac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	4603      	mov	r3, r0
 800edb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edb6:	2001      	movs	r0, #1
 800edb8:	f7fd f98e 	bl	800c0d8 <memp_malloc>
 800edbc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d126      	bne.n	800ee12 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800edc4:	f7ff ffcc 	bl	800ed60 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800edc8:	f7ff ff9a 	bl	800ed00 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edcc:	2001      	movs	r0, #1
 800edce:	f7fd f983 	bl	800c0d8 <memp_malloc>
 800edd2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d11b      	bne.n	800ee12 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800edda:	2009      	movs	r0, #9
 800eddc:	f7ff ff46 	bl	800ec6c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ede0:	2001      	movs	r0, #1
 800ede2:	f7fd f979 	bl	800c0d8 <memp_malloc>
 800ede6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d111      	bne.n	800ee12 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800edee:	2008      	movs	r0, #8
 800edf0:	f7ff ff3c 	bl	800ec6c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edf4:	2001      	movs	r0, #1
 800edf6:	f7fd f96f 	bl	800c0d8 <memp_malloc>
 800edfa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d107      	bne.n	800ee12 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ee02:	79fb      	ldrb	r3, [r7, #7]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7ff fee3 	bl	800ebd0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee0a:	2001      	movs	r0, #1
 800ee0c:	f7fd f964 	bl	800c0d8 <memp_malloc>
 800ee10:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d03f      	beq.n	800ee98 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ee18:	229c      	movs	r2, #156	; 0x9c
 800ee1a:	2100      	movs	r1, #0
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f009 ffec 	bl	8018dfa <memset>
    pcb->prio = prio;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	79fa      	ldrb	r2, [r7, #7]
 800ee26:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ee2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ee38:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	22ff      	movs	r2, #255	; 0xff
 800ee46:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ee4e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2206      	movs	r2, #6
 800ee54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2206      	movs	r2, #6
 800ee5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee64:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2201      	movs	r2, #1
 800ee6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ee6e:	4b0d      	ldr	r3, [pc, #52]	; (800eea4 <tcp_alloc+0xf8>)
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ee76:	4b0c      	ldr	r3, [pc, #48]	; (800eea8 <tcp_alloc+0xfc>)
 800ee78:	781a      	ldrb	r2, [r3, #0]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ee84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	4a08      	ldr	r2, [pc, #32]	; (800eeac <tcp_alloc+0x100>)
 800ee8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	4a07      	ldr	r2, [pc, #28]	; (800eeb0 <tcp_alloc+0x104>)
 800ee94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ee98:	68fb      	ldr	r3, [r7, #12]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	2001158c 	.word	0x2001158c
 800eea8:	200115a2 	.word	0x200115a2
 800eeac:	0800eb65 	.word	0x0800eb65
 800eeb0:	006ddd00 	.word	0x006ddd00

0800eeb4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	4603      	mov	r3, r0
 800eebc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800eebe:	2040      	movs	r0, #64	; 0x40
 800eec0:	f7ff ff74 	bl	800edac <tcp_alloc>
 800eec4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800eec6:	68fb      	ldr	r3, [r7, #12]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3710      	adds	r7, #16
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d002      	beq.n	800eee6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	683a      	ldr	r2, [r7, #0]
 800eee4:	611a      	str	r2, [r3, #16]
  }
}
 800eee6:	bf00      	nop
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
	...

0800eef4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00e      	beq.n	800ef22 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	7d1b      	ldrb	r3, [r3, #20]
 800ef08:	2b01      	cmp	r3, #1
 800ef0a:	d106      	bne.n	800ef1a <tcp_recv+0x26>
 800ef0c:	4b07      	ldr	r3, [pc, #28]	; (800ef2c <tcp_recv+0x38>)
 800ef0e:	f240 72df 	movw	r2, #2015	; 0x7df
 800ef12:	4907      	ldr	r1, [pc, #28]	; (800ef30 <tcp_recv+0x3c>)
 800ef14:	4807      	ldr	r0, [pc, #28]	; (800ef34 <tcp_recv+0x40>)
 800ef16:	f00a f80d 	bl	8018f34 <iprintf>
    pcb->recv = recv;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	683a      	ldr	r2, [r7, #0]
 800ef1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ef22:	bf00      	nop
 800ef24:	3708      	adds	r7, #8
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	0801bc50 	.word	0x0801bc50
 800ef30:	0801c1ec 	.word	0x0801c1ec
 800ef34:	0801bc94 	.word	0x0801bc94

0800ef38 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d00e      	beq.n	800ef66 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	7d1b      	ldrb	r3, [r3, #20]
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d106      	bne.n	800ef5e <tcp_sent+0x26>
 800ef50:	4b07      	ldr	r3, [pc, #28]	; (800ef70 <tcp_sent+0x38>)
 800ef52:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ef56:	4907      	ldr	r1, [pc, #28]	; (800ef74 <tcp_sent+0x3c>)
 800ef58:	4807      	ldr	r0, [pc, #28]	; (800ef78 <tcp_sent+0x40>)
 800ef5a:	f009 ffeb 	bl	8018f34 <iprintf>
    pcb->sent = sent;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	683a      	ldr	r2, [r7, #0]
 800ef62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ef66:	bf00      	nop
 800ef68:	3708      	adds	r7, #8
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	0801bc50 	.word	0x0801bc50
 800ef74:	0801c214 	.word	0x0801c214
 800ef78:	0801bc94 	.word	0x0801bc94

0800ef7c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00e      	beq.n	800efaa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	7d1b      	ldrb	r3, [r3, #20]
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d106      	bne.n	800efa2 <tcp_err+0x26>
 800ef94:	4b07      	ldr	r3, [pc, #28]	; (800efb4 <tcp_err+0x38>)
 800ef96:	f640 020d 	movw	r2, #2061	; 0x80d
 800ef9a:	4907      	ldr	r1, [pc, #28]	; (800efb8 <tcp_err+0x3c>)
 800ef9c:	4807      	ldr	r0, [pc, #28]	; (800efbc <tcp_err+0x40>)
 800ef9e:	f009 ffc9 	bl	8018f34 <iprintf>
    pcb->errf = err;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	683a      	ldr	r2, [r7, #0]
 800efa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800efaa:	bf00      	nop
 800efac:	3708      	adds	r7, #8
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	0801bc50 	.word	0x0801bc50
 800efb8:	0801c23c 	.word	0x0801c23c
 800efbc:	0801bc94 	.word	0x0801bc94

0800efc0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800efc0:	b480      	push	{r7}
 800efc2:	b085      	sub	sp, #20
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d008      	beq.n	800efe2 <tcp_accept+0x22>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	7d1b      	ldrb	r3, [r3, #20]
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d104      	bne.n	800efe2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	683a      	ldr	r2, [r7, #0]
 800efe0:	619a      	str	r2, [r3, #24]
  }
}
 800efe2:	bf00      	nop
 800efe4:	3714      	adds	r7, #20
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr
	...

0800eff0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	4613      	mov	r3, r2
 800effc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d107      	bne.n	800f014 <tcp_poll+0x24>
 800f004:	4b0e      	ldr	r3, [pc, #56]	; (800f040 <tcp_poll+0x50>)
 800f006:	f640 023d 	movw	r2, #2109	; 0x83d
 800f00a:	490e      	ldr	r1, [pc, #56]	; (800f044 <tcp_poll+0x54>)
 800f00c:	480e      	ldr	r0, [pc, #56]	; (800f048 <tcp_poll+0x58>)
 800f00e:	f009 ff91 	bl	8018f34 <iprintf>
 800f012:	e011      	b.n	800f038 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	7d1b      	ldrb	r3, [r3, #20]
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d106      	bne.n	800f02a <tcp_poll+0x3a>
 800f01c:	4b08      	ldr	r3, [pc, #32]	; (800f040 <tcp_poll+0x50>)
 800f01e:	f640 023e 	movw	r2, #2110	; 0x83e
 800f022:	490a      	ldr	r1, [pc, #40]	; (800f04c <tcp_poll+0x5c>)
 800f024:	4808      	ldr	r0, [pc, #32]	; (800f048 <tcp_poll+0x58>)
 800f026:	f009 ff85 	bl	8018f34 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	68ba      	ldr	r2, [r7, #8]
 800f02e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	79fa      	ldrb	r2, [r7, #7]
 800f036:	775a      	strb	r2, [r3, #29]
}
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	0801bc50 	.word	0x0801bc50
 800f044:	0801c264 	.word	0x0801c264
 800f048:	0801bc94 	.word	0x0801bc94
 800f04c:	0801c27c 	.word	0x0801c27c

0800f050 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d107      	bne.n	800f06e <tcp_pcb_purge+0x1e>
 800f05e:	4b21      	ldr	r3, [pc, #132]	; (800f0e4 <tcp_pcb_purge+0x94>)
 800f060:	f640 0251 	movw	r2, #2129	; 0x851
 800f064:	4920      	ldr	r1, [pc, #128]	; (800f0e8 <tcp_pcb_purge+0x98>)
 800f066:	4821      	ldr	r0, [pc, #132]	; (800f0ec <tcp_pcb_purge+0x9c>)
 800f068:	f009 ff64 	bl	8018f34 <iprintf>
 800f06c:	e037      	b.n	800f0de <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	7d1b      	ldrb	r3, [r3, #20]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d033      	beq.n	800f0de <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f07a:	2b0a      	cmp	r3, #10
 800f07c:	d02f      	beq.n	800f0de <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f082:	2b01      	cmp	r3, #1
 800f084:	d02b      	beq.n	800f0de <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d007      	beq.n	800f09e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f092:	4618      	mov	r0, r3
 800f094:	f7fd ff46 	bl	800cf24 <pbuf_free>
      pcb->refused_data = NULL;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d002      	beq.n	800f0ac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 f986 	bl	800f3b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0b2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7ff fcdb 	bl	800ea74 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7ff fcd6 	bl	800ea74 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	66da      	str	r2, [r3, #108]	; 0x6c
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f0de:	3708      	adds	r7, #8
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}
 800f0e4:	0801bc50 	.word	0x0801bc50
 800f0e8:	0801c29c 	.word	0x0801c29c
 800f0ec:	0801bc94 	.word	0x0801bc94

0800f0f0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d106      	bne.n	800f10e <tcp_pcb_remove+0x1e>
 800f100:	4b3e      	ldr	r3, [pc, #248]	; (800f1fc <tcp_pcb_remove+0x10c>)
 800f102:	f640 0283 	movw	r2, #2179	; 0x883
 800f106:	493e      	ldr	r1, [pc, #248]	; (800f200 <tcp_pcb_remove+0x110>)
 800f108:	483e      	ldr	r0, [pc, #248]	; (800f204 <tcp_pcb_remove+0x114>)
 800f10a:	f009 ff13 	bl	8018f34 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d106      	bne.n	800f122 <tcp_pcb_remove+0x32>
 800f114:	4b39      	ldr	r3, [pc, #228]	; (800f1fc <tcp_pcb_remove+0x10c>)
 800f116:	f640 0284 	movw	r2, #2180	; 0x884
 800f11a:	493b      	ldr	r1, [pc, #236]	; (800f208 <tcp_pcb_remove+0x118>)
 800f11c:	4839      	ldr	r0, [pc, #228]	; (800f204 <tcp_pcb_remove+0x114>)
 800f11e:	f009 ff09 	bl	8018f34 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	683a      	ldr	r2, [r7, #0]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d105      	bne.n	800f138 <tcp_pcb_remove+0x48>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	68da      	ldr	r2, [r3, #12]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	601a      	str	r2, [r3, #0]
 800f136:	e013      	b.n	800f160 <tcp_pcb_remove+0x70>
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	60fb      	str	r3, [r7, #12]
 800f13e:	e00c      	b.n	800f15a <tcp_pcb_remove+0x6a>
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	68db      	ldr	r3, [r3, #12]
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	429a      	cmp	r2, r3
 800f148:	d104      	bne.n	800f154 <tcp_pcb_remove+0x64>
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	68da      	ldr	r2, [r3, #12]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	60da      	str	r2, [r3, #12]
 800f152:	e005      	b.n	800f160 <tcp_pcb_remove+0x70>
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	60fb      	str	r3, [r7, #12]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d1ef      	bne.n	800f140 <tcp_pcb_remove+0x50>
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	2200      	movs	r2, #0
 800f164:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f166:	6838      	ldr	r0, [r7, #0]
 800f168:	f7ff ff72 	bl	800f050 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	7d1b      	ldrb	r3, [r3, #20]
 800f170:	2b0a      	cmp	r3, #10
 800f172:	d013      	beq.n	800f19c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d00f      	beq.n	800f19c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	8b5b      	ldrh	r3, [r3, #26]
 800f180:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f184:	2b00      	cmp	r3, #0
 800f186:	d009      	beq.n	800f19c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	8b5b      	ldrh	r3, [r3, #26]
 800f18c:	f043 0302 	orr.w	r3, r3, #2
 800f190:	b29a      	uxth	r2, r3
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f196:	6838      	ldr	r0, [r7, #0]
 800f198:	f003 fbc6 	bl	8012928 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	7d1b      	ldrb	r3, [r3, #20]
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d020      	beq.n	800f1e6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d006      	beq.n	800f1ba <tcp_pcb_remove+0xca>
 800f1ac:	4b13      	ldr	r3, [pc, #76]	; (800f1fc <tcp_pcb_remove+0x10c>)
 800f1ae:	f640 0293 	movw	r2, #2195	; 0x893
 800f1b2:	4916      	ldr	r1, [pc, #88]	; (800f20c <tcp_pcb_remove+0x11c>)
 800f1b4:	4813      	ldr	r0, [pc, #76]	; (800f204 <tcp_pcb_remove+0x114>)
 800f1b6:	f009 febd 	bl	8018f34 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d006      	beq.n	800f1d0 <tcp_pcb_remove+0xe0>
 800f1c2:	4b0e      	ldr	r3, [pc, #56]	; (800f1fc <tcp_pcb_remove+0x10c>)
 800f1c4:	f640 0294 	movw	r2, #2196	; 0x894
 800f1c8:	4911      	ldr	r1, [pc, #68]	; (800f210 <tcp_pcb_remove+0x120>)
 800f1ca:	480e      	ldr	r0, [pc, #56]	; (800f204 <tcp_pcb_remove+0x114>)
 800f1cc:	f009 feb2 	bl	8018f34 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d006      	beq.n	800f1e6 <tcp_pcb_remove+0xf6>
 800f1d8:	4b08      	ldr	r3, [pc, #32]	; (800f1fc <tcp_pcb_remove+0x10c>)
 800f1da:	f640 0296 	movw	r2, #2198	; 0x896
 800f1de:	490d      	ldr	r1, [pc, #52]	; (800f214 <tcp_pcb_remove+0x124>)
 800f1e0:	4808      	ldr	r0, [pc, #32]	; (800f204 <tcp_pcb_remove+0x114>)
 800f1e2:	f009 fea7 	bl	8018f34 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f1f2:	bf00      	nop
 800f1f4:	3710      	adds	r7, #16
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	0801bc50 	.word	0x0801bc50
 800f200:	0801c2b8 	.word	0x0801c2b8
 800f204:	0801bc94 	.word	0x0801bc94
 800f208:	0801c2d4 	.word	0x0801c2d4
 800f20c:	0801c2f4 	.word	0x0801c2f4
 800f210:	0801c30c 	.word	0x0801c30c
 800f214:	0801c328 	.word	0x0801c328

0800f218 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d106      	bne.n	800f234 <tcp_next_iss+0x1c>
 800f226:	4b0a      	ldr	r3, [pc, #40]	; (800f250 <tcp_next_iss+0x38>)
 800f228:	f640 02af 	movw	r2, #2223	; 0x8af
 800f22c:	4909      	ldr	r1, [pc, #36]	; (800f254 <tcp_next_iss+0x3c>)
 800f22e:	480a      	ldr	r0, [pc, #40]	; (800f258 <tcp_next_iss+0x40>)
 800f230:	f009 fe80 	bl	8018f34 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f234:	4b09      	ldr	r3, [pc, #36]	; (800f25c <tcp_next_iss+0x44>)
 800f236:	681a      	ldr	r2, [r3, #0]
 800f238:	4b09      	ldr	r3, [pc, #36]	; (800f260 <tcp_next_iss+0x48>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4413      	add	r3, r2
 800f23e:	4a07      	ldr	r2, [pc, #28]	; (800f25c <tcp_next_iss+0x44>)
 800f240:	6013      	str	r3, [r2, #0]
  return iss;
 800f242:	4b06      	ldr	r3, [pc, #24]	; (800f25c <tcp_next_iss+0x44>)
 800f244:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f246:	4618      	mov	r0, r3
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	0801bc50 	.word	0x0801bc50
 800f254:	0801c340 	.word	0x0801c340
 800f258:	0801bc94 	.word	0x0801bc94
 800f25c:	20000028 	.word	0x20000028
 800f260:	2001158c 	.word	0x2001158c

0800f264 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b086      	sub	sp, #24
 800f268:	af00      	add	r7, sp, #0
 800f26a:	4603      	mov	r3, r0
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	607a      	str	r2, [r7, #4]
 800f270:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d106      	bne.n	800f286 <tcp_eff_send_mss_netif+0x22>
 800f278:	4b14      	ldr	r3, [pc, #80]	; (800f2cc <tcp_eff_send_mss_netif+0x68>)
 800f27a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f27e:	4914      	ldr	r1, [pc, #80]	; (800f2d0 <tcp_eff_send_mss_netif+0x6c>)
 800f280:	4814      	ldr	r0, [pc, #80]	; (800f2d4 <tcp_eff_send_mss_netif+0x70>)
 800f282:	f009 fe57 	bl	8018f34 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d101      	bne.n	800f290 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f28c:	89fb      	ldrh	r3, [r7, #14]
 800f28e:	e019      	b.n	800f2c4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f294:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f296:	8afb      	ldrh	r3, [r7, #22]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d012      	beq.n	800f2c2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f29c:	2328      	movs	r3, #40	; 0x28
 800f29e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f2a0:	8afa      	ldrh	r2, [r7, #22]
 800f2a2:	8abb      	ldrh	r3, [r7, #20]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d904      	bls.n	800f2b2 <tcp_eff_send_mss_netif+0x4e>
 800f2a8:	8afa      	ldrh	r2, [r7, #22]
 800f2aa:	8abb      	ldrh	r3, [r7, #20]
 800f2ac:	1ad3      	subs	r3, r2, r3
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	e000      	b.n	800f2b4 <tcp_eff_send_mss_netif+0x50>
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f2b6:	8a7a      	ldrh	r2, [r7, #18]
 800f2b8:	89fb      	ldrh	r3, [r7, #14]
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	bf28      	it	cs
 800f2be:	4613      	movcs	r3, r2
 800f2c0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f2c2:	89fb      	ldrh	r3, [r7, #14]
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3718      	adds	r7, #24
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	0801bc50 	.word	0x0801bc50
 800f2d0:	0801c35c 	.word	0x0801c35c
 800f2d4:	0801bc94 	.word	0x0801bc94

0800f2d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b084      	sub	sp, #16
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d119      	bne.n	800f320 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f2ec:	4b10      	ldr	r3, [pc, #64]	; (800f330 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f2ee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f2f2:	4910      	ldr	r1, [pc, #64]	; (800f334 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f2f4:	4810      	ldr	r0, [pc, #64]	; (800f338 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f2f6:	f009 fe1d 	bl	8018f34 <iprintf>

  while (pcb != NULL) {
 800f2fa:	e011      	b.n	800f320 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	429a      	cmp	r2, r3
 800f306:	d108      	bne.n	800f31a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	68db      	ldr	r3, [r3, #12]
 800f30c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f7fe fc08 	bl	800db24 <tcp_abort>
      pcb = next;
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	60fb      	str	r3, [r7, #12]
 800f318:	e002      	b.n	800f320 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d1ea      	bne.n	800f2fc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f326:	bf00      	nop
 800f328:	bf00      	nop
 800f32a:	3710      	adds	r7, #16
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	0801bc50 	.word	0x0801bc50
 800f334:	0801c384 	.word	0x0801c384
 800f338:	0801bc94 	.word	0x0801bc94

0800f33c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d02a      	beq.n	800f3a2 <tcp_netif_ip_addr_changed+0x66>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d026      	beq.n	800f3a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f354:	4b15      	ldr	r3, [pc, #84]	; (800f3ac <tcp_netif_ip_addr_changed+0x70>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4619      	mov	r1, r3
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f7ff ffbc 	bl	800f2d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f360:	4b13      	ldr	r3, [pc, #76]	; (800f3b0 <tcp_netif_ip_addr_changed+0x74>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	4619      	mov	r1, r3
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f7ff ffb6 	bl	800f2d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d017      	beq.n	800f3a2 <tcp_netif_ip_addr_changed+0x66>
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d013      	beq.n	800f3a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f37a:	4b0e      	ldr	r3, [pc, #56]	; (800f3b4 <tcp_netif_ip_addr_changed+0x78>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	60fb      	str	r3, [r7, #12]
 800f380:	e00c      	b.n	800f39c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681a      	ldr	r2, [r3, #0]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d103      	bne.n	800f396 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	60fb      	str	r3, [r7, #12]
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d1ef      	bne.n	800f382 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f3a2:	bf00      	nop
 800f3a4:	3710      	adds	r7, #16
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	20011598 	.word	0x20011598
 800f3b0:	20011590 	.word	0x20011590
 800f3b4:	20011594 	.word	0x20011594

0800f3b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b082      	sub	sp, #8
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d007      	beq.n	800f3d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7ff fb51 	bl	800ea74 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f3d8:	bf00      	nop
 800f3da:	3708      	adds	r7, #8
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f3e0:	b590      	push	{r4, r7, lr}
 800f3e2:	b08d      	sub	sp, #52	; 0x34
 800f3e4:	af04      	add	r7, sp, #16
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d105      	bne.n	800f3fc <tcp_input+0x1c>
 800f3f0:	4b9b      	ldr	r3, [pc, #620]	; (800f660 <tcp_input+0x280>)
 800f3f2:	2283      	movs	r2, #131	; 0x83
 800f3f4:	499b      	ldr	r1, [pc, #620]	; (800f664 <tcp_input+0x284>)
 800f3f6:	489c      	ldr	r0, [pc, #624]	; (800f668 <tcp_input+0x288>)
 800f3f8:	f009 fd9c 	bl	8018f34 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	4a9a      	ldr	r2, [pc, #616]	; (800f66c <tcp_input+0x28c>)
 800f402:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	895b      	ldrh	r3, [r3, #10]
 800f408:	2b13      	cmp	r3, #19
 800f40a:	f240 83d1 	bls.w	800fbb0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f40e:	4b98      	ldr	r3, [pc, #608]	; (800f670 <tcp_input+0x290>)
 800f410:	695b      	ldr	r3, [r3, #20]
 800f412:	4a97      	ldr	r2, [pc, #604]	; (800f670 <tcp_input+0x290>)
 800f414:	6812      	ldr	r2, [r2, #0]
 800f416:	4611      	mov	r1, r2
 800f418:	4618      	mov	r0, r3
 800f41a:	f008 fa61 	bl	80178e0 <ip4_addr_isbroadcast_u32>
 800f41e:	4603      	mov	r3, r0
 800f420:	2b00      	cmp	r3, #0
 800f422:	f040 83c7 	bne.w	800fbb4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f426:	4b92      	ldr	r3, [pc, #584]	; (800f670 <tcp_input+0x290>)
 800f428:	695b      	ldr	r3, [r3, #20]
 800f42a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f42e:	2be0      	cmp	r3, #224	; 0xe0
 800f430:	f000 83c0 	beq.w	800fbb4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f434:	4b8d      	ldr	r3, [pc, #564]	; (800f66c <tcp_input+0x28c>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	899b      	ldrh	r3, [r3, #12]
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7fc f93d 	bl	800b6bc <lwip_htons>
 800f442:	4603      	mov	r3, r0
 800f444:	0b1b      	lsrs	r3, r3, #12
 800f446:	b29b      	uxth	r3, r3
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f44e:	7cbb      	ldrb	r3, [r7, #18]
 800f450:	2b13      	cmp	r3, #19
 800f452:	f240 83b1 	bls.w	800fbb8 <tcp_input+0x7d8>
 800f456:	7cbb      	ldrb	r3, [r7, #18]
 800f458:	b29a      	uxth	r2, r3
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	891b      	ldrh	r3, [r3, #8]
 800f45e:	429a      	cmp	r2, r3
 800f460:	f200 83aa 	bhi.w	800fbb8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f464:	7cbb      	ldrb	r3, [r7, #18]
 800f466:	b29b      	uxth	r3, r3
 800f468:	3b14      	subs	r3, #20
 800f46a:	b29a      	uxth	r2, r3
 800f46c:	4b81      	ldr	r3, [pc, #516]	; (800f674 <tcp_input+0x294>)
 800f46e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f470:	4b81      	ldr	r3, [pc, #516]	; (800f678 <tcp_input+0x298>)
 800f472:	2200      	movs	r2, #0
 800f474:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	895a      	ldrh	r2, [r3, #10]
 800f47a:	7cbb      	ldrb	r3, [r7, #18]
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	429a      	cmp	r2, r3
 800f480:	d309      	bcc.n	800f496 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f482:	4b7c      	ldr	r3, [pc, #496]	; (800f674 <tcp_input+0x294>)
 800f484:	881a      	ldrh	r2, [r3, #0]
 800f486:	4b7d      	ldr	r3, [pc, #500]	; (800f67c <tcp_input+0x29c>)
 800f488:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f48a:	7cbb      	ldrb	r3, [r7, #18]
 800f48c:	4619      	mov	r1, r3
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f7fd fcc2 	bl	800ce18 <pbuf_remove_header>
 800f494:	e04e      	b.n	800f534 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d105      	bne.n	800f4aa <tcp_input+0xca>
 800f49e:	4b70      	ldr	r3, [pc, #448]	; (800f660 <tcp_input+0x280>)
 800f4a0:	22c2      	movs	r2, #194	; 0xc2
 800f4a2:	4977      	ldr	r1, [pc, #476]	; (800f680 <tcp_input+0x2a0>)
 800f4a4:	4870      	ldr	r0, [pc, #448]	; (800f668 <tcp_input+0x288>)
 800f4a6:	f009 fd45 	bl	8018f34 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f4aa:	2114      	movs	r1, #20
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f7fd fcb3 	bl	800ce18 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	895a      	ldrh	r2, [r3, #10]
 800f4b6:	4b71      	ldr	r3, [pc, #452]	; (800f67c <tcp_input+0x29c>)
 800f4b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f4ba:	4b6e      	ldr	r3, [pc, #440]	; (800f674 <tcp_input+0x294>)
 800f4bc:	881a      	ldrh	r2, [r3, #0]
 800f4be:	4b6f      	ldr	r3, [pc, #444]	; (800f67c <tcp_input+0x29c>)
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	1ad3      	subs	r3, r2, r3
 800f4c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f4c6:	4b6d      	ldr	r3, [pc, #436]	; (800f67c <tcp_input+0x29c>)
 800f4c8:	881b      	ldrh	r3, [r3, #0]
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f7fd fca3 	bl	800ce18 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	895b      	ldrh	r3, [r3, #10]
 800f4d8:	8a3a      	ldrh	r2, [r7, #16]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	f200 836e 	bhi.w	800fbbc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	4a64      	ldr	r2, [pc, #400]	; (800f678 <tcp_input+0x298>)
 800f4e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	8a3a      	ldrh	r2, [r7, #16]
 800f4f0:	4611      	mov	r1, r2
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fd fc90 	bl	800ce18 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	891a      	ldrh	r2, [r3, #8]
 800f4fc:	8a3b      	ldrh	r3, [r7, #16]
 800f4fe:	1ad3      	subs	r3, r2, r3
 800f500:	b29a      	uxth	r2, r3
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	895b      	ldrh	r3, [r3, #10]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d005      	beq.n	800f51a <tcp_input+0x13a>
 800f50e:	4b54      	ldr	r3, [pc, #336]	; (800f660 <tcp_input+0x280>)
 800f510:	22df      	movs	r2, #223	; 0xdf
 800f512:	495c      	ldr	r1, [pc, #368]	; (800f684 <tcp_input+0x2a4>)
 800f514:	4854      	ldr	r0, [pc, #336]	; (800f668 <tcp_input+0x288>)
 800f516:	f009 fd0d 	bl	8018f34 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	891a      	ldrh	r2, [r3, #8]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	891b      	ldrh	r3, [r3, #8]
 800f524:	429a      	cmp	r2, r3
 800f526:	d005      	beq.n	800f534 <tcp_input+0x154>
 800f528:	4b4d      	ldr	r3, [pc, #308]	; (800f660 <tcp_input+0x280>)
 800f52a:	22e0      	movs	r2, #224	; 0xe0
 800f52c:	4956      	ldr	r1, [pc, #344]	; (800f688 <tcp_input+0x2a8>)
 800f52e:	484e      	ldr	r0, [pc, #312]	; (800f668 <tcp_input+0x288>)
 800f530:	f009 fd00 	bl	8018f34 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f534:	4b4d      	ldr	r3, [pc, #308]	; (800f66c <tcp_input+0x28c>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	881b      	ldrh	r3, [r3, #0]
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	4a4b      	ldr	r2, [pc, #300]	; (800f66c <tcp_input+0x28c>)
 800f53e:	6814      	ldr	r4, [r2, #0]
 800f540:	4618      	mov	r0, r3
 800f542:	f7fc f8bb 	bl	800b6bc <lwip_htons>
 800f546:	4603      	mov	r3, r0
 800f548:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f54a:	4b48      	ldr	r3, [pc, #288]	; (800f66c <tcp_input+0x28c>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	885b      	ldrh	r3, [r3, #2]
 800f550:	b29b      	uxth	r3, r3
 800f552:	4a46      	ldr	r2, [pc, #280]	; (800f66c <tcp_input+0x28c>)
 800f554:	6814      	ldr	r4, [r2, #0]
 800f556:	4618      	mov	r0, r3
 800f558:	f7fc f8b0 	bl	800b6bc <lwip_htons>
 800f55c:	4603      	mov	r3, r0
 800f55e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f560:	4b42      	ldr	r3, [pc, #264]	; (800f66c <tcp_input+0x28c>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	4a41      	ldr	r2, [pc, #260]	; (800f66c <tcp_input+0x28c>)
 800f568:	6814      	ldr	r4, [r2, #0]
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7fc f8bb 	bl	800b6e6 <lwip_htonl>
 800f570:	4603      	mov	r3, r0
 800f572:	6063      	str	r3, [r4, #4]
 800f574:	6863      	ldr	r3, [r4, #4]
 800f576:	4a45      	ldr	r2, [pc, #276]	; (800f68c <tcp_input+0x2ac>)
 800f578:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f57a:	4b3c      	ldr	r3, [pc, #240]	; (800f66c <tcp_input+0x28c>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	4a3a      	ldr	r2, [pc, #232]	; (800f66c <tcp_input+0x28c>)
 800f582:	6814      	ldr	r4, [r2, #0]
 800f584:	4618      	mov	r0, r3
 800f586:	f7fc f8ae 	bl	800b6e6 <lwip_htonl>
 800f58a:	4603      	mov	r3, r0
 800f58c:	60a3      	str	r3, [r4, #8]
 800f58e:	68a3      	ldr	r3, [r4, #8]
 800f590:	4a3f      	ldr	r2, [pc, #252]	; (800f690 <tcp_input+0x2b0>)
 800f592:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f594:	4b35      	ldr	r3, [pc, #212]	; (800f66c <tcp_input+0x28c>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	89db      	ldrh	r3, [r3, #14]
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	4a33      	ldr	r2, [pc, #204]	; (800f66c <tcp_input+0x28c>)
 800f59e:	6814      	ldr	r4, [r2, #0]
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7fc f88b 	bl	800b6bc <lwip_htons>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f5aa:	4b30      	ldr	r3, [pc, #192]	; (800f66c <tcp_input+0x28c>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	899b      	ldrh	r3, [r3, #12]
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7fc f882 	bl	800b6bc <lwip_htons>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5c0:	b2da      	uxtb	r2, r3
 800f5c2:	4b34      	ldr	r3, [pc, #208]	; (800f694 <tcp_input+0x2b4>)
 800f5c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	891a      	ldrh	r2, [r3, #8]
 800f5ca:	4b33      	ldr	r3, [pc, #204]	; (800f698 <tcp_input+0x2b8>)
 800f5cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f5ce:	4b31      	ldr	r3, [pc, #196]	; (800f694 <tcp_input+0x2b4>)
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	f003 0303 	and.w	r3, r3, #3
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d00c      	beq.n	800f5f4 <tcp_input+0x214>
    tcplen++;
 800f5da:	4b2f      	ldr	r3, [pc, #188]	; (800f698 <tcp_input+0x2b8>)
 800f5dc:	881b      	ldrh	r3, [r3, #0]
 800f5de:	3301      	adds	r3, #1
 800f5e0:	b29a      	uxth	r2, r3
 800f5e2:	4b2d      	ldr	r3, [pc, #180]	; (800f698 <tcp_input+0x2b8>)
 800f5e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	891a      	ldrh	r2, [r3, #8]
 800f5ea:	4b2b      	ldr	r3, [pc, #172]	; (800f698 <tcp_input+0x2b8>)
 800f5ec:	881b      	ldrh	r3, [r3, #0]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	f200 82e6 	bhi.w	800fbc0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5f8:	4b28      	ldr	r3, [pc, #160]	; (800f69c <tcp_input+0x2bc>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	61fb      	str	r3, [r7, #28]
 800f5fe:	e09d      	b.n	800f73c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	7d1b      	ldrb	r3, [r3, #20]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d105      	bne.n	800f614 <tcp_input+0x234>
 800f608:	4b15      	ldr	r3, [pc, #84]	; (800f660 <tcp_input+0x280>)
 800f60a:	22fb      	movs	r2, #251	; 0xfb
 800f60c:	4924      	ldr	r1, [pc, #144]	; (800f6a0 <tcp_input+0x2c0>)
 800f60e:	4816      	ldr	r0, [pc, #88]	; (800f668 <tcp_input+0x288>)
 800f610:	f009 fc90 	bl	8018f34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f614:	69fb      	ldr	r3, [r7, #28]
 800f616:	7d1b      	ldrb	r3, [r3, #20]
 800f618:	2b0a      	cmp	r3, #10
 800f61a:	d105      	bne.n	800f628 <tcp_input+0x248>
 800f61c:	4b10      	ldr	r3, [pc, #64]	; (800f660 <tcp_input+0x280>)
 800f61e:	22fc      	movs	r2, #252	; 0xfc
 800f620:	4920      	ldr	r1, [pc, #128]	; (800f6a4 <tcp_input+0x2c4>)
 800f622:	4811      	ldr	r0, [pc, #68]	; (800f668 <tcp_input+0x288>)
 800f624:	f009 fc86 	bl	8018f34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	7d1b      	ldrb	r3, [r3, #20]
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d105      	bne.n	800f63c <tcp_input+0x25c>
 800f630:	4b0b      	ldr	r3, [pc, #44]	; (800f660 <tcp_input+0x280>)
 800f632:	22fd      	movs	r2, #253	; 0xfd
 800f634:	491c      	ldr	r1, [pc, #112]	; (800f6a8 <tcp_input+0x2c8>)
 800f636:	480c      	ldr	r0, [pc, #48]	; (800f668 <tcp_input+0x288>)
 800f638:	f009 fc7c 	bl	8018f34 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	7a1b      	ldrb	r3, [r3, #8]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d033      	beq.n	800f6ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	7a1a      	ldrb	r2, [r3, #8]
 800f648:	4b09      	ldr	r3, [pc, #36]	; (800f670 <tcp_input+0x290>)
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f650:	3301      	adds	r3, #1
 800f652:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f654:	429a      	cmp	r2, r3
 800f656:	d029      	beq.n	800f6ac <tcp_input+0x2cc>
      prev = pcb;
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	61bb      	str	r3, [r7, #24]
      continue;
 800f65c:	e06b      	b.n	800f736 <tcp_input+0x356>
 800f65e:	bf00      	nop
 800f660:	0801c3b8 	.word	0x0801c3b8
 800f664:	0801c3ec 	.word	0x0801c3ec
 800f668:	0801c404 	.word	0x0801c404
 800f66c:	200115b4 	.word	0x200115b4
 800f670:	2000de18 	.word	0x2000de18
 800f674:	200115b8 	.word	0x200115b8
 800f678:	200115bc 	.word	0x200115bc
 800f67c:	200115ba 	.word	0x200115ba
 800f680:	0801c42c 	.word	0x0801c42c
 800f684:	0801c43c 	.word	0x0801c43c
 800f688:	0801c448 	.word	0x0801c448
 800f68c:	200115c4 	.word	0x200115c4
 800f690:	200115c8 	.word	0x200115c8
 800f694:	200115d0 	.word	0x200115d0
 800f698:	200115ce 	.word	0x200115ce
 800f69c:	20011598 	.word	0x20011598
 800f6a0:	0801c468 	.word	0x0801c468
 800f6a4:	0801c490 	.word	0x0801c490
 800f6a8:	0801c4bc 	.word	0x0801c4bc
    }

    if (pcb->remote_port == tcphdr->src &&
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	8b1a      	ldrh	r2, [r3, #24]
 800f6b0:	4b72      	ldr	r3, [pc, #456]	; (800f87c <tcp_input+0x49c>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	881b      	ldrh	r3, [r3, #0]
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d13a      	bne.n	800f732 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	8ada      	ldrh	r2, [r3, #22]
 800f6c0:	4b6e      	ldr	r3, [pc, #440]	; (800f87c <tcp_input+0x49c>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	885b      	ldrh	r3, [r3, #2]
 800f6c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d132      	bne.n	800f732 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	685a      	ldr	r2, [r3, #4]
 800f6d0:	4b6b      	ldr	r3, [pc, #428]	; (800f880 <tcp_input+0x4a0>)
 800f6d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d12c      	bne.n	800f732 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	4b68      	ldr	r3, [pc, #416]	; (800f880 <tcp_input+0x4a0>)
 800f6de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d126      	bne.n	800f732 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	69fa      	ldr	r2, [r7, #28]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d106      	bne.n	800f6fc <tcp_input+0x31c>
 800f6ee:	4b65      	ldr	r3, [pc, #404]	; (800f884 <tcp_input+0x4a4>)
 800f6f0:	f240 120d 	movw	r2, #269	; 0x10d
 800f6f4:	4964      	ldr	r1, [pc, #400]	; (800f888 <tcp_input+0x4a8>)
 800f6f6:	4865      	ldr	r0, [pc, #404]	; (800f88c <tcp_input+0x4ac>)
 800f6f8:	f009 fc1c 	bl	8018f34 <iprintf>
      if (prev != NULL) {
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d00a      	beq.n	800f718 <tcp_input+0x338>
        prev->next = pcb->next;
 800f702:	69fb      	ldr	r3, [r7, #28]
 800f704:	68da      	ldr	r2, [r3, #12]
 800f706:	69bb      	ldr	r3, [r7, #24]
 800f708:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f70a:	4b61      	ldr	r3, [pc, #388]	; (800f890 <tcp_input+0x4b0>)
 800f70c:	681a      	ldr	r2, [r3, #0]
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f712:	4a5f      	ldr	r2, [pc, #380]	; (800f890 <tcp_input+0x4b0>)
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	69fa      	ldr	r2, [r7, #28]
 800f71e:	429a      	cmp	r2, r3
 800f720:	d111      	bne.n	800f746 <tcp_input+0x366>
 800f722:	4b58      	ldr	r3, [pc, #352]	; (800f884 <tcp_input+0x4a4>)
 800f724:	f240 1215 	movw	r2, #277	; 0x115
 800f728:	495a      	ldr	r1, [pc, #360]	; (800f894 <tcp_input+0x4b4>)
 800f72a:	4858      	ldr	r0, [pc, #352]	; (800f88c <tcp_input+0x4ac>)
 800f72c:	f009 fc02 	bl	8018f34 <iprintf>
      break;
 800f730:	e009      	b.n	800f746 <tcp_input+0x366>
    }
    prev = pcb;
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	68db      	ldr	r3, [r3, #12]
 800f73a:	61fb      	str	r3, [r7, #28]
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	f47f af5e 	bne.w	800f600 <tcp_input+0x220>
 800f744:	e000      	b.n	800f748 <tcp_input+0x368>
      break;
 800f746:	bf00      	nop
  }

  if (pcb == NULL) {
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	f040 80aa 	bne.w	800f8a4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f750:	4b51      	ldr	r3, [pc, #324]	; (800f898 <tcp_input+0x4b8>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	61fb      	str	r3, [r7, #28]
 800f756:	e03f      	b.n	800f7d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	7d1b      	ldrb	r3, [r3, #20]
 800f75c:	2b0a      	cmp	r3, #10
 800f75e:	d006      	beq.n	800f76e <tcp_input+0x38e>
 800f760:	4b48      	ldr	r3, [pc, #288]	; (800f884 <tcp_input+0x4a4>)
 800f762:	f240 121f 	movw	r2, #287	; 0x11f
 800f766:	494d      	ldr	r1, [pc, #308]	; (800f89c <tcp_input+0x4bc>)
 800f768:	4848      	ldr	r0, [pc, #288]	; (800f88c <tcp_input+0x4ac>)
 800f76a:	f009 fbe3 	bl	8018f34 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	7a1b      	ldrb	r3, [r3, #8]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d009      	beq.n	800f78a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	7a1a      	ldrb	r2, [r3, #8]
 800f77a:	4b41      	ldr	r3, [pc, #260]	; (800f880 <tcp_input+0x4a0>)
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f782:	3301      	adds	r3, #1
 800f784:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f786:	429a      	cmp	r2, r3
 800f788:	d122      	bne.n	800f7d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f78a:	69fb      	ldr	r3, [r7, #28]
 800f78c:	8b1a      	ldrh	r2, [r3, #24]
 800f78e:	4b3b      	ldr	r3, [pc, #236]	; (800f87c <tcp_input+0x49c>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	881b      	ldrh	r3, [r3, #0]
 800f794:	b29b      	uxth	r3, r3
 800f796:	429a      	cmp	r2, r3
 800f798:	d11b      	bne.n	800f7d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	8ada      	ldrh	r2, [r3, #22]
 800f79e:	4b37      	ldr	r3, [pc, #220]	; (800f87c <tcp_input+0x49c>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	885b      	ldrh	r3, [r3, #2]
 800f7a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d113      	bne.n	800f7d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	685a      	ldr	r2, [r3, #4]
 800f7ae:	4b34      	ldr	r3, [pc, #208]	; (800f880 <tcp_input+0x4a0>)
 800f7b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d10d      	bne.n	800f7d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f7b6:	69fb      	ldr	r3, [r7, #28]
 800f7b8:	681a      	ldr	r2, [r3, #0]
 800f7ba:	4b31      	ldr	r3, [pc, #196]	; (800f880 <tcp_input+0x4a0>)
 800f7bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d107      	bne.n	800f7d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f7c2:	69f8      	ldr	r0, [r7, #28]
 800f7c4:	f000 fb56 	bl	800fe74 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7fd fbab 	bl	800cf24 <pbuf_free>
        return;
 800f7ce:	e1fd      	b.n	800fbcc <tcp_input+0x7ec>
        continue;
 800f7d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7d2:	69fb      	ldr	r3, [r7, #28]
 800f7d4:	68db      	ldr	r3, [r3, #12]
 800f7d6:	61fb      	str	r3, [r7, #28]
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d1bc      	bne.n	800f758 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f7e2:	4b2f      	ldr	r3, [pc, #188]	; (800f8a0 <tcp_input+0x4c0>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	617b      	str	r3, [r7, #20]
 800f7e8:	e02a      	b.n	800f840 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	7a1b      	ldrb	r3, [r3, #8]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00c      	beq.n	800f80c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	7a1a      	ldrb	r2, [r3, #8]
 800f7f6:	4b22      	ldr	r3, [pc, #136]	; (800f880 <tcp_input+0x4a0>)
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f7fe:	3301      	adds	r3, #1
 800f800:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f802:	429a      	cmp	r2, r3
 800f804:	d002      	beq.n	800f80c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	61bb      	str	r3, [r7, #24]
        continue;
 800f80a:	e016      	b.n	800f83a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	8ada      	ldrh	r2, [r3, #22]
 800f810:	4b1a      	ldr	r3, [pc, #104]	; (800f87c <tcp_input+0x49c>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	885b      	ldrh	r3, [r3, #2]
 800f816:	b29b      	uxth	r3, r3
 800f818:	429a      	cmp	r2, r3
 800f81a:	d10c      	bne.n	800f836 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	681a      	ldr	r2, [r3, #0]
 800f820:	4b17      	ldr	r3, [pc, #92]	; (800f880 <tcp_input+0x4a0>)
 800f822:	695b      	ldr	r3, [r3, #20]
 800f824:	429a      	cmp	r2, r3
 800f826:	d00f      	beq.n	800f848 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d00d      	beq.n	800f84a <tcp_input+0x46a>
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d009      	beq.n	800f84a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	617b      	str	r3, [r7, #20]
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d1d1      	bne.n	800f7ea <tcp_input+0x40a>
 800f846:	e000      	b.n	800f84a <tcp_input+0x46a>
            break;
 800f848:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d029      	beq.n	800f8a4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f850:	69bb      	ldr	r3, [r7, #24]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d00a      	beq.n	800f86c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	68da      	ldr	r2, [r3, #12]
 800f85a:	69bb      	ldr	r3, [r7, #24]
 800f85c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f85e:	4b10      	ldr	r3, [pc, #64]	; (800f8a0 <tcp_input+0x4c0>)
 800f860:	681a      	ldr	r2, [r3, #0]
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f866:	4a0e      	ldr	r2, [pc, #56]	; (800f8a0 <tcp_input+0x4c0>)
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f86c:	6978      	ldr	r0, [r7, #20]
 800f86e:	f000 fa03 	bl	800fc78 <tcp_listen_input>
      }
      pbuf_free(p);
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f7fd fb56 	bl	800cf24 <pbuf_free>
      return;
 800f878:	e1a8      	b.n	800fbcc <tcp_input+0x7ec>
 800f87a:	bf00      	nop
 800f87c:	200115b4 	.word	0x200115b4
 800f880:	2000de18 	.word	0x2000de18
 800f884:	0801c3b8 	.word	0x0801c3b8
 800f888:	0801c4e4 	.word	0x0801c4e4
 800f88c:	0801c404 	.word	0x0801c404
 800f890:	20011598 	.word	0x20011598
 800f894:	0801c510 	.word	0x0801c510
 800f898:	2001159c 	.word	0x2001159c
 800f89c:	0801c53c 	.word	0x0801c53c
 800f8a0:	20011594 	.word	0x20011594
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	f000 8158 	beq.w	800fb5c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f8ac:	4b95      	ldr	r3, [pc, #596]	; (800fb04 <tcp_input+0x724>)
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	891a      	ldrh	r2, [r3, #8]
 800f8b6:	4b93      	ldr	r3, [pc, #588]	; (800fb04 <tcp_input+0x724>)
 800f8b8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f8ba:	4a92      	ldr	r2, [pc, #584]	; (800fb04 <tcp_input+0x724>)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f8c0:	4b91      	ldr	r3, [pc, #580]	; (800fb08 <tcp_input+0x728>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	4a8f      	ldr	r2, [pc, #572]	; (800fb04 <tcp_input+0x724>)
 800f8c6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f8c8:	4b90      	ldr	r3, [pc, #576]	; (800fb0c <tcp_input+0x72c>)
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f8ce:	4b90      	ldr	r3, [pc, #576]	; (800fb10 <tcp_input+0x730>)
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f8d4:	4b8f      	ldr	r3, [pc, #572]	; (800fb14 <tcp_input+0x734>)
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f8da:	4b8f      	ldr	r3, [pc, #572]	; (800fb18 <tcp_input+0x738>)
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	f003 0308 	and.w	r3, r3, #8
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d006      	beq.n	800f8f4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	7b5b      	ldrb	r3, [r3, #13]
 800f8ea:	f043 0301 	orr.w	r3, r3, #1
 800f8ee:	b2da      	uxtb	r2, r3
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f8f4:	69fb      	ldr	r3, [r7, #28]
 800f8f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d017      	beq.n	800f92c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f8fc:	69f8      	ldr	r0, [r7, #28]
 800f8fe:	f7ff f83d 	bl	800e97c <tcp_process_refused_data>
 800f902:	4603      	mov	r3, r0
 800f904:	f113 0f0d 	cmn.w	r3, #13
 800f908:	d007      	beq.n	800f91a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d00c      	beq.n	800f92c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f912:	4b82      	ldr	r3, [pc, #520]	; (800fb1c <tcp_input+0x73c>)
 800f914:	881b      	ldrh	r3, [r3, #0]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d008      	beq.n	800f92c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f91e:	2b00      	cmp	r3, #0
 800f920:	f040 80e3 	bne.w	800faea <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f924:	69f8      	ldr	r0, [r7, #28]
 800f926:	f003 fe05 	bl	8013534 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f92a:	e0de      	b.n	800faea <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f92c:	4a7c      	ldr	r2, [pc, #496]	; (800fb20 <tcp_input+0x740>)
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f932:	69f8      	ldr	r0, [r7, #28]
 800f934:	f000 fb18 	bl	800ff68 <tcp_process>
 800f938:	4603      	mov	r3, r0
 800f93a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f93c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f940:	f113 0f0d 	cmn.w	r3, #13
 800f944:	f000 80d3 	beq.w	800faee <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f948:	4b71      	ldr	r3, [pc, #452]	; (800fb10 <tcp_input+0x730>)
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	f003 0308 	and.w	r3, r3, #8
 800f950:	2b00      	cmp	r3, #0
 800f952:	d015      	beq.n	800f980 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f954:	69fb      	ldr	r3, [r7, #28]
 800f956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d008      	beq.n	800f970 <tcp_input+0x590>
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f964:	69fa      	ldr	r2, [r7, #28]
 800f966:	6912      	ldr	r2, [r2, #16]
 800f968:	f06f 010d 	mvn.w	r1, #13
 800f96c:	4610      	mov	r0, r2
 800f96e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f970:	69f9      	ldr	r1, [r7, #28]
 800f972:	486c      	ldr	r0, [pc, #432]	; (800fb24 <tcp_input+0x744>)
 800f974:	f7ff fbbc 	bl	800f0f0 <tcp_pcb_remove>
        tcp_free(pcb);
 800f978:	69f8      	ldr	r0, [r7, #28]
 800f97a:	f7fd fd8f 	bl	800d49c <tcp_free>
 800f97e:	e0da      	b.n	800fb36 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f980:	2300      	movs	r3, #0
 800f982:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f984:	4b63      	ldr	r3, [pc, #396]	; (800fb14 <tcp_input+0x734>)
 800f986:	881b      	ldrh	r3, [r3, #0]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d01d      	beq.n	800f9c8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f98c:	4b61      	ldr	r3, [pc, #388]	; (800fb14 <tcp_input+0x734>)
 800f98e:	881b      	ldrh	r3, [r3, #0]
 800f990:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d00a      	beq.n	800f9b2 <tcp_input+0x5d2>
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9a2:	69fa      	ldr	r2, [r7, #28]
 800f9a4:	6910      	ldr	r0, [r2, #16]
 800f9a6:	89fa      	ldrh	r2, [r7, #14]
 800f9a8:	69f9      	ldr	r1, [r7, #28]
 800f9aa:	4798      	blx	r3
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	74fb      	strb	r3, [r7, #19]
 800f9b0:	e001      	b.n	800f9b6 <tcp_input+0x5d6>
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f9b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9ba:	f113 0f0d 	cmn.w	r3, #13
 800f9be:	f000 8098 	beq.w	800faf2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f9c2:	4b54      	ldr	r3, [pc, #336]	; (800fb14 <tcp_input+0x734>)
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f9c8:	69f8      	ldr	r0, [r7, #28]
 800f9ca:	f000 f915 	bl	800fbf8 <tcp_input_delayed_close>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	f040 8090 	bne.w	800faf6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f9d6:	4b4d      	ldr	r3, [pc, #308]	; (800fb0c <tcp_input+0x72c>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d041      	beq.n	800fa62 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f9de:	69fb      	ldr	r3, [r7, #28]
 800f9e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d006      	beq.n	800f9f4 <tcp_input+0x614>
 800f9e6:	4b50      	ldr	r3, [pc, #320]	; (800fb28 <tcp_input+0x748>)
 800f9e8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f9ec:	494f      	ldr	r1, [pc, #316]	; (800fb2c <tcp_input+0x74c>)
 800f9ee:	4850      	ldr	r0, [pc, #320]	; (800fb30 <tcp_input+0x750>)
 800f9f0:	f009 faa0 	bl	8018f34 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	8b5b      	ldrh	r3, [r3, #26]
 800f9f8:	f003 0310 	and.w	r3, r3, #16
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d008      	beq.n	800fa12 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fa00:	4b42      	ldr	r3, [pc, #264]	; (800fb0c <tcp_input+0x72c>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fd fa8d 	bl	800cf24 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fa0a:	69f8      	ldr	r0, [r7, #28]
 800fa0c:	f7fe f88a 	bl	800db24 <tcp_abort>
            goto aborted;
 800fa10:	e091      	b.n	800fb36 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d00c      	beq.n	800fa36 <tcp_input+0x656>
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	6918      	ldr	r0, [r3, #16]
 800fa26:	4b39      	ldr	r3, [pc, #228]	; (800fb0c <tcp_input+0x72c>)
 800fa28:	681a      	ldr	r2, [r3, #0]
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	69f9      	ldr	r1, [r7, #28]
 800fa2e:	47a0      	blx	r4
 800fa30:	4603      	mov	r3, r0
 800fa32:	74fb      	strb	r3, [r7, #19]
 800fa34:	e008      	b.n	800fa48 <tcp_input+0x668>
 800fa36:	4b35      	ldr	r3, [pc, #212]	; (800fb0c <tcp_input+0x72c>)
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	69f9      	ldr	r1, [r7, #28]
 800fa3e:	2000      	movs	r0, #0
 800fa40:	f7ff f890 	bl	800eb64 <tcp_recv_null>
 800fa44:	4603      	mov	r3, r0
 800fa46:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fa48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa4c:	f113 0f0d 	cmn.w	r3, #13
 800fa50:	d053      	beq.n	800fafa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fa52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d003      	beq.n	800fa62 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fa5a:	4b2c      	ldr	r3, [pc, #176]	; (800fb0c <tcp_input+0x72c>)
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	69fb      	ldr	r3, [r7, #28]
 800fa60:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fa62:	4b2b      	ldr	r3, [pc, #172]	; (800fb10 <tcp_input+0x730>)
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	f003 0320 	and.w	r3, r3, #32
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d030      	beq.n	800fad0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d009      	beq.n	800fa8a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fa76:	69fb      	ldr	r3, [r7, #28]
 800fa78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa7a:	7b5a      	ldrb	r2, [r3, #13]
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa80:	f042 0220 	orr.w	r2, r2, #32
 800fa84:	b2d2      	uxtb	r2, r2
 800fa86:	735a      	strb	r2, [r3, #13]
 800fa88:	e022      	b.n	800fad0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa8e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fa92:	d005      	beq.n	800faa0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa98:	3301      	adds	r3, #1
 800fa9a:	b29a      	uxth	r2, r3
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d00b      	beq.n	800fac2 <tcp_input+0x6e2>
 800faaa:	69fb      	ldr	r3, [r7, #28]
 800faac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	6918      	ldr	r0, [r3, #16]
 800fab4:	2300      	movs	r3, #0
 800fab6:	2200      	movs	r2, #0
 800fab8:	69f9      	ldr	r1, [r7, #28]
 800faba:	47a0      	blx	r4
 800fabc:	4603      	mov	r3, r0
 800fabe:	74fb      	strb	r3, [r7, #19]
 800fac0:	e001      	b.n	800fac6 <tcp_input+0x6e6>
 800fac2:	2300      	movs	r3, #0
 800fac4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fac6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800faca:	f113 0f0d 	cmn.w	r3, #13
 800face:	d016      	beq.n	800fafe <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fad0:	4b13      	ldr	r3, [pc, #76]	; (800fb20 <tcp_input+0x740>)
 800fad2:	2200      	movs	r2, #0
 800fad4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fad6:	69f8      	ldr	r0, [r7, #28]
 800fad8:	f000 f88e 	bl	800fbf8 <tcp_input_delayed_close>
 800fadc:	4603      	mov	r3, r0
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d128      	bne.n	800fb34 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fae2:	69f8      	ldr	r0, [r7, #28]
 800fae4:	f002 ff20 	bl	8012928 <tcp_output>
 800fae8:	e025      	b.n	800fb36 <tcp_input+0x756>
        goto aborted;
 800faea:	bf00      	nop
 800faec:	e023      	b.n	800fb36 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800faee:	bf00      	nop
 800faf0:	e021      	b.n	800fb36 <tcp_input+0x756>
              goto aborted;
 800faf2:	bf00      	nop
 800faf4:	e01f      	b.n	800fb36 <tcp_input+0x756>
          goto aborted;
 800faf6:	bf00      	nop
 800faf8:	e01d      	b.n	800fb36 <tcp_input+0x756>
            goto aborted;
 800fafa:	bf00      	nop
 800fafc:	e01b      	b.n	800fb36 <tcp_input+0x756>
              goto aborted;
 800fafe:	bf00      	nop
 800fb00:	e019      	b.n	800fb36 <tcp_input+0x756>
 800fb02:	bf00      	nop
 800fb04:	200115a4 	.word	0x200115a4
 800fb08:	200115b4 	.word	0x200115b4
 800fb0c:	200115d4 	.word	0x200115d4
 800fb10:	200115d1 	.word	0x200115d1
 800fb14:	200115cc 	.word	0x200115cc
 800fb18:	200115d0 	.word	0x200115d0
 800fb1c:	200115ce 	.word	0x200115ce
 800fb20:	200115d8 	.word	0x200115d8
 800fb24:	20011598 	.word	0x20011598
 800fb28:	0801c3b8 	.word	0x0801c3b8
 800fb2c:	0801c56c 	.word	0x0801c56c
 800fb30:	0801c404 	.word	0x0801c404
          goto aborted;
 800fb34:	bf00      	nop
    tcp_input_pcb = NULL;
 800fb36:	4b27      	ldr	r3, [pc, #156]	; (800fbd4 <tcp_input+0x7f4>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fb3c:	4b26      	ldr	r3, [pc, #152]	; (800fbd8 <tcp_input+0x7f8>)
 800fb3e:	2200      	movs	r2, #0
 800fb40:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fb42:	4b26      	ldr	r3, [pc, #152]	; (800fbdc <tcp_input+0x7fc>)
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d03f      	beq.n	800fbca <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fb4a:	4b24      	ldr	r3, [pc, #144]	; (800fbdc <tcp_input+0x7fc>)
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7fd f9e8 	bl	800cf24 <pbuf_free>
      inseg.p = NULL;
 800fb54:	4b21      	ldr	r3, [pc, #132]	; (800fbdc <tcp_input+0x7fc>)
 800fb56:	2200      	movs	r2, #0
 800fb58:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fb5a:	e036      	b.n	800fbca <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fb5c:	4b20      	ldr	r3, [pc, #128]	; (800fbe0 <tcp_input+0x800>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	899b      	ldrh	r3, [r3, #12]
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7fb fda9 	bl	800b6bc <lwip_htons>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	f003 0304 	and.w	r3, r3, #4
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d118      	bne.n	800fba8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb76:	4b1b      	ldr	r3, [pc, #108]	; (800fbe4 <tcp_input+0x804>)
 800fb78:	6819      	ldr	r1, [r3, #0]
 800fb7a:	4b1b      	ldr	r3, [pc, #108]	; (800fbe8 <tcp_input+0x808>)
 800fb7c:	881b      	ldrh	r3, [r3, #0]
 800fb7e:	461a      	mov	r2, r3
 800fb80:	4b1a      	ldr	r3, [pc, #104]	; (800fbec <tcp_input+0x80c>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb86:	4b16      	ldr	r3, [pc, #88]	; (800fbe0 <tcp_input+0x800>)
 800fb88:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb8a:	885b      	ldrh	r3, [r3, #2]
 800fb8c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb8e:	4a14      	ldr	r2, [pc, #80]	; (800fbe0 <tcp_input+0x800>)
 800fb90:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb92:	8812      	ldrh	r2, [r2, #0]
 800fb94:	b292      	uxth	r2, r2
 800fb96:	9202      	str	r2, [sp, #8]
 800fb98:	9301      	str	r3, [sp, #4]
 800fb9a:	4b15      	ldr	r3, [pc, #84]	; (800fbf0 <tcp_input+0x810>)
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	4b15      	ldr	r3, [pc, #84]	; (800fbf4 <tcp_input+0x814>)
 800fba0:	4602      	mov	r2, r0
 800fba2:	2000      	movs	r0, #0
 800fba4:	f003 fc74 	bl	8013490 <tcp_rst>
    pbuf_free(p);
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f7fd f9bb 	bl	800cf24 <pbuf_free>
  return;
 800fbae:	e00c      	b.n	800fbca <tcp_input+0x7ea>
    goto dropped;
 800fbb0:	bf00      	nop
 800fbb2:	e006      	b.n	800fbc2 <tcp_input+0x7e2>
    goto dropped;
 800fbb4:	bf00      	nop
 800fbb6:	e004      	b.n	800fbc2 <tcp_input+0x7e2>
    goto dropped;
 800fbb8:	bf00      	nop
 800fbba:	e002      	b.n	800fbc2 <tcp_input+0x7e2>
      goto dropped;
 800fbbc:	bf00      	nop
 800fbbe:	e000      	b.n	800fbc2 <tcp_input+0x7e2>
      goto dropped;
 800fbc0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f7fd f9ae 	bl	800cf24 <pbuf_free>
 800fbc8:	e000      	b.n	800fbcc <tcp_input+0x7ec>
  return;
 800fbca:	bf00      	nop
}
 800fbcc:	3724      	adds	r7, #36	; 0x24
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd90      	pop	{r4, r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	200115d8 	.word	0x200115d8
 800fbd8:	200115d4 	.word	0x200115d4
 800fbdc:	200115a4 	.word	0x200115a4
 800fbe0:	200115b4 	.word	0x200115b4
 800fbe4:	200115c8 	.word	0x200115c8
 800fbe8:	200115ce 	.word	0x200115ce
 800fbec:	200115c4 	.word	0x200115c4
 800fbf0:	2000de28 	.word	0x2000de28
 800fbf4:	2000de2c 	.word	0x2000de2c

0800fbf8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d106      	bne.n	800fc14 <tcp_input_delayed_close+0x1c>
 800fc06:	4b17      	ldr	r3, [pc, #92]	; (800fc64 <tcp_input_delayed_close+0x6c>)
 800fc08:	f240 225a 	movw	r2, #602	; 0x25a
 800fc0c:	4916      	ldr	r1, [pc, #88]	; (800fc68 <tcp_input_delayed_close+0x70>)
 800fc0e:	4817      	ldr	r0, [pc, #92]	; (800fc6c <tcp_input_delayed_close+0x74>)
 800fc10:	f009 f990 	bl	8018f34 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fc14:	4b16      	ldr	r3, [pc, #88]	; (800fc70 <tcp_input_delayed_close+0x78>)
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	f003 0310 	and.w	r3, r3, #16
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d01c      	beq.n	800fc5a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	8b5b      	ldrh	r3, [r3, #26]
 800fc24:	f003 0310 	and.w	r3, r3, #16
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d10d      	bne.n	800fc48 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d008      	beq.n	800fc48 <tcp_input_delayed_close+0x50>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	6912      	ldr	r2, [r2, #16]
 800fc40:	f06f 010e 	mvn.w	r1, #14
 800fc44:	4610      	mov	r0, r2
 800fc46:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fc48:	6879      	ldr	r1, [r7, #4]
 800fc4a:	480a      	ldr	r0, [pc, #40]	; (800fc74 <tcp_input_delayed_close+0x7c>)
 800fc4c:	f7ff fa50 	bl	800f0f0 <tcp_pcb_remove>
    tcp_free(pcb);
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7fd fc23 	bl	800d49c <tcp_free>
    return 1;
 800fc56:	2301      	movs	r3, #1
 800fc58:	e000      	b.n	800fc5c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fc5a:	2300      	movs	r3, #0
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3708      	adds	r7, #8
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	0801c3b8 	.word	0x0801c3b8
 800fc68:	0801c588 	.word	0x0801c588
 800fc6c:	0801c404 	.word	0x0801c404
 800fc70:	200115d1 	.word	0x200115d1
 800fc74:	20011598 	.word	0x20011598

0800fc78 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fc78:	b590      	push	{r4, r7, lr}
 800fc7a:	b08b      	sub	sp, #44	; 0x2c
 800fc7c:	af04      	add	r7, sp, #16
 800fc7e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fc80:	4b6f      	ldr	r3, [pc, #444]	; (800fe40 <tcp_listen_input+0x1c8>)
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	f003 0304 	and.w	r3, r3, #4
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f040 80d2 	bne.w	800fe32 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d106      	bne.n	800fca2 <tcp_listen_input+0x2a>
 800fc94:	4b6b      	ldr	r3, [pc, #428]	; (800fe44 <tcp_listen_input+0x1cc>)
 800fc96:	f240 2281 	movw	r2, #641	; 0x281
 800fc9a:	496b      	ldr	r1, [pc, #428]	; (800fe48 <tcp_listen_input+0x1d0>)
 800fc9c:	486b      	ldr	r0, [pc, #428]	; (800fe4c <tcp_listen_input+0x1d4>)
 800fc9e:	f009 f949 	bl	8018f34 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fca2:	4b67      	ldr	r3, [pc, #412]	; (800fe40 <tcp_listen_input+0x1c8>)
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	f003 0310 	and.w	r3, r3, #16
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d019      	beq.n	800fce2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcae:	4b68      	ldr	r3, [pc, #416]	; (800fe50 <tcp_listen_input+0x1d8>)
 800fcb0:	6819      	ldr	r1, [r3, #0]
 800fcb2:	4b68      	ldr	r3, [pc, #416]	; (800fe54 <tcp_listen_input+0x1dc>)
 800fcb4:	881b      	ldrh	r3, [r3, #0]
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	4b67      	ldr	r3, [pc, #412]	; (800fe58 <tcp_listen_input+0x1e0>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcbe:	4b67      	ldr	r3, [pc, #412]	; (800fe5c <tcp_listen_input+0x1e4>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcc2:	885b      	ldrh	r3, [r3, #2]
 800fcc4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcc6:	4a65      	ldr	r2, [pc, #404]	; (800fe5c <tcp_listen_input+0x1e4>)
 800fcc8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcca:	8812      	ldrh	r2, [r2, #0]
 800fccc:	b292      	uxth	r2, r2
 800fcce:	9202      	str	r2, [sp, #8]
 800fcd0:	9301      	str	r3, [sp, #4]
 800fcd2:	4b63      	ldr	r3, [pc, #396]	; (800fe60 <tcp_listen_input+0x1e8>)
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	4b63      	ldr	r3, [pc, #396]	; (800fe64 <tcp_listen_input+0x1ec>)
 800fcd8:	4602      	mov	r2, r0
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f003 fbd8 	bl	8013490 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fce0:	e0a9      	b.n	800fe36 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fce2:	4b57      	ldr	r3, [pc, #348]	; (800fe40 <tcp_listen_input+0x1c8>)
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	f003 0302 	and.w	r3, r3, #2
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	f000 80a3 	beq.w	800fe36 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	7d5b      	ldrb	r3, [r3, #21]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f7ff f859 	bl	800edac <tcp_alloc>
 800fcfa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d111      	bne.n	800fd26 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	699b      	ldr	r3, [r3, #24]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d00a      	beq.n	800fd20 <tcp_listen_input+0xa8>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	699b      	ldr	r3, [r3, #24]
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	6910      	ldr	r0, [r2, #16]
 800fd12:	f04f 32ff 	mov.w	r2, #4294967295
 800fd16:	2100      	movs	r1, #0
 800fd18:	4798      	blx	r3
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	73bb      	strb	r3, [r7, #14]
      return;
 800fd1e:	e08b      	b.n	800fe38 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd20:	23f0      	movs	r3, #240	; 0xf0
 800fd22:	73bb      	strb	r3, [r7, #14]
      return;
 800fd24:	e088      	b.n	800fe38 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fd26:	4b50      	ldr	r3, [pc, #320]	; (800fe68 <tcp_listen_input+0x1f0>)
 800fd28:	695a      	ldr	r2, [r3, #20]
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fd2e:	4b4e      	ldr	r3, [pc, #312]	; (800fe68 <tcp_listen_input+0x1f0>)
 800fd30:	691a      	ldr	r2, [r3, #16]
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	8ada      	ldrh	r2, [r3, #22]
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fd3e:	4b47      	ldr	r3, [pc, #284]	; (800fe5c <tcp_listen_input+0x1e4>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	881b      	ldrh	r3, [r3, #0]
 800fd44:	b29a      	uxth	r2, r3
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	2203      	movs	r2, #3
 800fd4e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fd50:	4b41      	ldr	r3, [pc, #260]	; (800fe58 <tcp_listen_input+0x1e0>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	1c5a      	adds	r2, r3, #1
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fd62:	6978      	ldr	r0, [r7, #20]
 800fd64:	f7ff fa58 	bl	800f218 <tcp_next_iss>
 800fd68:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	693a      	ldr	r2, [r7, #16]
 800fd6e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	693a      	ldr	r2, [r7, #16]
 800fd74:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	693a      	ldr	r2, [r7, #16]
 800fd7a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	693a      	ldr	r2, [r7, #16]
 800fd80:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fd82:	4b35      	ldr	r3, [pc, #212]	; (800fe58 <tcp_listen_input+0x1e0>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	1e5a      	subs	r2, r3, #1
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	691a      	ldr	r2, [r3, #16]
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	687a      	ldr	r2, [r7, #4]
 800fd98:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	7a5b      	ldrb	r3, [r3, #9]
 800fd9e:	f003 030c 	and.w	r3, r3, #12
 800fda2:	b2da      	uxtb	r2, r3
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	7a1a      	ldrb	r2, [r3, #8]
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fdb0:	4b2e      	ldr	r3, [pc, #184]	; (800fe6c <tcp_listen_input+0x1f4>)
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	60da      	str	r2, [r3, #12]
 800fdb8:	4a2c      	ldr	r2, [pc, #176]	; (800fe6c <tcp_listen_input+0x1f4>)
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	6013      	str	r3, [r2, #0]
 800fdbe:	f003 fd29 	bl	8013814 <tcp_timer_needed>
 800fdc2:	4b2b      	ldr	r3, [pc, #172]	; (800fe70 <tcp_listen_input+0x1f8>)
 800fdc4:	2201      	movs	r2, #1
 800fdc6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fdc8:	6978      	ldr	r0, [r7, #20]
 800fdca:	f001 fd8f 	bl	80118ec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fdce:	4b23      	ldr	r3, [pc, #140]	; (800fe5c <tcp_listen_input+0x1e4>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	89db      	ldrh	r3, [r3, #14]
 800fdd4:	b29a      	uxth	r2, r3
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	3304      	adds	r3, #4
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f007 fac1 	bl	8017378 <ip4_route>
 800fdf6:	4601      	mov	r1, r0
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	3304      	adds	r3, #4
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f7ff fa30 	bl	800f264 <tcp_eff_send_mss_netif>
 800fe04:	4603      	mov	r3, r0
 800fe06:	461a      	mov	r2, r3
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fe0c:	2112      	movs	r1, #18
 800fe0e:	6978      	ldr	r0, [r7, #20]
 800fe10:	f002 fc9c 	bl	801274c <tcp_enqueue_flags>
 800fe14:	4603      	mov	r3, r0
 800fe16:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fe18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d004      	beq.n	800fe2a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fe20:	2100      	movs	r1, #0
 800fe22:	6978      	ldr	r0, [r7, #20]
 800fe24:	f7fd fdc0 	bl	800d9a8 <tcp_abandon>
      return;
 800fe28:	e006      	b.n	800fe38 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fe2a:	6978      	ldr	r0, [r7, #20]
 800fe2c:	f002 fd7c 	bl	8012928 <tcp_output>
  return;
 800fe30:	e001      	b.n	800fe36 <tcp_listen_input+0x1be>
    return;
 800fe32:	bf00      	nop
 800fe34:	e000      	b.n	800fe38 <tcp_listen_input+0x1c0>
  return;
 800fe36:	bf00      	nop
}
 800fe38:	371c      	adds	r7, #28
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd90      	pop	{r4, r7, pc}
 800fe3e:	bf00      	nop
 800fe40:	200115d0 	.word	0x200115d0
 800fe44:	0801c3b8 	.word	0x0801c3b8
 800fe48:	0801c5b0 	.word	0x0801c5b0
 800fe4c:	0801c404 	.word	0x0801c404
 800fe50:	200115c8 	.word	0x200115c8
 800fe54:	200115ce 	.word	0x200115ce
 800fe58:	200115c4 	.word	0x200115c4
 800fe5c:	200115b4 	.word	0x200115b4
 800fe60:	2000de28 	.word	0x2000de28
 800fe64:	2000de2c 	.word	0x2000de2c
 800fe68:	2000de18 	.word	0x2000de18
 800fe6c:	20011598 	.word	0x20011598
 800fe70:	200115a0 	.word	0x200115a0

0800fe74 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b086      	sub	sp, #24
 800fe78:	af04      	add	r7, sp, #16
 800fe7a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fe7c:	4b2f      	ldr	r3, [pc, #188]	; (800ff3c <tcp_timewait_input+0xc8>)
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	f003 0304 	and.w	r3, r3, #4
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d153      	bne.n	800ff30 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d106      	bne.n	800fe9c <tcp_timewait_input+0x28>
 800fe8e:	4b2c      	ldr	r3, [pc, #176]	; (800ff40 <tcp_timewait_input+0xcc>)
 800fe90:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fe94:	492b      	ldr	r1, [pc, #172]	; (800ff44 <tcp_timewait_input+0xd0>)
 800fe96:	482c      	ldr	r0, [pc, #176]	; (800ff48 <tcp_timewait_input+0xd4>)
 800fe98:	f009 f84c 	bl	8018f34 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fe9c:	4b27      	ldr	r3, [pc, #156]	; (800ff3c <tcp_timewait_input+0xc8>)
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	f003 0302 	and.w	r3, r3, #2
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d02a      	beq.n	800fefe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fea8:	4b28      	ldr	r3, [pc, #160]	; (800ff4c <tcp_timewait_input+0xd8>)
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb0:	1ad3      	subs	r3, r2, r3
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	db2d      	blt.n	800ff12 <tcp_timewait_input+0x9e>
 800feb6:	4b25      	ldr	r3, [pc, #148]	; (800ff4c <tcp_timewait_input+0xd8>)
 800feb8:	681a      	ldr	r2, [r3, #0]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800febe:	6879      	ldr	r1, [r7, #4]
 800fec0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fec2:	440b      	add	r3, r1
 800fec4:	1ad3      	subs	r3, r2, r3
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	dc23      	bgt.n	800ff12 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feca:	4b21      	ldr	r3, [pc, #132]	; (800ff50 <tcp_timewait_input+0xdc>)
 800fecc:	6819      	ldr	r1, [r3, #0]
 800fece:	4b21      	ldr	r3, [pc, #132]	; (800ff54 <tcp_timewait_input+0xe0>)
 800fed0:	881b      	ldrh	r3, [r3, #0]
 800fed2:	461a      	mov	r2, r3
 800fed4:	4b1d      	ldr	r3, [pc, #116]	; (800ff4c <tcp_timewait_input+0xd8>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800feda:	4b1f      	ldr	r3, [pc, #124]	; (800ff58 <tcp_timewait_input+0xe4>)
 800fedc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fede:	885b      	ldrh	r3, [r3, #2]
 800fee0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fee2:	4a1d      	ldr	r2, [pc, #116]	; (800ff58 <tcp_timewait_input+0xe4>)
 800fee4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fee6:	8812      	ldrh	r2, [r2, #0]
 800fee8:	b292      	uxth	r2, r2
 800feea:	9202      	str	r2, [sp, #8]
 800feec:	9301      	str	r3, [sp, #4]
 800feee:	4b1b      	ldr	r3, [pc, #108]	; (800ff5c <tcp_timewait_input+0xe8>)
 800fef0:	9300      	str	r3, [sp, #0]
 800fef2:	4b1b      	ldr	r3, [pc, #108]	; (800ff60 <tcp_timewait_input+0xec>)
 800fef4:	4602      	mov	r2, r0
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f003 faca 	bl	8013490 <tcp_rst>
      return;
 800fefc:	e01b      	b.n	800ff36 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fefe:	4b0f      	ldr	r3, [pc, #60]	; (800ff3c <tcp_timewait_input+0xc8>)
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	f003 0301 	and.w	r3, r3, #1
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d003      	beq.n	800ff12 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ff0a:	4b16      	ldr	r3, [pc, #88]	; (800ff64 <tcp_timewait_input+0xf0>)
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ff12:	4b10      	ldr	r3, [pc, #64]	; (800ff54 <tcp_timewait_input+0xe0>)
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00c      	beq.n	800ff34 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	8b5b      	ldrh	r3, [r3, #26]
 800ff1e:	f043 0302 	orr.w	r3, r3, #2
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f002 fcfd 	bl	8012928 <tcp_output>
  }
  return;
 800ff2e:	e001      	b.n	800ff34 <tcp_timewait_input+0xc0>
    return;
 800ff30:	bf00      	nop
 800ff32:	e000      	b.n	800ff36 <tcp_timewait_input+0xc2>
  return;
 800ff34:	bf00      	nop
}
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	200115d0 	.word	0x200115d0
 800ff40:	0801c3b8 	.word	0x0801c3b8
 800ff44:	0801c5d0 	.word	0x0801c5d0
 800ff48:	0801c404 	.word	0x0801c404
 800ff4c:	200115c4 	.word	0x200115c4
 800ff50:	200115c8 	.word	0x200115c8
 800ff54:	200115ce 	.word	0x200115ce
 800ff58:	200115b4 	.word	0x200115b4
 800ff5c:	2000de28 	.word	0x2000de28
 800ff60:	2000de2c 	.word	0x2000de2c
 800ff64:	2001158c 	.word	0x2001158c

0800ff68 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ff68:	b590      	push	{r4, r7, lr}
 800ff6a:	b08d      	sub	sp, #52	; 0x34
 800ff6c:	af04      	add	r7, sp, #16
 800ff6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ff70:	2300      	movs	r3, #0
 800ff72:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ff74:	2300      	movs	r3, #0
 800ff76:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d106      	bne.n	800ff8c <tcp_process+0x24>
 800ff7e:	4b9d      	ldr	r3, [pc, #628]	; (80101f4 <tcp_process+0x28c>)
 800ff80:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ff84:	499c      	ldr	r1, [pc, #624]	; (80101f8 <tcp_process+0x290>)
 800ff86:	489d      	ldr	r0, [pc, #628]	; (80101fc <tcp_process+0x294>)
 800ff88:	f008 ffd4 	bl	8018f34 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ff8c:	4b9c      	ldr	r3, [pc, #624]	; (8010200 <tcp_process+0x298>)
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	f003 0304 	and.w	r3, r3, #4
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d04e      	beq.n	8010036 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	7d1b      	ldrb	r3, [r3, #20]
 800ff9c:	2b02      	cmp	r3, #2
 800ff9e:	d108      	bne.n	800ffb2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ffa4:	4b97      	ldr	r3, [pc, #604]	; (8010204 <tcp_process+0x29c>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d123      	bne.n	800fff4 <tcp_process+0x8c>
        acceptable = 1;
 800ffac:	2301      	movs	r3, #1
 800ffae:	76fb      	strb	r3, [r7, #27]
 800ffb0:	e020      	b.n	800fff4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffb6:	4b94      	ldr	r3, [pc, #592]	; (8010208 <tcp_process+0x2a0>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d102      	bne.n	800ffc4 <tcp_process+0x5c>
        acceptable = 1;
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	76fb      	strb	r3, [r7, #27]
 800ffc2:	e017      	b.n	800fff4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ffc4:	4b90      	ldr	r3, [pc, #576]	; (8010208 <tcp_process+0x2a0>)
 800ffc6:	681a      	ldr	r2, [r3, #0]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffcc:	1ad3      	subs	r3, r2, r3
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	db10      	blt.n	800fff4 <tcp_process+0x8c>
 800ffd2:	4b8d      	ldr	r3, [pc, #564]	; (8010208 <tcp_process+0x2a0>)
 800ffd4:	681a      	ldr	r2, [r3, #0]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffda:	6879      	ldr	r1, [r7, #4]
 800ffdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffde:	440b      	add	r3, r1
 800ffe0:	1ad3      	subs	r3, r2, r3
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	dc06      	bgt.n	800fff4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	8b5b      	ldrh	r3, [r3, #26]
 800ffea:	f043 0302 	orr.w	r3, r3, #2
 800ffee:	b29a      	uxth	r2, r3
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fff4:	7efb      	ldrb	r3, [r7, #27]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d01b      	beq.n	8010032 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	7d1b      	ldrb	r3, [r3, #20]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d106      	bne.n	8010010 <tcp_process+0xa8>
 8010002:	4b7c      	ldr	r3, [pc, #496]	; (80101f4 <tcp_process+0x28c>)
 8010004:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010008:	4980      	ldr	r1, [pc, #512]	; (801020c <tcp_process+0x2a4>)
 801000a:	487c      	ldr	r0, [pc, #496]	; (80101fc <tcp_process+0x294>)
 801000c:	f008 ff92 	bl	8018f34 <iprintf>
      recv_flags |= TF_RESET;
 8010010:	4b7f      	ldr	r3, [pc, #508]	; (8010210 <tcp_process+0x2a8>)
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	f043 0308 	orr.w	r3, r3, #8
 8010018:	b2da      	uxtb	r2, r3
 801001a:	4b7d      	ldr	r3, [pc, #500]	; (8010210 <tcp_process+0x2a8>)
 801001c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	8b5b      	ldrh	r3, [r3, #26]
 8010022:	f023 0301 	bic.w	r3, r3, #1
 8010026:	b29a      	uxth	r2, r3
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801002c:	f06f 030d 	mvn.w	r3, #13
 8010030:	e37a      	b.n	8010728 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010032:	2300      	movs	r3, #0
 8010034:	e378      	b.n	8010728 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010036:	4b72      	ldr	r3, [pc, #456]	; (8010200 <tcp_process+0x298>)
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	f003 0302 	and.w	r3, r3, #2
 801003e:	2b00      	cmp	r3, #0
 8010040:	d010      	beq.n	8010064 <tcp_process+0xfc>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	7d1b      	ldrb	r3, [r3, #20]
 8010046:	2b02      	cmp	r3, #2
 8010048:	d00c      	beq.n	8010064 <tcp_process+0xfc>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	7d1b      	ldrb	r3, [r3, #20]
 801004e:	2b03      	cmp	r3, #3
 8010050:	d008      	beq.n	8010064 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	8b5b      	ldrh	r3, [r3, #26]
 8010056:	f043 0302 	orr.w	r3, r3, #2
 801005a:	b29a      	uxth	r2, r3
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010060:	2300      	movs	r3, #0
 8010062:	e361      	b.n	8010728 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	8b5b      	ldrh	r3, [r3, #26]
 8010068:	f003 0310 	and.w	r3, r3, #16
 801006c:	2b00      	cmp	r3, #0
 801006e:	d103      	bne.n	8010078 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010070:	4b68      	ldr	r3, [pc, #416]	; (8010214 <tcp_process+0x2ac>)
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2200      	movs	r2, #0
 801007c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2200      	movs	r2, #0
 8010084:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f001 fc2f 	bl	80118ec <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	7d1b      	ldrb	r3, [r3, #20]
 8010092:	3b02      	subs	r3, #2
 8010094:	2b07      	cmp	r3, #7
 8010096:	f200 8337 	bhi.w	8010708 <tcp_process+0x7a0>
 801009a:	a201      	add	r2, pc, #4	; (adr r2, 80100a0 <tcp_process+0x138>)
 801009c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100a0:	080100c1 	.word	0x080100c1
 80100a4:	080102f1 	.word	0x080102f1
 80100a8:	08010469 	.word	0x08010469
 80100ac:	08010493 	.word	0x08010493
 80100b0:	080105b7 	.word	0x080105b7
 80100b4:	08010469 	.word	0x08010469
 80100b8:	08010643 	.word	0x08010643
 80100bc:	080106d3 	.word	0x080106d3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80100c0:	4b4f      	ldr	r3, [pc, #316]	; (8010200 <tcp_process+0x298>)
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	f003 0310 	and.w	r3, r3, #16
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	f000 80e4 	beq.w	8010296 <tcp_process+0x32e>
 80100ce:	4b4c      	ldr	r3, [pc, #304]	; (8010200 <tcp_process+0x298>)
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	f003 0302 	and.w	r3, r3, #2
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	f000 80dd 	beq.w	8010296 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100e0:	1c5a      	adds	r2, r3, #1
 80100e2:	4b48      	ldr	r3, [pc, #288]	; (8010204 <tcp_process+0x29c>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	f040 80d5 	bne.w	8010296 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80100ec:	4b46      	ldr	r3, [pc, #280]	; (8010208 <tcp_process+0x2a0>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	1c5a      	adds	r2, r3, #1
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80100fe:	4b41      	ldr	r3, [pc, #260]	; (8010204 <tcp_process+0x29c>)
 8010100:	681a      	ldr	r2, [r3, #0]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010106:	4b44      	ldr	r3, [pc, #272]	; (8010218 <tcp_process+0x2b0>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	89db      	ldrh	r3, [r3, #14]
 801010c:	b29a      	uxth	r2, r3
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010120:	4b39      	ldr	r3, [pc, #228]	; (8010208 <tcp_process+0x2a0>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	1e5a      	subs	r2, r3, #1
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2204      	movs	r2, #4
 801012e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	3304      	adds	r3, #4
 8010138:	4618      	mov	r0, r3
 801013a:	f007 f91d 	bl	8017378 <ip4_route>
 801013e:	4601      	mov	r1, r0
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	3304      	adds	r3, #4
 8010144:	461a      	mov	r2, r3
 8010146:	4620      	mov	r0, r4
 8010148:	f7ff f88c 	bl	800f264 <tcp_eff_send_mss_netif>
 801014c:	4603      	mov	r3, r0
 801014e:	461a      	mov	r2, r3
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010158:	009a      	lsls	r2, r3, #2
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801015e:	005b      	lsls	r3, r3, #1
 8010160:	f241 111c 	movw	r1, #4380	; 0x111c
 8010164:	428b      	cmp	r3, r1
 8010166:	bf38      	it	cc
 8010168:	460b      	movcc	r3, r1
 801016a:	429a      	cmp	r2, r3
 801016c:	d204      	bcs.n	8010178 <tcp_process+0x210>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010172:	009b      	lsls	r3, r3, #2
 8010174:	b29b      	uxth	r3, r3
 8010176:	e00d      	b.n	8010194 <tcp_process+0x22c>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801017c:	005b      	lsls	r3, r3, #1
 801017e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010182:	4293      	cmp	r3, r2
 8010184:	d904      	bls.n	8010190 <tcp_process+0x228>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801018a:	005b      	lsls	r3, r3, #1
 801018c:	b29b      	uxth	r3, r3
 801018e:	e001      	b.n	8010194 <tcp_process+0x22c>
 8010190:	f241 131c 	movw	r3, #4380	; 0x111c
 8010194:	687a      	ldr	r2, [r7, #4]
 8010196:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d106      	bne.n	80101b2 <tcp_process+0x24a>
 80101a4:	4b13      	ldr	r3, [pc, #76]	; (80101f4 <tcp_process+0x28c>)
 80101a6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80101aa:	491c      	ldr	r1, [pc, #112]	; (801021c <tcp_process+0x2b4>)
 80101ac:	4813      	ldr	r0, [pc, #76]	; (80101fc <tcp_process+0x294>)
 80101ae:	f008 fec1 	bl	8018f34 <iprintf>
        --pcb->snd_queuelen;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101b8:	3b01      	subs	r3, #1
 80101ba:	b29a      	uxth	r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101c6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80101c8:	69fb      	ldr	r3, [r7, #28]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d12a      	bne.n	8010224 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101d2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d106      	bne.n	80101e8 <tcp_process+0x280>
 80101da:	4b06      	ldr	r3, [pc, #24]	; (80101f4 <tcp_process+0x28c>)
 80101dc:	f44f 725d 	mov.w	r2, #884	; 0x374
 80101e0:	490f      	ldr	r1, [pc, #60]	; (8010220 <tcp_process+0x2b8>)
 80101e2:	4806      	ldr	r0, [pc, #24]	; (80101fc <tcp_process+0x294>)
 80101e4:	f008 fea6 	bl	8018f34 <iprintf>
          pcb->unsent = rseg->next;
 80101e8:	69fb      	ldr	r3, [r7, #28]
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80101f0:	e01c      	b.n	801022c <tcp_process+0x2c4>
 80101f2:	bf00      	nop
 80101f4:	0801c3b8 	.word	0x0801c3b8
 80101f8:	0801c5f0 	.word	0x0801c5f0
 80101fc:	0801c404 	.word	0x0801c404
 8010200:	200115d0 	.word	0x200115d0
 8010204:	200115c8 	.word	0x200115c8
 8010208:	200115c4 	.word	0x200115c4
 801020c:	0801c60c 	.word	0x0801c60c
 8010210:	200115d1 	.word	0x200115d1
 8010214:	2001158c 	.word	0x2001158c
 8010218:	200115b4 	.word	0x200115b4
 801021c:	0801c62c 	.word	0x0801c62c
 8010220:	0801c644 	.word	0x0801c644
        } else {
          pcb->unacked = rseg->next;
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801022c:	69f8      	ldr	r0, [r7, #28]
 801022e:	f7fe fc36 	bl	800ea9e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010236:	2b00      	cmp	r3, #0
 8010238:	d104      	bne.n	8010244 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010240:	861a      	strh	r2, [r3, #48]	; 0x30
 8010242:	e006      	b.n	8010252 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2200      	movs	r2, #0
 8010248:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2200      	movs	r2, #0
 801024e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010258:	2b00      	cmp	r3, #0
 801025a:	d00a      	beq.n	8010272 <tcp_process+0x30a>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	6910      	ldr	r0, [r2, #16]
 8010266:	2200      	movs	r2, #0
 8010268:	6879      	ldr	r1, [r7, #4]
 801026a:	4798      	blx	r3
 801026c:	4603      	mov	r3, r0
 801026e:	76bb      	strb	r3, [r7, #26]
 8010270:	e001      	b.n	8010276 <tcp_process+0x30e>
 8010272:	2300      	movs	r3, #0
 8010274:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010276:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801027a:	f113 0f0d 	cmn.w	r3, #13
 801027e:	d102      	bne.n	8010286 <tcp_process+0x31e>
          return ERR_ABRT;
 8010280:	f06f 030c 	mvn.w	r3, #12
 8010284:	e250      	b.n	8010728 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	8b5b      	ldrh	r3, [r3, #26]
 801028a:	f043 0302 	orr.w	r3, r3, #2
 801028e:	b29a      	uxth	r2, r3
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010294:	e23a      	b.n	801070c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010296:	4b98      	ldr	r3, [pc, #608]	; (80104f8 <tcp_process+0x590>)
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	f003 0310 	and.w	r3, r3, #16
 801029e:	2b00      	cmp	r3, #0
 80102a0:	f000 8234 	beq.w	801070c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102a4:	4b95      	ldr	r3, [pc, #596]	; (80104fc <tcp_process+0x594>)
 80102a6:	6819      	ldr	r1, [r3, #0]
 80102a8:	4b95      	ldr	r3, [pc, #596]	; (8010500 <tcp_process+0x598>)
 80102aa:	881b      	ldrh	r3, [r3, #0]
 80102ac:	461a      	mov	r2, r3
 80102ae:	4b95      	ldr	r3, [pc, #596]	; (8010504 <tcp_process+0x59c>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102b4:	4b94      	ldr	r3, [pc, #592]	; (8010508 <tcp_process+0x5a0>)
 80102b6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102b8:	885b      	ldrh	r3, [r3, #2]
 80102ba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102bc:	4a92      	ldr	r2, [pc, #584]	; (8010508 <tcp_process+0x5a0>)
 80102be:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102c0:	8812      	ldrh	r2, [r2, #0]
 80102c2:	b292      	uxth	r2, r2
 80102c4:	9202      	str	r2, [sp, #8]
 80102c6:	9301      	str	r3, [sp, #4]
 80102c8:	4b90      	ldr	r3, [pc, #576]	; (801050c <tcp_process+0x5a4>)
 80102ca:	9300      	str	r3, [sp, #0]
 80102cc:	4b90      	ldr	r3, [pc, #576]	; (8010510 <tcp_process+0x5a8>)
 80102ce:	4602      	mov	r2, r0
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f003 f8dd 	bl	8013490 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80102dc:	2b05      	cmp	r3, #5
 80102de:	f200 8215 	bhi.w	801070c <tcp_process+0x7a4>
          pcb->rtime = 0;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f002 fea7 	bl	801303c <tcp_rexmit_rto>
      break;
 80102ee:	e20d      	b.n	801070c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80102f0:	4b81      	ldr	r3, [pc, #516]	; (80104f8 <tcp_process+0x590>)
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	f003 0310 	and.w	r3, r3, #16
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f000 80a1 	beq.w	8010440 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80102fe:	4b7f      	ldr	r3, [pc, #508]	; (80104fc <tcp_process+0x594>)
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010306:	1ad3      	subs	r3, r2, r3
 8010308:	3b01      	subs	r3, #1
 801030a:	2b00      	cmp	r3, #0
 801030c:	db7e      	blt.n	801040c <tcp_process+0x4a4>
 801030e:	4b7b      	ldr	r3, [pc, #492]	; (80104fc <tcp_process+0x594>)
 8010310:	681a      	ldr	r2, [r3, #0]
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010316:	1ad3      	subs	r3, r2, r3
 8010318:	2b00      	cmp	r3, #0
 801031a:	dc77      	bgt.n	801040c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2204      	movs	r2, #4
 8010320:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010326:	2b00      	cmp	r3, #0
 8010328:	d102      	bne.n	8010330 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801032a:	23fa      	movs	r3, #250	; 0xfa
 801032c:	76bb      	strb	r3, [r7, #26]
 801032e:	e01d      	b.n	801036c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010334:	699b      	ldr	r3, [r3, #24]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d106      	bne.n	8010348 <tcp_process+0x3e0>
 801033a:	4b76      	ldr	r3, [pc, #472]	; (8010514 <tcp_process+0x5ac>)
 801033c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010340:	4975      	ldr	r1, [pc, #468]	; (8010518 <tcp_process+0x5b0>)
 8010342:	4876      	ldr	r0, [pc, #472]	; (801051c <tcp_process+0x5b4>)
 8010344:	f008 fdf6 	bl	8018f34 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801034c:	699b      	ldr	r3, [r3, #24]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d00a      	beq.n	8010368 <tcp_process+0x400>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010356:	699b      	ldr	r3, [r3, #24]
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	6910      	ldr	r0, [r2, #16]
 801035c:	2200      	movs	r2, #0
 801035e:	6879      	ldr	r1, [r7, #4]
 8010360:	4798      	blx	r3
 8010362:	4603      	mov	r3, r0
 8010364:	76bb      	strb	r3, [r7, #26]
 8010366:	e001      	b.n	801036c <tcp_process+0x404>
 8010368:	23f0      	movs	r3, #240	; 0xf0
 801036a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801036c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d00a      	beq.n	801038a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010374:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010378:	f113 0f0d 	cmn.w	r3, #13
 801037c:	d002      	beq.n	8010384 <tcp_process+0x41c>
              tcp_abort(pcb);
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f7fd fbd0 	bl	800db24 <tcp_abort>
            }
            return ERR_ABRT;
 8010384:	f06f 030c 	mvn.w	r3, #12
 8010388:	e1ce      	b.n	8010728 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f000 fae0 	bl	8010950 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010390:	4b63      	ldr	r3, [pc, #396]	; (8010520 <tcp_process+0x5b8>)
 8010392:	881b      	ldrh	r3, [r3, #0]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d005      	beq.n	80103a4 <tcp_process+0x43c>
            recv_acked--;
 8010398:	4b61      	ldr	r3, [pc, #388]	; (8010520 <tcp_process+0x5b8>)
 801039a:	881b      	ldrh	r3, [r3, #0]
 801039c:	3b01      	subs	r3, #1
 801039e:	b29a      	uxth	r2, r3
 80103a0:	4b5f      	ldr	r3, [pc, #380]	; (8010520 <tcp_process+0x5b8>)
 80103a2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103a8:	009a      	lsls	r2, r3, #2
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103ae:	005b      	lsls	r3, r3, #1
 80103b0:	f241 111c 	movw	r1, #4380	; 0x111c
 80103b4:	428b      	cmp	r3, r1
 80103b6:	bf38      	it	cc
 80103b8:	460b      	movcc	r3, r1
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d204      	bcs.n	80103c8 <tcp_process+0x460>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	e00d      	b.n	80103e4 <tcp_process+0x47c>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103cc:	005b      	lsls	r3, r3, #1
 80103ce:	f241 121c 	movw	r2, #4380	; 0x111c
 80103d2:	4293      	cmp	r3, r2
 80103d4:	d904      	bls.n	80103e0 <tcp_process+0x478>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103da:	005b      	lsls	r3, r3, #1
 80103dc:	b29b      	uxth	r3, r3
 80103de:	e001      	b.n	80103e4 <tcp_process+0x47c>
 80103e0:	f241 131c 	movw	r3, #4380	; 0x111c
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80103ea:	4b4e      	ldr	r3, [pc, #312]	; (8010524 <tcp_process+0x5bc>)
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	f003 0320 	and.w	r3, r3, #32
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d037      	beq.n	8010466 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	8b5b      	ldrh	r3, [r3, #26]
 80103fa:	f043 0302 	orr.w	r3, r3, #2
 80103fe:	b29a      	uxth	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2207      	movs	r2, #7
 8010408:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801040a:	e02c      	b.n	8010466 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801040c:	4b3b      	ldr	r3, [pc, #236]	; (80104fc <tcp_process+0x594>)
 801040e:	6819      	ldr	r1, [r3, #0]
 8010410:	4b3b      	ldr	r3, [pc, #236]	; (8010500 <tcp_process+0x598>)
 8010412:	881b      	ldrh	r3, [r3, #0]
 8010414:	461a      	mov	r2, r3
 8010416:	4b3b      	ldr	r3, [pc, #236]	; (8010504 <tcp_process+0x59c>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801041c:	4b3a      	ldr	r3, [pc, #232]	; (8010508 <tcp_process+0x5a0>)
 801041e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010420:	885b      	ldrh	r3, [r3, #2]
 8010422:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010424:	4a38      	ldr	r2, [pc, #224]	; (8010508 <tcp_process+0x5a0>)
 8010426:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010428:	8812      	ldrh	r2, [r2, #0]
 801042a:	b292      	uxth	r2, r2
 801042c:	9202      	str	r2, [sp, #8]
 801042e:	9301      	str	r3, [sp, #4]
 8010430:	4b36      	ldr	r3, [pc, #216]	; (801050c <tcp_process+0x5a4>)
 8010432:	9300      	str	r3, [sp, #0]
 8010434:	4b36      	ldr	r3, [pc, #216]	; (8010510 <tcp_process+0x5a8>)
 8010436:	4602      	mov	r2, r0
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f003 f829 	bl	8013490 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801043e:	e167      	b.n	8010710 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010440:	4b2d      	ldr	r3, [pc, #180]	; (80104f8 <tcp_process+0x590>)
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	f003 0302 	and.w	r3, r3, #2
 8010448:	2b00      	cmp	r3, #0
 801044a:	f000 8161 	beq.w	8010710 <tcp_process+0x7a8>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010452:	1e5a      	subs	r2, r3, #1
 8010454:	4b2b      	ldr	r3, [pc, #172]	; (8010504 <tcp_process+0x59c>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	429a      	cmp	r2, r3
 801045a:	f040 8159 	bne.w	8010710 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f002 fe0e 	bl	8013080 <tcp_rexmit>
      break;
 8010464:	e154      	b.n	8010710 <tcp_process+0x7a8>
 8010466:	e153      	b.n	8010710 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f000 fa71 	bl	8010950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801046e:	4b2d      	ldr	r3, [pc, #180]	; (8010524 <tcp_process+0x5bc>)
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	f003 0320 	and.w	r3, r3, #32
 8010476:	2b00      	cmp	r3, #0
 8010478:	f000 814c 	beq.w	8010714 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	8b5b      	ldrh	r3, [r3, #26]
 8010480:	f043 0302 	orr.w	r3, r3, #2
 8010484:	b29a      	uxth	r2, r3
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2207      	movs	r2, #7
 801048e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010490:	e140      	b.n	8010714 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f000 fa5c 	bl	8010950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010498:	4b22      	ldr	r3, [pc, #136]	; (8010524 <tcp_process+0x5bc>)
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	f003 0320 	and.w	r3, r3, #32
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d071      	beq.n	8010588 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80104a4:	4b14      	ldr	r3, [pc, #80]	; (80104f8 <tcp_process+0x590>)
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	f003 0310 	and.w	r3, r3, #16
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d060      	beq.n	8010572 <tcp_process+0x60a>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80104b4:	4b11      	ldr	r3, [pc, #68]	; (80104fc <tcp_process+0x594>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d15a      	bne.n	8010572 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d156      	bne.n	8010572 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	8b5b      	ldrh	r3, [r3, #26]
 80104c8:	f043 0302 	orr.w	r3, r3, #2
 80104cc:	b29a      	uxth	r2, r3
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f7fe fdbc 	bl	800f050 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80104d8:	4b13      	ldr	r3, [pc, #76]	; (8010528 <tcp_process+0x5c0>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d105      	bne.n	80104ee <tcp_process+0x586>
 80104e2:	4b11      	ldr	r3, [pc, #68]	; (8010528 <tcp_process+0x5c0>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	4a0f      	ldr	r2, [pc, #60]	; (8010528 <tcp_process+0x5c0>)
 80104ea:	6013      	str	r3, [r2, #0]
 80104ec:	e02e      	b.n	801054c <tcp_process+0x5e4>
 80104ee:	4b0e      	ldr	r3, [pc, #56]	; (8010528 <tcp_process+0x5c0>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	617b      	str	r3, [r7, #20]
 80104f4:	e027      	b.n	8010546 <tcp_process+0x5de>
 80104f6:	bf00      	nop
 80104f8:	200115d0 	.word	0x200115d0
 80104fc:	200115c8 	.word	0x200115c8
 8010500:	200115ce 	.word	0x200115ce
 8010504:	200115c4 	.word	0x200115c4
 8010508:	200115b4 	.word	0x200115b4
 801050c:	2000de28 	.word	0x2000de28
 8010510:	2000de2c 	.word	0x2000de2c
 8010514:	0801c3b8 	.word	0x0801c3b8
 8010518:	0801c658 	.word	0x0801c658
 801051c:	0801c404 	.word	0x0801c404
 8010520:	200115cc 	.word	0x200115cc
 8010524:	200115d1 	.word	0x200115d1
 8010528:	20011598 	.word	0x20011598
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	687a      	ldr	r2, [r7, #4]
 8010532:	429a      	cmp	r2, r3
 8010534:	d104      	bne.n	8010540 <tcp_process+0x5d8>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	68da      	ldr	r2, [r3, #12]
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	60da      	str	r2, [r3, #12]
 801053e:	e005      	b.n	801054c <tcp_process+0x5e4>
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	617b      	str	r3, [r7, #20]
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d1ef      	bne.n	801052c <tcp_process+0x5c4>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2200      	movs	r2, #0
 8010550:	60da      	str	r2, [r3, #12]
 8010552:	4b77      	ldr	r3, [pc, #476]	; (8010730 <tcp_process+0x7c8>)
 8010554:	2201      	movs	r2, #1
 8010556:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	220a      	movs	r2, #10
 801055c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801055e:	4b75      	ldr	r3, [pc, #468]	; (8010734 <tcp_process+0x7cc>)
 8010560:	681a      	ldr	r2, [r3, #0]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	60da      	str	r2, [r3, #12]
 8010566:	4a73      	ldr	r2, [pc, #460]	; (8010734 <tcp_process+0x7cc>)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6013      	str	r3, [r2, #0]
 801056c:	f003 f952 	bl	8013814 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010570:	e0d2      	b.n	8010718 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	8b5b      	ldrh	r3, [r3, #26]
 8010576:	f043 0302 	orr.w	r3, r3, #2
 801057a:	b29a      	uxth	r2, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2208      	movs	r2, #8
 8010584:	751a      	strb	r2, [r3, #20]
      break;
 8010586:	e0c7      	b.n	8010718 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010588:	4b6b      	ldr	r3, [pc, #428]	; (8010738 <tcp_process+0x7d0>)
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	f003 0310 	and.w	r3, r3, #16
 8010590:	2b00      	cmp	r3, #0
 8010592:	f000 80c1 	beq.w	8010718 <tcp_process+0x7b0>
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801059a:	4b68      	ldr	r3, [pc, #416]	; (801073c <tcp_process+0x7d4>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	429a      	cmp	r2, r3
 80105a0:	f040 80ba 	bne.w	8010718 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f040 80b5 	bne.w	8010718 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2206      	movs	r2, #6
 80105b2:	751a      	strb	r2, [r3, #20]
      break;
 80105b4:	e0b0      	b.n	8010718 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 f9ca 	bl	8010950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80105bc:	4b60      	ldr	r3, [pc, #384]	; (8010740 <tcp_process+0x7d8>)
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	f003 0320 	and.w	r3, r3, #32
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	f000 80a9 	beq.w	801071c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	8b5b      	ldrh	r3, [r3, #26]
 80105ce:	f043 0302 	orr.w	r3, r3, #2
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f7fe fd39 	bl	800f050 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80105de:	4b59      	ldr	r3, [pc, #356]	; (8010744 <tcp_process+0x7dc>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	687a      	ldr	r2, [r7, #4]
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d105      	bne.n	80105f4 <tcp_process+0x68c>
 80105e8:	4b56      	ldr	r3, [pc, #344]	; (8010744 <tcp_process+0x7dc>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	68db      	ldr	r3, [r3, #12]
 80105ee:	4a55      	ldr	r2, [pc, #340]	; (8010744 <tcp_process+0x7dc>)
 80105f0:	6013      	str	r3, [r2, #0]
 80105f2:	e013      	b.n	801061c <tcp_process+0x6b4>
 80105f4:	4b53      	ldr	r3, [pc, #332]	; (8010744 <tcp_process+0x7dc>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	613b      	str	r3, [r7, #16]
 80105fa:	e00c      	b.n	8010616 <tcp_process+0x6ae>
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	68db      	ldr	r3, [r3, #12]
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	429a      	cmp	r2, r3
 8010604:	d104      	bne.n	8010610 <tcp_process+0x6a8>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	68da      	ldr	r2, [r3, #12]
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	60da      	str	r2, [r3, #12]
 801060e:	e005      	b.n	801061c <tcp_process+0x6b4>
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	613b      	str	r3, [r7, #16]
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d1ef      	bne.n	80105fc <tcp_process+0x694>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2200      	movs	r2, #0
 8010620:	60da      	str	r2, [r3, #12]
 8010622:	4b43      	ldr	r3, [pc, #268]	; (8010730 <tcp_process+0x7c8>)
 8010624:	2201      	movs	r2, #1
 8010626:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	220a      	movs	r2, #10
 801062c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801062e:	4b41      	ldr	r3, [pc, #260]	; (8010734 <tcp_process+0x7cc>)
 8010630:	681a      	ldr	r2, [r3, #0]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	60da      	str	r2, [r3, #12]
 8010636:	4a3f      	ldr	r2, [pc, #252]	; (8010734 <tcp_process+0x7cc>)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6013      	str	r3, [r2, #0]
 801063c:	f003 f8ea 	bl	8013814 <tcp_timer_needed>
      }
      break;
 8010640:	e06c      	b.n	801071c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f000 f984 	bl	8010950 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010648:	4b3b      	ldr	r3, [pc, #236]	; (8010738 <tcp_process+0x7d0>)
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	f003 0310 	and.w	r3, r3, #16
 8010650:	2b00      	cmp	r3, #0
 8010652:	d065      	beq.n	8010720 <tcp_process+0x7b8>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010658:	4b38      	ldr	r3, [pc, #224]	; (801073c <tcp_process+0x7d4>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	429a      	cmp	r2, r3
 801065e:	d15f      	bne.n	8010720 <tcp_process+0x7b8>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010664:	2b00      	cmp	r3, #0
 8010666:	d15b      	bne.n	8010720 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7fe fcf1 	bl	800f050 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801066e:	4b35      	ldr	r3, [pc, #212]	; (8010744 <tcp_process+0x7dc>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	429a      	cmp	r2, r3
 8010676:	d105      	bne.n	8010684 <tcp_process+0x71c>
 8010678:	4b32      	ldr	r3, [pc, #200]	; (8010744 <tcp_process+0x7dc>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	4a31      	ldr	r2, [pc, #196]	; (8010744 <tcp_process+0x7dc>)
 8010680:	6013      	str	r3, [r2, #0]
 8010682:	e013      	b.n	80106ac <tcp_process+0x744>
 8010684:	4b2f      	ldr	r3, [pc, #188]	; (8010744 <tcp_process+0x7dc>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	60fb      	str	r3, [r7, #12]
 801068a:	e00c      	b.n	80106a6 <tcp_process+0x73e>
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	429a      	cmp	r2, r3
 8010694:	d104      	bne.n	80106a0 <tcp_process+0x738>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	68da      	ldr	r2, [r3, #12]
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	60da      	str	r2, [r3, #12]
 801069e:	e005      	b.n	80106ac <tcp_process+0x744>
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	60fb      	str	r3, [r7, #12]
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1ef      	bne.n	801068c <tcp_process+0x724>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2200      	movs	r2, #0
 80106b0:	60da      	str	r2, [r3, #12]
 80106b2:	4b1f      	ldr	r3, [pc, #124]	; (8010730 <tcp_process+0x7c8>)
 80106b4:	2201      	movs	r2, #1
 80106b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	220a      	movs	r2, #10
 80106bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80106be:	4b1d      	ldr	r3, [pc, #116]	; (8010734 <tcp_process+0x7cc>)
 80106c0:	681a      	ldr	r2, [r3, #0]
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	60da      	str	r2, [r3, #12]
 80106c6:	4a1b      	ldr	r2, [pc, #108]	; (8010734 <tcp_process+0x7cc>)
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6013      	str	r3, [r2, #0]
 80106cc:	f003 f8a2 	bl	8013814 <tcp_timer_needed>
      }
      break;
 80106d0:	e026      	b.n	8010720 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 f93c 	bl	8010950 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80106d8:	4b17      	ldr	r3, [pc, #92]	; (8010738 <tcp_process+0x7d0>)
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	f003 0310 	and.w	r3, r3, #16
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d01f      	beq.n	8010724 <tcp_process+0x7bc>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106e8:	4b14      	ldr	r3, [pc, #80]	; (801073c <tcp_process+0x7d4>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d119      	bne.n	8010724 <tcp_process+0x7bc>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d115      	bne.n	8010724 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80106f8:	4b11      	ldr	r3, [pc, #68]	; (8010740 <tcp_process+0x7d8>)
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	f043 0310 	orr.w	r3, r3, #16
 8010700:	b2da      	uxtb	r2, r3
 8010702:	4b0f      	ldr	r3, [pc, #60]	; (8010740 <tcp_process+0x7d8>)
 8010704:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010706:	e00d      	b.n	8010724 <tcp_process+0x7bc>
    default:
      break;
 8010708:	bf00      	nop
 801070a:	e00c      	b.n	8010726 <tcp_process+0x7be>
      break;
 801070c:	bf00      	nop
 801070e:	e00a      	b.n	8010726 <tcp_process+0x7be>
      break;
 8010710:	bf00      	nop
 8010712:	e008      	b.n	8010726 <tcp_process+0x7be>
      break;
 8010714:	bf00      	nop
 8010716:	e006      	b.n	8010726 <tcp_process+0x7be>
      break;
 8010718:	bf00      	nop
 801071a:	e004      	b.n	8010726 <tcp_process+0x7be>
      break;
 801071c:	bf00      	nop
 801071e:	e002      	b.n	8010726 <tcp_process+0x7be>
      break;
 8010720:	bf00      	nop
 8010722:	e000      	b.n	8010726 <tcp_process+0x7be>
      break;
 8010724:	bf00      	nop
  }
  return ERR_OK;
 8010726:	2300      	movs	r3, #0
}
 8010728:	4618      	mov	r0, r3
 801072a:	3724      	adds	r7, #36	; 0x24
 801072c:	46bd      	mov	sp, r7
 801072e:	bd90      	pop	{r4, r7, pc}
 8010730:	200115a0 	.word	0x200115a0
 8010734:	2001159c 	.word	0x2001159c
 8010738:	200115d0 	.word	0x200115d0
 801073c:	200115c8 	.word	0x200115c8
 8010740:	200115d1 	.word	0x200115d1
 8010744:	20011598 	.word	0x20011598

08010748 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010748:	b590      	push	{r4, r7, lr}
 801074a:	b085      	sub	sp, #20
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d106      	bne.n	8010766 <tcp_oos_insert_segment+0x1e>
 8010758:	4b3b      	ldr	r3, [pc, #236]	; (8010848 <tcp_oos_insert_segment+0x100>)
 801075a:	f240 421f 	movw	r2, #1055	; 0x41f
 801075e:	493b      	ldr	r1, [pc, #236]	; (801084c <tcp_oos_insert_segment+0x104>)
 8010760:	483b      	ldr	r0, [pc, #236]	; (8010850 <tcp_oos_insert_segment+0x108>)
 8010762:	f008 fbe7 	bl	8018f34 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	68db      	ldr	r3, [r3, #12]
 801076a:	899b      	ldrh	r3, [r3, #12]
 801076c:	b29b      	uxth	r3, r3
 801076e:	4618      	mov	r0, r3
 8010770:	f7fa ffa4 	bl	800b6bc <lwip_htons>
 8010774:	4603      	mov	r3, r0
 8010776:	b2db      	uxtb	r3, r3
 8010778:	f003 0301 	and.w	r3, r3, #1
 801077c:	2b00      	cmp	r3, #0
 801077e:	d028      	beq.n	80107d2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010780:	6838      	ldr	r0, [r7, #0]
 8010782:	f7fe f977 	bl	800ea74 <tcp_segs_free>
    next = NULL;
 8010786:	2300      	movs	r3, #0
 8010788:	603b      	str	r3, [r7, #0]
 801078a:	e056      	b.n	801083a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	68db      	ldr	r3, [r3, #12]
 8010790:	899b      	ldrh	r3, [r3, #12]
 8010792:	b29b      	uxth	r3, r3
 8010794:	4618      	mov	r0, r3
 8010796:	f7fa ff91 	bl	800b6bc <lwip_htons>
 801079a:	4603      	mov	r3, r0
 801079c:	b2db      	uxtb	r3, r3
 801079e:	f003 0301 	and.w	r3, r3, #1
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d00d      	beq.n	80107c2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	899b      	ldrh	r3, [r3, #12]
 80107ac:	b29c      	uxth	r4, r3
 80107ae:	2001      	movs	r0, #1
 80107b0:	f7fa ff84 	bl	800b6bc <lwip_htons>
 80107b4:	4603      	mov	r3, r0
 80107b6:	461a      	mov	r2, r3
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	68db      	ldr	r3, [r3, #12]
 80107bc:	4322      	orrs	r2, r4
 80107be:	b292      	uxth	r2, r2
 80107c0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80107cc:	68f8      	ldr	r0, [r7, #12]
 80107ce:	f7fe f966 	bl	800ea9e <tcp_seg_free>
    while (next &&
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d00e      	beq.n	80107f6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	891b      	ldrh	r3, [r3, #8]
 80107dc:	461a      	mov	r2, r3
 80107de:	4b1d      	ldr	r3, [pc, #116]	; (8010854 <tcp_oos_insert_segment+0x10c>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	441a      	add	r2, r3
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	685b      	ldr	r3, [r3, #4]
 80107ea:	6839      	ldr	r1, [r7, #0]
 80107ec:	8909      	ldrh	r1, [r1, #8]
 80107ee:	440b      	add	r3, r1
 80107f0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	daca      	bge.n	801078c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d01e      	beq.n	801083a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	891b      	ldrh	r3, [r3, #8]
 8010800:	461a      	mov	r2, r3
 8010802:	4b14      	ldr	r3, [pc, #80]	; (8010854 <tcp_oos_insert_segment+0x10c>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	441a      	add	r2, r3
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010810:	2b00      	cmp	r3, #0
 8010812:	dd12      	ble.n	801083a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	68db      	ldr	r3, [r3, #12]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	b29a      	uxth	r2, r3
 801081c:	4b0d      	ldr	r3, [pc, #52]	; (8010854 <tcp_oos_insert_segment+0x10c>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	b29b      	uxth	r3, r3
 8010822:	1ad3      	subs	r3, r2, r3
 8010824:	b29a      	uxth	r2, r3
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	685a      	ldr	r2, [r3, #4]
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	891b      	ldrh	r3, [r3, #8]
 8010832:	4619      	mov	r1, r3
 8010834:	4610      	mov	r0, r2
 8010836:	f7fc f9ef 	bl	800cc18 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	683a      	ldr	r2, [r7, #0]
 801083e:	601a      	str	r2, [r3, #0]
}
 8010840:	bf00      	nop
 8010842:	3714      	adds	r7, #20
 8010844:	46bd      	mov	sp, r7
 8010846:	bd90      	pop	{r4, r7, pc}
 8010848:	0801c3b8 	.word	0x0801c3b8
 801084c:	0801c678 	.word	0x0801c678
 8010850:	0801c404 	.word	0x0801c404
 8010854:	200115c4 	.word	0x200115c4

08010858 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010858:	b5b0      	push	{r4, r5, r7, lr}
 801085a:	b086      	sub	sp, #24
 801085c:	af00      	add	r7, sp, #0
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	607a      	str	r2, [r7, #4]
 8010864:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010866:	e03e      	b.n	80108e6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	685b      	ldr	r3, [r3, #4]
 8010876:	4618      	mov	r0, r3
 8010878:	f7fc fbe2 	bl	800d040 <pbuf_clen>
 801087c:	4603      	mov	r3, r0
 801087e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010886:	8a7a      	ldrh	r2, [r7, #18]
 8010888:	429a      	cmp	r2, r3
 801088a:	d906      	bls.n	801089a <tcp_free_acked_segments+0x42>
 801088c:	4b2a      	ldr	r3, [pc, #168]	; (8010938 <tcp_free_acked_segments+0xe0>)
 801088e:	f240 4257 	movw	r2, #1111	; 0x457
 8010892:	492a      	ldr	r1, [pc, #168]	; (801093c <tcp_free_acked_segments+0xe4>)
 8010894:	482a      	ldr	r0, [pc, #168]	; (8010940 <tcp_free_acked_segments+0xe8>)
 8010896:	f008 fb4d 	bl	8018f34 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80108a0:	8a7b      	ldrh	r3, [r7, #18]
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	891a      	ldrh	r2, [r3, #8]
 80108b0:	4b24      	ldr	r3, [pc, #144]	; (8010944 <tcp_free_acked_segments+0xec>)
 80108b2:	881b      	ldrh	r3, [r3, #0]
 80108b4:	4413      	add	r3, r2
 80108b6:	b29a      	uxth	r2, r3
 80108b8:	4b22      	ldr	r3, [pc, #136]	; (8010944 <tcp_free_acked_segments+0xec>)
 80108ba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80108bc:	6978      	ldr	r0, [r7, #20]
 80108be:	f7fe f8ee 	bl	800ea9e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d00c      	beq.n	80108e6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d109      	bne.n	80108e6 <tcp_free_acked_segments+0x8e>
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d106      	bne.n	80108e6 <tcp_free_acked_segments+0x8e>
 80108d8:	4b17      	ldr	r3, [pc, #92]	; (8010938 <tcp_free_acked_segments+0xe0>)
 80108da:	f240 4261 	movw	r2, #1121	; 0x461
 80108de:	491a      	ldr	r1, [pc, #104]	; (8010948 <tcp_free_acked_segments+0xf0>)
 80108e0:	4817      	ldr	r0, [pc, #92]	; (8010940 <tcp_free_acked_segments+0xe8>)
 80108e2:	f008 fb27 	bl	8018f34 <iprintf>
  while (seg_list != NULL &&
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d020      	beq.n	801092e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	68db      	ldr	r3, [r3, #12]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7fa fef7 	bl	800b6e6 <lwip_htonl>
 80108f8:	4604      	mov	r4, r0
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	891b      	ldrh	r3, [r3, #8]
 80108fe:	461d      	mov	r5, r3
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	68db      	ldr	r3, [r3, #12]
 8010904:	899b      	ldrh	r3, [r3, #12]
 8010906:	b29b      	uxth	r3, r3
 8010908:	4618      	mov	r0, r3
 801090a:	f7fa fed7 	bl	800b6bc <lwip_htons>
 801090e:	4603      	mov	r3, r0
 8010910:	b2db      	uxtb	r3, r3
 8010912:	f003 0303 	and.w	r3, r3, #3
 8010916:	2b00      	cmp	r3, #0
 8010918:	d001      	beq.n	801091e <tcp_free_acked_segments+0xc6>
 801091a:	2301      	movs	r3, #1
 801091c:	e000      	b.n	8010920 <tcp_free_acked_segments+0xc8>
 801091e:	2300      	movs	r3, #0
 8010920:	442b      	add	r3, r5
 8010922:	18e2      	adds	r2, r4, r3
 8010924:	4b09      	ldr	r3, [pc, #36]	; (801094c <tcp_free_acked_segments+0xf4>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801092a:	2b00      	cmp	r3, #0
 801092c:	dd9c      	ble.n	8010868 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801092e:	68bb      	ldr	r3, [r7, #8]
}
 8010930:	4618      	mov	r0, r3
 8010932:	3718      	adds	r7, #24
 8010934:	46bd      	mov	sp, r7
 8010936:	bdb0      	pop	{r4, r5, r7, pc}
 8010938:	0801c3b8 	.word	0x0801c3b8
 801093c:	0801c6a0 	.word	0x0801c6a0
 8010940:	0801c404 	.word	0x0801c404
 8010944:	200115cc 	.word	0x200115cc
 8010948:	0801c6c8 	.word	0x0801c6c8
 801094c:	200115c8 	.word	0x200115c8

08010950 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010950:	b5b0      	push	{r4, r5, r7, lr}
 8010952:	b094      	sub	sp, #80	; 0x50
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010958:	2300      	movs	r3, #0
 801095a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d106      	bne.n	8010970 <tcp_receive+0x20>
 8010962:	4b91      	ldr	r3, [pc, #580]	; (8010ba8 <tcp_receive+0x258>)
 8010964:	f240 427b 	movw	r2, #1147	; 0x47b
 8010968:	4990      	ldr	r1, [pc, #576]	; (8010bac <tcp_receive+0x25c>)
 801096a:	4891      	ldr	r0, [pc, #580]	; (8010bb0 <tcp_receive+0x260>)
 801096c:	f008 fae2 	bl	8018f34 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	7d1b      	ldrb	r3, [r3, #20]
 8010974:	2b03      	cmp	r3, #3
 8010976:	d806      	bhi.n	8010986 <tcp_receive+0x36>
 8010978:	4b8b      	ldr	r3, [pc, #556]	; (8010ba8 <tcp_receive+0x258>)
 801097a:	f240 427c 	movw	r2, #1148	; 0x47c
 801097e:	498d      	ldr	r1, [pc, #564]	; (8010bb4 <tcp_receive+0x264>)
 8010980:	488b      	ldr	r0, [pc, #556]	; (8010bb0 <tcp_receive+0x260>)
 8010982:	f008 fad7 	bl	8018f34 <iprintf>

  if (flags & TCP_ACK) {
 8010986:	4b8c      	ldr	r3, [pc, #560]	; (8010bb8 <tcp_receive+0x268>)
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	f003 0310 	and.w	r3, r3, #16
 801098e:	2b00      	cmp	r3, #0
 8010990:	f000 8264 	beq.w	8010e5c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801099a:	461a      	mov	r2, r3
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109a0:	4413      	add	r3, r2
 80109a2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109a8:	4b84      	ldr	r3, [pc, #528]	; (8010bbc <tcp_receive+0x26c>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	1ad3      	subs	r3, r2, r3
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	db1b      	blt.n	80109ea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109b6:	4b81      	ldr	r3, [pc, #516]	; (8010bbc <tcp_receive+0x26c>)
 80109b8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d106      	bne.n	80109cc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80109c2:	4b7f      	ldr	r3, [pc, #508]	; (8010bc0 <tcp_receive+0x270>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	1ad3      	subs	r3, r2, r3
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	db0e      	blt.n	80109ea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80109d0:	4b7b      	ldr	r3, [pc, #492]	; (8010bc0 <tcp_receive+0x270>)
 80109d2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d125      	bne.n	8010a24 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80109d8:	4b7a      	ldr	r3, [pc, #488]	; (8010bc4 <tcp_receive+0x274>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	89db      	ldrh	r3, [r3, #14]
 80109de:	b29a      	uxth	r2, r3
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109e6:	429a      	cmp	r2, r3
 80109e8:	d91c      	bls.n	8010a24 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80109ea:	4b76      	ldr	r3, [pc, #472]	; (8010bc4 <tcp_receive+0x274>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	89db      	ldrh	r3, [r3, #14]
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d205      	bcs.n	8010a14 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010a14:	4b69      	ldr	r3, [pc, #420]	; (8010bbc <tcp_receive+0x26c>)
 8010a16:	681a      	ldr	r2, [r3, #0]
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010a1c:	4b68      	ldr	r3, [pc, #416]	; (8010bc0 <tcp_receive+0x270>)
 8010a1e:	681a      	ldr	r2, [r3, #0]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010a24:	4b66      	ldr	r3, [pc, #408]	; (8010bc0 <tcp_receive+0x270>)
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a2c:	1ad3      	subs	r3, r2, r3
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	dc58      	bgt.n	8010ae4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010a32:	4b65      	ldr	r3, [pc, #404]	; (8010bc8 <tcp_receive+0x278>)
 8010a34:	881b      	ldrh	r3, [r3, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d14b      	bne.n	8010ad2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010a44:	4413      	add	r3, r2
 8010a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d142      	bne.n	8010ad2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	db3d      	blt.n	8010ad2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a5a:	4b59      	ldr	r3, [pc, #356]	; (8010bc0 <tcp_receive+0x270>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d137      	bne.n	8010ad2 <tcp_receive+0x182>
              found_dupack = 1;
 8010a62:	2301      	movs	r3, #1
 8010a64:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a6c:	2bff      	cmp	r3, #255	; 0xff
 8010a6e:	d007      	beq.n	8010a80 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a76:	3301      	adds	r3, #1
 8010a78:	b2da      	uxtb	r2, r3
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a86:	2b03      	cmp	r3, #3
 8010a88:	d91b      	bls.n	8010ac2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a94:	4413      	add	r3, r2
 8010a96:	b29a      	uxth	r2, r3
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d30a      	bcc.n	8010ab8 <tcp_receive+0x168>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010aac:	4413      	add	r3, r2
 8010aae:	b29a      	uxth	r2, r3
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ab6:	e004      	b.n	8010ac2 <tcp_receive+0x172>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010abe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ac8:	2b02      	cmp	r3, #2
 8010aca:	d902      	bls.n	8010ad2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f002 fb43 	bl	8013158 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	f040 8161 	bne.w	8010d9c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2200      	movs	r2, #0
 8010ade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010ae2:	e15b      	b.n	8010d9c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ae4:	4b36      	ldr	r3, [pc, #216]	; (8010bc0 <tcp_receive+0x270>)
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010aec:	1ad3      	subs	r3, r2, r3
 8010aee:	3b01      	subs	r3, #1
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	f2c0 814e 	blt.w	8010d92 <tcp_receive+0x442>
 8010af6:	4b32      	ldr	r3, [pc, #200]	; (8010bc0 <tcp_receive+0x270>)
 8010af8:	681a      	ldr	r2, [r3, #0]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010afe:	1ad3      	subs	r3, r2, r3
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f300 8146 	bgt.w	8010d92 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	8b5b      	ldrh	r3, [r3, #26]
 8010b0a:	f003 0304 	and.w	r3, r3, #4
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d010      	beq.n	8010b34 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	8b5b      	ldrh	r3, [r3, #26]
 8010b16:	f023 0304 	bic.w	r3, r3, #4
 8010b1a:	b29a      	uxth	r2, r3
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2200      	movs	r2, #0
 8010b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010b42:	10db      	asrs	r3, r3, #3
 8010b44:	b21b      	sxth	r3, r3
 8010b46:	b29a      	uxth	r2, r3
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	4413      	add	r3, r2
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	b21a      	sxth	r2, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010b5c:	4b18      	ldr	r3, [pc, #96]	; (8010bc0 <tcp_receive+0x270>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	b29a      	uxth	r2, r3
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b66:	b29b      	uxth	r3, r3
 8010b68:	1ad3      	subs	r3, r2, r3
 8010b6a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010b74:	4b12      	ldr	r3, [pc, #72]	; (8010bc0 <tcp_receive+0x270>)
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	7d1b      	ldrb	r3, [r3, #20]
 8010b80:	2b03      	cmp	r3, #3
 8010b82:	f240 8097 	bls.w	8010cb4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d245      	bcs.n	8010c22 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	8b5b      	ldrh	r3, [r3, #26]
 8010b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d014      	beq.n	8010bcc <tcp_receive+0x27c>
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	e013      	b.n	8010bce <tcp_receive+0x27e>
 8010ba6:	bf00      	nop
 8010ba8:	0801c3b8 	.word	0x0801c3b8
 8010bac:	0801c6e8 	.word	0x0801c6e8
 8010bb0:	0801c404 	.word	0x0801c404
 8010bb4:	0801c704 	.word	0x0801c704
 8010bb8:	200115d0 	.word	0x200115d0
 8010bbc:	200115c4 	.word	0x200115c4
 8010bc0:	200115c8 	.word	0x200115c8
 8010bc4:	200115b4 	.word	0x200115b4
 8010bc8:	200115ce 	.word	0x200115ce
 8010bcc:	2302      	movs	r3, #2
 8010bce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010bd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bdc:	fb12 f303 	smulbb	r3, r2, r3
 8010be0:	b29b      	uxth	r3, r3
 8010be2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010be4:	4293      	cmp	r3, r2
 8010be6:	bf28      	it	cs
 8010be8:	4613      	movcs	r3, r2
 8010bea:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010bf4:	4413      	add	r3, r2
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d309      	bcc.n	8010c16 <tcp_receive+0x2c6>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c0a:	4413      	add	r3, r2
 8010c0c:	b29a      	uxth	r2, r3
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c14:	e04e      	b.n	8010cb4 <tcp_receive+0x364>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c20:	e048      	b.n	8010cb4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c2a:	4413      	add	r3, r2
 8010c2c:	b29a      	uxth	r2, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d309      	bcc.n	8010c4c <tcp_receive+0x2fc>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c40:	4413      	add	r3, r2
 8010c42:	b29a      	uxth	r2, r3
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010c4a:	e004      	b.n	8010c56 <tcp_receive+0x306>
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d326      	bcc.n	8010cb4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c72:	1ad3      	subs	r3, r2, r3
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c86:	4413      	add	r3, r2
 8010c88:	b29a      	uxth	r2, r3
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d30a      	bcc.n	8010caa <tcp_receive+0x35a>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c9e:	4413      	add	r3, r2
 8010ca0:	b29a      	uxth	r2, r3
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ca8:	e004      	b.n	8010cb4 <tcp_receive+0x364>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cbc:	4a98      	ldr	r2, [pc, #608]	; (8010f20 <tcp_receive+0x5d0>)
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f7ff fdca 	bl	8010858 <tcp_free_acked_segments>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cd2:	4a94      	ldr	r2, [pc, #592]	; (8010f24 <tcp_receive+0x5d4>)
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f7ff fdbf 	bl	8010858 <tcp_free_acked_segments>
 8010cda:	4602      	mov	r2, r0
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d104      	bne.n	8010cf2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cee:	861a      	strh	r2, [r3, #48]	; 0x30
 8010cf0:	e002      	b.n	8010cf8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d103      	bne.n	8010d0e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010d14:	4b84      	ldr	r3, [pc, #528]	; (8010f28 <tcp_receive+0x5d8>)
 8010d16:	881b      	ldrh	r3, [r3, #0]
 8010d18:	4413      	add	r3, r2
 8010d1a:	b29a      	uxth	r2, r3
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	8b5b      	ldrh	r3, [r3, #26]
 8010d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d035      	beq.n	8010d9a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d118      	bne.n	8010d68 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d00c      	beq.n	8010d58 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d46:	68db      	ldr	r3, [r3, #12]
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fa fccb 	bl	800b6e6 <lwip_htonl>
 8010d50:	4603      	mov	r3, r0
 8010d52:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	dc20      	bgt.n	8010d9a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	8b5b      	ldrh	r3, [r3, #26]
 8010d5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d60:	b29a      	uxth	r2, r3
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d66:	e018      	b.n	8010d9a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7fa fcb6 	bl	800b6e6 <lwip_htonl>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	1ae3      	subs	r3, r4, r3
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	dc0b      	bgt.n	8010d9a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	8b5b      	ldrh	r3, [r3, #26]
 8010d86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d8a:	b29a      	uxth	r2, r3
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d90:	e003      	b.n	8010d9a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f002 fbce 	bl	8013534 <tcp_send_empty_ack>
 8010d98:	e000      	b.n	8010d9c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d9a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d05b      	beq.n	8010e5c <tcp_receive+0x50c>
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010da8:	4b60      	ldr	r3, [pc, #384]	; (8010f2c <tcp_receive+0x5dc>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	1ad3      	subs	r3, r2, r3
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	da54      	bge.n	8010e5c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010db2:	4b5f      	ldr	r3, [pc, #380]	; (8010f30 <tcp_receive+0x5e0>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	b29a      	uxth	r2, r3
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	1ad3      	subs	r3, r2, r3
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010dc6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010dd0:	10db      	asrs	r3, r3, #3
 8010dd2:	b21b      	sxth	r3, r3
 8010dd4:	b29b      	uxth	r3, r3
 8010dd6:	1ad3      	subs	r3, r2, r3
 8010dd8:	b29b      	uxth	r3, r3
 8010dda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010de4:	b29a      	uxth	r2, r3
 8010de6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010dea:	4413      	add	r3, r2
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	b21a      	sxth	r2, r3
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010df4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	da05      	bge.n	8010e08 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010dfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e00:	425b      	negs	r3, r3
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010e08:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e12:	109b      	asrs	r3, r3, #2
 8010e14:	b21b      	sxth	r3, r3
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	1ad3      	subs	r3, r2, r3
 8010e1a:	b29b      	uxth	r3, r3
 8010e1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e26:	b29a      	uxth	r2, r3
 8010e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e2c:	4413      	add	r3, r2
 8010e2e:	b29b      	uxth	r3, r3
 8010e30:	b21a      	sxth	r2, r3
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e3c:	10db      	asrs	r3, r3, #3
 8010e3e:	b21b      	sxth	r3, r3
 8010e40:	b29a      	uxth	r2, r3
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e48:	b29b      	uxth	r3, r3
 8010e4a:	4413      	add	r3, r2
 8010e4c:	b29b      	uxth	r3, r3
 8010e4e:	b21a      	sxth	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010e5c:	4b35      	ldr	r3, [pc, #212]	; (8010f34 <tcp_receive+0x5e4>)
 8010e5e:	881b      	ldrh	r3, [r3, #0]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	f000 84e2 	beq.w	801182a <tcp_receive+0xeda>
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	7d1b      	ldrb	r3, [r3, #20]
 8010e6a:	2b06      	cmp	r3, #6
 8010e6c:	f200 84dd 	bhi.w	801182a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e74:	4b30      	ldr	r3, [pc, #192]	; (8010f38 <tcp_receive+0x5e8>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	1ad3      	subs	r3, r2, r3
 8010e7a:	3b01      	subs	r3, #1
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	f2c0 808f 	blt.w	8010fa0 <tcp_receive+0x650>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e86:	4b2b      	ldr	r3, [pc, #172]	; (8010f34 <tcp_receive+0x5e4>)
 8010e88:	881b      	ldrh	r3, [r3, #0]
 8010e8a:	4619      	mov	r1, r3
 8010e8c:	4b2a      	ldr	r3, [pc, #168]	; (8010f38 <tcp_receive+0x5e8>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	440b      	add	r3, r1
 8010e92:	1ad3      	subs	r3, r2, r3
 8010e94:	3301      	adds	r3, #1
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	f300 8082 	bgt.w	8010fa0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010e9c:	4b27      	ldr	r3, [pc, #156]	; (8010f3c <tcp_receive+0x5ec>)
 8010e9e:	685b      	ldr	r3, [r3, #4]
 8010ea0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ea6:	4b24      	ldr	r3, [pc, #144]	; (8010f38 <tcp_receive+0x5e8>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010eae:	4b23      	ldr	r3, [pc, #140]	; (8010f3c <tcp_receive+0x5ec>)
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d106      	bne.n	8010ec4 <tcp_receive+0x574>
 8010eb6:	4b22      	ldr	r3, [pc, #136]	; (8010f40 <tcp_receive+0x5f0>)
 8010eb8:	f240 5294 	movw	r2, #1428	; 0x594
 8010ebc:	4921      	ldr	r1, [pc, #132]	; (8010f44 <tcp_receive+0x5f4>)
 8010ebe:	4822      	ldr	r0, [pc, #136]	; (8010f48 <tcp_receive+0x5f8>)
 8010ec0:	f008 f838 	bl	8018f34 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	d906      	bls.n	8010edc <tcp_receive+0x58c>
 8010ece:	4b1c      	ldr	r3, [pc, #112]	; (8010f40 <tcp_receive+0x5f0>)
 8010ed0:	f240 5295 	movw	r2, #1429	; 0x595
 8010ed4:	491d      	ldr	r1, [pc, #116]	; (8010f4c <tcp_receive+0x5fc>)
 8010ed6:	481c      	ldr	r0, [pc, #112]	; (8010f48 <tcp_receive+0x5f8>)
 8010ed8:	f008 f82c 	bl	8018f34 <iprintf>
      off = (u16_t)off32;
 8010edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ede:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010ee2:	4b16      	ldr	r3, [pc, #88]	; (8010f3c <tcp_receive+0x5ec>)
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	891b      	ldrh	r3, [r3, #8]
 8010ee8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d906      	bls.n	8010efe <tcp_receive+0x5ae>
 8010ef0:	4b13      	ldr	r3, [pc, #76]	; (8010f40 <tcp_receive+0x5f0>)
 8010ef2:	f240 5297 	movw	r2, #1431	; 0x597
 8010ef6:	4916      	ldr	r1, [pc, #88]	; (8010f50 <tcp_receive+0x600>)
 8010ef8:	4813      	ldr	r0, [pc, #76]	; (8010f48 <tcp_receive+0x5f8>)
 8010efa:	f008 f81b 	bl	8018f34 <iprintf>
      inseg.len -= off;
 8010efe:	4b0f      	ldr	r3, [pc, #60]	; (8010f3c <tcp_receive+0x5ec>)
 8010f00:	891a      	ldrh	r2, [r3, #8]
 8010f02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f06:	1ad3      	subs	r3, r2, r3
 8010f08:	b29a      	uxth	r2, r3
 8010f0a:	4b0c      	ldr	r3, [pc, #48]	; (8010f3c <tcp_receive+0x5ec>)
 8010f0c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010f0e:	4b0b      	ldr	r3, [pc, #44]	; (8010f3c <tcp_receive+0x5ec>)
 8010f10:	685b      	ldr	r3, [r3, #4]
 8010f12:	891a      	ldrh	r2, [r3, #8]
 8010f14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f18:	1ad3      	subs	r3, r2, r3
 8010f1a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010f1c:	e02a      	b.n	8010f74 <tcp_receive+0x624>
 8010f1e:	bf00      	nop
 8010f20:	0801c720 	.word	0x0801c720
 8010f24:	0801c728 	.word	0x0801c728
 8010f28:	200115cc 	.word	0x200115cc
 8010f2c:	200115c8 	.word	0x200115c8
 8010f30:	2001158c 	.word	0x2001158c
 8010f34:	200115ce 	.word	0x200115ce
 8010f38:	200115c4 	.word	0x200115c4
 8010f3c:	200115a4 	.word	0x200115a4
 8010f40:	0801c3b8 	.word	0x0801c3b8
 8010f44:	0801c730 	.word	0x0801c730
 8010f48:	0801c404 	.word	0x0801c404
 8010f4c:	0801c740 	.word	0x0801c740
 8010f50:	0801c750 	.word	0x0801c750
        off -= p->len;
 8010f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f56:	895b      	ldrh	r3, [r3, #10]
 8010f58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f5c:	1ad3      	subs	r3, r2, r3
 8010f5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010f66:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f76:	895b      	ldrh	r3, [r3, #10]
 8010f78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d8e9      	bhi.n	8010f54 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010f80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f84:	4619      	mov	r1, r3
 8010f86:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010f88:	f7fb ff46 	bl	800ce18 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f90:	4a91      	ldr	r2, [pc, #580]	; (80111d8 <tcp_receive+0x888>)
 8010f92:	6013      	str	r3, [r2, #0]
 8010f94:	4b91      	ldr	r3, [pc, #580]	; (80111dc <tcp_receive+0x88c>)
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	4a8f      	ldr	r2, [pc, #572]	; (80111d8 <tcp_receive+0x888>)
 8010f9a:	6812      	ldr	r2, [r2, #0]
 8010f9c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010f9e:	e00d      	b.n	8010fbc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010fa0:	4b8d      	ldr	r3, [pc, #564]	; (80111d8 <tcp_receive+0x888>)
 8010fa2:	681a      	ldr	r2, [r3, #0]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa8:	1ad3      	subs	r3, r2, r3
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	da06      	bge.n	8010fbc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	8b5b      	ldrh	r3, [r3, #26]
 8010fb2:	f043 0302 	orr.w	r3, r3, #2
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010fbc:	4b86      	ldr	r3, [pc, #536]	; (80111d8 <tcp_receive+0x888>)
 8010fbe:	681a      	ldr	r2, [r3, #0]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fc4:	1ad3      	subs	r3, r2, r3
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	f2c0 842a 	blt.w	8011820 <tcp_receive+0xed0>
 8010fcc:	4b82      	ldr	r3, [pc, #520]	; (80111d8 <tcp_receive+0x888>)
 8010fce:	681a      	ldr	r2, [r3, #0]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fd4:	6879      	ldr	r1, [r7, #4]
 8010fd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010fd8:	440b      	add	r3, r1
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	3301      	adds	r3, #1
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	f300 841e 	bgt.w	8011820 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fe8:	4b7b      	ldr	r3, [pc, #492]	; (80111d8 <tcp_receive+0x888>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	f040 829a 	bne.w	8011526 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010ff2:	4b7a      	ldr	r3, [pc, #488]	; (80111dc <tcp_receive+0x88c>)
 8010ff4:	891c      	ldrh	r4, [r3, #8]
 8010ff6:	4b79      	ldr	r3, [pc, #484]	; (80111dc <tcp_receive+0x88c>)
 8010ff8:	68db      	ldr	r3, [r3, #12]
 8010ffa:	899b      	ldrh	r3, [r3, #12]
 8010ffc:	b29b      	uxth	r3, r3
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7fa fb5c 	bl	800b6bc <lwip_htons>
 8011004:	4603      	mov	r3, r0
 8011006:	b2db      	uxtb	r3, r3
 8011008:	f003 0303 	and.w	r3, r3, #3
 801100c:	2b00      	cmp	r3, #0
 801100e:	d001      	beq.n	8011014 <tcp_receive+0x6c4>
 8011010:	2301      	movs	r3, #1
 8011012:	e000      	b.n	8011016 <tcp_receive+0x6c6>
 8011014:	2300      	movs	r3, #0
 8011016:	4423      	add	r3, r4
 8011018:	b29a      	uxth	r2, r3
 801101a:	4b71      	ldr	r3, [pc, #452]	; (80111e0 <tcp_receive+0x890>)
 801101c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011022:	4b6f      	ldr	r3, [pc, #444]	; (80111e0 <tcp_receive+0x890>)
 8011024:	881b      	ldrh	r3, [r3, #0]
 8011026:	429a      	cmp	r2, r3
 8011028:	d275      	bcs.n	8011116 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801102a:	4b6c      	ldr	r3, [pc, #432]	; (80111dc <tcp_receive+0x88c>)
 801102c:	68db      	ldr	r3, [r3, #12]
 801102e:	899b      	ldrh	r3, [r3, #12]
 8011030:	b29b      	uxth	r3, r3
 8011032:	4618      	mov	r0, r3
 8011034:	f7fa fb42 	bl	800b6bc <lwip_htons>
 8011038:	4603      	mov	r3, r0
 801103a:	b2db      	uxtb	r3, r3
 801103c:	f003 0301 	and.w	r3, r3, #1
 8011040:	2b00      	cmp	r3, #0
 8011042:	d01f      	beq.n	8011084 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011044:	4b65      	ldr	r3, [pc, #404]	; (80111dc <tcp_receive+0x88c>)
 8011046:	68db      	ldr	r3, [r3, #12]
 8011048:	899b      	ldrh	r3, [r3, #12]
 801104a:	b29b      	uxth	r3, r3
 801104c:	b21b      	sxth	r3, r3
 801104e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011052:	b21c      	sxth	r4, r3
 8011054:	4b61      	ldr	r3, [pc, #388]	; (80111dc <tcp_receive+0x88c>)
 8011056:	68db      	ldr	r3, [r3, #12]
 8011058:	899b      	ldrh	r3, [r3, #12]
 801105a:	b29b      	uxth	r3, r3
 801105c:	4618      	mov	r0, r3
 801105e:	f7fa fb2d 	bl	800b6bc <lwip_htons>
 8011062:	4603      	mov	r3, r0
 8011064:	b2db      	uxtb	r3, r3
 8011066:	b29b      	uxth	r3, r3
 8011068:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801106c:	b29b      	uxth	r3, r3
 801106e:	4618      	mov	r0, r3
 8011070:	f7fa fb24 	bl	800b6bc <lwip_htons>
 8011074:	4603      	mov	r3, r0
 8011076:	b21b      	sxth	r3, r3
 8011078:	4323      	orrs	r3, r4
 801107a:	b21a      	sxth	r2, r3
 801107c:	4b57      	ldr	r3, [pc, #348]	; (80111dc <tcp_receive+0x88c>)
 801107e:	68db      	ldr	r3, [r3, #12]
 8011080:	b292      	uxth	r2, r2
 8011082:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011088:	4b54      	ldr	r3, [pc, #336]	; (80111dc <tcp_receive+0x88c>)
 801108a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801108c:	4b53      	ldr	r3, [pc, #332]	; (80111dc <tcp_receive+0x88c>)
 801108e:	68db      	ldr	r3, [r3, #12]
 8011090:	899b      	ldrh	r3, [r3, #12]
 8011092:	b29b      	uxth	r3, r3
 8011094:	4618      	mov	r0, r3
 8011096:	f7fa fb11 	bl	800b6bc <lwip_htons>
 801109a:	4603      	mov	r3, r0
 801109c:	b2db      	uxtb	r3, r3
 801109e:	f003 0302 	and.w	r3, r3, #2
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d005      	beq.n	80110b2 <tcp_receive+0x762>
            inseg.len -= 1;
 80110a6:	4b4d      	ldr	r3, [pc, #308]	; (80111dc <tcp_receive+0x88c>)
 80110a8:	891b      	ldrh	r3, [r3, #8]
 80110aa:	3b01      	subs	r3, #1
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	4b4b      	ldr	r3, [pc, #300]	; (80111dc <tcp_receive+0x88c>)
 80110b0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80110b2:	4b4a      	ldr	r3, [pc, #296]	; (80111dc <tcp_receive+0x88c>)
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	4a49      	ldr	r2, [pc, #292]	; (80111dc <tcp_receive+0x88c>)
 80110b8:	8912      	ldrh	r2, [r2, #8]
 80110ba:	4611      	mov	r1, r2
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fb fdab 	bl	800cc18 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80110c2:	4b46      	ldr	r3, [pc, #280]	; (80111dc <tcp_receive+0x88c>)
 80110c4:	891c      	ldrh	r4, [r3, #8]
 80110c6:	4b45      	ldr	r3, [pc, #276]	; (80111dc <tcp_receive+0x88c>)
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	899b      	ldrh	r3, [r3, #12]
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7fa faf4 	bl	800b6bc <lwip_htons>
 80110d4:	4603      	mov	r3, r0
 80110d6:	b2db      	uxtb	r3, r3
 80110d8:	f003 0303 	and.w	r3, r3, #3
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d001      	beq.n	80110e4 <tcp_receive+0x794>
 80110e0:	2301      	movs	r3, #1
 80110e2:	e000      	b.n	80110e6 <tcp_receive+0x796>
 80110e4:	2300      	movs	r3, #0
 80110e6:	4423      	add	r3, r4
 80110e8:	b29a      	uxth	r2, r3
 80110ea:	4b3d      	ldr	r3, [pc, #244]	; (80111e0 <tcp_receive+0x890>)
 80110ec:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80110ee:	4b3c      	ldr	r3, [pc, #240]	; (80111e0 <tcp_receive+0x890>)
 80110f0:	881b      	ldrh	r3, [r3, #0]
 80110f2:	461a      	mov	r2, r3
 80110f4:	4b38      	ldr	r3, [pc, #224]	; (80111d8 <tcp_receive+0x888>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	441a      	add	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110fe:	6879      	ldr	r1, [r7, #4]
 8011100:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011102:	440b      	add	r3, r1
 8011104:	429a      	cmp	r2, r3
 8011106:	d006      	beq.n	8011116 <tcp_receive+0x7c6>
 8011108:	4b36      	ldr	r3, [pc, #216]	; (80111e4 <tcp_receive+0x894>)
 801110a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801110e:	4936      	ldr	r1, [pc, #216]	; (80111e8 <tcp_receive+0x898>)
 8011110:	4836      	ldr	r0, [pc, #216]	; (80111ec <tcp_receive+0x89c>)
 8011112:	f007 ff0f 	bl	8018f34 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801111a:	2b00      	cmp	r3, #0
 801111c:	f000 80e7 	beq.w	80112ee <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011120:	4b2e      	ldr	r3, [pc, #184]	; (80111dc <tcp_receive+0x88c>)
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	899b      	ldrh	r3, [r3, #12]
 8011126:	b29b      	uxth	r3, r3
 8011128:	4618      	mov	r0, r3
 801112a:	f7fa fac7 	bl	800b6bc <lwip_htons>
 801112e:	4603      	mov	r3, r0
 8011130:	b2db      	uxtb	r3, r3
 8011132:	f003 0301 	and.w	r3, r3, #1
 8011136:	2b00      	cmp	r3, #0
 8011138:	d010      	beq.n	801115c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801113a:	e00a      	b.n	8011152 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011140:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011146:	681a      	ldr	r2, [r3, #0]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801114c:	68f8      	ldr	r0, [r7, #12]
 801114e:	f7fd fca6 	bl	800ea9e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011156:	2b00      	cmp	r3, #0
 8011158:	d1f0      	bne.n	801113c <tcp_receive+0x7ec>
 801115a:	e0c8      	b.n	80112ee <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011160:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011162:	e052      	b.n	801120a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011166:	68db      	ldr	r3, [r3, #12]
 8011168:	899b      	ldrh	r3, [r3, #12]
 801116a:	b29b      	uxth	r3, r3
 801116c:	4618      	mov	r0, r3
 801116e:	f7fa faa5 	bl	800b6bc <lwip_htons>
 8011172:	4603      	mov	r3, r0
 8011174:	b2db      	uxtb	r3, r3
 8011176:	f003 0301 	and.w	r3, r3, #1
 801117a:	2b00      	cmp	r3, #0
 801117c:	d03d      	beq.n	80111fa <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801117e:	4b17      	ldr	r3, [pc, #92]	; (80111dc <tcp_receive+0x88c>)
 8011180:	68db      	ldr	r3, [r3, #12]
 8011182:	899b      	ldrh	r3, [r3, #12]
 8011184:	b29b      	uxth	r3, r3
 8011186:	4618      	mov	r0, r3
 8011188:	f7fa fa98 	bl	800b6bc <lwip_htons>
 801118c:	4603      	mov	r3, r0
 801118e:	b2db      	uxtb	r3, r3
 8011190:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011194:	2b00      	cmp	r3, #0
 8011196:	d130      	bne.n	80111fa <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011198:	4b10      	ldr	r3, [pc, #64]	; (80111dc <tcp_receive+0x88c>)
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	899b      	ldrh	r3, [r3, #12]
 801119e:	b29c      	uxth	r4, r3
 80111a0:	2001      	movs	r0, #1
 80111a2:	f7fa fa8b 	bl	800b6bc <lwip_htons>
 80111a6:	4603      	mov	r3, r0
 80111a8:	461a      	mov	r2, r3
 80111aa:	4b0c      	ldr	r3, [pc, #48]	; (80111dc <tcp_receive+0x88c>)
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	4322      	orrs	r2, r4
 80111b0:	b292      	uxth	r2, r2
 80111b2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80111b4:	4b09      	ldr	r3, [pc, #36]	; (80111dc <tcp_receive+0x88c>)
 80111b6:	891c      	ldrh	r4, [r3, #8]
 80111b8:	4b08      	ldr	r3, [pc, #32]	; (80111dc <tcp_receive+0x88c>)
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	899b      	ldrh	r3, [r3, #12]
 80111be:	b29b      	uxth	r3, r3
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7fa fa7b 	bl	800b6bc <lwip_htons>
 80111c6:	4603      	mov	r3, r0
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	f003 0303 	and.w	r3, r3, #3
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d00e      	beq.n	80111f0 <tcp_receive+0x8a0>
 80111d2:	2301      	movs	r3, #1
 80111d4:	e00d      	b.n	80111f2 <tcp_receive+0x8a2>
 80111d6:	bf00      	nop
 80111d8:	200115c4 	.word	0x200115c4
 80111dc:	200115a4 	.word	0x200115a4
 80111e0:	200115ce 	.word	0x200115ce
 80111e4:	0801c3b8 	.word	0x0801c3b8
 80111e8:	0801c760 	.word	0x0801c760
 80111ec:	0801c404 	.word	0x0801c404
 80111f0:	2300      	movs	r3, #0
 80111f2:	4423      	add	r3, r4
 80111f4:	b29a      	uxth	r2, r3
 80111f6:	4b98      	ldr	r3, [pc, #608]	; (8011458 <tcp_receive+0xb08>)
 80111f8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80111fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111fc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80111fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011204:	6938      	ldr	r0, [r7, #16]
 8011206:	f7fd fc4a 	bl	800ea9e <tcp_seg_free>
            while (next &&
 801120a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801120c:	2b00      	cmp	r3, #0
 801120e:	d00e      	beq.n	801122e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011210:	4b91      	ldr	r3, [pc, #580]	; (8011458 <tcp_receive+0xb08>)
 8011212:	881b      	ldrh	r3, [r3, #0]
 8011214:	461a      	mov	r2, r3
 8011216:	4b91      	ldr	r3, [pc, #580]	; (801145c <tcp_receive+0xb0c>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	441a      	add	r2, r3
 801121c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801121e:	68db      	ldr	r3, [r3, #12]
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011224:	8909      	ldrh	r1, [r1, #8]
 8011226:	440b      	add	r3, r1
 8011228:	1ad3      	subs	r3, r2, r3
            while (next &&
 801122a:	2b00      	cmp	r3, #0
 801122c:	da9a      	bge.n	8011164 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801122e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011230:	2b00      	cmp	r3, #0
 8011232:	d059      	beq.n	80112e8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011234:	4b88      	ldr	r3, [pc, #544]	; (8011458 <tcp_receive+0xb08>)
 8011236:	881b      	ldrh	r3, [r3, #0]
 8011238:	461a      	mov	r2, r3
 801123a:	4b88      	ldr	r3, [pc, #544]	; (801145c <tcp_receive+0xb0c>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	441a      	add	r2, r3
 8011240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011248:	2b00      	cmp	r3, #0
 801124a:	dd4d      	ble.n	80112e8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801124c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801124e:	68db      	ldr	r3, [r3, #12]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	b29a      	uxth	r2, r3
 8011254:	4b81      	ldr	r3, [pc, #516]	; (801145c <tcp_receive+0xb0c>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	b29b      	uxth	r3, r3
 801125a:	1ad3      	subs	r3, r2, r3
 801125c:	b29a      	uxth	r2, r3
 801125e:	4b80      	ldr	r3, [pc, #512]	; (8011460 <tcp_receive+0xb10>)
 8011260:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011262:	4b7f      	ldr	r3, [pc, #508]	; (8011460 <tcp_receive+0xb10>)
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	899b      	ldrh	r3, [r3, #12]
 8011268:	b29b      	uxth	r3, r3
 801126a:	4618      	mov	r0, r3
 801126c:	f7fa fa26 	bl	800b6bc <lwip_htons>
 8011270:	4603      	mov	r3, r0
 8011272:	b2db      	uxtb	r3, r3
 8011274:	f003 0302 	and.w	r3, r3, #2
 8011278:	2b00      	cmp	r3, #0
 801127a:	d005      	beq.n	8011288 <tcp_receive+0x938>
                inseg.len -= 1;
 801127c:	4b78      	ldr	r3, [pc, #480]	; (8011460 <tcp_receive+0xb10>)
 801127e:	891b      	ldrh	r3, [r3, #8]
 8011280:	3b01      	subs	r3, #1
 8011282:	b29a      	uxth	r2, r3
 8011284:	4b76      	ldr	r3, [pc, #472]	; (8011460 <tcp_receive+0xb10>)
 8011286:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011288:	4b75      	ldr	r3, [pc, #468]	; (8011460 <tcp_receive+0xb10>)
 801128a:	685b      	ldr	r3, [r3, #4]
 801128c:	4a74      	ldr	r2, [pc, #464]	; (8011460 <tcp_receive+0xb10>)
 801128e:	8912      	ldrh	r2, [r2, #8]
 8011290:	4611      	mov	r1, r2
 8011292:	4618      	mov	r0, r3
 8011294:	f7fb fcc0 	bl	800cc18 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011298:	4b71      	ldr	r3, [pc, #452]	; (8011460 <tcp_receive+0xb10>)
 801129a:	891c      	ldrh	r4, [r3, #8]
 801129c:	4b70      	ldr	r3, [pc, #448]	; (8011460 <tcp_receive+0xb10>)
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	899b      	ldrh	r3, [r3, #12]
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7fa fa09 	bl	800b6bc <lwip_htons>
 80112aa:	4603      	mov	r3, r0
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	f003 0303 	and.w	r3, r3, #3
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d001      	beq.n	80112ba <tcp_receive+0x96a>
 80112b6:	2301      	movs	r3, #1
 80112b8:	e000      	b.n	80112bc <tcp_receive+0x96c>
 80112ba:	2300      	movs	r3, #0
 80112bc:	4423      	add	r3, r4
 80112be:	b29a      	uxth	r2, r3
 80112c0:	4b65      	ldr	r3, [pc, #404]	; (8011458 <tcp_receive+0xb08>)
 80112c2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80112c4:	4b64      	ldr	r3, [pc, #400]	; (8011458 <tcp_receive+0xb08>)
 80112c6:	881b      	ldrh	r3, [r3, #0]
 80112c8:	461a      	mov	r2, r3
 80112ca:	4b64      	ldr	r3, [pc, #400]	; (801145c <tcp_receive+0xb0c>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	441a      	add	r2, r3
 80112d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d006      	beq.n	80112e8 <tcp_receive+0x998>
 80112da:	4b62      	ldr	r3, [pc, #392]	; (8011464 <tcp_receive+0xb14>)
 80112dc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80112e0:	4961      	ldr	r1, [pc, #388]	; (8011468 <tcp_receive+0xb18>)
 80112e2:	4862      	ldr	r0, [pc, #392]	; (801146c <tcp_receive+0xb1c>)
 80112e4:	f007 fe26 	bl	8018f34 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80112ec:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80112ee:	4b5a      	ldr	r3, [pc, #360]	; (8011458 <tcp_receive+0xb08>)
 80112f0:	881b      	ldrh	r3, [r3, #0]
 80112f2:	461a      	mov	r2, r3
 80112f4:	4b59      	ldr	r3, [pc, #356]	; (801145c <tcp_receive+0xb0c>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	441a      	add	r2, r3
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011302:	4b55      	ldr	r3, [pc, #340]	; (8011458 <tcp_receive+0xb08>)
 8011304:	881b      	ldrh	r3, [r3, #0]
 8011306:	429a      	cmp	r2, r3
 8011308:	d206      	bcs.n	8011318 <tcp_receive+0x9c8>
 801130a:	4b56      	ldr	r3, [pc, #344]	; (8011464 <tcp_receive+0xb14>)
 801130c:	f240 6207 	movw	r2, #1543	; 0x607
 8011310:	4957      	ldr	r1, [pc, #348]	; (8011470 <tcp_receive+0xb20>)
 8011312:	4856      	ldr	r0, [pc, #344]	; (801146c <tcp_receive+0xb1c>)
 8011314:	f007 fe0e 	bl	8018f34 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801131c:	4b4e      	ldr	r3, [pc, #312]	; (8011458 <tcp_receive+0xb08>)
 801131e:	881b      	ldrh	r3, [r3, #0]
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	b29a      	uxth	r2, r3
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f7fc fd7b 	bl	800de24 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801132e:	4b4c      	ldr	r3, [pc, #304]	; (8011460 <tcp_receive+0xb10>)
 8011330:	685b      	ldr	r3, [r3, #4]
 8011332:	891b      	ldrh	r3, [r3, #8]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d006      	beq.n	8011346 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011338:	4b49      	ldr	r3, [pc, #292]	; (8011460 <tcp_receive+0xb10>)
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	4a4d      	ldr	r2, [pc, #308]	; (8011474 <tcp_receive+0xb24>)
 801133e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011340:	4b47      	ldr	r3, [pc, #284]	; (8011460 <tcp_receive+0xb10>)
 8011342:	2200      	movs	r2, #0
 8011344:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011346:	4b46      	ldr	r3, [pc, #280]	; (8011460 <tcp_receive+0xb10>)
 8011348:	68db      	ldr	r3, [r3, #12]
 801134a:	899b      	ldrh	r3, [r3, #12]
 801134c:	b29b      	uxth	r3, r3
 801134e:	4618      	mov	r0, r3
 8011350:	f7fa f9b4 	bl	800b6bc <lwip_htons>
 8011354:	4603      	mov	r3, r0
 8011356:	b2db      	uxtb	r3, r3
 8011358:	f003 0301 	and.w	r3, r3, #1
 801135c:	2b00      	cmp	r3, #0
 801135e:	f000 80b8 	beq.w	80114d2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011362:	4b45      	ldr	r3, [pc, #276]	; (8011478 <tcp_receive+0xb28>)
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	f043 0320 	orr.w	r3, r3, #32
 801136a:	b2da      	uxtb	r2, r3
 801136c:	4b42      	ldr	r3, [pc, #264]	; (8011478 <tcp_receive+0xb28>)
 801136e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011370:	e0af      	b.n	80114d2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011376:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	4a36      	ldr	r2, [pc, #216]	; (801145c <tcp_receive+0xb0c>)
 8011382:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	891b      	ldrh	r3, [r3, #8]
 8011388:	461c      	mov	r4, r3
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	68db      	ldr	r3, [r3, #12]
 801138e:	899b      	ldrh	r3, [r3, #12]
 8011390:	b29b      	uxth	r3, r3
 8011392:	4618      	mov	r0, r3
 8011394:	f7fa f992 	bl	800b6bc <lwip_htons>
 8011398:	4603      	mov	r3, r0
 801139a:	b2db      	uxtb	r3, r3
 801139c:	f003 0303 	and.w	r3, r3, #3
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d001      	beq.n	80113a8 <tcp_receive+0xa58>
 80113a4:	2301      	movs	r3, #1
 80113a6:	e000      	b.n	80113aa <tcp_receive+0xa5a>
 80113a8:	2300      	movs	r3, #0
 80113aa:	191a      	adds	r2, r3, r4
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b0:	441a      	add	r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113ba:	461c      	mov	r4, r3
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	891b      	ldrh	r3, [r3, #8]
 80113c0:	461d      	mov	r5, r3
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	68db      	ldr	r3, [r3, #12]
 80113c6:	899b      	ldrh	r3, [r3, #12]
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fa f976 	bl	800b6bc <lwip_htons>
 80113d0:	4603      	mov	r3, r0
 80113d2:	b2db      	uxtb	r3, r3
 80113d4:	f003 0303 	and.w	r3, r3, #3
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d001      	beq.n	80113e0 <tcp_receive+0xa90>
 80113dc:	2301      	movs	r3, #1
 80113de:	e000      	b.n	80113e2 <tcp_receive+0xa92>
 80113e0:	2300      	movs	r3, #0
 80113e2:	442b      	add	r3, r5
 80113e4:	429c      	cmp	r4, r3
 80113e6:	d206      	bcs.n	80113f6 <tcp_receive+0xaa6>
 80113e8:	4b1e      	ldr	r3, [pc, #120]	; (8011464 <tcp_receive+0xb14>)
 80113ea:	f240 622b 	movw	r2, #1579	; 0x62b
 80113ee:	4923      	ldr	r1, [pc, #140]	; (801147c <tcp_receive+0xb2c>)
 80113f0:	481e      	ldr	r0, [pc, #120]	; (801146c <tcp_receive+0xb1c>)
 80113f2:	f007 fd9f 	bl	8018f34 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	891b      	ldrh	r3, [r3, #8]
 80113fa:	461c      	mov	r4, r3
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	899b      	ldrh	r3, [r3, #12]
 8011402:	b29b      	uxth	r3, r3
 8011404:	4618      	mov	r0, r3
 8011406:	f7fa f959 	bl	800b6bc <lwip_htons>
 801140a:	4603      	mov	r3, r0
 801140c:	b2db      	uxtb	r3, r3
 801140e:	f003 0303 	and.w	r3, r3, #3
 8011412:	2b00      	cmp	r3, #0
 8011414:	d001      	beq.n	801141a <tcp_receive+0xaca>
 8011416:	2301      	movs	r3, #1
 8011418:	e000      	b.n	801141c <tcp_receive+0xacc>
 801141a:	2300      	movs	r3, #0
 801141c:	1919      	adds	r1, r3, r4
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011422:	b28b      	uxth	r3, r1
 8011424:	1ad3      	subs	r3, r2, r3
 8011426:	b29a      	uxth	r2, r3
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f7fc fcf9 	bl	800de24 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	891b      	ldrh	r3, [r3, #8]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d028      	beq.n	801148e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801143c:	4b0d      	ldr	r3, [pc, #52]	; (8011474 <tcp_receive+0xb24>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d01d      	beq.n	8011480 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011444:	4b0b      	ldr	r3, [pc, #44]	; (8011474 <tcp_receive+0xb24>)
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	4619      	mov	r1, r3
 801144e:	4610      	mov	r0, r2
 8011450:	f7fb fe36 	bl	800d0c0 <pbuf_cat>
 8011454:	e018      	b.n	8011488 <tcp_receive+0xb38>
 8011456:	bf00      	nop
 8011458:	200115ce 	.word	0x200115ce
 801145c:	200115c4 	.word	0x200115c4
 8011460:	200115a4 	.word	0x200115a4
 8011464:	0801c3b8 	.word	0x0801c3b8
 8011468:	0801c798 	.word	0x0801c798
 801146c:	0801c404 	.word	0x0801c404
 8011470:	0801c7d4 	.word	0x0801c7d4
 8011474:	200115d4 	.word	0x200115d4
 8011478:	200115d1 	.word	0x200115d1
 801147c:	0801c7f4 	.word	0x0801c7f4
            } else {
              recv_data = cseg->p;
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	4a70      	ldr	r2, [pc, #448]	; (8011648 <tcp_receive+0xcf8>)
 8011486:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	2200      	movs	r2, #0
 801148c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	68db      	ldr	r3, [r3, #12]
 8011492:	899b      	ldrh	r3, [r3, #12]
 8011494:	b29b      	uxth	r3, r3
 8011496:	4618      	mov	r0, r3
 8011498:	f7fa f910 	bl	800b6bc <lwip_htons>
 801149c:	4603      	mov	r3, r0
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	f003 0301 	and.w	r3, r3, #1
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d00d      	beq.n	80114c4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80114a8:	4b68      	ldr	r3, [pc, #416]	; (801164c <tcp_receive+0xcfc>)
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	f043 0320 	orr.w	r3, r3, #32
 80114b0:	b2da      	uxtb	r2, r3
 80114b2:	4b66      	ldr	r3, [pc, #408]	; (801164c <tcp_receive+0xcfc>)
 80114b4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	7d1b      	ldrb	r3, [r3, #20]
 80114ba:	2b04      	cmp	r3, #4
 80114bc:	d102      	bne.n	80114c4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	2207      	movs	r2, #7
 80114c2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	681a      	ldr	r2, [r3, #0]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80114cc:	68b8      	ldr	r0, [r7, #8]
 80114ce:	f7fd fae6 	bl	800ea9e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d008      	beq.n	80114ec <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	685a      	ldr	r2, [r3, #4]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80114e6:	429a      	cmp	r2, r3
 80114e8:	f43f af43 	beq.w	8011372 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	8b5b      	ldrh	r3, [r3, #26]
 80114f0:	f003 0301 	and.w	r3, r3, #1
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d00e      	beq.n	8011516 <tcp_receive+0xbc6>
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	8b5b      	ldrh	r3, [r3, #26]
 80114fc:	f023 0301 	bic.w	r3, r3, #1
 8011500:	b29a      	uxth	r2, r3
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	835a      	strh	r2, [r3, #26]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	8b5b      	ldrh	r3, [r3, #26]
 801150a:	f043 0302 	orr.w	r3, r3, #2
 801150e:	b29a      	uxth	r2, r3
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011514:	e188      	b.n	8011828 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	8b5b      	ldrh	r3, [r3, #26]
 801151a:	f043 0301 	orr.w	r3, r3, #1
 801151e:	b29a      	uxth	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011524:	e180      	b.n	8011828 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801152a:	2b00      	cmp	r3, #0
 801152c:	d106      	bne.n	801153c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801152e:	4848      	ldr	r0, [pc, #288]	; (8011650 <tcp_receive+0xd00>)
 8011530:	f7fd faec 	bl	800eb0c <tcp_seg_copy>
 8011534:	4602      	mov	r2, r0
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	675a      	str	r2, [r3, #116]	; 0x74
 801153a:	e16d      	b.n	8011818 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801153c:	2300      	movs	r3, #0
 801153e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011544:	63bb      	str	r3, [r7, #56]	; 0x38
 8011546:	e157      	b.n	80117f8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	685a      	ldr	r2, [r3, #4]
 801154e:	4b41      	ldr	r3, [pc, #260]	; (8011654 <tcp_receive+0xd04>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	429a      	cmp	r2, r3
 8011554:	d11d      	bne.n	8011592 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011556:	4b3e      	ldr	r3, [pc, #248]	; (8011650 <tcp_receive+0xd00>)
 8011558:	891a      	ldrh	r2, [r3, #8]
 801155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801155c:	891b      	ldrh	r3, [r3, #8]
 801155e:	429a      	cmp	r2, r3
 8011560:	f240 814f 	bls.w	8011802 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011564:	483a      	ldr	r0, [pc, #232]	; (8011650 <tcp_receive+0xd00>)
 8011566:	f7fd fad1 	bl	800eb0c <tcp_seg_copy>
 801156a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	2b00      	cmp	r3, #0
 8011570:	f000 8149 	beq.w	8011806 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011576:	2b00      	cmp	r3, #0
 8011578:	d003      	beq.n	8011582 <tcp_receive+0xc32>
                    prev->next = cseg;
 801157a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801157c:	697a      	ldr	r2, [r7, #20]
 801157e:	601a      	str	r2, [r3, #0]
 8011580:	e002      	b.n	8011588 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	697a      	ldr	r2, [r7, #20]
 8011586:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011588:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801158a:	6978      	ldr	r0, [r7, #20]
 801158c:	f7ff f8dc 	bl	8010748 <tcp_oos_insert_segment>
                }
                break;
 8011590:	e139      	b.n	8011806 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011594:	2b00      	cmp	r3, #0
 8011596:	d117      	bne.n	80115c8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011598:	4b2e      	ldr	r3, [pc, #184]	; (8011654 <tcp_receive+0xd04>)
 801159a:	681a      	ldr	r2, [r3, #0]
 801159c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159e:	68db      	ldr	r3, [r3, #12]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	da57      	bge.n	8011658 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80115a8:	4829      	ldr	r0, [pc, #164]	; (8011650 <tcp_receive+0xd00>)
 80115aa:	f7fd faaf 	bl	800eb0c <tcp_seg_copy>
 80115ae:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80115b0:	69bb      	ldr	r3, [r7, #24]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	f000 8129 	beq.w	801180a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	69ba      	ldr	r2, [r7, #24]
 80115bc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80115be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80115c0:	69b8      	ldr	r0, [r7, #24]
 80115c2:	f7ff f8c1 	bl	8010748 <tcp_oos_insert_segment>
                  }
                  break;
 80115c6:	e120      	b.n	801180a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80115c8:	4b22      	ldr	r3, [pc, #136]	; (8011654 <tcp_receive+0xd04>)
 80115ca:	681a      	ldr	r2, [r3, #0]
 80115cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	1ad3      	subs	r3, r2, r3
 80115d4:	3b01      	subs	r3, #1
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	db3e      	blt.n	8011658 <tcp_receive+0xd08>
 80115da:	4b1e      	ldr	r3, [pc, #120]	; (8011654 <tcp_receive+0xd04>)
 80115dc:	681a      	ldr	r2, [r3, #0]
 80115de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e0:	68db      	ldr	r3, [r3, #12]
 80115e2:	685b      	ldr	r3, [r3, #4]
 80115e4:	1ad3      	subs	r3, r2, r3
 80115e6:	3301      	adds	r3, #1
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	dc35      	bgt.n	8011658 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80115ec:	4818      	ldr	r0, [pc, #96]	; (8011650 <tcp_receive+0xd00>)
 80115ee:	f7fd fa8d 	bl	800eb0c <tcp_seg_copy>
 80115f2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80115f4:	69fb      	ldr	r3, [r7, #28]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f000 8109 	beq.w	801180e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80115fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011604:	8912      	ldrh	r2, [r2, #8]
 8011606:	441a      	add	r2, r3
 8011608:	4b12      	ldr	r3, [pc, #72]	; (8011654 <tcp_receive+0xd04>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	1ad3      	subs	r3, r2, r3
 801160e:	2b00      	cmp	r3, #0
 8011610:	dd12      	ble.n	8011638 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011612:	4b10      	ldr	r3, [pc, #64]	; (8011654 <tcp_receive+0xd04>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	b29a      	uxth	r2, r3
 8011618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801161a:	68db      	ldr	r3, [r3, #12]
 801161c:	685b      	ldr	r3, [r3, #4]
 801161e:	b29b      	uxth	r3, r3
 8011620:	1ad3      	subs	r3, r2, r3
 8011622:	b29a      	uxth	r2, r3
 8011624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011626:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801162a:	685a      	ldr	r2, [r3, #4]
 801162c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801162e:	891b      	ldrh	r3, [r3, #8]
 8011630:	4619      	mov	r1, r3
 8011632:	4610      	mov	r0, r2
 8011634:	f7fb faf0 	bl	800cc18 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801163a:	69fa      	ldr	r2, [r7, #28]
 801163c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801163e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011640:	69f8      	ldr	r0, [r7, #28]
 8011642:	f7ff f881 	bl	8010748 <tcp_oos_insert_segment>
                  }
                  break;
 8011646:	e0e2      	b.n	801180e <tcp_receive+0xebe>
 8011648:	200115d4 	.word	0x200115d4
 801164c:	200115d1 	.word	0x200115d1
 8011650:	200115a4 	.word	0x200115a4
 8011654:	200115c4 	.word	0x200115c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801165a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801165c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	2b00      	cmp	r3, #0
 8011662:	f040 80c6 	bne.w	80117f2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011666:	4b80      	ldr	r3, [pc, #512]	; (8011868 <tcp_receive+0xf18>)
 8011668:	681a      	ldr	r2, [r3, #0]
 801166a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	685b      	ldr	r3, [r3, #4]
 8011670:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011672:	2b00      	cmp	r3, #0
 8011674:	f340 80bd 	ble.w	80117f2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	899b      	ldrh	r3, [r3, #12]
 801167e:	b29b      	uxth	r3, r3
 8011680:	4618      	mov	r0, r3
 8011682:	f7fa f81b 	bl	800b6bc <lwip_htons>
 8011686:	4603      	mov	r3, r0
 8011688:	b2db      	uxtb	r3, r3
 801168a:	f003 0301 	and.w	r3, r3, #1
 801168e:	2b00      	cmp	r3, #0
 8011690:	f040 80bf 	bne.w	8011812 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011694:	4875      	ldr	r0, [pc, #468]	; (801186c <tcp_receive+0xf1c>)
 8011696:	f7fd fa39 	bl	800eb0c <tcp_seg_copy>
 801169a:	4602      	mov	r2, r0
 801169c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801169e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80116a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	f000 80b6 	beq.w	8011816 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80116aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ac:	68db      	ldr	r3, [r3, #12]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116b2:	8912      	ldrh	r2, [r2, #8]
 80116b4:	441a      	add	r2, r3
 80116b6:	4b6c      	ldr	r3, [pc, #432]	; (8011868 <tcp_receive+0xf18>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	1ad3      	subs	r3, r2, r3
 80116bc:	2b00      	cmp	r3, #0
 80116be:	dd12      	ble.n	80116e6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80116c0:	4b69      	ldr	r3, [pc, #420]	; (8011868 <tcp_receive+0xf18>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	b29a      	uxth	r2, r3
 80116c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c8:	68db      	ldr	r3, [r3, #12]
 80116ca:	685b      	ldr	r3, [r3, #4]
 80116cc:	b29b      	uxth	r3, r3
 80116ce:	1ad3      	subs	r3, r2, r3
 80116d0:	b29a      	uxth	r2, r3
 80116d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80116d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d8:	685a      	ldr	r2, [r3, #4]
 80116da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116dc:	891b      	ldrh	r3, [r3, #8]
 80116de:	4619      	mov	r1, r3
 80116e0:	4610      	mov	r0, r2
 80116e2:	f7fb fa99 	bl	800cc18 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80116e6:	4b62      	ldr	r3, [pc, #392]	; (8011870 <tcp_receive+0xf20>)
 80116e8:	881b      	ldrh	r3, [r3, #0]
 80116ea:	461a      	mov	r2, r3
 80116ec:	4b5e      	ldr	r3, [pc, #376]	; (8011868 <tcp_receive+0xf18>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	441a      	add	r2, r3
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f6:	6879      	ldr	r1, [r7, #4]
 80116f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116fa:	440b      	add	r3, r1
 80116fc:	1ad3      	subs	r3, r2, r3
 80116fe:	2b00      	cmp	r3, #0
 8011700:	f340 8089 	ble.w	8011816 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	899b      	ldrh	r3, [r3, #12]
 801170c:	b29b      	uxth	r3, r3
 801170e:	4618      	mov	r0, r3
 8011710:	f7f9 ffd4 	bl	800b6bc <lwip_htons>
 8011714:	4603      	mov	r3, r0
 8011716:	b2db      	uxtb	r3, r3
 8011718:	f003 0301 	and.w	r3, r3, #1
 801171c:	2b00      	cmp	r3, #0
 801171e:	d022      	beq.n	8011766 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	68db      	ldr	r3, [r3, #12]
 8011726:	899b      	ldrh	r3, [r3, #12]
 8011728:	b29b      	uxth	r3, r3
 801172a:	b21b      	sxth	r3, r3
 801172c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011730:	b21c      	sxth	r4, r3
 8011732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	68db      	ldr	r3, [r3, #12]
 8011738:	899b      	ldrh	r3, [r3, #12]
 801173a:	b29b      	uxth	r3, r3
 801173c:	4618      	mov	r0, r3
 801173e:	f7f9 ffbd 	bl	800b6bc <lwip_htons>
 8011742:	4603      	mov	r3, r0
 8011744:	b2db      	uxtb	r3, r3
 8011746:	b29b      	uxth	r3, r3
 8011748:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801174c:	b29b      	uxth	r3, r3
 801174e:	4618      	mov	r0, r3
 8011750:	f7f9 ffb4 	bl	800b6bc <lwip_htons>
 8011754:	4603      	mov	r3, r0
 8011756:	b21b      	sxth	r3, r3
 8011758:	4323      	orrs	r3, r4
 801175a:	b21a      	sxth	r2, r3
 801175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	68db      	ldr	r3, [r3, #12]
 8011762:	b292      	uxth	r2, r2
 8011764:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801176a:	b29a      	uxth	r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011770:	4413      	add	r3, r2
 8011772:	b299      	uxth	r1, r3
 8011774:	4b3c      	ldr	r3, [pc, #240]	; (8011868 <tcp_receive+0xf18>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	b29a      	uxth	r2, r3
 801177a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	1a8a      	subs	r2, r1, r2
 8011780:	b292      	uxth	r2, r2
 8011782:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	685a      	ldr	r2, [r3, #4]
 801178a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	891b      	ldrh	r3, [r3, #8]
 8011790:	4619      	mov	r1, r3
 8011792:	4610      	mov	r0, r2
 8011794:	f7fb fa40 	bl	800cc18 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	891c      	ldrh	r4, [r3, #8]
 801179e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	68db      	ldr	r3, [r3, #12]
 80117a4:	899b      	ldrh	r3, [r3, #12]
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	4618      	mov	r0, r3
 80117aa:	f7f9 ff87 	bl	800b6bc <lwip_htons>
 80117ae:	4603      	mov	r3, r0
 80117b0:	b2db      	uxtb	r3, r3
 80117b2:	f003 0303 	and.w	r3, r3, #3
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d001      	beq.n	80117be <tcp_receive+0xe6e>
 80117ba:	2301      	movs	r3, #1
 80117bc:	e000      	b.n	80117c0 <tcp_receive+0xe70>
 80117be:	2300      	movs	r3, #0
 80117c0:	4423      	add	r3, r4
 80117c2:	b29a      	uxth	r2, r3
 80117c4:	4b2a      	ldr	r3, [pc, #168]	; (8011870 <tcp_receive+0xf20>)
 80117c6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80117c8:	4b29      	ldr	r3, [pc, #164]	; (8011870 <tcp_receive+0xf20>)
 80117ca:	881b      	ldrh	r3, [r3, #0]
 80117cc:	461a      	mov	r2, r3
 80117ce:	4b26      	ldr	r3, [pc, #152]	; (8011868 <tcp_receive+0xf18>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	441a      	add	r2, r3
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117d8:	6879      	ldr	r1, [r7, #4]
 80117da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80117dc:	440b      	add	r3, r1
 80117de:	429a      	cmp	r2, r3
 80117e0:	d019      	beq.n	8011816 <tcp_receive+0xec6>
 80117e2:	4b24      	ldr	r3, [pc, #144]	; (8011874 <tcp_receive+0xf24>)
 80117e4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80117e8:	4923      	ldr	r1, [pc, #140]	; (8011878 <tcp_receive+0xf28>)
 80117ea:	4824      	ldr	r0, [pc, #144]	; (801187c <tcp_receive+0xf2c>)
 80117ec:	f007 fba2 	bl	8018f34 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80117f0:	e011      	b.n	8011816 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80117f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80117f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	f47f aea4 	bne.w	8011548 <tcp_receive+0xbf8>
 8011800:	e00a      	b.n	8011818 <tcp_receive+0xec8>
                break;
 8011802:	bf00      	nop
 8011804:	e008      	b.n	8011818 <tcp_receive+0xec8>
                break;
 8011806:	bf00      	nop
 8011808:	e006      	b.n	8011818 <tcp_receive+0xec8>
                  break;
 801180a:	bf00      	nop
 801180c:	e004      	b.n	8011818 <tcp_receive+0xec8>
                  break;
 801180e:	bf00      	nop
 8011810:	e002      	b.n	8011818 <tcp_receive+0xec8>
                  break;
 8011812:	bf00      	nop
 8011814:	e000      	b.n	8011818 <tcp_receive+0xec8>
                break;
 8011816:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f001 fe8b 	bl	8013534 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801181e:	e003      	b.n	8011828 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f001 fe87 	bl	8013534 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011826:	e01a      	b.n	801185e <tcp_receive+0xf0e>
 8011828:	e019      	b.n	801185e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801182a:	4b0f      	ldr	r3, [pc, #60]	; (8011868 <tcp_receive+0xf18>)
 801182c:	681a      	ldr	r2, [r3, #0]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011832:	1ad3      	subs	r3, r2, r3
 8011834:	2b00      	cmp	r3, #0
 8011836:	db0a      	blt.n	801184e <tcp_receive+0xefe>
 8011838:	4b0b      	ldr	r3, [pc, #44]	; (8011868 <tcp_receive+0xf18>)
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011840:	6879      	ldr	r1, [r7, #4]
 8011842:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011844:	440b      	add	r3, r1
 8011846:	1ad3      	subs	r3, r2, r3
 8011848:	3301      	adds	r3, #1
 801184a:	2b00      	cmp	r3, #0
 801184c:	dd07      	ble.n	801185e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	8b5b      	ldrh	r3, [r3, #26]
 8011852:	f043 0302 	orr.w	r3, r3, #2
 8011856:	b29a      	uxth	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801185c:	e7ff      	b.n	801185e <tcp_receive+0xf0e>
 801185e:	bf00      	nop
 8011860:	3750      	adds	r7, #80	; 0x50
 8011862:	46bd      	mov	sp, r7
 8011864:	bdb0      	pop	{r4, r5, r7, pc}
 8011866:	bf00      	nop
 8011868:	200115c4 	.word	0x200115c4
 801186c:	200115a4 	.word	0x200115a4
 8011870:	200115ce 	.word	0x200115ce
 8011874:	0801c3b8 	.word	0x0801c3b8
 8011878:	0801c760 	.word	0x0801c760
 801187c:	0801c404 	.word	0x0801c404

08011880 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011880:	b480      	push	{r7}
 8011882:	b083      	sub	sp, #12
 8011884:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011886:	4b15      	ldr	r3, [pc, #84]	; (80118dc <tcp_get_next_optbyte+0x5c>)
 8011888:	881b      	ldrh	r3, [r3, #0]
 801188a:	1c5a      	adds	r2, r3, #1
 801188c:	b291      	uxth	r1, r2
 801188e:	4a13      	ldr	r2, [pc, #76]	; (80118dc <tcp_get_next_optbyte+0x5c>)
 8011890:	8011      	strh	r1, [r2, #0]
 8011892:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011894:	4b12      	ldr	r3, [pc, #72]	; (80118e0 <tcp_get_next_optbyte+0x60>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d004      	beq.n	80118a6 <tcp_get_next_optbyte+0x26>
 801189c:	4b11      	ldr	r3, [pc, #68]	; (80118e4 <tcp_get_next_optbyte+0x64>)
 801189e:	881b      	ldrh	r3, [r3, #0]
 80118a0:	88fa      	ldrh	r2, [r7, #6]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d208      	bcs.n	80118b8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80118a6:	4b10      	ldr	r3, [pc, #64]	; (80118e8 <tcp_get_next_optbyte+0x68>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	3314      	adds	r3, #20
 80118ac:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80118ae:	88fb      	ldrh	r3, [r7, #6]
 80118b0:	683a      	ldr	r2, [r7, #0]
 80118b2:	4413      	add	r3, r2
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	e00b      	b.n	80118d0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80118b8:	88fb      	ldrh	r3, [r7, #6]
 80118ba:	b2da      	uxtb	r2, r3
 80118bc:	4b09      	ldr	r3, [pc, #36]	; (80118e4 <tcp_get_next_optbyte+0x64>)
 80118be:	881b      	ldrh	r3, [r3, #0]
 80118c0:	b2db      	uxtb	r3, r3
 80118c2:	1ad3      	subs	r3, r2, r3
 80118c4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80118c6:	4b06      	ldr	r3, [pc, #24]	; (80118e0 <tcp_get_next_optbyte+0x60>)
 80118c8:	681a      	ldr	r2, [r3, #0]
 80118ca:	797b      	ldrb	r3, [r7, #5]
 80118cc:	4413      	add	r3, r2
 80118ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	370c      	adds	r7, #12
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr
 80118dc:	200115c0 	.word	0x200115c0
 80118e0:	200115bc 	.word	0x200115bc
 80118e4:	200115ba 	.word	0x200115ba
 80118e8:	200115b4 	.word	0x200115b4

080118ec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d106      	bne.n	8011908 <tcp_parseopt+0x1c>
 80118fa:	4b32      	ldr	r3, [pc, #200]	; (80119c4 <tcp_parseopt+0xd8>)
 80118fc:	f240 727d 	movw	r2, #1917	; 0x77d
 8011900:	4931      	ldr	r1, [pc, #196]	; (80119c8 <tcp_parseopt+0xdc>)
 8011902:	4832      	ldr	r0, [pc, #200]	; (80119cc <tcp_parseopt+0xe0>)
 8011904:	f007 fb16 	bl	8018f34 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011908:	4b31      	ldr	r3, [pc, #196]	; (80119d0 <tcp_parseopt+0xe4>)
 801190a:	881b      	ldrh	r3, [r3, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d055      	beq.n	80119bc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011910:	4b30      	ldr	r3, [pc, #192]	; (80119d4 <tcp_parseopt+0xe8>)
 8011912:	2200      	movs	r2, #0
 8011914:	801a      	strh	r2, [r3, #0]
 8011916:	e045      	b.n	80119a4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011918:	f7ff ffb2 	bl	8011880 <tcp_get_next_optbyte>
 801191c:	4603      	mov	r3, r0
 801191e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011920:	7bfb      	ldrb	r3, [r7, #15]
 8011922:	2b02      	cmp	r3, #2
 8011924:	d006      	beq.n	8011934 <tcp_parseopt+0x48>
 8011926:	2b02      	cmp	r3, #2
 8011928:	dc2b      	bgt.n	8011982 <tcp_parseopt+0x96>
 801192a:	2b00      	cmp	r3, #0
 801192c:	d041      	beq.n	80119b2 <tcp_parseopt+0xc6>
 801192e:	2b01      	cmp	r3, #1
 8011930:	d127      	bne.n	8011982 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011932:	e037      	b.n	80119a4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011934:	f7ff ffa4 	bl	8011880 <tcp_get_next_optbyte>
 8011938:	4603      	mov	r3, r0
 801193a:	2b04      	cmp	r3, #4
 801193c:	d13b      	bne.n	80119b6 <tcp_parseopt+0xca>
 801193e:	4b25      	ldr	r3, [pc, #148]	; (80119d4 <tcp_parseopt+0xe8>)
 8011940:	881b      	ldrh	r3, [r3, #0]
 8011942:	3301      	adds	r3, #1
 8011944:	4a22      	ldr	r2, [pc, #136]	; (80119d0 <tcp_parseopt+0xe4>)
 8011946:	8812      	ldrh	r2, [r2, #0]
 8011948:	4293      	cmp	r3, r2
 801194a:	da34      	bge.n	80119b6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801194c:	f7ff ff98 	bl	8011880 <tcp_get_next_optbyte>
 8011950:	4603      	mov	r3, r0
 8011952:	b29b      	uxth	r3, r3
 8011954:	021b      	lsls	r3, r3, #8
 8011956:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011958:	f7ff ff92 	bl	8011880 <tcp_get_next_optbyte>
 801195c:	4603      	mov	r3, r0
 801195e:	b29a      	uxth	r2, r3
 8011960:	89bb      	ldrh	r3, [r7, #12]
 8011962:	4313      	orrs	r3, r2
 8011964:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011966:	89bb      	ldrh	r3, [r7, #12]
 8011968:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801196c:	d804      	bhi.n	8011978 <tcp_parseopt+0x8c>
 801196e:	89bb      	ldrh	r3, [r7, #12]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d001      	beq.n	8011978 <tcp_parseopt+0x8c>
 8011974:	89ba      	ldrh	r2, [r7, #12]
 8011976:	e001      	b.n	801197c <tcp_parseopt+0x90>
 8011978:	f44f 7206 	mov.w	r2, #536	; 0x218
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011980:	e010      	b.n	80119a4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011982:	f7ff ff7d 	bl	8011880 <tcp_get_next_optbyte>
 8011986:	4603      	mov	r3, r0
 8011988:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801198a:	7afb      	ldrb	r3, [r7, #11]
 801198c:	2b01      	cmp	r3, #1
 801198e:	d914      	bls.n	80119ba <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011990:	7afb      	ldrb	r3, [r7, #11]
 8011992:	b29a      	uxth	r2, r3
 8011994:	4b0f      	ldr	r3, [pc, #60]	; (80119d4 <tcp_parseopt+0xe8>)
 8011996:	881b      	ldrh	r3, [r3, #0]
 8011998:	4413      	add	r3, r2
 801199a:	b29b      	uxth	r3, r3
 801199c:	3b02      	subs	r3, #2
 801199e:	b29a      	uxth	r2, r3
 80119a0:	4b0c      	ldr	r3, [pc, #48]	; (80119d4 <tcp_parseopt+0xe8>)
 80119a2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80119a4:	4b0b      	ldr	r3, [pc, #44]	; (80119d4 <tcp_parseopt+0xe8>)
 80119a6:	881a      	ldrh	r2, [r3, #0]
 80119a8:	4b09      	ldr	r3, [pc, #36]	; (80119d0 <tcp_parseopt+0xe4>)
 80119aa:	881b      	ldrh	r3, [r3, #0]
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d3b3      	bcc.n	8011918 <tcp_parseopt+0x2c>
 80119b0:	e004      	b.n	80119bc <tcp_parseopt+0xd0>
          return;
 80119b2:	bf00      	nop
 80119b4:	e002      	b.n	80119bc <tcp_parseopt+0xd0>
            return;
 80119b6:	bf00      	nop
 80119b8:	e000      	b.n	80119bc <tcp_parseopt+0xd0>
            return;
 80119ba:	bf00      	nop
      }
    }
  }
}
 80119bc:	3710      	adds	r7, #16
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	0801c3b8 	.word	0x0801c3b8
 80119c8:	0801c81c 	.word	0x0801c81c
 80119cc:	0801c404 	.word	0x0801c404
 80119d0:	200115b8 	.word	0x200115b8
 80119d4:	200115c0 	.word	0x200115c0

080119d8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80119d8:	b480      	push	{r7}
 80119da:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80119dc:	4b05      	ldr	r3, [pc, #20]	; (80119f4 <tcp_trigger_input_pcb_close+0x1c>)
 80119de:	781b      	ldrb	r3, [r3, #0]
 80119e0:	f043 0310 	orr.w	r3, r3, #16
 80119e4:	b2da      	uxtb	r2, r3
 80119e6:	4b03      	ldr	r3, [pc, #12]	; (80119f4 <tcp_trigger_input_pcb_close+0x1c>)
 80119e8:	701a      	strb	r2, [r3, #0]
}
 80119ea:	bf00      	nop
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr
 80119f4:	200115d1 	.word	0x200115d1

080119f8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b084      	sub	sp, #16
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	60f8      	str	r0, [r7, #12]
 8011a00:	60b9      	str	r1, [r7, #8]
 8011a02:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d00a      	beq.n	8011a20 <tcp_route+0x28>
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	7a1b      	ldrb	r3, [r3, #8]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d006      	beq.n	8011a20 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	7a1b      	ldrb	r3, [r3, #8]
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7fa fef6 	bl	800c808 <netif_get_by_index>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	e003      	b.n	8011a28 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f005 fca9 	bl	8017378 <ip4_route>
 8011a26:	4603      	mov	r3, r0
  }
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3710      	adds	r7, #16
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011a30:	b590      	push	{r4, r7, lr}
 8011a32:	b087      	sub	sp, #28
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	60f8      	str	r0, [r7, #12]
 8011a38:	60b9      	str	r1, [r7, #8]
 8011a3a:	603b      	str	r3, [r7, #0]
 8011a3c:	4613      	mov	r3, r2
 8011a3e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d105      	bne.n	8011a52 <tcp_create_segment+0x22>
 8011a46:	4b44      	ldr	r3, [pc, #272]	; (8011b58 <tcp_create_segment+0x128>)
 8011a48:	22a3      	movs	r2, #163	; 0xa3
 8011a4a:	4944      	ldr	r1, [pc, #272]	; (8011b5c <tcp_create_segment+0x12c>)
 8011a4c:	4844      	ldr	r0, [pc, #272]	; (8011b60 <tcp_create_segment+0x130>)
 8011a4e:	f007 fa71 	bl	8018f34 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d105      	bne.n	8011a64 <tcp_create_segment+0x34>
 8011a58:	4b3f      	ldr	r3, [pc, #252]	; (8011b58 <tcp_create_segment+0x128>)
 8011a5a:	22a4      	movs	r2, #164	; 0xa4
 8011a5c:	4941      	ldr	r1, [pc, #260]	; (8011b64 <tcp_create_segment+0x134>)
 8011a5e:	4840      	ldr	r0, [pc, #256]	; (8011b60 <tcp_create_segment+0x130>)
 8011a60:	f007 fa68 	bl	8018f34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011a64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a68:	009b      	lsls	r3, r3, #2
 8011a6a:	b2db      	uxtb	r3, r3
 8011a6c:	f003 0304 	and.w	r3, r3, #4
 8011a70:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011a72:	2003      	movs	r0, #3
 8011a74:	f7fa fb30 	bl	800c0d8 <memp_malloc>
 8011a78:	6138      	str	r0, [r7, #16]
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d104      	bne.n	8011a8a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011a80:	68b8      	ldr	r0, [r7, #8]
 8011a82:	f7fb fa4f 	bl	800cf24 <pbuf_free>
    return NULL;
 8011a86:	2300      	movs	r3, #0
 8011a88:	e061      	b.n	8011b4e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011a90:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	2200      	movs	r2, #0
 8011a96:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	68ba      	ldr	r2, [r7, #8]
 8011a9c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	891a      	ldrh	r2, [r3, #8]
 8011aa2:	7dfb      	ldrb	r3, [r7, #23]
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d205      	bcs.n	8011ab6 <tcp_create_segment+0x86>
 8011aaa:	4b2b      	ldr	r3, [pc, #172]	; (8011b58 <tcp_create_segment+0x128>)
 8011aac:	22b0      	movs	r2, #176	; 0xb0
 8011aae:	492e      	ldr	r1, [pc, #184]	; (8011b68 <tcp_create_segment+0x138>)
 8011ab0:	482b      	ldr	r0, [pc, #172]	; (8011b60 <tcp_create_segment+0x130>)
 8011ab2:	f007 fa3f 	bl	8018f34 <iprintf>
  seg->len = p->tot_len - optlen;
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	891a      	ldrh	r2, [r3, #8]
 8011aba:	7dfb      	ldrb	r3, [r7, #23]
 8011abc:	b29b      	uxth	r3, r3
 8011abe:	1ad3      	subs	r3, r2, r3
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011ac6:	2114      	movs	r1, #20
 8011ac8:	68b8      	ldr	r0, [r7, #8]
 8011aca:	f7fb f995 	bl	800cdf8 <pbuf_add_header>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d004      	beq.n	8011ade <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011ad4:	6938      	ldr	r0, [r7, #16]
 8011ad6:	f7fc ffe2 	bl	800ea9e <tcp_seg_free>
    return NULL;
 8011ada:	2300      	movs	r3, #0
 8011adc:	e037      	b.n	8011b4e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	685b      	ldr	r3, [r3, #4]
 8011ae2:	685a      	ldr	r2, [r3, #4]
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	8ada      	ldrh	r2, [r3, #22]
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	68dc      	ldr	r4, [r3, #12]
 8011af0:	4610      	mov	r0, r2
 8011af2:	f7f9 fde3 	bl	800b6bc <lwip_htons>
 8011af6:	4603      	mov	r3, r0
 8011af8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	8b1a      	ldrh	r2, [r3, #24]
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	68dc      	ldr	r4, [r3, #12]
 8011b02:	4610      	mov	r0, r2
 8011b04:	f7f9 fdda 	bl	800b6bc <lwip_htons>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	68dc      	ldr	r4, [r3, #12]
 8011b10:	6838      	ldr	r0, [r7, #0]
 8011b12:	f7f9 fde8 	bl	800b6e6 <lwip_htonl>
 8011b16:	4603      	mov	r3, r0
 8011b18:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011b1a:	7dfb      	ldrb	r3, [r7, #23]
 8011b1c:	089b      	lsrs	r3, r3, #2
 8011b1e:	b2db      	uxtb	r3, r3
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	3305      	adds	r3, #5
 8011b24:	b29b      	uxth	r3, r3
 8011b26:	031b      	lsls	r3, r3, #12
 8011b28:	b29a      	uxth	r2, r3
 8011b2a:	79fb      	ldrb	r3, [r7, #7]
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	4313      	orrs	r3, r2
 8011b30:	b29a      	uxth	r2, r3
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	68dc      	ldr	r4, [r3, #12]
 8011b36:	4610      	mov	r0, r2
 8011b38:	f7f9 fdc0 	bl	800b6bc <lwip_htons>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	68db      	ldr	r3, [r3, #12]
 8011b44:	2200      	movs	r2, #0
 8011b46:	749a      	strb	r2, [r3, #18]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	74da      	strb	r2, [r3, #19]
  return seg;
 8011b4c:	693b      	ldr	r3, [r7, #16]
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	371c      	adds	r7, #28
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd90      	pop	{r4, r7, pc}
 8011b56:	bf00      	nop
 8011b58:	0801c838 	.word	0x0801c838
 8011b5c:	0801c86c 	.word	0x0801c86c
 8011b60:	0801c88c 	.word	0x0801c88c
 8011b64:	0801c8b4 	.word	0x0801c8b4
 8011b68:	0801c8d8 	.word	0x0801c8d8

08011b6c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b086      	sub	sp, #24
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	607b      	str	r3, [r7, #4]
 8011b74:	4603      	mov	r3, r0
 8011b76:	73fb      	strb	r3, [r7, #15]
 8011b78:	460b      	mov	r3, r1
 8011b7a:	81bb      	strh	r3, [r7, #12]
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011b80:	89bb      	ldrh	r3, [r7, #12]
 8011b82:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d105      	bne.n	8011b96 <tcp_pbuf_prealloc+0x2a>
 8011b8a:	4b30      	ldr	r3, [pc, #192]	; (8011c4c <tcp_pbuf_prealloc+0xe0>)
 8011b8c:	22e8      	movs	r2, #232	; 0xe8
 8011b8e:	4930      	ldr	r1, [pc, #192]	; (8011c50 <tcp_pbuf_prealloc+0xe4>)
 8011b90:	4830      	ldr	r0, [pc, #192]	; (8011c54 <tcp_pbuf_prealloc+0xe8>)
 8011b92:	f007 f9cf 	bl	8018f34 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011b96:	6a3b      	ldr	r3, [r7, #32]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d105      	bne.n	8011ba8 <tcp_pbuf_prealloc+0x3c>
 8011b9c:	4b2b      	ldr	r3, [pc, #172]	; (8011c4c <tcp_pbuf_prealloc+0xe0>)
 8011b9e:	22e9      	movs	r2, #233	; 0xe9
 8011ba0:	492d      	ldr	r1, [pc, #180]	; (8011c58 <tcp_pbuf_prealloc+0xec>)
 8011ba2:	482c      	ldr	r0, [pc, #176]	; (8011c54 <tcp_pbuf_prealloc+0xe8>)
 8011ba4:	f007 f9c6 	bl	8018f34 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011ba8:	89ba      	ldrh	r2, [r7, #12]
 8011baa:	897b      	ldrh	r3, [r7, #10]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d221      	bcs.n	8011bf4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011bb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011bb4:	f003 0302 	and.w	r3, r3, #2
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d111      	bne.n	8011be0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011bbc:	6a3b      	ldr	r3, [r7, #32]
 8011bbe:	8b5b      	ldrh	r3, [r3, #26]
 8011bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d115      	bne.n	8011bf4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011bc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d007      	beq.n	8011be0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011bd0:	6a3b      	ldr	r3, [r7, #32]
 8011bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d103      	bne.n	8011be0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011bd8:	6a3b      	ldr	r3, [r7, #32]
 8011bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d009      	beq.n	8011bf4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011be0:	89bb      	ldrh	r3, [r7, #12]
 8011be2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011be6:	f023 0203 	bic.w	r2, r3, #3
 8011bea:	897b      	ldrh	r3, [r7, #10]
 8011bec:	4293      	cmp	r3, r2
 8011bee:	bf28      	it	cs
 8011bf0:	4613      	movcs	r3, r2
 8011bf2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011bf4:	8af9      	ldrh	r1, [r7, #22]
 8011bf6:	7bfb      	ldrb	r3, [r7, #15]
 8011bf8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7fa fead 	bl	800c95c <pbuf_alloc>
 8011c02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d101      	bne.n	8011c0e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	e019      	b.n	8011c42 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d006      	beq.n	8011c24 <tcp_pbuf_prealloc+0xb8>
 8011c16:	4b0d      	ldr	r3, [pc, #52]	; (8011c4c <tcp_pbuf_prealloc+0xe0>)
 8011c18:	f240 120b 	movw	r2, #267	; 0x10b
 8011c1c:	490f      	ldr	r1, [pc, #60]	; (8011c5c <tcp_pbuf_prealloc+0xf0>)
 8011c1e:	480d      	ldr	r0, [pc, #52]	; (8011c54 <tcp_pbuf_prealloc+0xe8>)
 8011c20:	f007 f988 	bl	8018f34 <iprintf>
  *oversize = p->len - length;
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	895a      	ldrh	r2, [r3, #10]
 8011c28:	89bb      	ldrh	r3, [r7, #12]
 8011c2a:	1ad3      	subs	r3, r2, r3
 8011c2c:	b29a      	uxth	r2, r3
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011c32:	693b      	ldr	r3, [r7, #16]
 8011c34:	89ba      	ldrh	r2, [r7, #12]
 8011c36:	811a      	strh	r2, [r3, #8]
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	891a      	ldrh	r2, [r3, #8]
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	815a      	strh	r2, [r3, #10]
  return p;
 8011c40:	693b      	ldr	r3, [r7, #16]
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3718      	adds	r7, #24
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
 8011c4a:	bf00      	nop
 8011c4c:	0801c838 	.word	0x0801c838
 8011c50:	0801c8f0 	.word	0x0801c8f0
 8011c54:	0801c88c 	.word	0x0801c88c
 8011c58:	0801c914 	.word	0x0801c914
 8011c5c:	0801c934 	.word	0x0801c934

08011c60 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b082      	sub	sp, #8
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
 8011c68:	460b      	mov	r3, r1
 8011c6a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d106      	bne.n	8011c80 <tcp_write_checks+0x20>
 8011c72:	4b33      	ldr	r3, [pc, #204]	; (8011d40 <tcp_write_checks+0xe0>)
 8011c74:	f240 1233 	movw	r2, #307	; 0x133
 8011c78:	4932      	ldr	r1, [pc, #200]	; (8011d44 <tcp_write_checks+0xe4>)
 8011c7a:	4833      	ldr	r0, [pc, #204]	; (8011d48 <tcp_write_checks+0xe8>)
 8011c7c:	f007 f95a 	bl	8018f34 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	7d1b      	ldrb	r3, [r3, #20]
 8011c84:	2b04      	cmp	r3, #4
 8011c86:	d00e      	beq.n	8011ca6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011c8c:	2b07      	cmp	r3, #7
 8011c8e:	d00a      	beq.n	8011ca6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011c94:	2b02      	cmp	r3, #2
 8011c96:	d006      	beq.n	8011ca6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011c9c:	2b03      	cmp	r3, #3
 8011c9e:	d002      	beq.n	8011ca6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011ca0:	f06f 030a 	mvn.w	r3, #10
 8011ca4:	e048      	b.n	8011d38 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011ca6:	887b      	ldrh	r3, [r7, #2]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d101      	bne.n	8011cb0 <tcp_write_checks+0x50>
    return ERR_OK;
 8011cac:	2300      	movs	r3, #0
 8011cae:	e043      	b.n	8011d38 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011cb6:	887a      	ldrh	r2, [r7, #2]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d909      	bls.n	8011cd0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	8b5b      	ldrh	r3, [r3, #26]
 8011cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cc4:	b29a      	uxth	r2, r3
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011cca:	f04f 33ff 	mov.w	r3, #4294967295
 8011cce:	e033      	b.n	8011d38 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cd6:	2b08      	cmp	r3, #8
 8011cd8:	d909      	bls.n	8011cee <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	8b5b      	ldrh	r3, [r3, #26]
 8011cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ce2:	b29a      	uxth	r2, r3
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cec:	e024      	b.n	8011d38 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d00f      	beq.n	8011d18 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d11a      	bne.n	8011d36 <tcp_write_checks+0xd6>
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d116      	bne.n	8011d36 <tcp_write_checks+0xd6>
 8011d08:	4b0d      	ldr	r3, [pc, #52]	; (8011d40 <tcp_write_checks+0xe0>)
 8011d0a:	f240 1255 	movw	r2, #341	; 0x155
 8011d0e:	490f      	ldr	r1, [pc, #60]	; (8011d4c <tcp_write_checks+0xec>)
 8011d10:	480d      	ldr	r0, [pc, #52]	; (8011d48 <tcp_write_checks+0xe8>)
 8011d12:	f007 f90f 	bl	8018f34 <iprintf>
 8011d16:	e00e      	b.n	8011d36 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d103      	bne.n	8011d28 <tcp_write_checks+0xc8>
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d006      	beq.n	8011d36 <tcp_write_checks+0xd6>
 8011d28:	4b05      	ldr	r3, [pc, #20]	; (8011d40 <tcp_write_checks+0xe0>)
 8011d2a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011d2e:	4908      	ldr	r1, [pc, #32]	; (8011d50 <tcp_write_checks+0xf0>)
 8011d30:	4805      	ldr	r0, [pc, #20]	; (8011d48 <tcp_write_checks+0xe8>)
 8011d32:	f007 f8ff 	bl	8018f34 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011d36:	2300      	movs	r3, #0
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	0801c838 	.word	0x0801c838
 8011d44:	0801c948 	.word	0x0801c948
 8011d48:	0801c88c 	.word	0x0801c88c
 8011d4c:	0801c968 	.word	0x0801c968
 8011d50:	0801c9a4 	.word	0x0801c9a4

08011d54 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011d54:	b590      	push	{r4, r7, lr}
 8011d56:	b09b      	sub	sp, #108	; 0x6c
 8011d58:	af04      	add	r7, sp, #16
 8011d5a:	60f8      	str	r0, [r7, #12]
 8011d5c:	60b9      	str	r1, [r7, #8]
 8011d5e:	4611      	mov	r1, r2
 8011d60:	461a      	mov	r2, r3
 8011d62:	460b      	mov	r3, r1
 8011d64:	80fb      	strh	r3, [r7, #6]
 8011d66:	4613      	mov	r3, r2
 8011d68:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	653b      	str	r3, [r7, #80]	; 0x50
 8011d72:	2300      	movs	r3, #0
 8011d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d76:	2300      	movs	r3, #0
 8011d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011d7e:	2300      	movs	r3, #0
 8011d80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011d84:	2300      	movs	r3, #0
 8011d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011d92:	2300      	movs	r3, #0
 8011d94:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d109      	bne.n	8011db0 <tcp_write+0x5c>
 8011d9c:	4ba4      	ldr	r3, [pc, #656]	; (8012030 <tcp_write+0x2dc>)
 8011d9e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011da2:	49a4      	ldr	r1, [pc, #656]	; (8012034 <tcp_write+0x2e0>)
 8011da4:	48a4      	ldr	r0, [pc, #656]	; (8012038 <tcp_write+0x2e4>)
 8011da6:	f007 f8c5 	bl	8018f34 <iprintf>
 8011daa:	f06f 030f 	mvn.w	r3, #15
 8011dae:	e32a      	b.n	8012406 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011db6:	085b      	lsrs	r3, r3, #1
 8011db8:	b29a      	uxth	r2, r3
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011dbe:	4293      	cmp	r3, r2
 8011dc0:	bf28      	it	cs
 8011dc2:	4613      	movcs	r3, r2
 8011dc4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011dc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d102      	bne.n	8011dd2 <tcp_write+0x7e>
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011dd0:	e000      	b.n	8011dd4 <tcp_write+0x80>
 8011dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011dd4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d109      	bne.n	8011df0 <tcp_write+0x9c>
 8011ddc:	4b94      	ldr	r3, [pc, #592]	; (8012030 <tcp_write+0x2dc>)
 8011dde:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011de2:	4996      	ldr	r1, [pc, #600]	; (801203c <tcp_write+0x2e8>)
 8011de4:	4894      	ldr	r0, [pc, #592]	; (8012038 <tcp_write+0x2e4>)
 8011de6:	f007 f8a5 	bl	8018f34 <iprintf>
 8011dea:	f06f 030f 	mvn.w	r3, #15
 8011dee:	e30a      	b.n	8012406 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011df0:	88fb      	ldrh	r3, [r7, #6]
 8011df2:	4619      	mov	r1, r3
 8011df4:	68f8      	ldr	r0, [r7, #12]
 8011df6:	f7ff ff33 	bl	8011c60 <tcp_write_checks>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011e00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d002      	beq.n	8011e0e <tcp_write+0xba>
    return err;
 8011e08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011e0c:	e2fb      	b.n	8012406 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e14:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011e18:	2300      	movs	r3, #0
 8011e1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	f000 80f6 	beq.w	8012014 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e2c:	653b      	str	r3, [r7, #80]	; 0x50
 8011e2e:	e002      	b.n	8011e36 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d1f8      	bne.n	8011e30 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e40:	7a9b      	ldrb	r3, [r3, #10]
 8011e42:	009b      	lsls	r3, r3, #2
 8011e44:	b29b      	uxth	r3, r3
 8011e46:	f003 0304 	and.w	r3, r3, #4
 8011e4a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011e4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e50:	891b      	ldrh	r3, [r3, #8]
 8011e52:	4619      	mov	r1, r3
 8011e54:	8c3b      	ldrh	r3, [r7, #32]
 8011e56:	440b      	add	r3, r1
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	da06      	bge.n	8011e6a <tcp_write+0x116>
 8011e5c:	4b74      	ldr	r3, [pc, #464]	; (8012030 <tcp_write+0x2dc>)
 8011e5e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011e62:	4977      	ldr	r1, [pc, #476]	; (8012040 <tcp_write+0x2ec>)
 8011e64:	4874      	ldr	r0, [pc, #464]	; (8012038 <tcp_write+0x2e4>)
 8011e66:	f007 f865 	bl	8018f34 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e6c:	891a      	ldrh	r2, [r3, #8]
 8011e6e:	8c3b      	ldrh	r3, [r7, #32]
 8011e70:	4413      	add	r3, r2
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e76:	1ad3      	subs	r3, r2, r3
 8011e78:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e80:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011e82:	8a7b      	ldrh	r3, [r7, #18]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d026      	beq.n	8011ed6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011e88:	8a7b      	ldrh	r3, [r7, #18]
 8011e8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d206      	bcs.n	8011e9e <tcp_write+0x14a>
 8011e90:	4b67      	ldr	r3, [pc, #412]	; (8012030 <tcp_write+0x2dc>)
 8011e92:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011e96:	496b      	ldr	r1, [pc, #428]	; (8012044 <tcp_write+0x2f0>)
 8011e98:	4867      	ldr	r0, [pc, #412]	; (8012038 <tcp_write+0x2e4>)
 8011e9a:	f007 f84b 	bl	8018f34 <iprintf>
      seg = last_unsent;
 8011e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011ea2:	8a7b      	ldrh	r3, [r7, #18]
 8011ea4:	88fa      	ldrh	r2, [r7, #6]
 8011ea6:	4293      	cmp	r3, r2
 8011ea8:	bf28      	it	cs
 8011eaa:	4613      	movcs	r3, r2
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011eb0:	4293      	cmp	r3, r2
 8011eb2:	bf28      	it	cs
 8011eb4:	4613      	movcs	r3, r2
 8011eb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011eb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ebc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ebe:	4413      	add	r3, r2
 8011ec0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011ec4:	8a7a      	ldrh	r2, [r7, #18]
 8011ec6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ec8:	1ad3      	subs	r3, r2, r3
 8011eca:	b29b      	uxth	r3, r3
 8011ecc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011ece:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011ed0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ed2:	1ad3      	subs	r3, r2, r3
 8011ed4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011ed6:	8a7b      	ldrh	r3, [r7, #18]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d00b      	beq.n	8011ef4 <tcp_write+0x1a0>
 8011edc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ee0:	88fb      	ldrh	r3, [r7, #6]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d006      	beq.n	8011ef4 <tcp_write+0x1a0>
 8011ee6:	4b52      	ldr	r3, [pc, #328]	; (8012030 <tcp_write+0x2dc>)
 8011ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011eec:	4956      	ldr	r1, [pc, #344]	; (8012048 <tcp_write+0x2f4>)
 8011eee:	4852      	ldr	r0, [pc, #328]	; (8012038 <tcp_write+0x2e4>)
 8011ef0:	f007 f820 	bl	8018f34 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011ef4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ef8:	88fb      	ldrh	r3, [r7, #6]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	f080 8167 	bcs.w	80121ce <tcp_write+0x47a>
 8011f00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	f000 8163 	beq.w	80121ce <tcp_write+0x47a>
 8011f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f0a:	891b      	ldrh	r3, [r3, #8]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	f000 815e 	beq.w	80121ce <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011f12:	88fa      	ldrh	r2, [r7, #6]
 8011f14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f18:	1ad2      	subs	r2, r2, r3
 8011f1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011f1c:	4293      	cmp	r3, r2
 8011f1e:	bfa8      	it	ge
 8011f20:	4613      	movge	r3, r2
 8011f22:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f26:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011f28:	797b      	ldrb	r3, [r7, #5]
 8011f2a:	f003 0301 	and.w	r3, r3, #1
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d027      	beq.n	8011f82 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011f32:	f107 0012 	add.w	r0, r7, #18
 8011f36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011f38:	8bf9      	ldrh	r1, [r7, #30]
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	9302      	str	r3, [sp, #8]
 8011f3e:	797b      	ldrb	r3, [r7, #5]
 8011f40:	9301      	str	r3, [sp, #4]
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	9300      	str	r3, [sp, #0]
 8011f46:	4603      	mov	r3, r0
 8011f48:	2000      	movs	r0, #0
 8011f4a:	f7ff fe0f 	bl	8011b6c <tcp_pbuf_prealloc>
 8011f4e:	6578      	str	r0, [r7, #84]	; 0x54
 8011f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	f000 8225 	beq.w	80123a2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f5a:	6858      	ldr	r0, [r3, #4]
 8011f5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f60:	68ba      	ldr	r2, [r7, #8]
 8011f62:	4413      	add	r3, r2
 8011f64:	8bfa      	ldrh	r2, [r7, #30]
 8011f66:	4619      	mov	r1, r3
 8011f68:	f006 ff1f 	bl	8018daa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011f6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011f6e:	f7fb f867 	bl	800d040 <pbuf_clen>
 8011f72:	4603      	mov	r3, r0
 8011f74:	461a      	mov	r2, r3
 8011f76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f7a:	4413      	add	r3, r2
 8011f7c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011f80:	e041      	b.n	8012006 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	637b      	str	r3, [r7, #52]	; 0x34
 8011f88:	e002      	b.n	8011f90 <tcp_write+0x23c>
 8011f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8011f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d1f8      	bne.n	8011f8a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f9a:	7b1b      	ldrb	r3, [r3, #12]
 8011f9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d115      	bne.n	8011fd0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fa6:	685b      	ldr	r3, [r3, #4]
 8011fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011faa:	8952      	ldrh	r2, [r2, #10]
 8011fac:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011fae:	68ba      	ldr	r2, [r7, #8]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d10d      	bne.n	8011fd0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011fb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d006      	beq.n	8011fca <tcp_write+0x276>
 8011fbc:	4b1c      	ldr	r3, [pc, #112]	; (8012030 <tcp_write+0x2dc>)
 8011fbe:	f240 2231 	movw	r2, #561	; 0x231
 8011fc2:	4922      	ldr	r1, [pc, #136]	; (801204c <tcp_write+0x2f8>)
 8011fc4:	481c      	ldr	r0, [pc, #112]	; (8012038 <tcp_write+0x2e4>)
 8011fc6:	f006 ffb5 	bl	8018f34 <iprintf>
          extendlen = seglen;
 8011fca:	8bfb      	ldrh	r3, [r7, #30]
 8011fcc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011fce:	e01a      	b.n	8012006 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011fd0:	8bfb      	ldrh	r3, [r7, #30]
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	2000      	movs	r0, #0
 8011fd8:	f7fa fcc0 	bl	800c95c <pbuf_alloc>
 8011fdc:	6578      	str	r0, [r7, #84]	; 0x54
 8011fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	f000 81e0 	beq.w	80123a6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011fe6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fea:	68ba      	ldr	r2, [r7, #8]
 8011fec:	441a      	add	r2, r3
 8011fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ff0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011ff2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011ff4:	f7fb f824 	bl	800d040 <pbuf_clen>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012000:	4413      	add	r3, r2
 8012002:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012006:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801200a:	8bfb      	ldrh	r3, [r7, #30]
 801200c:	4413      	add	r3, r2
 801200e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012012:	e0dc      	b.n	80121ce <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801201a:	2b00      	cmp	r3, #0
 801201c:	f000 80d7 	beq.w	80121ce <tcp_write+0x47a>
 8012020:	4b03      	ldr	r3, [pc, #12]	; (8012030 <tcp_write+0x2dc>)
 8012022:	f240 224a 	movw	r2, #586	; 0x24a
 8012026:	490a      	ldr	r1, [pc, #40]	; (8012050 <tcp_write+0x2fc>)
 8012028:	4803      	ldr	r0, [pc, #12]	; (8012038 <tcp_write+0x2e4>)
 801202a:	f006 ff83 	bl	8018f34 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801202e:	e0ce      	b.n	80121ce <tcp_write+0x47a>
 8012030:	0801c838 	.word	0x0801c838
 8012034:	0801c9d8 	.word	0x0801c9d8
 8012038:	0801c88c 	.word	0x0801c88c
 801203c:	0801c9f0 	.word	0x0801c9f0
 8012040:	0801ca24 	.word	0x0801ca24
 8012044:	0801ca3c 	.word	0x0801ca3c
 8012048:	0801ca5c 	.word	0x0801ca5c
 801204c:	0801ca7c 	.word	0x0801ca7c
 8012050:	0801caa8 	.word	0x0801caa8
    struct pbuf *p;
    u16_t left = len - pos;
 8012054:	88fa      	ldrh	r2, [r7, #6]
 8012056:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801205a:	1ad3      	subs	r3, r2, r3
 801205c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801205e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012062:	b29b      	uxth	r3, r3
 8012064:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012066:	1ad3      	subs	r3, r2, r3
 8012068:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801206a:	8b7a      	ldrh	r2, [r7, #26]
 801206c:	8bbb      	ldrh	r3, [r7, #28]
 801206e:	4293      	cmp	r3, r2
 8012070:	bf28      	it	cs
 8012072:	4613      	movcs	r3, r2
 8012074:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012076:	797b      	ldrb	r3, [r7, #5]
 8012078:	f003 0301 	and.w	r3, r3, #1
 801207c:	2b00      	cmp	r3, #0
 801207e:	d036      	beq.n	80120ee <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012080:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012084:	b29a      	uxth	r2, r3
 8012086:	8b3b      	ldrh	r3, [r7, #24]
 8012088:	4413      	add	r3, r2
 801208a:	b299      	uxth	r1, r3
 801208c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801208e:	2b00      	cmp	r3, #0
 8012090:	bf0c      	ite	eq
 8012092:	2301      	moveq	r3, #1
 8012094:	2300      	movne	r3, #0
 8012096:	b2db      	uxtb	r3, r3
 8012098:	f107 0012 	add.w	r0, r7, #18
 801209c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801209e:	9302      	str	r3, [sp, #8]
 80120a0:	797b      	ldrb	r3, [r7, #5]
 80120a2:	9301      	str	r3, [sp, #4]
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	9300      	str	r3, [sp, #0]
 80120a8:	4603      	mov	r3, r0
 80120aa:	2036      	movs	r0, #54	; 0x36
 80120ac:	f7ff fd5e 	bl	8011b6c <tcp_pbuf_prealloc>
 80120b0:	6338      	str	r0, [r7, #48]	; 0x30
 80120b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	f000 8178 	beq.w	80123aa <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80120ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120bc:	895b      	ldrh	r3, [r3, #10]
 80120be:	8b3a      	ldrh	r2, [r7, #24]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d906      	bls.n	80120d2 <tcp_write+0x37e>
 80120c4:	4b8c      	ldr	r3, [pc, #560]	; (80122f8 <tcp_write+0x5a4>)
 80120c6:	f240 2266 	movw	r2, #614	; 0x266
 80120ca:	498c      	ldr	r1, [pc, #560]	; (80122fc <tcp_write+0x5a8>)
 80120cc:	488c      	ldr	r0, [pc, #560]	; (8012300 <tcp_write+0x5ac>)
 80120ce:	f006 ff31 	bl	8018f34 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80120d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d4:	685a      	ldr	r2, [r3, #4]
 80120d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80120da:	18d0      	adds	r0, r2, r3
 80120dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120e0:	68ba      	ldr	r2, [r7, #8]
 80120e2:	4413      	add	r3, r2
 80120e4:	8b3a      	ldrh	r2, [r7, #24]
 80120e6:	4619      	mov	r1, r3
 80120e8:	f006 fe5f 	bl	8018daa <memcpy>
 80120ec:	e02f      	b.n	801214e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80120ee:	8a7b      	ldrh	r3, [r7, #18]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d006      	beq.n	8012102 <tcp_write+0x3ae>
 80120f4:	4b80      	ldr	r3, [pc, #512]	; (80122f8 <tcp_write+0x5a4>)
 80120f6:	f240 2271 	movw	r2, #625	; 0x271
 80120fa:	4982      	ldr	r1, [pc, #520]	; (8012304 <tcp_write+0x5b0>)
 80120fc:	4880      	ldr	r0, [pc, #512]	; (8012300 <tcp_write+0x5ac>)
 80120fe:	f006 ff19 	bl	8018f34 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012102:	8b3b      	ldrh	r3, [r7, #24]
 8012104:	2201      	movs	r2, #1
 8012106:	4619      	mov	r1, r3
 8012108:	2036      	movs	r0, #54	; 0x36
 801210a:	f7fa fc27 	bl	800c95c <pbuf_alloc>
 801210e:	6178      	str	r0, [r7, #20]
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	2b00      	cmp	r3, #0
 8012114:	f000 814b 	beq.w	80123ae <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012118:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801211c:	68ba      	ldr	r2, [r7, #8]
 801211e:	441a      	add	r2, r3
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012124:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012128:	b29b      	uxth	r3, r3
 801212a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801212e:	4619      	mov	r1, r3
 8012130:	2036      	movs	r0, #54	; 0x36
 8012132:	f7fa fc13 	bl	800c95c <pbuf_alloc>
 8012136:	6338      	str	r0, [r7, #48]	; 0x30
 8012138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801213a:	2b00      	cmp	r3, #0
 801213c:	d103      	bne.n	8012146 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801213e:	6978      	ldr	r0, [r7, #20]
 8012140:	f7fa fef0 	bl	800cf24 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012144:	e136      	b.n	80123b4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012146:	6979      	ldr	r1, [r7, #20]
 8012148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801214a:	f7fa ffb9 	bl	800d0c0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801214e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012150:	f7fa ff76 	bl	800d040 <pbuf_clen>
 8012154:	4603      	mov	r3, r0
 8012156:	461a      	mov	r2, r3
 8012158:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801215c:	4413      	add	r3, r2
 801215e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012162:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012166:	2b09      	cmp	r3, #9
 8012168:	d903      	bls.n	8012172 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801216a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801216c:	f7fa feda 	bl	800cf24 <pbuf_free>
      goto memerr;
 8012170:	e120      	b.n	80123b4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012176:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801217a:	441a      	add	r2, r3
 801217c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012180:	9300      	str	r3, [sp, #0]
 8012182:	4613      	mov	r3, r2
 8012184:	2200      	movs	r2, #0
 8012186:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012188:	68f8      	ldr	r0, [r7, #12]
 801218a:	f7ff fc51 	bl	8011a30 <tcp_create_segment>
 801218e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012192:	2b00      	cmp	r3, #0
 8012194:	f000 810d 	beq.w	80123b2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801219a:	2b00      	cmp	r3, #0
 801219c:	d102      	bne.n	80121a4 <tcp_write+0x450>
      queue = seg;
 801219e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121a0:	647b      	str	r3, [r7, #68]	; 0x44
 80121a2:	e00c      	b.n	80121be <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80121a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d106      	bne.n	80121b8 <tcp_write+0x464>
 80121aa:	4b53      	ldr	r3, [pc, #332]	; (80122f8 <tcp_write+0x5a4>)
 80121ac:	f240 22ab 	movw	r2, #683	; 0x2ab
 80121b0:	4955      	ldr	r1, [pc, #340]	; (8012308 <tcp_write+0x5b4>)
 80121b2:	4853      	ldr	r0, [pc, #332]	; (8012300 <tcp_write+0x5ac>)
 80121b4:	f006 febe 	bl	8018f34 <iprintf>
      prev_seg->next = seg;
 80121b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80121bc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80121be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121c0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80121c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80121c6:	8b3b      	ldrh	r3, [r7, #24]
 80121c8:	4413      	add	r3, r2
 80121ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80121ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80121d2:	88fb      	ldrh	r3, [r7, #6]
 80121d4:	429a      	cmp	r2, r3
 80121d6:	f4ff af3d 	bcc.w	8012054 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80121da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d02c      	beq.n	801223a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80121e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121e2:	685b      	ldr	r3, [r3, #4]
 80121e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80121e6:	e01e      	b.n	8012226 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80121e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ea:	891a      	ldrh	r2, [r3, #8]
 80121ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80121ee:	4413      	add	r3, r2
 80121f0:	b29a      	uxth	r2, r3
 80121f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80121f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d110      	bne.n	8012220 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80121fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012200:	685b      	ldr	r3, [r3, #4]
 8012202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012204:	8952      	ldrh	r2, [r2, #10]
 8012206:	4413      	add	r3, r2
 8012208:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801220a:	68b9      	ldr	r1, [r7, #8]
 801220c:	4618      	mov	r0, r3
 801220e:	f006 fdcc 	bl	8018daa <memcpy>
        p->len += oversize_used;
 8012212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012214:	895a      	ldrh	r2, [r3, #10]
 8012216:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012218:	4413      	add	r3, r2
 801221a:	b29a      	uxth	r2, r3
 801221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012228:	2b00      	cmp	r3, #0
 801222a:	d1dd      	bne.n	80121e8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801222c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801222e:	891a      	ldrh	r2, [r3, #8]
 8012230:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012232:	4413      	add	r3, r2
 8012234:	b29a      	uxth	r2, r3
 8012236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012238:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801223a:	8a7a      	ldrh	r2, [r7, #18]
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012244:	2b00      	cmp	r3, #0
 8012246:	d018      	beq.n	801227a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801224a:	2b00      	cmp	r3, #0
 801224c:	d106      	bne.n	801225c <tcp_write+0x508>
 801224e:	4b2a      	ldr	r3, [pc, #168]	; (80122f8 <tcp_write+0x5a4>)
 8012250:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012254:	492d      	ldr	r1, [pc, #180]	; (801230c <tcp_write+0x5b8>)
 8012256:	482a      	ldr	r0, [pc, #168]	; (8012300 <tcp_write+0x5ac>)
 8012258:	f006 fe6c 	bl	8018f34 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801225c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012262:	4618      	mov	r0, r3
 8012264:	f7fa ff2c 	bl	800d0c0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801226a:	891a      	ldrh	r2, [r3, #8]
 801226c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801226e:	891b      	ldrh	r3, [r3, #8]
 8012270:	4413      	add	r3, r2
 8012272:	b29a      	uxth	r2, r3
 8012274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012276:	811a      	strh	r2, [r3, #8]
 8012278:	e037      	b.n	80122ea <tcp_write+0x596>
  } else if (extendlen > 0) {
 801227a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801227c:	2b00      	cmp	r3, #0
 801227e:	d034      	beq.n	80122ea <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012282:	2b00      	cmp	r3, #0
 8012284:	d003      	beq.n	801228e <tcp_write+0x53a>
 8012286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012288:	685b      	ldr	r3, [r3, #4]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d106      	bne.n	801229c <tcp_write+0x548>
 801228e:	4b1a      	ldr	r3, [pc, #104]	; (80122f8 <tcp_write+0x5a4>)
 8012290:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012294:	491e      	ldr	r1, [pc, #120]	; (8012310 <tcp_write+0x5bc>)
 8012296:	481a      	ldr	r0, [pc, #104]	; (8012300 <tcp_write+0x5ac>)
 8012298:	f006 fe4c 	bl	8018f34 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801229c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80122a2:	e009      	b.n	80122b8 <tcp_write+0x564>
      p->tot_len += extendlen;
 80122a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a6:	891a      	ldrh	r2, [r3, #8]
 80122a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80122aa:	4413      	add	r3, r2
 80122ac:	b29a      	uxth	r2, r3
 80122ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80122b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80122b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d1f1      	bne.n	80122a4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80122c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c2:	891a      	ldrh	r2, [r3, #8]
 80122c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80122c6:	4413      	add	r3, r2
 80122c8:	b29a      	uxth	r2, r3
 80122ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122cc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80122ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d0:	895a      	ldrh	r2, [r3, #10]
 80122d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80122d4:	4413      	add	r3, r2
 80122d6:	b29a      	uxth	r2, r3
 80122d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122da:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80122dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122de:	891a      	ldrh	r2, [r3, #8]
 80122e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80122e2:	4413      	add	r3, r2
 80122e4:	b29a      	uxth	r2, r3
 80122e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122e8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80122ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d111      	bne.n	8012314 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80122f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80122f6:	e010      	b.n	801231a <tcp_write+0x5c6>
 80122f8:	0801c838 	.word	0x0801c838
 80122fc:	0801cad8 	.word	0x0801cad8
 8012300:	0801c88c 	.word	0x0801c88c
 8012304:	0801cb18 	.word	0x0801cb18
 8012308:	0801cb28 	.word	0x0801cb28
 801230c:	0801cb3c 	.word	0x0801cb3c
 8012310:	0801cb74 	.word	0x0801cb74
  } else {
    last_unsent->next = queue;
 8012314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012318:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801231e:	88fb      	ldrh	r3, [r7, #6]
 8012320:	441a      	add	r2, r3
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801232c:	88fb      	ldrh	r3, [r7, #6]
 801232e:	1ad3      	subs	r3, r2, r3
 8012330:	b29a      	uxth	r2, r3
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801233e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012348:	2b00      	cmp	r3, #0
 801234a:	d00e      	beq.n	801236a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012350:	2b00      	cmp	r3, #0
 8012352:	d10a      	bne.n	801236a <tcp_write+0x616>
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012358:	2b00      	cmp	r3, #0
 801235a:	d106      	bne.n	801236a <tcp_write+0x616>
 801235c:	4b2c      	ldr	r3, [pc, #176]	; (8012410 <tcp_write+0x6bc>)
 801235e:	f240 3212 	movw	r2, #786	; 0x312
 8012362:	492c      	ldr	r1, [pc, #176]	; (8012414 <tcp_write+0x6c0>)
 8012364:	482c      	ldr	r0, [pc, #176]	; (8012418 <tcp_write+0x6c4>)
 8012366:	f006 fde5 	bl	8018f34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801236a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801236c:	2b00      	cmp	r3, #0
 801236e:	d016      	beq.n	801239e <tcp_write+0x64a>
 8012370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012372:	68db      	ldr	r3, [r3, #12]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d012      	beq.n	801239e <tcp_write+0x64a>
 8012378:	797b      	ldrb	r3, [r7, #5]
 801237a:	f003 0302 	and.w	r3, r3, #2
 801237e:	2b00      	cmp	r3, #0
 8012380:	d10d      	bne.n	801239e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012384:	68db      	ldr	r3, [r3, #12]
 8012386:	899b      	ldrh	r3, [r3, #12]
 8012388:	b29c      	uxth	r4, r3
 801238a:	2008      	movs	r0, #8
 801238c:	f7f9 f996 	bl	800b6bc <lwip_htons>
 8012390:	4603      	mov	r3, r0
 8012392:	461a      	mov	r2, r3
 8012394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012396:	68db      	ldr	r3, [r3, #12]
 8012398:	4322      	orrs	r2, r4
 801239a:	b292      	uxth	r2, r2
 801239c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801239e:	2300      	movs	r3, #0
 80123a0:	e031      	b.n	8012406 <tcp_write+0x6b2>
          goto memerr;
 80123a2:	bf00      	nop
 80123a4:	e006      	b.n	80123b4 <tcp_write+0x660>
            goto memerr;
 80123a6:	bf00      	nop
 80123a8:	e004      	b.n	80123b4 <tcp_write+0x660>
        goto memerr;
 80123aa:	bf00      	nop
 80123ac:	e002      	b.n	80123b4 <tcp_write+0x660>
        goto memerr;
 80123ae:	bf00      	nop
 80123b0:	e000      	b.n	80123b4 <tcp_write+0x660>
      goto memerr;
 80123b2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	8b5b      	ldrh	r3, [r3, #26]
 80123b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123bc:	b29a      	uxth	r2, r3
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80123c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d002      	beq.n	80123ce <tcp_write+0x67a>
    pbuf_free(concat_p);
 80123c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80123ca:	f7fa fdab 	bl	800cf24 <pbuf_free>
  }
  if (queue != NULL) {
 80123ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d002      	beq.n	80123da <tcp_write+0x686>
    tcp_segs_free(queue);
 80123d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80123d6:	f7fc fb4d 	bl	800ea74 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d00e      	beq.n	8012402 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d10a      	bne.n	8012402 <tcp_write+0x6ae>
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d106      	bne.n	8012402 <tcp_write+0x6ae>
 80123f4:	4b06      	ldr	r3, [pc, #24]	; (8012410 <tcp_write+0x6bc>)
 80123f6:	f240 3227 	movw	r2, #807	; 0x327
 80123fa:	4906      	ldr	r1, [pc, #24]	; (8012414 <tcp_write+0x6c0>)
 80123fc:	4806      	ldr	r0, [pc, #24]	; (8012418 <tcp_write+0x6c4>)
 80123fe:	f006 fd99 	bl	8018f34 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012406:	4618      	mov	r0, r3
 8012408:	375c      	adds	r7, #92	; 0x5c
 801240a:	46bd      	mov	sp, r7
 801240c:	bd90      	pop	{r4, r7, pc}
 801240e:	bf00      	nop
 8012410:	0801c838 	.word	0x0801c838
 8012414:	0801cbac 	.word	0x0801cbac
 8012418:	0801c88c 	.word	0x0801c88c

0801241c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801241c:	b590      	push	{r4, r7, lr}
 801241e:	b08b      	sub	sp, #44	; 0x2c
 8012420:	af02      	add	r7, sp, #8
 8012422:	6078      	str	r0, [r7, #4]
 8012424:	460b      	mov	r3, r1
 8012426:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012428:	2300      	movs	r3, #0
 801242a:	61fb      	str	r3, [r7, #28]
 801242c:	2300      	movs	r3, #0
 801242e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012430:	2300      	movs	r3, #0
 8012432:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d106      	bne.n	8012448 <tcp_split_unsent_seg+0x2c>
 801243a:	4b95      	ldr	r3, [pc, #596]	; (8012690 <tcp_split_unsent_seg+0x274>)
 801243c:	f240 324b 	movw	r2, #843	; 0x34b
 8012440:	4994      	ldr	r1, [pc, #592]	; (8012694 <tcp_split_unsent_seg+0x278>)
 8012442:	4895      	ldr	r0, [pc, #596]	; (8012698 <tcp_split_unsent_seg+0x27c>)
 8012444:	f006 fd76 	bl	8018f34 <iprintf>

  useg = pcb->unsent;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801244c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d102      	bne.n	801245a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012454:	f04f 33ff 	mov.w	r3, #4294967295
 8012458:	e116      	b.n	8012688 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801245a:	887b      	ldrh	r3, [r7, #2]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d109      	bne.n	8012474 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012460:	4b8b      	ldr	r3, [pc, #556]	; (8012690 <tcp_split_unsent_seg+0x274>)
 8012462:	f240 3253 	movw	r2, #851	; 0x353
 8012466:	498d      	ldr	r1, [pc, #564]	; (801269c <tcp_split_unsent_seg+0x280>)
 8012468:	488b      	ldr	r0, [pc, #556]	; (8012698 <tcp_split_unsent_seg+0x27c>)
 801246a:	f006 fd63 	bl	8018f34 <iprintf>
    return ERR_VAL;
 801246e:	f06f 0305 	mvn.w	r3, #5
 8012472:	e109      	b.n	8012688 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	891b      	ldrh	r3, [r3, #8]
 8012478:	887a      	ldrh	r2, [r7, #2]
 801247a:	429a      	cmp	r2, r3
 801247c:	d301      	bcc.n	8012482 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801247e:	2300      	movs	r3, #0
 8012480:	e102      	b.n	8012688 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012486:	887a      	ldrh	r2, [r7, #2]
 8012488:	429a      	cmp	r2, r3
 801248a:	d906      	bls.n	801249a <tcp_split_unsent_seg+0x7e>
 801248c:	4b80      	ldr	r3, [pc, #512]	; (8012690 <tcp_split_unsent_seg+0x274>)
 801248e:	f240 325b 	movw	r2, #859	; 0x35b
 8012492:	4983      	ldr	r1, [pc, #524]	; (80126a0 <tcp_split_unsent_seg+0x284>)
 8012494:	4880      	ldr	r0, [pc, #512]	; (8012698 <tcp_split_unsent_seg+0x27c>)
 8012496:	f006 fd4d 	bl	8018f34 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	891b      	ldrh	r3, [r3, #8]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d106      	bne.n	80124b0 <tcp_split_unsent_seg+0x94>
 80124a2:	4b7b      	ldr	r3, [pc, #492]	; (8012690 <tcp_split_unsent_seg+0x274>)
 80124a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80124a8:	497e      	ldr	r1, [pc, #504]	; (80126a4 <tcp_split_unsent_seg+0x288>)
 80124aa:	487b      	ldr	r0, [pc, #492]	; (8012698 <tcp_split_unsent_seg+0x27c>)
 80124ac:	f006 fd42 	bl	8018f34 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	7a9b      	ldrb	r3, [r3, #10]
 80124b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80124b6:	7bfb      	ldrb	r3, [r7, #15]
 80124b8:	009b      	lsls	r3, r3, #2
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	f003 0304 	and.w	r3, r3, #4
 80124c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	891a      	ldrh	r2, [r3, #8]
 80124c6:	887b      	ldrh	r3, [r7, #2]
 80124c8:	1ad3      	subs	r3, r2, r3
 80124ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80124cc:	7bbb      	ldrb	r3, [r7, #14]
 80124ce:	b29a      	uxth	r2, r3
 80124d0:	89bb      	ldrh	r3, [r7, #12]
 80124d2:	4413      	add	r3, r2
 80124d4:	b29b      	uxth	r3, r3
 80124d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80124da:	4619      	mov	r1, r3
 80124dc:	2036      	movs	r0, #54	; 0x36
 80124de:	f7fa fa3d 	bl	800c95c <pbuf_alloc>
 80124e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80124e4:	693b      	ldr	r3, [r7, #16]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	f000 80b7 	beq.w	801265a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	685b      	ldr	r3, [r3, #4]
 80124f0:	891a      	ldrh	r2, [r3, #8]
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	891b      	ldrh	r3, [r3, #8]
 80124f6:	1ad3      	subs	r3, r2, r3
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	887b      	ldrh	r3, [r7, #2]
 80124fc:	4413      	add	r3, r2
 80124fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	6858      	ldr	r0, [r3, #4]
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	685a      	ldr	r2, [r3, #4]
 8012508:	7bbb      	ldrb	r3, [r7, #14]
 801250a:	18d1      	adds	r1, r2, r3
 801250c:	897b      	ldrh	r3, [r7, #10]
 801250e:	89ba      	ldrh	r2, [r7, #12]
 8012510:	f7fa ff0e 	bl	800d330 <pbuf_copy_partial>
 8012514:	4603      	mov	r3, r0
 8012516:	461a      	mov	r2, r3
 8012518:	89bb      	ldrh	r3, [r7, #12]
 801251a:	4293      	cmp	r3, r2
 801251c:	f040 809f 	bne.w	801265e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012520:	697b      	ldr	r3, [r7, #20]
 8012522:	68db      	ldr	r3, [r3, #12]
 8012524:	899b      	ldrh	r3, [r3, #12]
 8012526:	b29b      	uxth	r3, r3
 8012528:	4618      	mov	r0, r3
 801252a:	f7f9 f8c7 	bl	800b6bc <lwip_htons>
 801252e:	4603      	mov	r3, r0
 8012530:	b2db      	uxtb	r3, r3
 8012532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012536:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012538:	2300      	movs	r3, #0
 801253a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801253c:	7efb      	ldrb	r3, [r7, #27]
 801253e:	f003 0308 	and.w	r3, r3, #8
 8012542:	2b00      	cmp	r3, #0
 8012544:	d007      	beq.n	8012556 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012546:	7efb      	ldrb	r3, [r7, #27]
 8012548:	f023 0308 	bic.w	r3, r3, #8
 801254c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801254e:	7ebb      	ldrb	r3, [r7, #26]
 8012550:	f043 0308 	orr.w	r3, r3, #8
 8012554:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012556:	7efb      	ldrb	r3, [r7, #27]
 8012558:	f003 0301 	and.w	r3, r3, #1
 801255c:	2b00      	cmp	r3, #0
 801255e:	d007      	beq.n	8012570 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012560:	7efb      	ldrb	r3, [r7, #27]
 8012562:	f023 0301 	bic.w	r3, r3, #1
 8012566:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012568:	7ebb      	ldrb	r3, [r7, #26]
 801256a:	f043 0301 	orr.w	r3, r3, #1
 801256e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	68db      	ldr	r3, [r3, #12]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	4618      	mov	r0, r3
 8012578:	f7f9 f8b5 	bl	800b6e6 <lwip_htonl>
 801257c:	4602      	mov	r2, r0
 801257e:	887b      	ldrh	r3, [r7, #2]
 8012580:	18d1      	adds	r1, r2, r3
 8012582:	7eba      	ldrb	r2, [r7, #26]
 8012584:	7bfb      	ldrb	r3, [r7, #15]
 8012586:	9300      	str	r3, [sp, #0]
 8012588:	460b      	mov	r3, r1
 801258a:	6939      	ldr	r1, [r7, #16]
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f7ff fa4f 	bl	8011a30 <tcp_create_segment>
 8012592:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012594:	69fb      	ldr	r3, [r7, #28]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d063      	beq.n	8012662 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	4618      	mov	r0, r3
 80125a0:	f7fa fd4e 	bl	800d040 <pbuf_clen>
 80125a4:	4603      	mov	r3, r0
 80125a6:	461a      	mov	r2, r3
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80125ae:	1a9b      	subs	r3, r3, r2
 80125b0:	b29a      	uxth	r2, r3
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	6858      	ldr	r0, [r3, #4]
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	891a      	ldrh	r2, [r3, #8]
 80125c2:	89bb      	ldrh	r3, [r7, #12]
 80125c4:	1ad3      	subs	r3, r2, r3
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	4619      	mov	r1, r3
 80125ca:	f7fa fb25 	bl	800cc18 <pbuf_realloc>
  useg->len -= remainder;
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	891a      	ldrh	r2, [r3, #8]
 80125d2:	89bb      	ldrh	r3, [r7, #12]
 80125d4:	1ad3      	subs	r3, r2, r3
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	68db      	ldr	r3, [r3, #12]
 80125e0:	899b      	ldrh	r3, [r3, #12]
 80125e2:	b29c      	uxth	r4, r3
 80125e4:	7efb      	ldrb	r3, [r7, #27]
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7f9 f867 	bl	800b6bc <lwip_htons>
 80125ee:	4603      	mov	r3, r0
 80125f0:	461a      	mov	r2, r3
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	68db      	ldr	r3, [r3, #12]
 80125f6:	4322      	orrs	r2, r4
 80125f8:	b292      	uxth	r2, r2
 80125fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	4618      	mov	r0, r3
 8012602:	f7fa fd1d 	bl	800d040 <pbuf_clen>
 8012606:	4603      	mov	r3, r0
 8012608:	461a      	mov	r2, r3
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012610:	4413      	add	r3, r2
 8012612:	b29a      	uxth	r2, r3
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801261a:	69fb      	ldr	r3, [r7, #28]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	4618      	mov	r0, r3
 8012620:	f7fa fd0e 	bl	800d040 <pbuf_clen>
 8012624:	4603      	mov	r3, r0
 8012626:	461a      	mov	r2, r3
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801262e:	4413      	add	r3, r2
 8012630:	b29a      	uxth	r2, r3
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	681a      	ldr	r2, [r3, #0]
 801263c:	69fb      	ldr	r3, [r7, #28]
 801263e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	69fa      	ldr	r2, [r7, #28]
 8012644:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012646:	69fb      	ldr	r3, [r7, #28]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d103      	bne.n	8012656 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2200      	movs	r2, #0
 8012652:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012656:	2300      	movs	r3, #0
 8012658:	e016      	b.n	8012688 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801265a:	bf00      	nop
 801265c:	e002      	b.n	8012664 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801265e:	bf00      	nop
 8012660:	e000      	b.n	8012664 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012662:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d006      	beq.n	8012678 <tcp_split_unsent_seg+0x25c>
 801266a:	4b09      	ldr	r3, [pc, #36]	; (8012690 <tcp_split_unsent_seg+0x274>)
 801266c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012670:	490d      	ldr	r1, [pc, #52]	; (80126a8 <tcp_split_unsent_seg+0x28c>)
 8012672:	4809      	ldr	r0, [pc, #36]	; (8012698 <tcp_split_unsent_seg+0x27c>)
 8012674:	f006 fc5e 	bl	8018f34 <iprintf>
  if (p != NULL) {
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d002      	beq.n	8012684 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801267e:	6938      	ldr	r0, [r7, #16]
 8012680:	f7fa fc50 	bl	800cf24 <pbuf_free>
  }

  return ERR_MEM;
 8012684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012688:	4618      	mov	r0, r3
 801268a:	3724      	adds	r7, #36	; 0x24
 801268c:	46bd      	mov	sp, r7
 801268e:	bd90      	pop	{r4, r7, pc}
 8012690:	0801c838 	.word	0x0801c838
 8012694:	0801cbcc 	.word	0x0801cbcc
 8012698:	0801c88c 	.word	0x0801c88c
 801269c:	0801cbf0 	.word	0x0801cbf0
 80126a0:	0801cc14 	.word	0x0801cc14
 80126a4:	0801cc24 	.word	0x0801cc24
 80126a8:	0801cc34 	.word	0x0801cc34

080126ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80126ac:	b590      	push	{r4, r7, lr}
 80126ae:	b085      	sub	sp, #20
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d106      	bne.n	80126c8 <tcp_send_fin+0x1c>
 80126ba:	4b21      	ldr	r3, [pc, #132]	; (8012740 <tcp_send_fin+0x94>)
 80126bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80126c0:	4920      	ldr	r1, [pc, #128]	; (8012744 <tcp_send_fin+0x98>)
 80126c2:	4821      	ldr	r0, [pc, #132]	; (8012748 <tcp_send_fin+0x9c>)
 80126c4:	f006 fc36 	bl	8018f34 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d02e      	beq.n	801272e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126d4:	60fb      	str	r3, [r7, #12]
 80126d6:	e002      	b.n	80126de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d1f8      	bne.n	80126d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	68db      	ldr	r3, [r3, #12]
 80126ea:	899b      	ldrh	r3, [r3, #12]
 80126ec:	b29b      	uxth	r3, r3
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7f8 ffe4 	bl	800b6bc <lwip_htons>
 80126f4:	4603      	mov	r3, r0
 80126f6:	b2db      	uxtb	r3, r3
 80126f8:	f003 0307 	and.w	r3, r3, #7
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d116      	bne.n	801272e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	68db      	ldr	r3, [r3, #12]
 8012704:	899b      	ldrh	r3, [r3, #12]
 8012706:	b29c      	uxth	r4, r3
 8012708:	2001      	movs	r0, #1
 801270a:	f7f8 ffd7 	bl	800b6bc <lwip_htons>
 801270e:	4603      	mov	r3, r0
 8012710:	461a      	mov	r2, r3
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	68db      	ldr	r3, [r3, #12]
 8012716:	4322      	orrs	r2, r4
 8012718:	b292      	uxth	r2, r2
 801271a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	8b5b      	ldrh	r3, [r3, #26]
 8012720:	f043 0320 	orr.w	r3, r3, #32
 8012724:	b29a      	uxth	r2, r3
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801272a:	2300      	movs	r3, #0
 801272c:	e004      	b.n	8012738 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801272e:	2101      	movs	r1, #1
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f000 f80b 	bl	801274c <tcp_enqueue_flags>
 8012736:	4603      	mov	r3, r0
}
 8012738:	4618      	mov	r0, r3
 801273a:	3714      	adds	r7, #20
 801273c:	46bd      	mov	sp, r7
 801273e:	bd90      	pop	{r4, r7, pc}
 8012740:	0801c838 	.word	0x0801c838
 8012744:	0801cc40 	.word	0x0801cc40
 8012748:	0801c88c 	.word	0x0801c88c

0801274c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b08a      	sub	sp, #40	; 0x28
 8012750:	af02      	add	r7, sp, #8
 8012752:	6078      	str	r0, [r7, #4]
 8012754:	460b      	mov	r3, r1
 8012756:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012758:	2300      	movs	r3, #0
 801275a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801275c:	2300      	movs	r3, #0
 801275e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012760:	78fb      	ldrb	r3, [r7, #3]
 8012762:	f003 0303 	and.w	r3, r3, #3
 8012766:	2b00      	cmp	r3, #0
 8012768:	d106      	bne.n	8012778 <tcp_enqueue_flags+0x2c>
 801276a:	4b67      	ldr	r3, [pc, #412]	; (8012908 <tcp_enqueue_flags+0x1bc>)
 801276c:	f240 4211 	movw	r2, #1041	; 0x411
 8012770:	4966      	ldr	r1, [pc, #408]	; (801290c <tcp_enqueue_flags+0x1c0>)
 8012772:	4867      	ldr	r0, [pc, #412]	; (8012910 <tcp_enqueue_flags+0x1c4>)
 8012774:	f006 fbde 	bl	8018f34 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d106      	bne.n	801278c <tcp_enqueue_flags+0x40>
 801277e:	4b62      	ldr	r3, [pc, #392]	; (8012908 <tcp_enqueue_flags+0x1bc>)
 8012780:	f240 4213 	movw	r2, #1043	; 0x413
 8012784:	4963      	ldr	r1, [pc, #396]	; (8012914 <tcp_enqueue_flags+0x1c8>)
 8012786:	4862      	ldr	r0, [pc, #392]	; (8012910 <tcp_enqueue_flags+0x1c4>)
 8012788:	f006 fbd4 	bl	8018f34 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801278c:	78fb      	ldrb	r3, [r7, #3]
 801278e:	f003 0302 	and.w	r3, r3, #2
 8012792:	2b00      	cmp	r3, #0
 8012794:	d001      	beq.n	801279a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012796:	2301      	movs	r3, #1
 8012798:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801279a:	7ffb      	ldrb	r3, [r7, #31]
 801279c:	009b      	lsls	r3, r3, #2
 801279e:	b2db      	uxtb	r3, r3
 80127a0:	f003 0304 	and.w	r3, r3, #4
 80127a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80127a6:	7dfb      	ldrb	r3, [r7, #23]
 80127a8:	b29b      	uxth	r3, r3
 80127aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127ae:	4619      	mov	r1, r3
 80127b0:	2036      	movs	r0, #54	; 0x36
 80127b2:	f7fa f8d3 	bl	800c95c <pbuf_alloc>
 80127b6:	6138      	str	r0, [r7, #16]
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d109      	bne.n	80127d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	8b5b      	ldrh	r3, [r3, #26]
 80127c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127c6:	b29a      	uxth	r2, r3
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80127cc:	f04f 33ff 	mov.w	r3, #4294967295
 80127d0:	e095      	b.n	80128fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	895a      	ldrh	r2, [r3, #10]
 80127d6:	7dfb      	ldrb	r3, [r7, #23]
 80127d8:	b29b      	uxth	r3, r3
 80127da:	429a      	cmp	r2, r3
 80127dc:	d206      	bcs.n	80127ec <tcp_enqueue_flags+0xa0>
 80127de:	4b4a      	ldr	r3, [pc, #296]	; (8012908 <tcp_enqueue_flags+0x1bc>)
 80127e0:	f240 4239 	movw	r2, #1081	; 0x439
 80127e4:	494c      	ldr	r1, [pc, #304]	; (8012918 <tcp_enqueue_flags+0x1cc>)
 80127e6:	484a      	ldr	r0, [pc, #296]	; (8012910 <tcp_enqueue_flags+0x1c4>)
 80127e8:	f006 fba4 	bl	8018f34 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80127f0:	78fa      	ldrb	r2, [r7, #3]
 80127f2:	7ffb      	ldrb	r3, [r7, #31]
 80127f4:	9300      	str	r3, [sp, #0]
 80127f6:	460b      	mov	r3, r1
 80127f8:	6939      	ldr	r1, [r7, #16]
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f7ff f918 	bl	8011a30 <tcp_create_segment>
 8012800:	60f8      	str	r0, [r7, #12]
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d109      	bne.n	801281c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	8b5b      	ldrh	r3, [r3, #26]
 801280c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012810:	b29a      	uxth	r2, r3
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012816:	f04f 33ff 	mov.w	r3, #4294967295
 801281a:	e070      	b.n	80128fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	68db      	ldr	r3, [r3, #12]
 8012820:	f003 0303 	and.w	r3, r3, #3
 8012824:	2b00      	cmp	r3, #0
 8012826:	d006      	beq.n	8012836 <tcp_enqueue_flags+0xea>
 8012828:	4b37      	ldr	r3, [pc, #220]	; (8012908 <tcp_enqueue_flags+0x1bc>)
 801282a:	f240 4242 	movw	r2, #1090	; 0x442
 801282e:	493b      	ldr	r1, [pc, #236]	; (801291c <tcp_enqueue_flags+0x1d0>)
 8012830:	4837      	ldr	r0, [pc, #220]	; (8012910 <tcp_enqueue_flags+0x1c4>)
 8012832:	f006 fb7f 	bl	8018f34 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	891b      	ldrh	r3, [r3, #8]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d006      	beq.n	801284c <tcp_enqueue_flags+0x100>
 801283e:	4b32      	ldr	r3, [pc, #200]	; (8012908 <tcp_enqueue_flags+0x1bc>)
 8012840:	f240 4243 	movw	r2, #1091	; 0x443
 8012844:	4936      	ldr	r1, [pc, #216]	; (8012920 <tcp_enqueue_flags+0x1d4>)
 8012846:	4832      	ldr	r0, [pc, #200]	; (8012910 <tcp_enqueue_flags+0x1c4>)
 8012848:	f006 fb74 	bl	8018f34 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012850:	2b00      	cmp	r3, #0
 8012852:	d103      	bne.n	801285c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	68fa      	ldr	r2, [r7, #12]
 8012858:	66da      	str	r2, [r3, #108]	; 0x6c
 801285a:	e00d      	b.n	8012878 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012860:	61bb      	str	r3, [r7, #24]
 8012862:	e002      	b.n	801286a <tcp_enqueue_flags+0x11e>
 8012864:	69bb      	ldr	r3, [r7, #24]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	61bb      	str	r3, [r7, #24]
 801286a:	69bb      	ldr	r3, [r7, #24]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d1f8      	bne.n	8012864 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012872:	69bb      	ldr	r3, [r7, #24]
 8012874:	68fa      	ldr	r2, [r7, #12]
 8012876:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2200      	movs	r2, #0
 801287c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012880:	78fb      	ldrb	r3, [r7, #3]
 8012882:	f003 0302 	and.w	r3, r3, #2
 8012886:	2b00      	cmp	r3, #0
 8012888:	d104      	bne.n	8012894 <tcp_enqueue_flags+0x148>
 801288a:	78fb      	ldrb	r3, [r7, #3]
 801288c:	f003 0301 	and.w	r3, r3, #1
 8012890:	2b00      	cmp	r3, #0
 8012892:	d004      	beq.n	801289e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012898:	1c5a      	adds	r2, r3, #1
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801289e:	78fb      	ldrb	r3, [r7, #3]
 80128a0:	f003 0301 	and.w	r3, r3, #1
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d006      	beq.n	80128b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	8b5b      	ldrh	r3, [r3, #26]
 80128ac:	f043 0320 	orr.w	r3, r3, #32
 80128b0:	b29a      	uxth	r2, r3
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7fa fbc0 	bl	800d040 <pbuf_clen>
 80128c0:	4603      	mov	r3, r0
 80128c2:	461a      	mov	r2, r3
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128ca:	4413      	add	r3, r2
 80128cc:	b29a      	uxth	r2, r3
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d00e      	beq.n	80128fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d10a      	bne.n	80128fc <tcp_enqueue_flags+0x1b0>
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d106      	bne.n	80128fc <tcp_enqueue_flags+0x1b0>
 80128ee:	4b06      	ldr	r3, [pc, #24]	; (8012908 <tcp_enqueue_flags+0x1bc>)
 80128f0:	f240 4265 	movw	r2, #1125	; 0x465
 80128f4:	490b      	ldr	r1, [pc, #44]	; (8012924 <tcp_enqueue_flags+0x1d8>)
 80128f6:	4806      	ldr	r0, [pc, #24]	; (8012910 <tcp_enqueue_flags+0x1c4>)
 80128f8:	f006 fb1c 	bl	8018f34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80128fc:	2300      	movs	r3, #0
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3720      	adds	r7, #32
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}
 8012906:	bf00      	nop
 8012908:	0801c838 	.word	0x0801c838
 801290c:	0801cc5c 	.word	0x0801cc5c
 8012910:	0801c88c 	.word	0x0801c88c
 8012914:	0801ccb4 	.word	0x0801ccb4
 8012918:	0801ccd4 	.word	0x0801ccd4
 801291c:	0801cd10 	.word	0x0801cd10
 8012920:	0801cd28 	.word	0x0801cd28
 8012924:	0801cd54 	.word	0x0801cd54

08012928 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012928:	b5b0      	push	{r4, r5, r7, lr}
 801292a:	b08a      	sub	sp, #40	; 0x28
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d106      	bne.n	8012944 <tcp_output+0x1c>
 8012936:	4b8a      	ldr	r3, [pc, #552]	; (8012b60 <tcp_output+0x238>)
 8012938:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801293c:	4989      	ldr	r1, [pc, #548]	; (8012b64 <tcp_output+0x23c>)
 801293e:	488a      	ldr	r0, [pc, #552]	; (8012b68 <tcp_output+0x240>)
 8012940:	f006 faf8 	bl	8018f34 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	7d1b      	ldrb	r3, [r3, #20]
 8012948:	2b01      	cmp	r3, #1
 801294a:	d106      	bne.n	801295a <tcp_output+0x32>
 801294c:	4b84      	ldr	r3, [pc, #528]	; (8012b60 <tcp_output+0x238>)
 801294e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012952:	4986      	ldr	r1, [pc, #536]	; (8012b6c <tcp_output+0x244>)
 8012954:	4884      	ldr	r0, [pc, #528]	; (8012b68 <tcp_output+0x240>)
 8012956:	f006 faed 	bl	8018f34 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801295a:	4b85      	ldr	r3, [pc, #532]	; (8012b70 <tcp_output+0x248>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	687a      	ldr	r2, [r7, #4]
 8012960:	429a      	cmp	r2, r3
 8012962:	d101      	bne.n	8012968 <tcp_output+0x40>
    return ERR_OK;
 8012964:	2300      	movs	r3, #0
 8012966:	e1ce      	b.n	8012d06 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012974:	4293      	cmp	r3, r2
 8012976:	bf28      	it	cs
 8012978:	4613      	movcs	r3, r2
 801297a:	b29b      	uxth	r3, r3
 801297c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012982:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012986:	2b00      	cmp	r3, #0
 8012988:	d10b      	bne.n	80129a2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	8b5b      	ldrh	r3, [r3, #26]
 801298e:	f003 0302 	and.w	r3, r3, #2
 8012992:	2b00      	cmp	r3, #0
 8012994:	f000 81aa 	beq.w	8012cec <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f000 fdcb 	bl	8013534 <tcp_send_empty_ack>
 801299e:	4603      	mov	r3, r0
 80129a0:	e1b1      	b.n	8012d06 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80129a2:	6879      	ldr	r1, [r7, #4]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	3304      	adds	r3, #4
 80129a8:	461a      	mov	r2, r3
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f7ff f824 	bl	80119f8 <tcp_route>
 80129b0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d102      	bne.n	80129be <tcp_output+0x96>
    return ERR_RTE;
 80129b8:	f06f 0303 	mvn.w	r3, #3
 80129bc:	e1a3      	b.n	8012d06 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d003      	beq.n	80129cc <tcp_output+0xa4>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d111      	bne.n	80129f0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d002      	beq.n	80129d8 <tcp_output+0xb0>
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	3304      	adds	r3, #4
 80129d6:	e000      	b.n	80129da <tcp_output+0xb2>
 80129d8:	2300      	movs	r3, #0
 80129da:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d102      	bne.n	80129e8 <tcp_output+0xc0>
      return ERR_RTE;
 80129e2:	f06f 0303 	mvn.w	r3, #3
 80129e6:	e18e      	b.n	8012d06 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	681a      	ldr	r2, [r3, #0]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80129f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f2:	68db      	ldr	r3, [r3, #12]
 80129f4:	685b      	ldr	r3, [r3, #4]
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7f8 fe75 	bl	800b6e6 <lwip_htonl>
 80129fc:	4602      	mov	r2, r0
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a02:	1ad3      	subs	r3, r2, r3
 8012a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a06:	8912      	ldrh	r2, [r2, #8]
 8012a08:	4413      	add	r3, r2
 8012a0a:	69ba      	ldr	r2, [r7, #24]
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d227      	bcs.n	8012a60 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a16:	461a      	mov	r2, r3
 8012a18:	69bb      	ldr	r3, [r7, #24]
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	d114      	bne.n	8012a48 <tcp_output+0x120>
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d110      	bne.n	8012a48 <tcp_output+0x120>
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d10b      	bne.n	8012a48 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2200      	movs	r2, #0
 8012a34:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2201      	movs	r2, #1
 8012a3c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2200      	movs	r2, #0
 8012a44:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	8b5b      	ldrh	r3, [r3, #26]
 8012a4c:	f003 0302 	and.w	r3, r3, #2
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	f000 814d 	beq.w	8012cf0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f000 fd6c 	bl	8013534 <tcp_send_empty_ack>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	e152      	b.n	8012d06 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2200      	movs	r2, #0
 8012a64:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a6c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012a6e:	6a3b      	ldr	r3, [r7, #32]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	f000 811c 	beq.w	8012cae <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012a76:	e002      	b.n	8012a7e <tcp_output+0x156>
 8012a78:	6a3b      	ldr	r3, [r7, #32]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	623b      	str	r3, [r7, #32]
 8012a7e:	6a3b      	ldr	r3, [r7, #32]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d1f8      	bne.n	8012a78 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012a86:	e112      	b.n	8012cae <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8a:	68db      	ldr	r3, [r3, #12]
 8012a8c:	899b      	ldrh	r3, [r3, #12]
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7f8 fe13 	bl	800b6bc <lwip_htons>
 8012a96:	4603      	mov	r3, r0
 8012a98:	b2db      	uxtb	r3, r3
 8012a9a:	f003 0304 	and.w	r3, r3, #4
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d006      	beq.n	8012ab0 <tcp_output+0x188>
 8012aa2:	4b2f      	ldr	r3, [pc, #188]	; (8012b60 <tcp_output+0x238>)
 8012aa4:	f240 5236 	movw	r2, #1334	; 0x536
 8012aa8:	4932      	ldr	r1, [pc, #200]	; (8012b74 <tcp_output+0x24c>)
 8012aaa:	482f      	ldr	r0, [pc, #188]	; (8012b68 <tcp_output+0x240>)
 8012aac:	f006 fa42 	bl	8018f34 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d01f      	beq.n	8012af8 <tcp_output+0x1d0>
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	8b5b      	ldrh	r3, [r3, #26]
 8012abc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d119      	bne.n	8012af8 <tcp_output+0x1d0>
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d00b      	beq.n	8012ae4 <tcp_output+0x1bc>
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d110      	bne.n	8012af8 <tcp_output+0x1d0>
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ada:	891a      	ldrh	r2, [r3, #8]
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d209      	bcs.n	8012af8 <tcp_output+0x1d0>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d004      	beq.n	8012af8 <tcp_output+0x1d0>
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012af4:	2b08      	cmp	r3, #8
 8012af6:	d901      	bls.n	8012afc <tcp_output+0x1d4>
 8012af8:	2301      	movs	r3, #1
 8012afa:	e000      	b.n	8012afe <tcp_output+0x1d6>
 8012afc:	2300      	movs	r3, #0
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d106      	bne.n	8012b10 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	8b5b      	ldrh	r3, [r3, #26]
 8012b06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	f000 80e4 	beq.w	8012cd8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	7d1b      	ldrb	r3, [r3, #20]
 8012b14:	2b02      	cmp	r3, #2
 8012b16:	d00d      	beq.n	8012b34 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1a:	68db      	ldr	r3, [r3, #12]
 8012b1c:	899b      	ldrh	r3, [r3, #12]
 8012b1e:	b29c      	uxth	r4, r3
 8012b20:	2010      	movs	r0, #16
 8012b22:	f7f8 fdcb 	bl	800b6bc <lwip_htons>
 8012b26:	4603      	mov	r3, r0
 8012b28:	461a      	mov	r2, r3
 8012b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	4322      	orrs	r2, r4
 8012b30:	b292      	uxth	r2, r2
 8012b32:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012b34:	697a      	ldr	r2, [r7, #20]
 8012b36:	6879      	ldr	r1, [r7, #4]
 8012b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b3a:	f000 f909 	bl	8012d50 <tcp_output_segment>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d016      	beq.n	8012b78 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	8b5b      	ldrh	r3, [r3, #26]
 8012b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b52:	b29a      	uxth	r2, r3
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	835a      	strh	r2, [r3, #26]
      return err;
 8012b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b5c:	e0d3      	b.n	8012d06 <tcp_output+0x3de>
 8012b5e:	bf00      	nop
 8012b60:	0801c838 	.word	0x0801c838
 8012b64:	0801cd7c 	.word	0x0801cd7c
 8012b68:	0801c88c 	.word	0x0801c88c
 8012b6c:	0801cd94 	.word	0x0801cd94
 8012b70:	200115d8 	.word	0x200115d8
 8012b74:	0801cdbc 	.word	0x0801cdbc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7a:	681a      	ldr	r2, [r3, #0]
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	7d1b      	ldrb	r3, [r3, #20]
 8012b84:	2b02      	cmp	r3, #2
 8012b86:	d006      	beq.n	8012b96 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	8b5b      	ldrh	r3, [r3, #26]
 8012b8c:	f023 0303 	bic.w	r3, r3, #3
 8012b90:	b29a      	uxth	r2, r3
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b98:	68db      	ldr	r3, [r3, #12]
 8012b9a:	685b      	ldr	r3, [r3, #4]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7f8 fda2 	bl	800b6e6 <lwip_htonl>
 8012ba2:	4604      	mov	r4, r0
 8012ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba6:	891b      	ldrh	r3, [r3, #8]
 8012ba8:	461d      	mov	r5, r3
 8012baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bac:	68db      	ldr	r3, [r3, #12]
 8012bae:	899b      	ldrh	r3, [r3, #12]
 8012bb0:	b29b      	uxth	r3, r3
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7f8 fd82 	bl	800b6bc <lwip_htons>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	b2db      	uxtb	r3, r3
 8012bbc:	f003 0303 	and.w	r3, r3, #3
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d001      	beq.n	8012bc8 <tcp_output+0x2a0>
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	e000      	b.n	8012bca <tcp_output+0x2a2>
 8012bc8:	2300      	movs	r3, #0
 8012bca:	442b      	add	r3, r5
 8012bcc:	4423      	add	r3, r4
 8012bce:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	1ad3      	subs	r3, r2, r3
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	da02      	bge.n	8012be2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	68ba      	ldr	r2, [r7, #8]
 8012be0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be4:	891b      	ldrh	r3, [r3, #8]
 8012be6:	461c      	mov	r4, r3
 8012be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bea:	68db      	ldr	r3, [r3, #12]
 8012bec:	899b      	ldrh	r3, [r3, #12]
 8012bee:	b29b      	uxth	r3, r3
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7f8 fd63 	bl	800b6bc <lwip_htons>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	b2db      	uxtb	r3, r3
 8012bfa:	f003 0303 	and.w	r3, r3, #3
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d001      	beq.n	8012c06 <tcp_output+0x2de>
 8012c02:	2301      	movs	r3, #1
 8012c04:	e000      	b.n	8012c08 <tcp_output+0x2e0>
 8012c06:	2300      	movs	r3, #0
 8012c08:	4423      	add	r3, r4
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d049      	beq.n	8012ca2 <tcp_output+0x37a>
      seg->next = NULL;
 8012c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c10:	2200      	movs	r2, #0
 8012c12:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d105      	bne.n	8012c28 <tcp_output+0x300>
        pcb->unacked = seg;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c20:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c24:	623b      	str	r3, [r7, #32]
 8012c26:	e03f      	b.n	8012ca8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7f8 fd59 	bl	800b6e6 <lwip_htonl>
 8012c34:	4604      	mov	r4, r0
 8012c36:	6a3b      	ldr	r3, [r7, #32]
 8012c38:	68db      	ldr	r3, [r3, #12]
 8012c3a:	685b      	ldr	r3, [r3, #4]
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7f8 fd52 	bl	800b6e6 <lwip_htonl>
 8012c42:	4603      	mov	r3, r0
 8012c44:	1ae3      	subs	r3, r4, r3
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	da24      	bge.n	8012c94 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	3370      	adds	r3, #112	; 0x70
 8012c4e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012c50:	e002      	b.n	8012c58 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012c52:	69fb      	ldr	r3, [r7, #28]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012c58:	69fb      	ldr	r3, [r7, #28]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d011      	beq.n	8012c84 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012c60:	69fb      	ldr	r3, [r7, #28]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	68db      	ldr	r3, [r3, #12]
 8012c66:	685b      	ldr	r3, [r3, #4]
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f7f8 fd3c 	bl	800b6e6 <lwip_htonl>
 8012c6e:	4604      	mov	r4, r0
 8012c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c72:	68db      	ldr	r3, [r3, #12]
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7f8 fd35 	bl	800b6e6 <lwip_htonl>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	dbe6      	blt.n	8012c52 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012c84:	69fb      	ldr	r3, [r7, #28]
 8012c86:	681a      	ldr	r2, [r3, #0]
 8012c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012c8c:	69fb      	ldr	r3, [r7, #28]
 8012c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c90:	601a      	str	r2, [r3, #0]
 8012c92:	e009      	b.n	8012ca8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012c94:	6a3b      	ldr	r3, [r7, #32]
 8012c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c98:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012c9a:	6a3b      	ldr	r3, [r7, #32]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	623b      	str	r3, [r7, #32]
 8012ca0:	e002      	b.n	8012ca8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ca4:	f7fb fefb 	bl	800ea9e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cac:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d012      	beq.n	8012cda <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb6:	68db      	ldr	r3, [r3, #12]
 8012cb8:	685b      	ldr	r3, [r3, #4]
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7f8 fd13 	bl	800b6e6 <lwip_htonl>
 8012cc0:	4602      	mov	r2, r0
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012cc6:	1ad3      	subs	r3, r2, r3
 8012cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cca:	8912      	ldrh	r2, [r2, #8]
 8012ccc:	4413      	add	r3, r2
  while (seg != NULL &&
 8012cce:	69ba      	ldr	r2, [r7, #24]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	f4bf aed9 	bcs.w	8012a88 <tcp_output+0x160>
 8012cd6:	e000      	b.n	8012cda <tcp_output+0x3b2>
      break;
 8012cd8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d108      	bne.n	8012cf4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012cea:	e004      	b.n	8012cf6 <tcp_output+0x3ce>
    goto output_done;
 8012cec:	bf00      	nop
 8012cee:	e002      	b.n	8012cf6 <tcp_output+0x3ce>
    goto output_done;
 8012cf0:	bf00      	nop
 8012cf2:	e000      	b.n	8012cf6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012cf4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	8b5b      	ldrh	r3, [r3, #26]
 8012cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012cfe:	b29a      	uxth	r2, r3
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012d04:	2300      	movs	r3, #0
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	3728      	adds	r7, #40	; 0x28
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8012d0e:	bf00      	nop

08012d10 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d106      	bne.n	8012d2c <tcp_output_segment_busy+0x1c>
 8012d1e:	4b09      	ldr	r3, [pc, #36]	; (8012d44 <tcp_output_segment_busy+0x34>)
 8012d20:	f240 529a 	movw	r2, #1434	; 0x59a
 8012d24:	4908      	ldr	r1, [pc, #32]	; (8012d48 <tcp_output_segment_busy+0x38>)
 8012d26:	4809      	ldr	r0, [pc, #36]	; (8012d4c <tcp_output_segment_busy+0x3c>)
 8012d28:	f006 f904 	bl	8018f34 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	7b9b      	ldrb	r3, [r3, #14]
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	d001      	beq.n	8012d3a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012d36:	2301      	movs	r3, #1
 8012d38:	e000      	b.n	8012d3c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012d3a:	2300      	movs	r3, #0
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3708      	adds	r7, #8
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	0801c838 	.word	0x0801c838
 8012d48:	0801cdd4 	.word	0x0801cdd4
 8012d4c:	0801c88c 	.word	0x0801c88c

08012d50 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012d50:	b5b0      	push	{r4, r5, r7, lr}
 8012d52:	b08c      	sub	sp, #48	; 0x30
 8012d54:	af04      	add	r7, sp, #16
 8012d56:	60f8      	str	r0, [r7, #12]
 8012d58:	60b9      	str	r1, [r7, #8]
 8012d5a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d106      	bne.n	8012d70 <tcp_output_segment+0x20>
 8012d62:	4b63      	ldr	r3, [pc, #396]	; (8012ef0 <tcp_output_segment+0x1a0>)
 8012d64:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012d68:	4962      	ldr	r1, [pc, #392]	; (8012ef4 <tcp_output_segment+0x1a4>)
 8012d6a:	4863      	ldr	r0, [pc, #396]	; (8012ef8 <tcp_output_segment+0x1a8>)
 8012d6c:	f006 f8e2 	bl	8018f34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d106      	bne.n	8012d84 <tcp_output_segment+0x34>
 8012d76:	4b5e      	ldr	r3, [pc, #376]	; (8012ef0 <tcp_output_segment+0x1a0>)
 8012d78:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012d7c:	495f      	ldr	r1, [pc, #380]	; (8012efc <tcp_output_segment+0x1ac>)
 8012d7e:	485e      	ldr	r0, [pc, #376]	; (8012ef8 <tcp_output_segment+0x1a8>)
 8012d80:	f006 f8d8 	bl	8018f34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d106      	bne.n	8012d98 <tcp_output_segment+0x48>
 8012d8a:	4b59      	ldr	r3, [pc, #356]	; (8012ef0 <tcp_output_segment+0x1a0>)
 8012d8c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012d90:	495b      	ldr	r1, [pc, #364]	; (8012f00 <tcp_output_segment+0x1b0>)
 8012d92:	4859      	ldr	r0, [pc, #356]	; (8012ef8 <tcp_output_segment+0x1a8>)
 8012d94:	f006 f8ce 	bl	8018f34 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012d98:	68f8      	ldr	r0, [r7, #12]
 8012d9a:	f7ff ffb9 	bl	8012d10 <tcp_output_segment_busy>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d001      	beq.n	8012da8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012da4:	2300      	movs	r3, #0
 8012da6:	e09f      	b.n	8012ee8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012da8:	68bb      	ldr	r3, [r7, #8]
 8012daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	68dc      	ldr	r4, [r3, #12]
 8012db0:	4610      	mov	r0, r2
 8012db2:	f7f8 fc98 	bl	800b6e6 <lwip_htonl>
 8012db6:	4603      	mov	r3, r0
 8012db8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	68dc      	ldr	r4, [r3, #12]
 8012dc2:	4610      	mov	r0, r2
 8012dc4:	f7f8 fc7a 	bl	800b6bc <lwip_htons>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dd0:	68ba      	ldr	r2, [r7, #8]
 8012dd2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012dd4:	441a      	add	r2, r3
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	68db      	ldr	r3, [r3, #12]
 8012dde:	3314      	adds	r3, #20
 8012de0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	7a9b      	ldrb	r3, [r3, #10]
 8012de6:	f003 0301 	and.w	r3, r3, #1
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d015      	beq.n	8012e1a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	3304      	adds	r3, #4
 8012df2:	461a      	mov	r2, r3
 8012df4:	6879      	ldr	r1, [r7, #4]
 8012df6:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012dfa:	f7fc fa33 	bl	800f264 <tcp_eff_send_mss_netif>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012e02:	8b7b      	ldrh	r3, [r7, #26]
 8012e04:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7f8 fc6c 	bl	800b6e6 <lwip_htonl>
 8012e0e:	4602      	mov	r2, r0
 8012e10:	69fb      	ldr	r3, [r7, #28]
 8012e12:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	3304      	adds	r3, #4
 8012e18:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012e1a:	68bb      	ldr	r3, [r7, #8]
 8012e1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	da02      	bge.n	8012e2a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	2200      	movs	r2, #0
 8012e28:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d10c      	bne.n	8012e4c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012e32:	4b34      	ldr	r3, [pc, #208]	; (8012f04 <tcp_output_segment+0x1b4>)
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	68db      	ldr	r3, [r3, #12]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7f8 fc50 	bl	800b6e6 <lwip_htonl>
 8012e46:	4602      	mov	r2, r0
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	68da      	ldr	r2, [r3, #12]
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	685b      	ldr	r3, [r3, #4]
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	1ad3      	subs	r3, r2, r3
 8012e58:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	8959      	ldrh	r1, [r3, #10]
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	685b      	ldr	r3, [r3, #4]
 8012e64:	8b3a      	ldrh	r2, [r7, #24]
 8012e66:	1a8a      	subs	r2, r1, r2
 8012e68:	b292      	uxth	r2, r2
 8012e6a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	685b      	ldr	r3, [r3, #4]
 8012e70:	8919      	ldrh	r1, [r3, #8]
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	8b3a      	ldrh	r2, [r7, #24]
 8012e78:	1a8a      	subs	r2, r1, r2
 8012e7a:	b292      	uxth	r2, r2
 8012e7c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	685b      	ldr	r3, [r3, #4]
 8012e82:	68fa      	ldr	r2, [r7, #12]
 8012e84:	68d2      	ldr	r2, [r2, #12]
 8012e86:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	68db      	ldr	r3, [r3, #12]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	741a      	strb	r2, [r3, #16]
 8012e90:	2200      	movs	r2, #0
 8012e92:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	f103 0214 	add.w	r2, r3, #20
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	7a9b      	ldrb	r3, [r3, #10]
 8012ea0:	009b      	lsls	r3, r3, #2
 8012ea2:	f003 0304 	and.w	r3, r3, #4
 8012ea6:	4413      	add	r3, r2
 8012ea8:	69fa      	ldr	r2, [r7, #28]
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d006      	beq.n	8012ebc <tcp_output_segment+0x16c>
 8012eae:	4b10      	ldr	r3, [pc, #64]	; (8012ef0 <tcp_output_segment+0x1a0>)
 8012eb0:	f240 621c 	movw	r2, #1564	; 0x61c
 8012eb4:	4914      	ldr	r1, [pc, #80]	; (8012f08 <tcp_output_segment+0x1b8>)
 8012eb6:	4810      	ldr	r0, [pc, #64]	; (8012ef8 <tcp_output_segment+0x1a8>)
 8012eb8:	f006 f83c 	bl	8018f34 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	6858      	ldr	r0, [r3, #4]
 8012ec0:	68b9      	ldr	r1, [r7, #8]
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	1d1c      	adds	r4, r3, #4
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	7add      	ldrb	r5, [r3, #11]
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	7a9b      	ldrb	r3, [r3, #10]
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	9202      	str	r2, [sp, #8]
 8012ed2:	2206      	movs	r2, #6
 8012ed4:	9201      	str	r2, [sp, #4]
 8012ed6:	9300      	str	r3, [sp, #0]
 8012ed8:	462b      	mov	r3, r5
 8012eda:	4622      	mov	r2, r4
 8012edc:	f004 fc28 	bl	8017730 <ip4_output_if>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ee8:	4618      	mov	r0, r3
 8012eea:	3720      	adds	r7, #32
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bdb0      	pop	{r4, r5, r7, pc}
 8012ef0:	0801c838 	.word	0x0801c838
 8012ef4:	0801cdfc 	.word	0x0801cdfc
 8012ef8:	0801c88c 	.word	0x0801c88c
 8012efc:	0801ce1c 	.word	0x0801ce1c
 8012f00:	0801ce3c 	.word	0x0801ce3c
 8012f04:	2001158c 	.word	0x2001158c
 8012f08:	0801ce60 	.word	0x0801ce60

08012f0c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012f0c:	b5b0      	push	{r4, r5, r7, lr}
 8012f0e:	b084      	sub	sp, #16
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d106      	bne.n	8012f28 <tcp_rexmit_rto_prepare+0x1c>
 8012f1a:	4b31      	ldr	r3, [pc, #196]	; (8012fe0 <tcp_rexmit_rto_prepare+0xd4>)
 8012f1c:	f240 6263 	movw	r2, #1635	; 0x663
 8012f20:	4930      	ldr	r1, [pc, #192]	; (8012fe4 <tcp_rexmit_rto_prepare+0xd8>)
 8012f22:	4831      	ldr	r0, [pc, #196]	; (8012fe8 <tcp_rexmit_rto_prepare+0xdc>)
 8012f24:	f006 f806 	bl	8018f34 <iprintf>

  if (pcb->unacked == NULL) {
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d102      	bne.n	8012f36 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012f30:	f06f 0305 	mvn.w	r3, #5
 8012f34:	e050      	b.n	8012fd8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f3a:	60fb      	str	r3, [r7, #12]
 8012f3c:	e00b      	b.n	8012f56 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012f3e:	68f8      	ldr	r0, [r7, #12]
 8012f40:	f7ff fee6 	bl	8012d10 <tcp_output_segment_busy>
 8012f44:	4603      	mov	r3, r0
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d002      	beq.n	8012f50 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012f4a:	f06f 0305 	mvn.w	r3, #5
 8012f4e:	e043      	b.n	8012fd8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	60fb      	str	r3, [r7, #12]
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d1ef      	bne.n	8012f3e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012f5e:	68f8      	ldr	r0, [r7, #12]
 8012f60:	f7ff fed6 	bl	8012d10 <tcp_output_segment_busy>
 8012f64:	4603      	mov	r3, r0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d002      	beq.n	8012f70 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012f6a:	f06f 0305 	mvn.w	r3, #5
 8012f6e:	e033      	b.n	8012fd8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2200      	movs	r2, #0
 8012f84:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	8b5b      	ldrh	r3, [r3, #26]
 8012f8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012f8e:	b29a      	uxth	r2, r3
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	68db      	ldr	r3, [r3, #12]
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7f8 fba3 	bl	800b6e6 <lwip_htonl>
 8012fa0:	4604      	mov	r4, r0
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	891b      	ldrh	r3, [r3, #8]
 8012fa6:	461d      	mov	r5, r3
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	68db      	ldr	r3, [r3, #12]
 8012fac:	899b      	ldrh	r3, [r3, #12]
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f7f8 fb83 	bl	800b6bc <lwip_htons>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	b2db      	uxtb	r3, r3
 8012fba:	f003 0303 	and.w	r3, r3, #3
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d001      	beq.n	8012fc6 <tcp_rexmit_rto_prepare+0xba>
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	e000      	b.n	8012fc8 <tcp_rexmit_rto_prepare+0xbc>
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	442b      	add	r3, r5
 8012fca:	18e2      	adds	r2, r4, r3
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012fd6:	2300      	movs	r3, #0
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3710      	adds	r7, #16
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bdb0      	pop	{r4, r5, r7, pc}
 8012fe0:	0801c838 	.word	0x0801c838
 8012fe4:	0801ce74 	.word	0x0801ce74
 8012fe8:	0801c88c 	.word	0x0801c88c

08012fec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d106      	bne.n	8013008 <tcp_rexmit_rto_commit+0x1c>
 8012ffa:	4b0d      	ldr	r3, [pc, #52]	; (8013030 <tcp_rexmit_rto_commit+0x44>)
 8012ffc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013000:	490c      	ldr	r1, [pc, #48]	; (8013034 <tcp_rexmit_rto_commit+0x48>)
 8013002:	480d      	ldr	r0, [pc, #52]	; (8013038 <tcp_rexmit_rto_commit+0x4c>)
 8013004:	f005 ff96 	bl	8018f34 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801300e:	2bff      	cmp	r3, #255	; 0xff
 8013010:	d007      	beq.n	8013022 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013018:	3301      	adds	r3, #1
 801301a:	b2da      	uxtb	r2, r3
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f7ff fc80 	bl	8012928 <tcp_output>
}
 8013028:	bf00      	nop
 801302a:	3708      	adds	r7, #8
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}
 8013030:	0801c838 	.word	0x0801c838
 8013034:	0801ce98 	.word	0x0801ce98
 8013038:	0801c88c 	.word	0x0801c88c

0801303c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b082      	sub	sp, #8
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d106      	bne.n	8013058 <tcp_rexmit_rto+0x1c>
 801304a:	4b0a      	ldr	r3, [pc, #40]	; (8013074 <tcp_rexmit_rto+0x38>)
 801304c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013050:	4909      	ldr	r1, [pc, #36]	; (8013078 <tcp_rexmit_rto+0x3c>)
 8013052:	480a      	ldr	r0, [pc, #40]	; (801307c <tcp_rexmit_rto+0x40>)
 8013054:	f005 ff6e 	bl	8018f34 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f7ff ff57 	bl	8012f0c <tcp_rexmit_rto_prepare>
 801305e:	4603      	mov	r3, r0
 8013060:	2b00      	cmp	r3, #0
 8013062:	d102      	bne.n	801306a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f7ff ffc1 	bl	8012fec <tcp_rexmit_rto_commit>
  }
}
 801306a:	bf00      	nop
 801306c:	3708      	adds	r7, #8
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	0801c838 	.word	0x0801c838
 8013078:	0801cebc 	.word	0x0801cebc
 801307c:	0801c88c 	.word	0x0801c88c

08013080 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013080:	b590      	push	{r4, r7, lr}
 8013082:	b085      	sub	sp, #20
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d106      	bne.n	801309c <tcp_rexmit+0x1c>
 801308e:	4b2f      	ldr	r3, [pc, #188]	; (801314c <tcp_rexmit+0xcc>)
 8013090:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013094:	492e      	ldr	r1, [pc, #184]	; (8013150 <tcp_rexmit+0xd0>)
 8013096:	482f      	ldr	r0, [pc, #188]	; (8013154 <tcp_rexmit+0xd4>)
 8013098:	f005 ff4c 	bl	8018f34 <iprintf>

  if (pcb->unacked == NULL) {
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d102      	bne.n	80130aa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80130a4:	f06f 0305 	mvn.w	r3, #5
 80130a8:	e04c      	b.n	8013144 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130ae:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80130b0:	68b8      	ldr	r0, [r7, #8]
 80130b2:	f7ff fe2d 	bl	8012d10 <tcp_output_segment_busy>
 80130b6:	4603      	mov	r3, r0
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d002      	beq.n	80130c2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80130bc:	f06f 0305 	mvn.w	r3, #5
 80130c0:	e040      	b.n	8013144 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80130c2:	68bb      	ldr	r3, [r7, #8]
 80130c4:	681a      	ldr	r2, [r3, #0]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	336c      	adds	r3, #108	; 0x6c
 80130ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80130d0:	e002      	b.n	80130d8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d011      	beq.n	8013104 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	68db      	ldr	r3, [r3, #12]
 80130e6:	685b      	ldr	r3, [r3, #4]
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7f8 fafc 	bl	800b6e6 <lwip_htonl>
 80130ee:	4604      	mov	r4, r0
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	68db      	ldr	r3, [r3, #12]
 80130f4:	685b      	ldr	r3, [r3, #4]
 80130f6:	4618      	mov	r0, r3
 80130f8:	f7f8 faf5 	bl	800b6e6 <lwip_htonl>
 80130fc:	4603      	mov	r3, r0
 80130fe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013100:	2b00      	cmp	r3, #0
 8013102:	dbe6      	blt.n	80130d2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	681a      	ldr	r2, [r3, #0]
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	68ba      	ldr	r2, [r7, #8]
 8013110:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d103      	bne.n	8013122 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2200      	movs	r2, #0
 801311e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013128:	2bff      	cmp	r3, #255	; 0xff
 801312a:	d007      	beq.n	801313c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013132:	3301      	adds	r3, #1
 8013134:	b2da      	uxtb	r2, r3
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2200      	movs	r2, #0
 8013140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013142:	2300      	movs	r3, #0
}
 8013144:	4618      	mov	r0, r3
 8013146:	3714      	adds	r7, #20
 8013148:	46bd      	mov	sp, r7
 801314a:	bd90      	pop	{r4, r7, pc}
 801314c:	0801c838 	.word	0x0801c838
 8013150:	0801ced8 	.word	0x0801ced8
 8013154:	0801c88c 	.word	0x0801c88c

08013158 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b082      	sub	sp, #8
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d106      	bne.n	8013174 <tcp_rexmit_fast+0x1c>
 8013166:	4b2a      	ldr	r3, [pc, #168]	; (8013210 <tcp_rexmit_fast+0xb8>)
 8013168:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801316c:	4929      	ldr	r1, [pc, #164]	; (8013214 <tcp_rexmit_fast+0xbc>)
 801316e:	482a      	ldr	r0, [pc, #168]	; (8013218 <tcp_rexmit_fast+0xc0>)
 8013170:	f005 fee0 	bl	8018f34 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013178:	2b00      	cmp	r3, #0
 801317a:	d044      	beq.n	8013206 <tcp_rexmit_fast+0xae>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	8b5b      	ldrh	r3, [r3, #26]
 8013180:	f003 0304 	and.w	r3, r3, #4
 8013184:	2b00      	cmp	r3, #0
 8013186:	d13e      	bne.n	8013206 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013188:	6878      	ldr	r0, [r7, #4]
 801318a:	f7ff ff79 	bl	8013080 <tcp_rexmit>
 801318e:	4603      	mov	r3, r0
 8013190:	2b00      	cmp	r3, #0
 8013192:	d138      	bne.n	8013206 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80131a0:	4293      	cmp	r3, r2
 80131a2:	bf28      	it	cs
 80131a4:	4613      	movcs	r3, r2
 80131a6:	b29b      	uxth	r3, r3
 80131a8:	0fda      	lsrs	r2, r3, #31
 80131aa:	4413      	add	r3, r2
 80131ac:	105b      	asrs	r3, r3, #1
 80131ae:	b29a      	uxth	r2, r3
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80131bc:	461a      	mov	r2, r3
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131c2:	005b      	lsls	r3, r3, #1
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d206      	bcs.n	80131d6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131cc:	005b      	lsls	r3, r3, #1
 80131ce:	b29a      	uxth	r2, r3
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131e0:	4619      	mov	r1, r3
 80131e2:	0049      	lsls	r1, r1, #1
 80131e4:	440b      	add	r3, r1
 80131e6:	b29b      	uxth	r3, r3
 80131e8:	4413      	add	r3, r2
 80131ea:	b29a      	uxth	r2, r3
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	8b5b      	ldrh	r3, [r3, #26]
 80131f6:	f043 0304 	orr.w	r3, r3, #4
 80131fa:	b29a      	uxth	r2, r3
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2200      	movs	r2, #0
 8013204:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013206:	bf00      	nop
 8013208:	3708      	adds	r7, #8
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	0801c838 	.word	0x0801c838
 8013214:	0801cef0 	.word	0x0801cef0
 8013218:	0801c88c 	.word	0x0801c88c

0801321c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b086      	sub	sp, #24
 8013220:	af00      	add	r7, sp, #0
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	607b      	str	r3, [r7, #4]
 8013226:	460b      	mov	r3, r1
 8013228:	817b      	strh	r3, [r7, #10]
 801322a:	4613      	mov	r3, r2
 801322c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801322e:	897a      	ldrh	r2, [r7, #10]
 8013230:	893b      	ldrh	r3, [r7, #8]
 8013232:	4413      	add	r3, r2
 8013234:	b29b      	uxth	r3, r3
 8013236:	3314      	adds	r3, #20
 8013238:	b29b      	uxth	r3, r3
 801323a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801323e:	4619      	mov	r1, r3
 8013240:	2022      	movs	r0, #34	; 0x22
 8013242:	f7f9 fb8b 	bl	800c95c <pbuf_alloc>
 8013246:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d04d      	beq.n	80132ea <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801324e:	897b      	ldrh	r3, [r7, #10]
 8013250:	3313      	adds	r3, #19
 8013252:	697a      	ldr	r2, [r7, #20]
 8013254:	8952      	ldrh	r2, [r2, #10]
 8013256:	4293      	cmp	r3, r2
 8013258:	db06      	blt.n	8013268 <tcp_output_alloc_header_common+0x4c>
 801325a:	4b26      	ldr	r3, [pc, #152]	; (80132f4 <tcp_output_alloc_header_common+0xd8>)
 801325c:	f240 7223 	movw	r2, #1827	; 0x723
 8013260:	4925      	ldr	r1, [pc, #148]	; (80132f8 <tcp_output_alloc_header_common+0xdc>)
 8013262:	4826      	ldr	r0, [pc, #152]	; (80132fc <tcp_output_alloc_header_common+0xe0>)
 8013264:	f005 fe66 	bl	8018f34 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	685b      	ldr	r3, [r3, #4]
 801326c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801326e:	8c3b      	ldrh	r3, [r7, #32]
 8013270:	4618      	mov	r0, r3
 8013272:	f7f8 fa23 	bl	800b6bc <lwip_htons>
 8013276:	4603      	mov	r3, r0
 8013278:	461a      	mov	r2, r3
 801327a:	693b      	ldr	r3, [r7, #16]
 801327c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801327e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013280:	4618      	mov	r0, r3
 8013282:	f7f8 fa1b 	bl	800b6bc <lwip_htons>
 8013286:	4603      	mov	r3, r0
 8013288:	461a      	mov	r2, r3
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801328e:	693b      	ldr	r3, [r7, #16]
 8013290:	687a      	ldr	r2, [r7, #4]
 8013292:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013294:	68f8      	ldr	r0, [r7, #12]
 8013296:	f7f8 fa26 	bl	800b6e6 <lwip_htonl>
 801329a:	4602      	mov	r2, r0
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80132a0:	897b      	ldrh	r3, [r7, #10]
 80132a2:	089b      	lsrs	r3, r3, #2
 80132a4:	b29b      	uxth	r3, r3
 80132a6:	3305      	adds	r3, #5
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	031b      	lsls	r3, r3, #12
 80132ac:	b29a      	uxth	r2, r3
 80132ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80132b2:	b29b      	uxth	r3, r3
 80132b4:	4313      	orrs	r3, r2
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7f8 f9ff 	bl	800b6bc <lwip_htons>
 80132be:	4603      	mov	r3, r0
 80132c0:	461a      	mov	r2, r3
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80132c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7f8 f9f7 	bl	800b6bc <lwip_htons>
 80132ce:	4603      	mov	r3, r0
 80132d0:	461a      	mov	r2, r3
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	2200      	movs	r2, #0
 80132da:	741a      	strb	r2, [r3, #16]
 80132dc:	2200      	movs	r2, #0
 80132de:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80132e0:	693b      	ldr	r3, [r7, #16]
 80132e2:	2200      	movs	r2, #0
 80132e4:	749a      	strb	r2, [r3, #18]
 80132e6:	2200      	movs	r2, #0
 80132e8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80132ea:	697b      	ldr	r3, [r7, #20]
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3718      	adds	r7, #24
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	0801c838 	.word	0x0801c838
 80132f8:	0801cf10 	.word	0x0801cf10
 80132fc:	0801c88c 	.word	0x0801c88c

08013300 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013300:	b5b0      	push	{r4, r5, r7, lr}
 8013302:	b08a      	sub	sp, #40	; 0x28
 8013304:	af04      	add	r7, sp, #16
 8013306:	60f8      	str	r0, [r7, #12]
 8013308:	607b      	str	r3, [r7, #4]
 801330a:	460b      	mov	r3, r1
 801330c:	817b      	strh	r3, [r7, #10]
 801330e:	4613      	mov	r3, r2
 8013310:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d106      	bne.n	8013326 <tcp_output_alloc_header+0x26>
 8013318:	4b15      	ldr	r3, [pc, #84]	; (8013370 <tcp_output_alloc_header+0x70>)
 801331a:	f240 7242 	movw	r2, #1858	; 0x742
 801331e:	4915      	ldr	r1, [pc, #84]	; (8013374 <tcp_output_alloc_header+0x74>)
 8013320:	4815      	ldr	r0, [pc, #84]	; (8013378 <tcp_output_alloc_header+0x78>)
 8013322:	f005 fe07 	bl	8018f34 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	8adb      	ldrh	r3, [r3, #22]
 801332e:	68fa      	ldr	r2, [r7, #12]
 8013330:	8b12      	ldrh	r2, [r2, #24]
 8013332:	68f9      	ldr	r1, [r7, #12]
 8013334:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013336:	893d      	ldrh	r5, [r7, #8]
 8013338:	897c      	ldrh	r4, [r7, #10]
 801333a:	9103      	str	r1, [sp, #12]
 801333c:	2110      	movs	r1, #16
 801333e:	9102      	str	r1, [sp, #8]
 8013340:	9201      	str	r2, [sp, #4]
 8013342:	9300      	str	r3, [sp, #0]
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	462a      	mov	r2, r5
 8013348:	4621      	mov	r1, r4
 801334a:	f7ff ff67 	bl	801321c <tcp_output_alloc_header_common>
 801334e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d006      	beq.n	8013364 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801335a:	68fa      	ldr	r2, [r7, #12]
 801335c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801335e:	441a      	add	r2, r3
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013364:	697b      	ldr	r3, [r7, #20]
}
 8013366:	4618      	mov	r0, r3
 8013368:	3718      	adds	r7, #24
 801336a:	46bd      	mov	sp, r7
 801336c:	bdb0      	pop	{r4, r5, r7, pc}
 801336e:	bf00      	nop
 8013370:	0801c838 	.word	0x0801c838
 8013374:	0801cf40 	.word	0x0801cf40
 8013378:	0801c88c 	.word	0x0801c88c

0801337c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b088      	sub	sp, #32
 8013380:	af00      	add	r7, sp, #0
 8013382:	60f8      	str	r0, [r7, #12]
 8013384:	60b9      	str	r1, [r7, #8]
 8013386:	4611      	mov	r1, r2
 8013388:	461a      	mov	r2, r3
 801338a:	460b      	mov	r3, r1
 801338c:	71fb      	strb	r3, [r7, #7]
 801338e:	4613      	mov	r3, r2
 8013390:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013392:	2300      	movs	r3, #0
 8013394:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d106      	bne.n	80133aa <tcp_output_fill_options+0x2e>
 801339c:	4b13      	ldr	r3, [pc, #76]	; (80133ec <tcp_output_fill_options+0x70>)
 801339e:	f240 7256 	movw	r2, #1878	; 0x756
 80133a2:	4913      	ldr	r1, [pc, #76]	; (80133f0 <tcp_output_fill_options+0x74>)
 80133a4:	4813      	ldr	r0, [pc, #76]	; (80133f4 <tcp_output_fill_options+0x78>)
 80133a6:	f005 fdc5 	bl	8018f34 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	685b      	ldr	r3, [r3, #4]
 80133ae:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80133b0:	69bb      	ldr	r3, [r7, #24]
 80133b2:	3314      	adds	r3, #20
 80133b4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80133b6:	69bb      	ldr	r3, [r7, #24]
 80133b8:	f103 0214 	add.w	r2, r3, #20
 80133bc:	8bfb      	ldrh	r3, [r7, #30]
 80133be:	009b      	lsls	r3, r3, #2
 80133c0:	4619      	mov	r1, r3
 80133c2:	79fb      	ldrb	r3, [r7, #7]
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	f003 0304 	and.w	r3, r3, #4
 80133ca:	440b      	add	r3, r1
 80133cc:	4413      	add	r3, r2
 80133ce:	697a      	ldr	r2, [r7, #20]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d006      	beq.n	80133e2 <tcp_output_fill_options+0x66>
 80133d4:	4b05      	ldr	r3, [pc, #20]	; (80133ec <tcp_output_fill_options+0x70>)
 80133d6:	f240 7275 	movw	r2, #1909	; 0x775
 80133da:	4907      	ldr	r1, [pc, #28]	; (80133f8 <tcp_output_fill_options+0x7c>)
 80133dc:	4805      	ldr	r0, [pc, #20]	; (80133f4 <tcp_output_fill_options+0x78>)
 80133de:	f005 fda9 	bl	8018f34 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80133e2:	bf00      	nop
 80133e4:	3720      	adds	r7, #32
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd80      	pop	{r7, pc}
 80133ea:	bf00      	nop
 80133ec:	0801c838 	.word	0x0801c838
 80133f0:	0801cf68 	.word	0x0801cf68
 80133f4:	0801c88c 	.word	0x0801c88c
 80133f8:	0801ce60 	.word	0x0801ce60

080133fc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b08a      	sub	sp, #40	; 0x28
 8013400:	af04      	add	r7, sp, #16
 8013402:	60f8      	str	r0, [r7, #12]
 8013404:	60b9      	str	r1, [r7, #8]
 8013406:	607a      	str	r2, [r7, #4]
 8013408:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d106      	bne.n	801341e <tcp_output_control_segment+0x22>
 8013410:	4b1c      	ldr	r3, [pc, #112]	; (8013484 <tcp_output_control_segment+0x88>)
 8013412:	f240 7287 	movw	r2, #1927	; 0x787
 8013416:	491c      	ldr	r1, [pc, #112]	; (8013488 <tcp_output_control_segment+0x8c>)
 8013418:	481c      	ldr	r0, [pc, #112]	; (801348c <tcp_output_control_segment+0x90>)
 801341a:	f005 fd8b 	bl	8018f34 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801341e:	683a      	ldr	r2, [r7, #0]
 8013420:	6879      	ldr	r1, [r7, #4]
 8013422:	68f8      	ldr	r0, [r7, #12]
 8013424:	f7fe fae8 	bl	80119f8 <tcp_route>
 8013428:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801342a:	693b      	ldr	r3, [r7, #16]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d102      	bne.n	8013436 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013430:	23fc      	movs	r3, #252	; 0xfc
 8013432:	75fb      	strb	r3, [r7, #23]
 8013434:	e01c      	b.n	8013470 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d006      	beq.n	801344a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	7adb      	ldrb	r3, [r3, #11]
 8013440:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	7a9b      	ldrb	r3, [r3, #10]
 8013446:	757b      	strb	r3, [r7, #21]
 8013448:	e003      	b.n	8013452 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801344a:	23ff      	movs	r3, #255	; 0xff
 801344c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801344e:	2300      	movs	r3, #0
 8013450:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013452:	7dba      	ldrb	r2, [r7, #22]
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	9302      	str	r3, [sp, #8]
 8013458:	2306      	movs	r3, #6
 801345a:	9301      	str	r3, [sp, #4]
 801345c:	7d7b      	ldrb	r3, [r7, #21]
 801345e:	9300      	str	r3, [sp, #0]
 8013460:	4613      	mov	r3, r2
 8013462:	683a      	ldr	r2, [r7, #0]
 8013464:	6879      	ldr	r1, [r7, #4]
 8013466:	68b8      	ldr	r0, [r7, #8]
 8013468:	f004 f962 	bl	8017730 <ip4_output_if>
 801346c:	4603      	mov	r3, r0
 801346e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013470:	68b8      	ldr	r0, [r7, #8]
 8013472:	f7f9 fd57 	bl	800cf24 <pbuf_free>
  return err;
 8013476:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801347a:	4618      	mov	r0, r3
 801347c:	3718      	adds	r7, #24
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop
 8013484:	0801c838 	.word	0x0801c838
 8013488:	0801cf90 	.word	0x0801cf90
 801348c:	0801c88c 	.word	0x0801c88c

08013490 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013490:	b590      	push	{r4, r7, lr}
 8013492:	b08b      	sub	sp, #44	; 0x2c
 8013494:	af04      	add	r7, sp, #16
 8013496:	60f8      	str	r0, [r7, #12]
 8013498:	60b9      	str	r1, [r7, #8]
 801349a:	607a      	str	r2, [r7, #4]
 801349c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d106      	bne.n	80134b2 <tcp_rst+0x22>
 80134a4:	4b1f      	ldr	r3, [pc, #124]	; (8013524 <tcp_rst+0x94>)
 80134a6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80134aa:	491f      	ldr	r1, [pc, #124]	; (8013528 <tcp_rst+0x98>)
 80134ac:	481f      	ldr	r0, [pc, #124]	; (801352c <tcp_rst+0x9c>)
 80134ae:	f005 fd41 	bl	8018f34 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80134b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d106      	bne.n	80134c6 <tcp_rst+0x36>
 80134b8:	4b1a      	ldr	r3, [pc, #104]	; (8013524 <tcp_rst+0x94>)
 80134ba:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80134be:	491c      	ldr	r1, [pc, #112]	; (8013530 <tcp_rst+0xa0>)
 80134c0:	481a      	ldr	r0, [pc, #104]	; (801352c <tcp_rst+0x9c>)
 80134c2:	f005 fd37 	bl	8018f34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80134c6:	2300      	movs	r3, #0
 80134c8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80134ca:	f246 0308 	movw	r3, #24584	; 0x6008
 80134ce:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80134d0:	7dfb      	ldrb	r3, [r7, #23]
 80134d2:	b29c      	uxth	r4, r3
 80134d4:	68b8      	ldr	r0, [r7, #8]
 80134d6:	f7f8 f906 	bl	800b6e6 <lwip_htonl>
 80134da:	4602      	mov	r2, r0
 80134dc:	8abb      	ldrh	r3, [r7, #20]
 80134de:	9303      	str	r3, [sp, #12]
 80134e0:	2314      	movs	r3, #20
 80134e2:	9302      	str	r3, [sp, #8]
 80134e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80134e6:	9301      	str	r3, [sp, #4]
 80134e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80134ea:	9300      	str	r3, [sp, #0]
 80134ec:	4613      	mov	r3, r2
 80134ee:	2200      	movs	r2, #0
 80134f0:	4621      	mov	r1, r4
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f7ff fe92 	bl	801321c <tcp_output_alloc_header_common>
 80134f8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d00c      	beq.n	801351a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013500:	7dfb      	ldrb	r3, [r7, #23]
 8013502:	2200      	movs	r2, #0
 8013504:	6939      	ldr	r1, [r7, #16]
 8013506:	68f8      	ldr	r0, [r7, #12]
 8013508:	f7ff ff38 	bl	801337c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801350e:	683a      	ldr	r2, [r7, #0]
 8013510:	6939      	ldr	r1, [r7, #16]
 8013512:	68f8      	ldr	r0, [r7, #12]
 8013514:	f7ff ff72 	bl	80133fc <tcp_output_control_segment>
 8013518:	e000      	b.n	801351c <tcp_rst+0x8c>
    return;
 801351a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801351c:	371c      	adds	r7, #28
 801351e:	46bd      	mov	sp, r7
 8013520:	bd90      	pop	{r4, r7, pc}
 8013522:	bf00      	nop
 8013524:	0801c838 	.word	0x0801c838
 8013528:	0801cfbc 	.word	0x0801cfbc
 801352c:	0801c88c 	.word	0x0801c88c
 8013530:	0801cfd8 	.word	0x0801cfd8

08013534 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013534:	b590      	push	{r4, r7, lr}
 8013536:	b087      	sub	sp, #28
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801353c:	2300      	movs	r3, #0
 801353e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013540:	2300      	movs	r3, #0
 8013542:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d106      	bne.n	8013558 <tcp_send_empty_ack+0x24>
 801354a:	4b28      	ldr	r3, [pc, #160]	; (80135ec <tcp_send_empty_ack+0xb8>)
 801354c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013550:	4927      	ldr	r1, [pc, #156]	; (80135f0 <tcp_send_empty_ack+0xbc>)
 8013552:	4828      	ldr	r0, [pc, #160]	; (80135f4 <tcp_send_empty_ack+0xc0>)
 8013554:	f005 fcee 	bl	8018f34 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013558:	7dfb      	ldrb	r3, [r7, #23]
 801355a:	009b      	lsls	r3, r3, #2
 801355c:	b2db      	uxtb	r3, r3
 801355e:	f003 0304 	and.w	r3, r3, #4
 8013562:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013564:	7d7b      	ldrb	r3, [r7, #21]
 8013566:	b29c      	uxth	r4, r3
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801356c:	4618      	mov	r0, r3
 801356e:	f7f8 f8ba 	bl	800b6e6 <lwip_htonl>
 8013572:	4603      	mov	r3, r0
 8013574:	2200      	movs	r2, #0
 8013576:	4621      	mov	r1, r4
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f7ff fec1 	bl	8013300 <tcp_output_alloc_header>
 801357e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d109      	bne.n	801359a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	8b5b      	ldrh	r3, [r3, #26]
 801358a:	f043 0303 	orr.w	r3, r3, #3
 801358e:	b29a      	uxth	r2, r3
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013594:	f06f 0301 	mvn.w	r3, #1
 8013598:	e023      	b.n	80135e2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801359a:	7dbb      	ldrb	r3, [r7, #22]
 801359c:	7dfa      	ldrb	r2, [r7, #23]
 801359e:	6939      	ldr	r1, [r7, #16]
 80135a0:	6878      	ldr	r0, [r7, #4]
 80135a2:	f7ff feeb 	bl	801337c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80135a6:	687a      	ldr	r2, [r7, #4]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	3304      	adds	r3, #4
 80135ac:	6939      	ldr	r1, [r7, #16]
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f7ff ff24 	bl	80133fc <tcp_output_control_segment>
 80135b4:	4603      	mov	r3, r0
 80135b6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80135b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d007      	beq.n	80135d0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	8b5b      	ldrh	r3, [r3, #26]
 80135c4:	f043 0303 	orr.w	r3, r3, #3
 80135c8:	b29a      	uxth	r2, r3
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	835a      	strh	r2, [r3, #26]
 80135ce:	e006      	b.n	80135de <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	8b5b      	ldrh	r3, [r3, #26]
 80135d4:	f023 0303 	bic.w	r3, r3, #3
 80135d8:	b29a      	uxth	r2, r3
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80135de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	371c      	adds	r7, #28
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd90      	pop	{r4, r7, pc}
 80135ea:	bf00      	nop
 80135ec:	0801c838 	.word	0x0801c838
 80135f0:	0801cff4 	.word	0x0801cff4
 80135f4:	0801c88c 	.word	0x0801c88c

080135f8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80135f8:	b590      	push	{r4, r7, lr}
 80135fa:	b087      	sub	sp, #28
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013600:	2300      	movs	r3, #0
 8013602:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d106      	bne.n	8013618 <tcp_keepalive+0x20>
 801360a:	4b18      	ldr	r3, [pc, #96]	; (801366c <tcp_keepalive+0x74>)
 801360c:	f640 0224 	movw	r2, #2084	; 0x824
 8013610:	4917      	ldr	r1, [pc, #92]	; (8013670 <tcp_keepalive+0x78>)
 8013612:	4818      	ldr	r0, [pc, #96]	; (8013674 <tcp_keepalive+0x7c>)
 8013614:	f005 fc8e 	bl	8018f34 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013618:	7dfb      	ldrb	r3, [r7, #23]
 801361a:	b29c      	uxth	r4, r3
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013620:	3b01      	subs	r3, #1
 8013622:	4618      	mov	r0, r3
 8013624:	f7f8 f85f 	bl	800b6e6 <lwip_htonl>
 8013628:	4603      	mov	r3, r0
 801362a:	2200      	movs	r2, #0
 801362c:	4621      	mov	r1, r4
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	f7ff fe66 	bl	8013300 <tcp_output_alloc_header>
 8013634:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d102      	bne.n	8013642 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801363c:	f04f 33ff 	mov.w	r3, #4294967295
 8013640:	e010      	b.n	8013664 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013642:	7dfb      	ldrb	r3, [r7, #23]
 8013644:	2200      	movs	r2, #0
 8013646:	6939      	ldr	r1, [r7, #16]
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f7ff fe97 	bl	801337c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801364e:	687a      	ldr	r2, [r7, #4]
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	3304      	adds	r3, #4
 8013654:	6939      	ldr	r1, [r7, #16]
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f7ff fed0 	bl	80133fc <tcp_output_control_segment>
 801365c:	4603      	mov	r3, r0
 801365e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013664:	4618      	mov	r0, r3
 8013666:	371c      	adds	r7, #28
 8013668:	46bd      	mov	sp, r7
 801366a:	bd90      	pop	{r4, r7, pc}
 801366c:	0801c838 	.word	0x0801c838
 8013670:	0801d014 	.word	0x0801d014
 8013674:	0801c88c 	.word	0x0801c88c

08013678 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013678:	b590      	push	{r4, r7, lr}
 801367a:	b08b      	sub	sp, #44	; 0x2c
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013680:	2300      	movs	r3, #0
 8013682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d106      	bne.n	801369a <tcp_zero_window_probe+0x22>
 801368c:	4b4c      	ldr	r3, [pc, #304]	; (80137c0 <tcp_zero_window_probe+0x148>)
 801368e:	f640 024f 	movw	r2, #2127	; 0x84f
 8013692:	494c      	ldr	r1, [pc, #304]	; (80137c4 <tcp_zero_window_probe+0x14c>)
 8013694:	484c      	ldr	r0, [pc, #304]	; (80137c8 <tcp_zero_window_probe+0x150>)
 8013696:	f005 fc4d 	bl	8018f34 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801369e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80136a0:	6a3b      	ldr	r3, [r7, #32]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d101      	bne.n	80136aa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80136a6:	2300      	movs	r3, #0
 80136a8:	e086      	b.n	80137b8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80136b0:	2bff      	cmp	r3, #255	; 0xff
 80136b2:	d007      	beq.n	80136c4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80136ba:	3301      	adds	r3, #1
 80136bc:	b2da      	uxtb	r2, r3
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80136c4:	6a3b      	ldr	r3, [r7, #32]
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	899b      	ldrh	r3, [r3, #12]
 80136ca:	b29b      	uxth	r3, r3
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7f7 fff5 	bl	800b6bc <lwip_htons>
 80136d2:	4603      	mov	r3, r0
 80136d4:	b2db      	uxtb	r3, r3
 80136d6:	f003 0301 	and.w	r3, r3, #1
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d005      	beq.n	80136ea <tcp_zero_window_probe+0x72>
 80136de:	6a3b      	ldr	r3, [r7, #32]
 80136e0:	891b      	ldrh	r3, [r3, #8]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d101      	bne.n	80136ea <tcp_zero_window_probe+0x72>
 80136e6:	2301      	movs	r3, #1
 80136e8:	e000      	b.n	80136ec <tcp_zero_window_probe+0x74>
 80136ea:	2300      	movs	r3, #0
 80136ec:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80136ee:	7ffb      	ldrb	r3, [r7, #31]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	bf0c      	ite	eq
 80136f4:	2301      	moveq	r3, #1
 80136f6:	2300      	movne	r3, #0
 80136f8:	b2db      	uxtb	r3, r3
 80136fa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80136fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013700:	b299      	uxth	r1, r3
 8013702:	6a3b      	ldr	r3, [r7, #32]
 8013704:	68db      	ldr	r3, [r3, #12]
 8013706:	685b      	ldr	r3, [r3, #4]
 8013708:	8bba      	ldrh	r2, [r7, #28]
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f7ff fdf8 	bl	8013300 <tcp_output_alloc_header>
 8013710:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013712:	69bb      	ldr	r3, [r7, #24]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d102      	bne.n	801371e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013718:	f04f 33ff 	mov.w	r3, #4294967295
 801371c:	e04c      	b.n	80137b8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	685b      	ldr	r3, [r3, #4]
 8013722:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013724:	7ffb      	ldrb	r3, [r7, #31]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d011      	beq.n	801374e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	899b      	ldrh	r3, [r3, #12]
 801372e:	b29b      	uxth	r3, r3
 8013730:	b21b      	sxth	r3, r3
 8013732:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013736:	b21c      	sxth	r4, r3
 8013738:	2011      	movs	r0, #17
 801373a:	f7f7 ffbf 	bl	800b6bc <lwip_htons>
 801373e:	4603      	mov	r3, r0
 8013740:	b21b      	sxth	r3, r3
 8013742:	4323      	orrs	r3, r4
 8013744:	b21b      	sxth	r3, r3
 8013746:	b29a      	uxth	r2, r3
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	819a      	strh	r2, [r3, #12]
 801374c:	e010      	b.n	8013770 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801374e:	69bb      	ldr	r3, [r7, #24]
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	3314      	adds	r3, #20
 8013754:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013756:	6a3b      	ldr	r3, [r7, #32]
 8013758:	6858      	ldr	r0, [r3, #4]
 801375a:	6a3b      	ldr	r3, [r7, #32]
 801375c:	685b      	ldr	r3, [r3, #4]
 801375e:	891a      	ldrh	r2, [r3, #8]
 8013760:	6a3b      	ldr	r3, [r7, #32]
 8013762:	891b      	ldrh	r3, [r3, #8]
 8013764:	1ad3      	subs	r3, r2, r3
 8013766:	b29b      	uxth	r3, r3
 8013768:	2201      	movs	r2, #1
 801376a:	6939      	ldr	r1, [r7, #16]
 801376c:	f7f9 fde0 	bl	800d330 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013770:	6a3b      	ldr	r3, [r7, #32]
 8013772:	68db      	ldr	r3, [r3, #12]
 8013774:	685b      	ldr	r3, [r3, #4]
 8013776:	4618      	mov	r0, r3
 8013778:	f7f7 ffb5 	bl	800b6e6 <lwip_htonl>
 801377c:	4603      	mov	r3, r0
 801377e:	3301      	adds	r3, #1
 8013780:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	1ad3      	subs	r3, r2, r3
 801378a:	2b00      	cmp	r3, #0
 801378c:	da02      	bge.n	8013794 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	68fa      	ldr	r2, [r7, #12]
 8013792:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013798:	2200      	movs	r2, #0
 801379a:	69b9      	ldr	r1, [r7, #24]
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f7ff fded 	bl	801337c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80137a2:	687a      	ldr	r2, [r7, #4]
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	3304      	adds	r3, #4
 80137a8:	69b9      	ldr	r1, [r7, #24]
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f7ff fe26 	bl	80133fc <tcp_output_control_segment>
 80137b0:	4603      	mov	r3, r0
 80137b2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80137b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	372c      	adds	r7, #44	; 0x2c
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd90      	pop	{r4, r7, pc}
 80137c0:	0801c838 	.word	0x0801c838
 80137c4:	0801d030 	.word	0x0801d030
 80137c8:	0801c88c 	.word	0x0801c88c

080137cc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80137d4:	f7f9 fe9a 	bl	800d50c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80137d8:	4b0a      	ldr	r3, [pc, #40]	; (8013804 <tcpip_tcp_timer+0x38>)
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d103      	bne.n	80137e8 <tcpip_tcp_timer+0x1c>
 80137e0:	4b09      	ldr	r3, [pc, #36]	; (8013808 <tcpip_tcp_timer+0x3c>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d005      	beq.n	80137f4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80137e8:	2200      	movs	r2, #0
 80137ea:	4908      	ldr	r1, [pc, #32]	; (801380c <tcpip_tcp_timer+0x40>)
 80137ec:	20fa      	movs	r0, #250	; 0xfa
 80137ee:	f000 f8f3 	bl	80139d8 <sys_timeout>
 80137f2:	e003      	b.n	80137fc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80137f4:	4b06      	ldr	r3, [pc, #24]	; (8013810 <tcpip_tcp_timer+0x44>)
 80137f6:	2200      	movs	r2, #0
 80137f8:	601a      	str	r2, [r3, #0]
  }
}
 80137fa:	bf00      	nop
 80137fc:	bf00      	nop
 80137fe:	3708      	adds	r7, #8
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}
 8013804:	20011598 	.word	0x20011598
 8013808:	2001159c 	.word	0x2001159c
 801380c:	080137cd 	.word	0x080137cd
 8013810:	200115e4 	.word	0x200115e4

08013814 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013818:	4b0a      	ldr	r3, [pc, #40]	; (8013844 <tcp_timer_needed+0x30>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d10f      	bne.n	8013840 <tcp_timer_needed+0x2c>
 8013820:	4b09      	ldr	r3, [pc, #36]	; (8013848 <tcp_timer_needed+0x34>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d103      	bne.n	8013830 <tcp_timer_needed+0x1c>
 8013828:	4b08      	ldr	r3, [pc, #32]	; (801384c <tcp_timer_needed+0x38>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d007      	beq.n	8013840 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013830:	4b04      	ldr	r3, [pc, #16]	; (8013844 <tcp_timer_needed+0x30>)
 8013832:	2201      	movs	r2, #1
 8013834:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013836:	2200      	movs	r2, #0
 8013838:	4905      	ldr	r1, [pc, #20]	; (8013850 <tcp_timer_needed+0x3c>)
 801383a:	20fa      	movs	r0, #250	; 0xfa
 801383c:	f000 f8cc 	bl	80139d8 <sys_timeout>
  }
}
 8013840:	bf00      	nop
 8013842:	bd80      	pop	{r7, pc}
 8013844:	200115e4 	.word	0x200115e4
 8013848:	20011598 	.word	0x20011598
 801384c:	2001159c 	.word	0x2001159c
 8013850:	080137cd 	.word	0x080137cd

08013854 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b086      	sub	sp, #24
 8013858:	af00      	add	r7, sp, #0
 801385a:	60f8      	str	r0, [r7, #12]
 801385c:	60b9      	str	r1, [r7, #8]
 801385e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013860:	200a      	movs	r0, #10
 8013862:	f7f8 fc39 	bl	800c0d8 <memp_malloc>
 8013866:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d109      	bne.n	8013882 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d151      	bne.n	8013918 <sys_timeout_abs+0xc4>
 8013874:	4b2a      	ldr	r3, [pc, #168]	; (8013920 <sys_timeout_abs+0xcc>)
 8013876:	22be      	movs	r2, #190	; 0xbe
 8013878:	492a      	ldr	r1, [pc, #168]	; (8013924 <sys_timeout_abs+0xd0>)
 801387a:	482b      	ldr	r0, [pc, #172]	; (8013928 <sys_timeout_abs+0xd4>)
 801387c:	f005 fb5a 	bl	8018f34 <iprintf>
    return;
 8013880:	e04a      	b.n	8013918 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	2200      	movs	r2, #0
 8013886:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013888:	693b      	ldr	r3, [r7, #16]
 801388a:	68ba      	ldr	r2, [r7, #8]
 801388c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801388e:	693b      	ldr	r3, [r7, #16]
 8013890:	687a      	ldr	r2, [r7, #4]
 8013892:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	68fa      	ldr	r2, [r7, #12]
 8013898:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801389a:	4b24      	ldr	r3, [pc, #144]	; (801392c <sys_timeout_abs+0xd8>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d103      	bne.n	80138aa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80138a2:	4a22      	ldr	r2, [pc, #136]	; (801392c <sys_timeout_abs+0xd8>)
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	6013      	str	r3, [r2, #0]
    return;
 80138a8:	e037      	b.n	801391a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80138aa:	693b      	ldr	r3, [r7, #16]
 80138ac:	685a      	ldr	r2, [r3, #4]
 80138ae:	4b1f      	ldr	r3, [pc, #124]	; (801392c <sys_timeout_abs+0xd8>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	685b      	ldr	r3, [r3, #4]
 80138b4:	1ad3      	subs	r3, r2, r3
 80138b6:	0fdb      	lsrs	r3, r3, #31
 80138b8:	f003 0301 	and.w	r3, r3, #1
 80138bc:	b2db      	uxtb	r3, r3
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d007      	beq.n	80138d2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80138c2:	4b1a      	ldr	r3, [pc, #104]	; (801392c <sys_timeout_abs+0xd8>)
 80138c4:	681a      	ldr	r2, [r3, #0]
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80138ca:	4a18      	ldr	r2, [pc, #96]	; (801392c <sys_timeout_abs+0xd8>)
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	6013      	str	r3, [r2, #0]
 80138d0:	e023      	b.n	801391a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80138d2:	4b16      	ldr	r3, [pc, #88]	; (801392c <sys_timeout_abs+0xd8>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	617b      	str	r3, [r7, #20]
 80138d8:	e01a      	b.n	8013910 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80138da:	697b      	ldr	r3, [r7, #20]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d00b      	beq.n	80138fa <sys_timeout_abs+0xa6>
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	685a      	ldr	r2, [r3, #4]
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	685b      	ldr	r3, [r3, #4]
 80138ec:	1ad3      	subs	r3, r2, r3
 80138ee:	0fdb      	lsrs	r3, r3, #31
 80138f0:	f003 0301 	and.w	r3, r3, #1
 80138f4:	b2db      	uxtb	r3, r3
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d007      	beq.n	801390a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	681a      	ldr	r2, [r3, #0]
 80138fe:	693b      	ldr	r3, [r7, #16]
 8013900:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	693a      	ldr	r2, [r7, #16]
 8013906:	601a      	str	r2, [r3, #0]
        break;
 8013908:	e007      	b.n	801391a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	617b      	str	r3, [r7, #20]
 8013910:	697b      	ldr	r3, [r7, #20]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d1e1      	bne.n	80138da <sys_timeout_abs+0x86>
 8013916:	e000      	b.n	801391a <sys_timeout_abs+0xc6>
    return;
 8013918:	bf00      	nop
      }
    }
  }
}
 801391a:	3718      	adds	r7, #24
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}
 8013920:	0801d054 	.word	0x0801d054
 8013924:	0801d088 	.word	0x0801d088
 8013928:	0801d0c8 	.word	0x0801d0c8
 801392c:	200115dc 	.word	0x200115dc

08013930 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b086      	sub	sp, #24
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	685b      	ldr	r3, [r3, #4]
 8013940:	4798      	blx	r3

  now = sys_now();
 8013942:	f7f1 f9e7 	bl	8004d14 <sys_now>
 8013946:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	681a      	ldr	r2, [r3, #0]
 801394c:	4b0f      	ldr	r3, [pc, #60]	; (801398c <lwip_cyclic_timer+0x5c>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	4413      	add	r3, r2
 8013952:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013954:	68fa      	ldr	r2, [r7, #12]
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	1ad3      	subs	r3, r2, r3
 801395a:	0fdb      	lsrs	r3, r3, #31
 801395c:	f003 0301 	and.w	r3, r3, #1
 8013960:	b2db      	uxtb	r3, r3
 8013962:	2b00      	cmp	r3, #0
 8013964:	d009      	beq.n	801397a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	681a      	ldr	r2, [r3, #0]
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	4413      	add	r3, r2
 801396e:	687a      	ldr	r2, [r7, #4]
 8013970:	4907      	ldr	r1, [pc, #28]	; (8013990 <lwip_cyclic_timer+0x60>)
 8013972:	4618      	mov	r0, r3
 8013974:	f7ff ff6e 	bl	8013854 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013978:	e004      	b.n	8013984 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801397a:	687a      	ldr	r2, [r7, #4]
 801397c:	4904      	ldr	r1, [pc, #16]	; (8013990 <lwip_cyclic_timer+0x60>)
 801397e:	68f8      	ldr	r0, [r7, #12]
 8013980:	f7ff ff68 	bl	8013854 <sys_timeout_abs>
}
 8013984:	bf00      	nop
 8013986:	3718      	adds	r7, #24
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}
 801398c:	200115e0 	.word	0x200115e0
 8013990:	08013931 	.word	0x08013931

08013994 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b082      	sub	sp, #8
 8013998:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801399a:	2301      	movs	r3, #1
 801399c:	607b      	str	r3, [r7, #4]
 801399e:	e00e      	b.n	80139be <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80139a0:	4a0b      	ldr	r2, [pc, #44]	; (80139d0 <sys_timeouts_init+0x3c>)
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	00db      	lsls	r3, r3, #3
 80139ac:	4a08      	ldr	r2, [pc, #32]	; (80139d0 <sys_timeouts_init+0x3c>)
 80139ae:	4413      	add	r3, r2
 80139b0:	461a      	mov	r2, r3
 80139b2:	4908      	ldr	r1, [pc, #32]	; (80139d4 <sys_timeouts_init+0x40>)
 80139b4:	f000 f810 	bl	80139d8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	3301      	adds	r3, #1
 80139bc:	607b      	str	r3, [r7, #4]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2b04      	cmp	r3, #4
 80139c2:	d9ed      	bls.n	80139a0 <sys_timeouts_init+0xc>
  }
}
 80139c4:	bf00      	nop
 80139c6:	bf00      	nop
 80139c8:	3708      	adds	r7, #8
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}
 80139ce:	bf00      	nop
 80139d0:	0802815c 	.word	0x0802815c
 80139d4:	08013931 	.word	0x08013931

080139d8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b086      	sub	sp, #24
 80139dc:	af00      	add	r7, sp, #0
 80139de:	60f8      	str	r0, [r7, #12]
 80139e0:	60b9      	str	r1, [r7, #8]
 80139e2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80139ea:	d306      	bcc.n	80139fa <sys_timeout+0x22>
 80139ec:	4b0a      	ldr	r3, [pc, #40]	; (8013a18 <sys_timeout+0x40>)
 80139ee:	f240 1229 	movw	r2, #297	; 0x129
 80139f2:	490a      	ldr	r1, [pc, #40]	; (8013a1c <sys_timeout+0x44>)
 80139f4:	480a      	ldr	r0, [pc, #40]	; (8013a20 <sys_timeout+0x48>)
 80139f6:	f005 fa9d 	bl	8018f34 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80139fa:	f7f1 f98b 	bl	8004d14 <sys_now>
 80139fe:	4602      	mov	r2, r0
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	4413      	add	r3, r2
 8013a04:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013a06:	687a      	ldr	r2, [r7, #4]
 8013a08:	68b9      	ldr	r1, [r7, #8]
 8013a0a:	6978      	ldr	r0, [r7, #20]
 8013a0c:	f7ff ff22 	bl	8013854 <sys_timeout_abs>
#endif
}
 8013a10:	bf00      	nop
 8013a12:	3718      	adds	r7, #24
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	0801d054 	.word	0x0801d054
 8013a1c:	0801d0f0 	.word	0x0801d0f0
 8013a20:	0801d0c8 	.word	0x0801d0c8

08013a24 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b084      	sub	sp, #16
 8013a28:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013a2a:	f7f1 f973 	bl	8004d14 <sys_now>
 8013a2e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013a30:	4b17      	ldr	r3, [pc, #92]	; (8013a90 <sys_check_timeouts+0x6c>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013a36:	68bb      	ldr	r3, [r7, #8]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d022      	beq.n	8013a82 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	685b      	ldr	r3, [r3, #4]
 8013a40:	68fa      	ldr	r2, [r7, #12]
 8013a42:	1ad3      	subs	r3, r2, r3
 8013a44:	0fdb      	lsrs	r3, r3, #31
 8013a46:	f003 0301 	and.w	r3, r3, #1
 8013a4a:	b2db      	uxtb	r3, r3
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d11a      	bne.n	8013a86 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	4a0e      	ldr	r2, [pc, #56]	; (8013a90 <sys_check_timeouts+0x6c>)
 8013a56:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	689b      	ldr	r3, [r3, #8]
 8013a5c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	68db      	ldr	r3, [r3, #12]
 8013a62:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	685b      	ldr	r3, [r3, #4]
 8013a68:	4a0a      	ldr	r2, [pc, #40]	; (8013a94 <sys_check_timeouts+0x70>)
 8013a6a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013a6c:	68b9      	ldr	r1, [r7, #8]
 8013a6e:	200a      	movs	r0, #10
 8013a70:	f7f8 fba8 	bl	800c1c4 <memp_free>
    if (handler != NULL) {
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d0da      	beq.n	8013a30 <sys_check_timeouts+0xc>
      handler(arg);
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	6838      	ldr	r0, [r7, #0]
 8013a7e:	4798      	blx	r3
  do {
 8013a80:	e7d6      	b.n	8013a30 <sys_check_timeouts+0xc>
      return;
 8013a82:	bf00      	nop
 8013a84:	e000      	b.n	8013a88 <sys_check_timeouts+0x64>
      return;
 8013a86:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013a88:	3710      	adds	r7, #16
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}
 8013a8e:	bf00      	nop
 8013a90:	200115dc 	.word	0x200115dc
 8013a94:	200115e0 	.word	0x200115e0

08013a98 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013a9e:	4b16      	ldr	r3, [pc, #88]	; (8013af8 <sys_timeouts_sleeptime+0x60>)
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d102      	bne.n	8013aac <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8013aaa:	e020      	b.n	8013aee <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013aac:	f7f1 f932 	bl	8004d14 <sys_now>
 8013ab0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013ab2:	4b11      	ldr	r3, [pc, #68]	; (8013af8 <sys_timeouts_sleeptime+0x60>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	685a      	ldr	r2, [r3, #4]
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	1ad3      	subs	r3, r2, r3
 8013abc:	0fdb      	lsrs	r3, r3, #31
 8013abe:	f003 0301 	and.w	r3, r3, #1
 8013ac2:	b2db      	uxtb	r3, r3
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d001      	beq.n	8013acc <sys_timeouts_sleeptime+0x34>
    return 0;
 8013ac8:	2300      	movs	r3, #0
 8013aca:	e010      	b.n	8013aee <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013acc:	4b0a      	ldr	r3, [pc, #40]	; (8013af8 <sys_timeouts_sleeptime+0x60>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	685a      	ldr	r2, [r3, #4]
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	1ad3      	subs	r3, r2, r3
 8013ad6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	da06      	bge.n	8013aec <sys_timeouts_sleeptime+0x54>
 8013ade:	4b07      	ldr	r3, [pc, #28]	; (8013afc <sys_timeouts_sleeptime+0x64>)
 8013ae0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013ae4:	4906      	ldr	r1, [pc, #24]	; (8013b00 <sys_timeouts_sleeptime+0x68>)
 8013ae6:	4807      	ldr	r0, [pc, #28]	; (8013b04 <sys_timeouts_sleeptime+0x6c>)
 8013ae8:	f005 fa24 	bl	8018f34 <iprintf>
    return ret;
 8013aec:	683b      	ldr	r3, [r7, #0]
  }
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	3708      	adds	r7, #8
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}
 8013af6:	bf00      	nop
 8013af8:	200115dc 	.word	0x200115dc
 8013afc:	0801d054 	.word	0x0801d054
 8013b00:	0801d128 	.word	0x0801d128
 8013b04:	0801d0c8 	.word	0x0801d0c8

08013b08 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013b0c:	f005 fa58 	bl	8018fc0 <rand>
 8013b10:	4603      	mov	r3, r0
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013b18:	b29b      	uxth	r3, r3
 8013b1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013b1e:	b29a      	uxth	r2, r3
 8013b20:	4b01      	ldr	r3, [pc, #4]	; (8013b28 <udp_init+0x20>)
 8013b22:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013b24:	bf00      	nop
 8013b26:	bd80      	pop	{r7, pc}
 8013b28:	2000002c 	.word	0x2000002c

08013b2c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	b083      	sub	sp, #12
 8013b30:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013b32:	2300      	movs	r3, #0
 8013b34:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013b36:	4b17      	ldr	r3, [pc, #92]	; (8013b94 <udp_new_port+0x68>)
 8013b38:	881b      	ldrh	r3, [r3, #0]
 8013b3a:	1c5a      	adds	r2, r3, #1
 8013b3c:	b291      	uxth	r1, r2
 8013b3e:	4a15      	ldr	r2, [pc, #84]	; (8013b94 <udp_new_port+0x68>)
 8013b40:	8011      	strh	r1, [r2, #0]
 8013b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b46:	4293      	cmp	r3, r2
 8013b48:	d103      	bne.n	8013b52 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013b4a:	4b12      	ldr	r3, [pc, #72]	; (8013b94 <udp_new_port+0x68>)
 8013b4c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013b50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b52:	4b11      	ldr	r3, [pc, #68]	; (8013b98 <udp_new_port+0x6c>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	603b      	str	r3, [r7, #0]
 8013b58:	e011      	b.n	8013b7e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	8a5a      	ldrh	r2, [r3, #18]
 8013b5e:	4b0d      	ldr	r3, [pc, #52]	; (8013b94 <udp_new_port+0x68>)
 8013b60:	881b      	ldrh	r3, [r3, #0]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d108      	bne.n	8013b78 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013b66:	88fb      	ldrh	r3, [r7, #6]
 8013b68:	3301      	adds	r3, #1
 8013b6a:	80fb      	strh	r3, [r7, #6]
 8013b6c:	88fb      	ldrh	r3, [r7, #6]
 8013b6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013b72:	d3e0      	bcc.n	8013b36 <udp_new_port+0xa>
        return 0;
 8013b74:	2300      	movs	r3, #0
 8013b76:	e007      	b.n	8013b88 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	68db      	ldr	r3, [r3, #12]
 8013b7c:	603b      	str	r3, [r7, #0]
 8013b7e:	683b      	ldr	r3, [r7, #0]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d1ea      	bne.n	8013b5a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013b84:	4b03      	ldr	r3, [pc, #12]	; (8013b94 <udp_new_port+0x68>)
 8013b86:	881b      	ldrh	r3, [r3, #0]
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	370c      	adds	r7, #12
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b92:	4770      	bx	lr
 8013b94:	2000002c 	.word	0x2000002c
 8013b98:	200115e8 	.word	0x200115e8

08013b9c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b084      	sub	sp, #16
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	60f8      	str	r0, [r7, #12]
 8013ba4:	60b9      	str	r1, [r7, #8]
 8013ba6:	4613      	mov	r3, r2
 8013ba8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d105      	bne.n	8013bbc <udp_input_local_match+0x20>
 8013bb0:	4b27      	ldr	r3, [pc, #156]	; (8013c50 <udp_input_local_match+0xb4>)
 8013bb2:	2287      	movs	r2, #135	; 0x87
 8013bb4:	4927      	ldr	r1, [pc, #156]	; (8013c54 <udp_input_local_match+0xb8>)
 8013bb6:	4828      	ldr	r0, [pc, #160]	; (8013c58 <udp_input_local_match+0xbc>)
 8013bb8:	f005 f9bc 	bl	8018f34 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d105      	bne.n	8013bce <udp_input_local_match+0x32>
 8013bc2:	4b23      	ldr	r3, [pc, #140]	; (8013c50 <udp_input_local_match+0xb4>)
 8013bc4:	2288      	movs	r2, #136	; 0x88
 8013bc6:	4925      	ldr	r1, [pc, #148]	; (8013c5c <udp_input_local_match+0xc0>)
 8013bc8:	4823      	ldr	r0, [pc, #140]	; (8013c58 <udp_input_local_match+0xbc>)
 8013bca:	f005 f9b3 	bl	8018f34 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	7a1b      	ldrb	r3, [r3, #8]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d00b      	beq.n	8013bee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	7a1a      	ldrb	r2, [r3, #8]
 8013bda:	4b21      	ldr	r3, [pc, #132]	; (8013c60 <udp_input_local_match+0xc4>)
 8013bdc:	685b      	ldr	r3, [r3, #4]
 8013bde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013be2:	3301      	adds	r3, #1
 8013be4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013be6:	429a      	cmp	r2, r3
 8013be8:	d001      	beq.n	8013bee <udp_input_local_match+0x52>
    return 0;
 8013bea:	2300      	movs	r3, #0
 8013bec:	e02b      	b.n	8013c46 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013bee:	79fb      	ldrb	r3, [r7, #7]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d018      	beq.n	8013c26 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d013      	beq.n	8013c22 <udp_input_local_match+0x86>
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d00f      	beq.n	8013c22 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013c02:	4b17      	ldr	r3, [pc, #92]	; (8013c60 <udp_input_local_match+0xc4>)
 8013c04:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c0a:	d00a      	beq.n	8013c22 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	4b13      	ldr	r3, [pc, #76]	; (8013c60 <udp_input_local_match+0xc4>)
 8013c12:	695b      	ldr	r3, [r3, #20]
 8013c14:	405a      	eors	r2, r3
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	3308      	adds	r3, #8
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d110      	bne.n	8013c44 <udp_input_local_match+0xa8>
          return 1;
 8013c22:	2301      	movs	r3, #1
 8013c24:	e00f      	b.n	8013c46 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d009      	beq.n	8013c40 <udp_input_local_match+0xa4>
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d005      	beq.n	8013c40 <udp_input_local_match+0xa4>
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	681a      	ldr	r2, [r3, #0]
 8013c38:	4b09      	ldr	r3, [pc, #36]	; (8013c60 <udp_input_local_match+0xc4>)
 8013c3a:	695b      	ldr	r3, [r3, #20]
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d101      	bne.n	8013c44 <udp_input_local_match+0xa8>
        return 1;
 8013c40:	2301      	movs	r3, #1
 8013c42:	e000      	b.n	8013c46 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013c44:	2300      	movs	r3, #0
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3710      	adds	r7, #16
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	0801d13c 	.word	0x0801d13c
 8013c54:	0801d16c 	.word	0x0801d16c
 8013c58:	0801d190 	.word	0x0801d190
 8013c5c:	0801d1b8 	.word	0x0801d1b8
 8013c60:	2000de18 	.word	0x2000de18

08013c64 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013c64:	b590      	push	{r4, r7, lr}
 8013c66:	b08d      	sub	sp, #52	; 0x34
 8013c68:	af02      	add	r7, sp, #8
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d105      	bne.n	8013c84 <udp_input+0x20>
 8013c78:	4b7c      	ldr	r3, [pc, #496]	; (8013e6c <udp_input+0x208>)
 8013c7a:	22cf      	movs	r2, #207	; 0xcf
 8013c7c:	497c      	ldr	r1, [pc, #496]	; (8013e70 <udp_input+0x20c>)
 8013c7e:	487d      	ldr	r0, [pc, #500]	; (8013e74 <udp_input+0x210>)
 8013c80:	f005 f958 	bl	8018f34 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d105      	bne.n	8013c96 <udp_input+0x32>
 8013c8a:	4b78      	ldr	r3, [pc, #480]	; (8013e6c <udp_input+0x208>)
 8013c8c:	22d0      	movs	r2, #208	; 0xd0
 8013c8e:	497a      	ldr	r1, [pc, #488]	; (8013e78 <udp_input+0x214>)
 8013c90:	4878      	ldr	r0, [pc, #480]	; (8013e74 <udp_input+0x210>)
 8013c92:	f005 f94f 	bl	8018f34 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	895b      	ldrh	r3, [r3, #10]
 8013c9a:	2b07      	cmp	r3, #7
 8013c9c:	d803      	bhi.n	8013ca6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	f7f9 f940 	bl	800cf24 <pbuf_free>
    goto end;
 8013ca4:	e0de      	b.n	8013e64 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013cac:	4b73      	ldr	r3, [pc, #460]	; (8013e7c <udp_input+0x218>)
 8013cae:	695b      	ldr	r3, [r3, #20]
 8013cb0:	4a72      	ldr	r2, [pc, #456]	; (8013e7c <udp_input+0x218>)
 8013cb2:	6812      	ldr	r2, [r2, #0]
 8013cb4:	4611      	mov	r1, r2
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f003 fe12 	bl	80178e0 <ip4_addr_isbroadcast_u32>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	881b      	ldrh	r3, [r3, #0]
 8013cc4:	b29b      	uxth	r3, r3
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7f7 fcf8 	bl	800b6bc <lwip_htons>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	885b      	ldrh	r3, [r3, #2]
 8013cd4:	b29b      	uxth	r3, r3
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7f7 fcf0 	bl	800b6bc <lwip_htons>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cec:	4b64      	ldr	r3, [pc, #400]	; (8013e80 <udp_input+0x21c>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8013cf2:	e054      	b.n	8013d9e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf6:	8a5b      	ldrh	r3, [r3, #18]
 8013cf8:	89fa      	ldrh	r2, [r7, #14]
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	d14a      	bne.n	8013d94 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013cfe:	7cfb      	ldrb	r3, [r7, #19]
 8013d00:	461a      	mov	r2, r3
 8013d02:	6839      	ldr	r1, [r7, #0]
 8013d04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d06:	f7ff ff49 	bl	8013b9c <udp_input_local_match>
 8013d0a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d041      	beq.n	8013d94 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d12:	7c1b      	ldrb	r3, [r3, #16]
 8013d14:	f003 0304 	and.w	r3, r3, #4
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d11d      	bne.n	8013d58 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d102      	bne.n	8013d28 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d24:	61fb      	str	r3, [r7, #28]
 8013d26:	e017      	b.n	8013d58 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013d28:	7cfb      	ldrb	r3, [r7, #19]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d014      	beq.n	8013d58 <udp_input+0xf4>
 8013d2e:	4b53      	ldr	r3, [pc, #332]	; (8013e7c <udp_input+0x218>)
 8013d30:	695b      	ldr	r3, [r3, #20]
 8013d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d36:	d10f      	bne.n	8013d58 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013d38:	69fb      	ldr	r3, [r7, #28]
 8013d3a:	681a      	ldr	r2, [r3, #0]
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	3304      	adds	r3, #4
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d008      	beq.n	8013d58 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d48:	681a      	ldr	r2, [r3, #0]
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	3304      	adds	r3, #4
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d101      	bne.n	8013d58 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d56:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5a:	8a9b      	ldrh	r3, [r3, #20]
 8013d5c:	8a3a      	ldrh	r2, [r7, #16]
 8013d5e:	429a      	cmp	r2, r3
 8013d60:	d118      	bne.n	8013d94 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d64:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d005      	beq.n	8013d76 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6c:	685a      	ldr	r2, [r3, #4]
 8013d6e:	4b43      	ldr	r3, [pc, #268]	; (8013e7c <udp_input+0x218>)
 8013d70:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d10e      	bne.n	8013d94 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013d76:	6a3b      	ldr	r3, [r7, #32]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d014      	beq.n	8013da6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7e:	68da      	ldr	r2, [r3, #12]
 8013d80:	6a3b      	ldr	r3, [r7, #32]
 8013d82:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013d84:	4b3e      	ldr	r3, [pc, #248]	; (8013e80 <udp_input+0x21c>)
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013d8c:	4a3c      	ldr	r2, [pc, #240]	; (8013e80 <udp_input+0x21c>)
 8013d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d90:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013d92:	e008      	b.n	8013da6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d96:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9a:	68db      	ldr	r3, [r3, #12]
 8013d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8013d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d1a7      	bne.n	8013cf4 <udp_input+0x90>
 8013da4:	e000      	b.n	8013da8 <udp_input+0x144>
        break;
 8013da6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d101      	bne.n	8013db2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013dae:	69fb      	ldr	r3, [r7, #28]
 8013db0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d002      	beq.n	8013dbe <udp_input+0x15a>
    for_us = 1;
 8013db8:	2301      	movs	r3, #1
 8013dba:	76fb      	strb	r3, [r7, #27]
 8013dbc:	e00a      	b.n	8013dd4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	3304      	adds	r3, #4
 8013dc2:	681a      	ldr	r2, [r3, #0]
 8013dc4:	4b2d      	ldr	r3, [pc, #180]	; (8013e7c <udp_input+0x218>)
 8013dc6:	695b      	ldr	r3, [r3, #20]
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	bf0c      	ite	eq
 8013dcc:	2301      	moveq	r3, #1
 8013dce:	2300      	movne	r3, #0
 8013dd0:	b2db      	uxtb	r3, r3
 8013dd2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013dd4:	7efb      	ldrb	r3, [r7, #27]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d041      	beq.n	8013e5e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013dda:	2108      	movs	r1, #8
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f7f9 f81b 	bl	800ce18 <pbuf_remove_header>
 8013de2:	4603      	mov	r3, r0
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d00a      	beq.n	8013dfe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013de8:	4b20      	ldr	r3, [pc, #128]	; (8013e6c <udp_input+0x208>)
 8013dea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013dee:	4925      	ldr	r1, [pc, #148]	; (8013e84 <udp_input+0x220>)
 8013df0:	4820      	ldr	r0, [pc, #128]	; (8013e74 <udp_input+0x210>)
 8013df2:	f005 f89f 	bl	8018f34 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f7f9 f894 	bl	800cf24 <pbuf_free>
      goto end;
 8013dfc:	e032      	b.n	8013e64 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d012      	beq.n	8013e2a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e06:	699b      	ldr	r3, [r3, #24]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d00a      	beq.n	8013e22 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e0e:	699c      	ldr	r4, [r3, #24]
 8013e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e12:	69d8      	ldr	r0, [r3, #28]
 8013e14:	8a3b      	ldrh	r3, [r7, #16]
 8013e16:	9300      	str	r3, [sp, #0]
 8013e18:	4b1b      	ldr	r3, [pc, #108]	; (8013e88 <udp_input+0x224>)
 8013e1a:	687a      	ldr	r2, [r7, #4]
 8013e1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013e1e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013e20:	e021      	b.n	8013e66 <udp_input+0x202>
        pbuf_free(p);
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f7f9 f87e 	bl	800cf24 <pbuf_free>
        goto end;
 8013e28:	e01c      	b.n	8013e64 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013e2a:	7cfb      	ldrb	r3, [r7, #19]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d112      	bne.n	8013e56 <udp_input+0x1f2>
 8013e30:	4b12      	ldr	r3, [pc, #72]	; (8013e7c <udp_input+0x218>)
 8013e32:	695b      	ldr	r3, [r3, #20]
 8013e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013e38:	2be0      	cmp	r3, #224	; 0xe0
 8013e3a:	d00c      	beq.n	8013e56 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013e3c:	4b0f      	ldr	r3, [pc, #60]	; (8013e7c <udp_input+0x218>)
 8013e3e:	899b      	ldrh	r3, [r3, #12]
 8013e40:	3308      	adds	r3, #8
 8013e42:	b29b      	uxth	r3, r3
 8013e44:	b21b      	sxth	r3, r3
 8013e46:	4619      	mov	r1, r3
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f7f9 f858 	bl	800cefe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013e4e:	2103      	movs	r1, #3
 8013e50:	6878      	ldr	r0, [r7, #4]
 8013e52:	f003 fa07 	bl	8017264 <icmp_dest_unreach>
      pbuf_free(p);
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f7f9 f864 	bl	800cf24 <pbuf_free>
  return;
 8013e5c:	e003      	b.n	8013e66 <udp_input+0x202>
    pbuf_free(p);
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f7f9 f860 	bl	800cf24 <pbuf_free>
  return;
 8013e64:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013e66:	372c      	adds	r7, #44	; 0x2c
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd90      	pop	{r4, r7, pc}
 8013e6c:	0801d13c 	.word	0x0801d13c
 8013e70:	0801d1e0 	.word	0x0801d1e0
 8013e74:	0801d190 	.word	0x0801d190
 8013e78:	0801d1f8 	.word	0x0801d1f8
 8013e7c:	2000de18 	.word	0x2000de18
 8013e80:	200115e8 	.word	0x200115e8
 8013e84:	0801d214 	.word	0x0801d214
 8013e88:	2000de28 	.word	0x2000de28

08013e8c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b088      	sub	sp, #32
 8013e90:	af02      	add	r7, sp, #8
 8013e92:	60f8      	str	r0, [r7, #12]
 8013e94:	60b9      	str	r1, [r7, #8]
 8013e96:	607a      	str	r2, [r7, #4]
 8013e98:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d109      	bne.n	8013eb4 <udp_sendto_if+0x28>
 8013ea0:	4b2e      	ldr	r3, [pc, #184]	; (8013f5c <udp_sendto_if+0xd0>)
 8013ea2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013ea6:	492e      	ldr	r1, [pc, #184]	; (8013f60 <udp_sendto_if+0xd4>)
 8013ea8:	482e      	ldr	r0, [pc, #184]	; (8013f64 <udp_sendto_if+0xd8>)
 8013eaa:	f005 f843 	bl	8018f34 <iprintf>
 8013eae:	f06f 030f 	mvn.w	r3, #15
 8013eb2:	e04f      	b.n	8013f54 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d109      	bne.n	8013ece <udp_sendto_if+0x42>
 8013eba:	4b28      	ldr	r3, [pc, #160]	; (8013f5c <udp_sendto_if+0xd0>)
 8013ebc:	f240 2281 	movw	r2, #641	; 0x281
 8013ec0:	4929      	ldr	r1, [pc, #164]	; (8013f68 <udp_sendto_if+0xdc>)
 8013ec2:	4828      	ldr	r0, [pc, #160]	; (8013f64 <udp_sendto_if+0xd8>)
 8013ec4:	f005 f836 	bl	8018f34 <iprintf>
 8013ec8:	f06f 030f 	mvn.w	r3, #15
 8013ecc:	e042      	b.n	8013f54 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d109      	bne.n	8013ee8 <udp_sendto_if+0x5c>
 8013ed4:	4b21      	ldr	r3, [pc, #132]	; (8013f5c <udp_sendto_if+0xd0>)
 8013ed6:	f240 2282 	movw	r2, #642	; 0x282
 8013eda:	4924      	ldr	r1, [pc, #144]	; (8013f6c <udp_sendto_if+0xe0>)
 8013edc:	4821      	ldr	r0, [pc, #132]	; (8013f64 <udp_sendto_if+0xd8>)
 8013ede:	f005 f829 	bl	8018f34 <iprintf>
 8013ee2:	f06f 030f 	mvn.w	r3, #15
 8013ee6:	e035      	b.n	8013f54 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013ee8:	6a3b      	ldr	r3, [r7, #32]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d109      	bne.n	8013f02 <udp_sendto_if+0x76>
 8013eee:	4b1b      	ldr	r3, [pc, #108]	; (8013f5c <udp_sendto_if+0xd0>)
 8013ef0:	f240 2283 	movw	r2, #643	; 0x283
 8013ef4:	491e      	ldr	r1, [pc, #120]	; (8013f70 <udp_sendto_if+0xe4>)
 8013ef6:	481b      	ldr	r0, [pc, #108]	; (8013f64 <udp_sendto_if+0xd8>)
 8013ef8:	f005 f81c 	bl	8018f34 <iprintf>
 8013efc:	f06f 030f 	mvn.w	r3, #15
 8013f00:	e028      	b.n	8013f54 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d009      	beq.n	8013f1c <udp_sendto_if+0x90>
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d005      	beq.n	8013f1c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013f18:	2be0      	cmp	r3, #224	; 0xe0
 8013f1a:	d103      	bne.n	8013f24 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013f1c:	6a3b      	ldr	r3, [r7, #32]
 8013f1e:	3304      	adds	r3, #4
 8013f20:	617b      	str	r3, [r7, #20]
 8013f22:	e00b      	b.n	8013f3c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	6a3b      	ldr	r3, [r7, #32]
 8013f2a:	3304      	adds	r3, #4
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d002      	beq.n	8013f38 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013f32:	f06f 0303 	mvn.w	r3, #3
 8013f36:	e00d      	b.n	8013f54 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013f3c:	887a      	ldrh	r2, [r7, #2]
 8013f3e:	697b      	ldr	r3, [r7, #20]
 8013f40:	9301      	str	r3, [sp, #4]
 8013f42:	6a3b      	ldr	r3, [r7, #32]
 8013f44:	9300      	str	r3, [sp, #0]
 8013f46:	4613      	mov	r3, r2
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	68b9      	ldr	r1, [r7, #8]
 8013f4c:	68f8      	ldr	r0, [r7, #12]
 8013f4e:	f000 f811 	bl	8013f74 <udp_sendto_if_src>
 8013f52:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3718      	adds	r7, #24
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}
 8013f5c:	0801d13c 	.word	0x0801d13c
 8013f60:	0801d2b0 	.word	0x0801d2b0
 8013f64:	0801d190 	.word	0x0801d190
 8013f68:	0801d2cc 	.word	0x0801d2cc
 8013f6c:	0801d2e8 	.word	0x0801d2e8
 8013f70:	0801d308 	.word	0x0801d308

08013f74 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b08c      	sub	sp, #48	; 0x30
 8013f78:	af04      	add	r7, sp, #16
 8013f7a:	60f8      	str	r0, [r7, #12]
 8013f7c:	60b9      	str	r1, [r7, #8]
 8013f7e:	607a      	str	r2, [r7, #4]
 8013f80:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d109      	bne.n	8013f9c <udp_sendto_if_src+0x28>
 8013f88:	4b65      	ldr	r3, [pc, #404]	; (8014120 <udp_sendto_if_src+0x1ac>)
 8013f8a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013f8e:	4965      	ldr	r1, [pc, #404]	; (8014124 <udp_sendto_if_src+0x1b0>)
 8013f90:	4865      	ldr	r0, [pc, #404]	; (8014128 <udp_sendto_if_src+0x1b4>)
 8013f92:	f004 ffcf 	bl	8018f34 <iprintf>
 8013f96:	f06f 030f 	mvn.w	r3, #15
 8013f9a:	e0bc      	b.n	8014116 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d109      	bne.n	8013fb6 <udp_sendto_if_src+0x42>
 8013fa2:	4b5f      	ldr	r3, [pc, #380]	; (8014120 <udp_sendto_if_src+0x1ac>)
 8013fa4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013fa8:	4960      	ldr	r1, [pc, #384]	; (801412c <udp_sendto_if_src+0x1b8>)
 8013faa:	485f      	ldr	r0, [pc, #380]	; (8014128 <udp_sendto_if_src+0x1b4>)
 8013fac:	f004 ffc2 	bl	8018f34 <iprintf>
 8013fb0:	f06f 030f 	mvn.w	r3, #15
 8013fb4:	e0af      	b.n	8014116 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d109      	bne.n	8013fd0 <udp_sendto_if_src+0x5c>
 8013fbc:	4b58      	ldr	r3, [pc, #352]	; (8014120 <udp_sendto_if_src+0x1ac>)
 8013fbe:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013fc2:	495b      	ldr	r1, [pc, #364]	; (8014130 <udp_sendto_if_src+0x1bc>)
 8013fc4:	4858      	ldr	r0, [pc, #352]	; (8014128 <udp_sendto_if_src+0x1b4>)
 8013fc6:	f004 ffb5 	bl	8018f34 <iprintf>
 8013fca:	f06f 030f 	mvn.w	r3, #15
 8013fce:	e0a2      	b.n	8014116 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d109      	bne.n	8013fea <udp_sendto_if_src+0x76>
 8013fd6:	4b52      	ldr	r3, [pc, #328]	; (8014120 <udp_sendto_if_src+0x1ac>)
 8013fd8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013fdc:	4955      	ldr	r1, [pc, #340]	; (8014134 <udp_sendto_if_src+0x1c0>)
 8013fde:	4852      	ldr	r0, [pc, #328]	; (8014128 <udp_sendto_if_src+0x1b4>)
 8013fe0:	f004 ffa8 	bl	8018f34 <iprintf>
 8013fe4:	f06f 030f 	mvn.w	r3, #15
 8013fe8:	e095      	b.n	8014116 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d109      	bne.n	8014004 <udp_sendto_if_src+0x90>
 8013ff0:	4b4b      	ldr	r3, [pc, #300]	; (8014120 <udp_sendto_if_src+0x1ac>)
 8013ff2:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013ff6:	4950      	ldr	r1, [pc, #320]	; (8014138 <udp_sendto_if_src+0x1c4>)
 8013ff8:	484b      	ldr	r0, [pc, #300]	; (8014128 <udp_sendto_if_src+0x1b4>)
 8013ffa:	f004 ff9b 	bl	8018f34 <iprintf>
 8013ffe:	f06f 030f 	mvn.w	r3, #15
 8014002:	e088      	b.n	8014116 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	8a5b      	ldrh	r3, [r3, #18]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d10f      	bne.n	801402c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801400c:	68f9      	ldr	r1, [r7, #12]
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	8a5b      	ldrh	r3, [r3, #18]
 8014012:	461a      	mov	r2, r3
 8014014:	68f8      	ldr	r0, [r7, #12]
 8014016:	f000 f893 	bl	8014140 <udp_bind>
 801401a:	4603      	mov	r3, r0
 801401c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801401e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d002      	beq.n	801402c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014026:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801402a:	e074      	b.n	8014116 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	891b      	ldrh	r3, [r3, #8]
 8014030:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014034:	4293      	cmp	r3, r2
 8014036:	d902      	bls.n	801403e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014038:	f04f 33ff 	mov.w	r3, #4294967295
 801403c:	e06b      	b.n	8014116 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801403e:	2108      	movs	r1, #8
 8014040:	68b8      	ldr	r0, [r7, #8]
 8014042:	f7f8 fed9 	bl	800cdf8 <pbuf_add_header>
 8014046:	4603      	mov	r3, r0
 8014048:	2b00      	cmp	r3, #0
 801404a:	d015      	beq.n	8014078 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801404c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014050:	2108      	movs	r1, #8
 8014052:	2022      	movs	r0, #34	; 0x22
 8014054:	f7f8 fc82 	bl	800c95c <pbuf_alloc>
 8014058:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801405a:	69fb      	ldr	r3, [r7, #28]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d102      	bne.n	8014066 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014060:	f04f 33ff 	mov.w	r3, #4294967295
 8014064:	e057      	b.n	8014116 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	891b      	ldrh	r3, [r3, #8]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d006      	beq.n	801407c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801406e:	68b9      	ldr	r1, [r7, #8]
 8014070:	69f8      	ldr	r0, [r7, #28]
 8014072:	f7f9 f87b 	bl	800d16c <pbuf_chain>
 8014076:	e001      	b.n	801407c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801407c:	69fb      	ldr	r3, [r7, #28]
 801407e:	895b      	ldrh	r3, [r3, #10]
 8014080:	2b07      	cmp	r3, #7
 8014082:	d806      	bhi.n	8014092 <udp_sendto_if_src+0x11e>
 8014084:	4b26      	ldr	r3, [pc, #152]	; (8014120 <udp_sendto_if_src+0x1ac>)
 8014086:	f240 320d 	movw	r2, #781	; 0x30d
 801408a:	492c      	ldr	r1, [pc, #176]	; (801413c <udp_sendto_if_src+0x1c8>)
 801408c:	4826      	ldr	r0, [pc, #152]	; (8014128 <udp_sendto_if_src+0x1b4>)
 801408e:	f004 ff51 	bl	8018f34 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014092:	69fb      	ldr	r3, [r7, #28]
 8014094:	685b      	ldr	r3, [r3, #4]
 8014096:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	8a5b      	ldrh	r3, [r3, #18]
 801409c:	4618      	mov	r0, r3
 801409e:	f7f7 fb0d 	bl	800b6bc <lwip_htons>
 80140a2:	4603      	mov	r3, r0
 80140a4:	461a      	mov	r2, r3
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80140aa:	887b      	ldrh	r3, [r7, #2]
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7f7 fb05 	bl	800b6bc <lwip_htons>
 80140b2:	4603      	mov	r3, r0
 80140b4:	461a      	mov	r2, r3
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	2200      	movs	r2, #0
 80140be:	719a      	strb	r2, [r3, #6]
 80140c0:	2200      	movs	r2, #0
 80140c2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80140c4:	69fb      	ldr	r3, [r7, #28]
 80140c6:	891b      	ldrh	r3, [r3, #8]
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7f7 faf7 	bl	800b6bc <lwip_htons>
 80140ce:	4603      	mov	r3, r0
 80140d0:	461a      	mov	r2, r3
 80140d2:	697b      	ldr	r3, [r7, #20]
 80140d4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80140d6:	2311      	movs	r3, #17
 80140d8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	7adb      	ldrb	r3, [r3, #11]
 80140de:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	7a9b      	ldrb	r3, [r3, #10]
 80140e4:	7cb9      	ldrb	r1, [r7, #18]
 80140e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140e8:	9202      	str	r2, [sp, #8]
 80140ea:	7cfa      	ldrb	r2, [r7, #19]
 80140ec:	9201      	str	r2, [sp, #4]
 80140ee:	9300      	str	r3, [sp, #0]
 80140f0:	460b      	mov	r3, r1
 80140f2:	687a      	ldr	r2, [r7, #4]
 80140f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80140f6:	69f8      	ldr	r0, [r7, #28]
 80140f8:	f003 fb44 	bl	8017784 <ip4_output_if_src>
 80140fc:	4603      	mov	r3, r0
 80140fe:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014100:	69fa      	ldr	r2, [r7, #28]
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	429a      	cmp	r2, r3
 8014106:	d004      	beq.n	8014112 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014108:	69f8      	ldr	r0, [r7, #28]
 801410a:	f7f8 ff0b 	bl	800cf24 <pbuf_free>
    q = NULL;
 801410e:	2300      	movs	r3, #0
 8014110:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014112:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014116:	4618      	mov	r0, r3
 8014118:	3720      	adds	r7, #32
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	0801d13c 	.word	0x0801d13c
 8014124:	0801d328 	.word	0x0801d328
 8014128:	0801d190 	.word	0x0801d190
 801412c:	0801d348 	.word	0x0801d348
 8014130:	0801d368 	.word	0x0801d368
 8014134:	0801d38c 	.word	0x0801d38c
 8014138:	0801d3b0 	.word	0x0801d3b0
 801413c:	0801d3d4 	.word	0x0801d3d4

08014140 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b086      	sub	sp, #24
 8014144:	af00      	add	r7, sp, #0
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	4613      	mov	r3, r2
 801414c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d101      	bne.n	8014158 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014154:	4b39      	ldr	r3, [pc, #228]	; (801423c <udp_bind+0xfc>)
 8014156:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d109      	bne.n	8014172 <udp_bind+0x32>
 801415e:	4b38      	ldr	r3, [pc, #224]	; (8014240 <udp_bind+0x100>)
 8014160:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014164:	4937      	ldr	r1, [pc, #220]	; (8014244 <udp_bind+0x104>)
 8014166:	4838      	ldr	r0, [pc, #224]	; (8014248 <udp_bind+0x108>)
 8014168:	f004 fee4 	bl	8018f34 <iprintf>
 801416c:	f06f 030f 	mvn.w	r3, #15
 8014170:	e060      	b.n	8014234 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014172:	2300      	movs	r3, #0
 8014174:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014176:	4b35      	ldr	r3, [pc, #212]	; (801424c <udp_bind+0x10c>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	617b      	str	r3, [r7, #20]
 801417c:	e009      	b.n	8014192 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801417e:	68fa      	ldr	r2, [r7, #12]
 8014180:	697b      	ldr	r3, [r7, #20]
 8014182:	429a      	cmp	r2, r3
 8014184:	d102      	bne.n	801418c <udp_bind+0x4c>
      rebind = 1;
 8014186:	2301      	movs	r3, #1
 8014188:	74fb      	strb	r3, [r7, #19]
      break;
 801418a:	e005      	b.n	8014198 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	68db      	ldr	r3, [r3, #12]
 8014190:	617b      	str	r3, [r7, #20]
 8014192:	697b      	ldr	r3, [r7, #20]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d1f2      	bne.n	801417e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014198:	88fb      	ldrh	r3, [r7, #6]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d109      	bne.n	80141b2 <udp_bind+0x72>
    port = udp_new_port();
 801419e:	f7ff fcc5 	bl	8013b2c <udp_new_port>
 80141a2:	4603      	mov	r3, r0
 80141a4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80141a6:	88fb      	ldrh	r3, [r7, #6]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d12c      	bne.n	8014206 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80141ac:	f06f 0307 	mvn.w	r3, #7
 80141b0:	e040      	b.n	8014234 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141b2:	4b26      	ldr	r3, [pc, #152]	; (801424c <udp_bind+0x10c>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	617b      	str	r3, [r7, #20]
 80141b8:	e022      	b.n	8014200 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80141ba:	68fa      	ldr	r2, [r7, #12]
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	429a      	cmp	r2, r3
 80141c0:	d01b      	beq.n	80141fa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	8a5b      	ldrh	r3, [r3, #18]
 80141c6:	88fa      	ldrh	r2, [r7, #6]
 80141c8:	429a      	cmp	r2, r3
 80141ca:	d116      	bne.n	80141fa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80141cc:	697b      	ldr	r3, [r7, #20]
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80141d4:	429a      	cmp	r2, r3
 80141d6:	d00d      	beq.n	80141f4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d00a      	beq.n	80141f4 <udp_bind+0xb4>
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d006      	beq.n	80141f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80141e6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d003      	beq.n	80141f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d102      	bne.n	80141fa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80141f4:	f06f 0307 	mvn.w	r3, #7
 80141f8:	e01c      	b.n	8014234 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	68db      	ldr	r3, [r3, #12]
 80141fe:	617b      	str	r3, [r7, #20]
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d1d9      	bne.n	80141ba <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d002      	beq.n	8014212 <udp_bind+0xd2>
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	e000      	b.n	8014214 <udp_bind+0xd4>
 8014212:	2300      	movs	r3, #0
 8014214:	68fa      	ldr	r2, [r7, #12]
 8014216:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	88fa      	ldrh	r2, [r7, #6]
 801421c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801421e:	7cfb      	ldrb	r3, [r7, #19]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d106      	bne.n	8014232 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014224:	4b09      	ldr	r3, [pc, #36]	; (801424c <udp_bind+0x10c>)
 8014226:	681a      	ldr	r2, [r3, #0]
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801422c:	4a07      	ldr	r2, [pc, #28]	; (801424c <udp_bind+0x10c>)
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014232:	2300      	movs	r3, #0
}
 8014234:	4618      	mov	r0, r3
 8014236:	3718      	adds	r7, #24
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}
 801423c:	08028184 	.word	0x08028184
 8014240:	0801d13c 	.word	0x0801d13c
 8014244:	0801d404 	.word	0x0801d404
 8014248:	0801d190 	.word	0x0801d190
 801424c:	200115e8 	.word	0x200115e8

08014250 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b086      	sub	sp, #24
 8014254:	af00      	add	r7, sp, #0
 8014256:	60f8      	str	r0, [r7, #12]
 8014258:	60b9      	str	r1, [r7, #8]
 801425a:	4613      	mov	r3, r2
 801425c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d109      	bne.n	8014278 <udp_connect+0x28>
 8014264:	4b2c      	ldr	r3, [pc, #176]	; (8014318 <udp_connect+0xc8>)
 8014266:	f240 4235 	movw	r2, #1077	; 0x435
 801426a:	492c      	ldr	r1, [pc, #176]	; (801431c <udp_connect+0xcc>)
 801426c:	482c      	ldr	r0, [pc, #176]	; (8014320 <udp_connect+0xd0>)
 801426e:	f004 fe61 	bl	8018f34 <iprintf>
 8014272:	f06f 030f 	mvn.w	r3, #15
 8014276:	e04b      	b.n	8014310 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d109      	bne.n	8014292 <udp_connect+0x42>
 801427e:	4b26      	ldr	r3, [pc, #152]	; (8014318 <udp_connect+0xc8>)
 8014280:	f240 4236 	movw	r2, #1078	; 0x436
 8014284:	4927      	ldr	r1, [pc, #156]	; (8014324 <udp_connect+0xd4>)
 8014286:	4826      	ldr	r0, [pc, #152]	; (8014320 <udp_connect+0xd0>)
 8014288:	f004 fe54 	bl	8018f34 <iprintf>
 801428c:	f06f 030f 	mvn.w	r3, #15
 8014290:	e03e      	b.n	8014310 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	8a5b      	ldrh	r3, [r3, #18]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d10f      	bne.n	80142ba <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801429a:	68f9      	ldr	r1, [r7, #12]
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	8a5b      	ldrh	r3, [r3, #18]
 80142a0:	461a      	mov	r2, r3
 80142a2:	68f8      	ldr	r0, [r7, #12]
 80142a4:	f7ff ff4c 	bl	8014140 <udp_bind>
 80142a8:	4603      	mov	r3, r0
 80142aa:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80142ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d002      	beq.n	80142ba <udp_connect+0x6a>
      return err;
 80142b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80142b8:	e02a      	b.n	8014310 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80142ba:	68bb      	ldr	r3, [r7, #8]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d002      	beq.n	80142c6 <udp_connect+0x76>
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	e000      	b.n	80142c8 <udp_connect+0x78>
 80142c6:	2300      	movs	r3, #0
 80142c8:	68fa      	ldr	r2, [r7, #12]
 80142ca:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	88fa      	ldrh	r2, [r7, #6]
 80142d0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	7c1b      	ldrb	r3, [r3, #16]
 80142d6:	f043 0304 	orr.w	r3, r3, #4
 80142da:	b2da      	uxtb	r2, r3
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80142e0:	4b11      	ldr	r3, [pc, #68]	; (8014328 <udp_connect+0xd8>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	617b      	str	r3, [r7, #20]
 80142e6:	e008      	b.n	80142fa <udp_connect+0xaa>
    if (pcb == ipcb) {
 80142e8:	68fa      	ldr	r2, [r7, #12]
 80142ea:	697b      	ldr	r3, [r7, #20]
 80142ec:	429a      	cmp	r2, r3
 80142ee:	d101      	bne.n	80142f4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80142f0:	2300      	movs	r3, #0
 80142f2:	e00d      	b.n	8014310 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	68db      	ldr	r3, [r3, #12]
 80142f8:	617b      	str	r3, [r7, #20]
 80142fa:	697b      	ldr	r3, [r7, #20]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d1f3      	bne.n	80142e8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014300:	4b09      	ldr	r3, [pc, #36]	; (8014328 <udp_connect+0xd8>)
 8014302:	681a      	ldr	r2, [r3, #0]
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014308:	4a07      	ldr	r2, [pc, #28]	; (8014328 <udp_connect+0xd8>)
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801430e:	2300      	movs	r3, #0
}
 8014310:	4618      	mov	r0, r3
 8014312:	3718      	adds	r7, #24
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}
 8014318:	0801d13c 	.word	0x0801d13c
 801431c:	0801d41c 	.word	0x0801d41c
 8014320:	0801d190 	.word	0x0801d190
 8014324:	0801d438 	.word	0x0801d438
 8014328:	200115e8 	.word	0x200115e8

0801432c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b084      	sub	sp, #16
 8014330:	af00      	add	r7, sp, #0
 8014332:	60f8      	str	r0, [r7, #12]
 8014334:	60b9      	str	r1, [r7, #8]
 8014336:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d107      	bne.n	801434e <udp_recv+0x22>
 801433e:	4b08      	ldr	r3, [pc, #32]	; (8014360 <udp_recv+0x34>)
 8014340:	f240 428a 	movw	r2, #1162	; 0x48a
 8014344:	4907      	ldr	r1, [pc, #28]	; (8014364 <udp_recv+0x38>)
 8014346:	4808      	ldr	r0, [pc, #32]	; (8014368 <udp_recv+0x3c>)
 8014348:	f004 fdf4 	bl	8018f34 <iprintf>
 801434c:	e005      	b.n	801435a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	68ba      	ldr	r2, [r7, #8]
 8014352:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	687a      	ldr	r2, [r7, #4]
 8014358:	61da      	str	r2, [r3, #28]
}
 801435a:	3710      	adds	r7, #16
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}
 8014360:	0801d13c 	.word	0x0801d13c
 8014364:	0801d470 	.word	0x0801d470
 8014368:	0801d190 	.word	0x0801d190

0801436c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b084      	sub	sp, #16
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d107      	bne.n	801438a <udp_remove+0x1e>
 801437a:	4b19      	ldr	r3, [pc, #100]	; (80143e0 <udp_remove+0x74>)
 801437c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014380:	4918      	ldr	r1, [pc, #96]	; (80143e4 <udp_remove+0x78>)
 8014382:	4819      	ldr	r0, [pc, #100]	; (80143e8 <udp_remove+0x7c>)
 8014384:	f004 fdd6 	bl	8018f34 <iprintf>
 8014388:	e026      	b.n	80143d8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801438a:	4b18      	ldr	r3, [pc, #96]	; (80143ec <udp_remove+0x80>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	687a      	ldr	r2, [r7, #4]
 8014390:	429a      	cmp	r2, r3
 8014392:	d105      	bne.n	80143a0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014394:	4b15      	ldr	r3, [pc, #84]	; (80143ec <udp_remove+0x80>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	68db      	ldr	r3, [r3, #12]
 801439a:	4a14      	ldr	r2, [pc, #80]	; (80143ec <udp_remove+0x80>)
 801439c:	6013      	str	r3, [r2, #0]
 801439e:	e017      	b.n	80143d0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80143a0:	4b12      	ldr	r3, [pc, #72]	; (80143ec <udp_remove+0x80>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	60fb      	str	r3, [r7, #12]
 80143a6:	e010      	b.n	80143ca <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	68db      	ldr	r3, [r3, #12]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d009      	beq.n	80143c4 <udp_remove+0x58>
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	68db      	ldr	r3, [r3, #12]
 80143b4:	687a      	ldr	r2, [r7, #4]
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d104      	bne.n	80143c4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	68da      	ldr	r2, [r3, #12]
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	60da      	str	r2, [r3, #12]
        break;
 80143c2:	e005      	b.n	80143d0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	68db      	ldr	r3, [r3, #12]
 80143c8:	60fb      	str	r3, [r7, #12]
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d1eb      	bne.n	80143a8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80143d0:	6879      	ldr	r1, [r7, #4]
 80143d2:	2000      	movs	r0, #0
 80143d4:	f7f7 fef6 	bl	800c1c4 <memp_free>
}
 80143d8:	3710      	adds	r7, #16
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
 80143de:	bf00      	nop
 80143e0:	0801d13c 	.word	0x0801d13c
 80143e4:	0801d488 	.word	0x0801d488
 80143e8:	0801d190 	.word	0x0801d190
 80143ec:	200115e8 	.word	0x200115e8

080143f0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b082      	sub	sp, #8
 80143f4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80143f6:	2000      	movs	r0, #0
 80143f8:	f7f7 fe6e 	bl	800c0d8 <memp_malloc>
 80143fc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d007      	beq.n	8014414 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014404:	2220      	movs	r2, #32
 8014406:	2100      	movs	r1, #0
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f004 fcf6 	bl	8018dfa <memset>
    pcb->ttl = UDP_TTL;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	22ff      	movs	r2, #255	; 0xff
 8014412:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014414:	687b      	ldr	r3, [r7, #4]
}
 8014416:	4618      	mov	r0, r3
 8014418:	3708      	adds	r7, #8
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}

0801441e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801441e:	b580      	push	{r7, lr}
 8014420:	b084      	sub	sp, #16
 8014422:	af00      	add	r7, sp, #0
 8014424:	4603      	mov	r3, r0
 8014426:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014428:	f7ff ffe2 	bl	80143f0 <udp_new>
 801442c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801442e:	68fb      	ldr	r3, [r7, #12]
}
 8014430:	4618      	mov	r0, r3
 8014432:	3710      	adds	r7, #16
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}

08014438 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014438:	b480      	push	{r7}
 801443a:	b085      	sub	sp, #20
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
 8014440:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d01e      	beq.n	8014486 <udp_netif_ip_addr_changed+0x4e>
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d01a      	beq.n	8014486 <udp_netif_ip_addr_changed+0x4e>
 8014450:	683b      	ldr	r3, [r7, #0]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d017      	beq.n	8014486 <udp_netif_ip_addr_changed+0x4e>
 8014456:	683b      	ldr	r3, [r7, #0]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d013      	beq.n	8014486 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801445e:	4b0d      	ldr	r3, [pc, #52]	; (8014494 <udp_netif_ip_addr_changed+0x5c>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	60fb      	str	r3, [r7, #12]
 8014464:	e00c      	b.n	8014480 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	681a      	ldr	r2, [r3, #0]
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	429a      	cmp	r2, r3
 8014470:	d103      	bne.n	801447a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014472:	683b      	ldr	r3, [r7, #0]
 8014474:	681a      	ldr	r2, [r3, #0]
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	68db      	ldr	r3, [r3, #12]
 801447e:	60fb      	str	r3, [r7, #12]
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d1ef      	bne.n	8014466 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014486:	bf00      	nop
 8014488:	3714      	adds	r7, #20
 801448a:	46bd      	mov	sp, r7
 801448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014490:	4770      	bx	lr
 8014492:	bf00      	nop
 8014494:	200115e8 	.word	0x200115e8

08014498 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801449c:	4b20      	ldr	r3, [pc, #128]	; (8014520 <dhcp_inc_pcb_refcount+0x88>)
 801449e:	781b      	ldrb	r3, [r3, #0]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d133      	bne.n	801450c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80144a4:	4b1f      	ldr	r3, [pc, #124]	; (8014524 <dhcp_inc_pcb_refcount+0x8c>)
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d005      	beq.n	80144b8 <dhcp_inc_pcb_refcount+0x20>
 80144ac:	4b1e      	ldr	r3, [pc, #120]	; (8014528 <dhcp_inc_pcb_refcount+0x90>)
 80144ae:	22e5      	movs	r2, #229	; 0xe5
 80144b0:	491e      	ldr	r1, [pc, #120]	; (801452c <dhcp_inc_pcb_refcount+0x94>)
 80144b2:	481f      	ldr	r0, [pc, #124]	; (8014530 <dhcp_inc_pcb_refcount+0x98>)
 80144b4:	f004 fd3e 	bl	8018f34 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80144b8:	f7ff ff9a 	bl	80143f0 <udp_new>
 80144bc:	4603      	mov	r3, r0
 80144be:	4a19      	ldr	r2, [pc, #100]	; (8014524 <dhcp_inc_pcb_refcount+0x8c>)
 80144c0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80144c2:	4b18      	ldr	r3, [pc, #96]	; (8014524 <dhcp_inc_pcb_refcount+0x8c>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d102      	bne.n	80144d0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80144ca:	f04f 33ff 	mov.w	r3, #4294967295
 80144ce:	e024      	b.n	801451a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80144d0:	4b14      	ldr	r3, [pc, #80]	; (8014524 <dhcp_inc_pcb_refcount+0x8c>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	7a5a      	ldrb	r2, [r3, #9]
 80144d6:	4b13      	ldr	r3, [pc, #76]	; (8014524 <dhcp_inc_pcb_refcount+0x8c>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	f042 0220 	orr.w	r2, r2, #32
 80144de:	b2d2      	uxtb	r2, r2
 80144e0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80144e2:	4b10      	ldr	r3, [pc, #64]	; (8014524 <dhcp_inc_pcb_refcount+0x8c>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	2244      	movs	r2, #68	; 0x44
 80144e8:	4912      	ldr	r1, [pc, #72]	; (8014534 <dhcp_inc_pcb_refcount+0x9c>)
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7ff fe28 	bl	8014140 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80144f0:	4b0c      	ldr	r3, [pc, #48]	; (8014524 <dhcp_inc_pcb_refcount+0x8c>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	2243      	movs	r2, #67	; 0x43
 80144f6:	490f      	ldr	r1, [pc, #60]	; (8014534 <dhcp_inc_pcb_refcount+0x9c>)
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7ff fea9 	bl	8014250 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80144fe:	4b09      	ldr	r3, [pc, #36]	; (8014524 <dhcp_inc_pcb_refcount+0x8c>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	2200      	movs	r2, #0
 8014504:	490c      	ldr	r1, [pc, #48]	; (8014538 <dhcp_inc_pcb_refcount+0xa0>)
 8014506:	4618      	mov	r0, r3
 8014508:	f7ff ff10 	bl	801432c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801450c:	4b04      	ldr	r3, [pc, #16]	; (8014520 <dhcp_inc_pcb_refcount+0x88>)
 801450e:	781b      	ldrb	r3, [r3, #0]
 8014510:	3301      	adds	r3, #1
 8014512:	b2da      	uxtb	r2, r3
 8014514:	4b02      	ldr	r3, [pc, #8]	; (8014520 <dhcp_inc_pcb_refcount+0x88>)
 8014516:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014518:	2300      	movs	r3, #0
}
 801451a:	4618      	mov	r0, r3
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop
 8014520:	20011618 	.word	0x20011618
 8014524:	20011614 	.word	0x20011614
 8014528:	0801d4a0 	.word	0x0801d4a0
 801452c:	0801d4d8 	.word	0x0801d4d8
 8014530:	0801d500 	.word	0x0801d500
 8014534:	08028184 	.word	0x08028184
 8014538:	08015dcd 	.word	0x08015dcd

0801453c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014540:	4b0e      	ldr	r3, [pc, #56]	; (801457c <dhcp_dec_pcb_refcount+0x40>)
 8014542:	781b      	ldrb	r3, [r3, #0]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d105      	bne.n	8014554 <dhcp_dec_pcb_refcount+0x18>
 8014548:	4b0d      	ldr	r3, [pc, #52]	; (8014580 <dhcp_dec_pcb_refcount+0x44>)
 801454a:	22ff      	movs	r2, #255	; 0xff
 801454c:	490d      	ldr	r1, [pc, #52]	; (8014584 <dhcp_dec_pcb_refcount+0x48>)
 801454e:	480e      	ldr	r0, [pc, #56]	; (8014588 <dhcp_dec_pcb_refcount+0x4c>)
 8014550:	f004 fcf0 	bl	8018f34 <iprintf>
  dhcp_pcb_refcount--;
 8014554:	4b09      	ldr	r3, [pc, #36]	; (801457c <dhcp_dec_pcb_refcount+0x40>)
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	3b01      	subs	r3, #1
 801455a:	b2da      	uxtb	r2, r3
 801455c:	4b07      	ldr	r3, [pc, #28]	; (801457c <dhcp_dec_pcb_refcount+0x40>)
 801455e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014560:	4b06      	ldr	r3, [pc, #24]	; (801457c <dhcp_dec_pcb_refcount+0x40>)
 8014562:	781b      	ldrb	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d107      	bne.n	8014578 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014568:	4b08      	ldr	r3, [pc, #32]	; (801458c <dhcp_dec_pcb_refcount+0x50>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	4618      	mov	r0, r3
 801456e:	f7ff fefd 	bl	801436c <udp_remove>
    dhcp_pcb = NULL;
 8014572:	4b06      	ldr	r3, [pc, #24]	; (801458c <dhcp_dec_pcb_refcount+0x50>)
 8014574:	2200      	movs	r2, #0
 8014576:	601a      	str	r2, [r3, #0]
  }
}
 8014578:	bf00      	nop
 801457a:	bd80      	pop	{r7, pc}
 801457c:	20011618 	.word	0x20011618
 8014580:	0801d4a0 	.word	0x0801d4a0
 8014584:	0801d528 	.word	0x0801d528
 8014588:	0801d500 	.word	0x0801d500
 801458c:	20011614 	.word	0x20011614

08014590 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b084      	sub	sp, #16
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801459c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801459e:	210c      	movs	r1, #12
 80145a0:	68f8      	ldr	r0, [r7, #12]
 80145a2:	f001 f855 	bl	8015650 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80145a6:	4b06      	ldr	r3, [pc, #24]	; (80145c0 <dhcp_handle_nak+0x30>)
 80145a8:	4a05      	ldr	r2, [pc, #20]	; (80145c0 <dhcp_handle_nak+0x30>)
 80145aa:	4905      	ldr	r1, [pc, #20]	; (80145c0 <dhcp_handle_nak+0x30>)
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f7f7 ffab 	bl	800c508 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80145b2:	6878      	ldr	r0, [r7, #4]
 80145b4:	f000 fc48 	bl	8014e48 <dhcp_discover>
}
 80145b8:	bf00      	nop
 80145ba:	3710      	adds	r7, #16
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}
 80145c0:	08028184 	.word	0x08028184

080145c4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b084      	sub	sp, #16
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145d0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80145d2:	2108      	movs	r1, #8
 80145d4:	68f8      	ldr	r0, [r7, #12]
 80145d6:	f001 f83b 	bl	8015650 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	331c      	adds	r3, #28
 80145de:	2200      	movs	r2, #0
 80145e0:	4619      	mov	r1, r3
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f002 fb3c 	bl	8016c60 <etharp_query>
 80145e8:	4603      	mov	r3, r0
 80145ea:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	799b      	ldrb	r3, [r3, #6]
 80145f0:	2bff      	cmp	r3, #255	; 0xff
 80145f2:	d005      	beq.n	8014600 <dhcp_check+0x3c>
    dhcp->tries++;
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	799b      	ldrb	r3, [r3, #6]
 80145f8:	3301      	adds	r3, #1
 80145fa:	b2da      	uxtb	r2, r3
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014600:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014604:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014606:	893b      	ldrh	r3, [r7, #8]
 8014608:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801460c:	4a06      	ldr	r2, [pc, #24]	; (8014628 <dhcp_check+0x64>)
 801460e:	fb82 1203 	smull	r1, r2, r2, r3
 8014612:	1152      	asrs	r2, r2, #5
 8014614:	17db      	asrs	r3, r3, #31
 8014616:	1ad3      	subs	r3, r2, r3
 8014618:	b29a      	uxth	r2, r3
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801461e:	bf00      	nop
 8014620:	3710      	adds	r7, #16
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}
 8014626:	bf00      	nop
 8014628:	10624dd3 	.word	0x10624dd3

0801462c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b084      	sub	sp, #16
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
 8014634:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801463a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801463c:	4b0c      	ldr	r3, [pc, #48]	; (8014670 <dhcp_handle_offer+0x44>)
 801463e:	789b      	ldrb	r3, [r3, #2]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d011      	beq.n	8014668 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	2200      	movs	r2, #0
 8014648:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801464a:	4b0a      	ldr	r3, [pc, #40]	; (8014674 <dhcp_handle_offer+0x48>)
 801464c:	689b      	ldr	r3, [r3, #8]
 801464e:	4618      	mov	r0, r3
 8014650:	f7f7 f849 	bl	800b6e6 <lwip_htonl>
 8014654:	4602      	mov	r2, r0
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801465a:	683b      	ldr	r3, [r7, #0]
 801465c:	691a      	ldr	r2, [r3, #16]
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f000 f808 	bl	8014678 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014668:	bf00      	nop
 801466a:	3710      	adds	r7, #16
 801466c:	46bd      	mov	sp, r7
 801466e:	bd80      	pop	{r7, pc}
 8014670:	2001160c 	.word	0x2001160c
 8014674:	200115ec 	.word	0x200115ec

08014678 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014678:	b5b0      	push	{r4, r5, r7, lr}
 801467a:	b08a      	sub	sp, #40	; 0x28
 801467c:	af02      	add	r7, sp, #8
 801467e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d109      	bne.n	801469a <dhcp_select+0x22>
 8014686:	4b71      	ldr	r3, [pc, #452]	; (801484c <dhcp_select+0x1d4>)
 8014688:	f240 1277 	movw	r2, #375	; 0x177
 801468c:	4970      	ldr	r1, [pc, #448]	; (8014850 <dhcp_select+0x1d8>)
 801468e:	4871      	ldr	r0, [pc, #452]	; (8014854 <dhcp_select+0x1dc>)
 8014690:	f004 fc50 	bl	8018f34 <iprintf>
 8014694:	f06f 030f 	mvn.w	r3, #15
 8014698:	e0d3      	b.n	8014842 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801469e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80146a0:	69bb      	ldr	r3, [r7, #24]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d109      	bne.n	80146ba <dhcp_select+0x42>
 80146a6:	4b69      	ldr	r3, [pc, #420]	; (801484c <dhcp_select+0x1d4>)
 80146a8:	f240 1279 	movw	r2, #377	; 0x179
 80146ac:	496a      	ldr	r1, [pc, #424]	; (8014858 <dhcp_select+0x1e0>)
 80146ae:	4869      	ldr	r0, [pc, #420]	; (8014854 <dhcp_select+0x1dc>)
 80146b0:	f004 fc40 	bl	8018f34 <iprintf>
 80146b4:	f06f 0305 	mvn.w	r3, #5
 80146b8:	e0c3      	b.n	8014842 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80146ba:	2101      	movs	r1, #1
 80146bc:	69b8      	ldr	r0, [r7, #24]
 80146be:	f000 ffc7 	bl	8015650 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80146c2:	f107 030c 	add.w	r3, r7, #12
 80146c6:	2203      	movs	r2, #3
 80146c8:	69b9      	ldr	r1, [r7, #24]
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f001 fc4c 	bl	8015f68 <dhcp_create_msg>
 80146d0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	f000 8085 	beq.w	80147e4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80146da:	697b      	ldr	r3, [r7, #20]
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80146e0:	89b8      	ldrh	r0, [r7, #12]
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146e8:	2302      	movs	r3, #2
 80146ea:	2239      	movs	r2, #57	; 0x39
 80146ec:	f000 ffca 	bl	8015684 <dhcp_option>
 80146f0:	4603      	mov	r3, r0
 80146f2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80146f4:	89b8      	ldrh	r0, [r7, #12]
 80146f6:	693b      	ldr	r3, [r7, #16]
 80146f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014700:	461a      	mov	r2, r3
 8014702:	f001 f819 	bl	8015738 <dhcp_option_short>
 8014706:	4603      	mov	r3, r0
 8014708:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801470a:	89b8      	ldrh	r0, [r7, #12]
 801470c:	693b      	ldr	r3, [r7, #16]
 801470e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014712:	2304      	movs	r3, #4
 8014714:	2232      	movs	r2, #50	; 0x32
 8014716:	f000 ffb5 	bl	8015684 <dhcp_option>
 801471a:	4603      	mov	r3, r0
 801471c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801471e:	89bc      	ldrh	r4, [r7, #12]
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014726:	69bb      	ldr	r3, [r7, #24]
 8014728:	69db      	ldr	r3, [r3, #28]
 801472a:	4618      	mov	r0, r3
 801472c:	f7f6 ffdb 	bl	800b6e6 <lwip_htonl>
 8014730:	4603      	mov	r3, r0
 8014732:	461a      	mov	r2, r3
 8014734:	4629      	mov	r1, r5
 8014736:	4620      	mov	r0, r4
 8014738:	f001 f830 	bl	801579c <dhcp_option_long>
 801473c:	4603      	mov	r3, r0
 801473e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014740:	89b8      	ldrh	r0, [r7, #12]
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014748:	2304      	movs	r3, #4
 801474a:	2236      	movs	r2, #54	; 0x36
 801474c:	f000 ff9a 	bl	8015684 <dhcp_option>
 8014750:	4603      	mov	r3, r0
 8014752:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014754:	89bc      	ldrh	r4, [r7, #12]
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801475c:	69bb      	ldr	r3, [r7, #24]
 801475e:	699b      	ldr	r3, [r3, #24]
 8014760:	4618      	mov	r0, r3
 8014762:	f7f6 ffc0 	bl	800b6e6 <lwip_htonl>
 8014766:	4603      	mov	r3, r0
 8014768:	461a      	mov	r2, r3
 801476a:	4629      	mov	r1, r5
 801476c:	4620      	mov	r0, r4
 801476e:	f001 f815 	bl	801579c <dhcp_option_long>
 8014772:	4603      	mov	r3, r0
 8014774:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014776:	89b8      	ldrh	r0, [r7, #12]
 8014778:	693b      	ldr	r3, [r7, #16]
 801477a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801477e:	2303      	movs	r3, #3
 8014780:	2237      	movs	r2, #55	; 0x37
 8014782:	f000 ff7f 	bl	8015684 <dhcp_option>
 8014786:	4603      	mov	r3, r0
 8014788:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801478a:	2300      	movs	r3, #0
 801478c:	77bb      	strb	r3, [r7, #30]
 801478e:	e00e      	b.n	80147ae <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014790:	89b8      	ldrh	r0, [r7, #12]
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014798:	7fbb      	ldrb	r3, [r7, #30]
 801479a:	4a30      	ldr	r2, [pc, #192]	; (801485c <dhcp_select+0x1e4>)
 801479c:	5cd3      	ldrb	r3, [r2, r3]
 801479e:	461a      	mov	r2, r3
 80147a0:	f000 ffa4 	bl	80156ec <dhcp_option_byte>
 80147a4:	4603      	mov	r3, r0
 80147a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80147a8:	7fbb      	ldrb	r3, [r7, #30]
 80147aa:	3301      	adds	r3, #1
 80147ac:	77bb      	strb	r3, [r7, #30]
 80147ae:	7fbb      	ldrb	r3, [r7, #30]
 80147b0:	2b02      	cmp	r3, #2
 80147b2:	d9ed      	bls.n	8014790 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80147b4:	89b8      	ldrh	r0, [r7, #12]
 80147b6:	693b      	ldr	r3, [r7, #16]
 80147b8:	33f0      	adds	r3, #240	; 0xf0
 80147ba:	697a      	ldr	r2, [r7, #20]
 80147bc:	4619      	mov	r1, r3
 80147be:	f001 fca9 	bl	8016114 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80147c2:	4b27      	ldr	r3, [pc, #156]	; (8014860 <dhcp_select+0x1e8>)
 80147c4:	6818      	ldr	r0, [r3, #0]
 80147c6:	4b27      	ldr	r3, [pc, #156]	; (8014864 <dhcp_select+0x1ec>)
 80147c8:	9301      	str	r3, [sp, #4]
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	9300      	str	r3, [sp, #0]
 80147ce:	2343      	movs	r3, #67	; 0x43
 80147d0:	4a25      	ldr	r2, [pc, #148]	; (8014868 <dhcp_select+0x1f0>)
 80147d2:	6979      	ldr	r1, [r7, #20]
 80147d4:	f7ff fbce 	bl	8013f74 <udp_sendto_if_src>
 80147d8:	4603      	mov	r3, r0
 80147da:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80147dc:	6978      	ldr	r0, [r7, #20]
 80147de:	f7f8 fba1 	bl	800cf24 <pbuf_free>
 80147e2:	e001      	b.n	80147e8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80147e4:	23ff      	movs	r3, #255	; 0xff
 80147e6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80147e8:	69bb      	ldr	r3, [r7, #24]
 80147ea:	799b      	ldrb	r3, [r3, #6]
 80147ec:	2bff      	cmp	r3, #255	; 0xff
 80147ee:	d005      	beq.n	80147fc <dhcp_select+0x184>
    dhcp->tries++;
 80147f0:	69bb      	ldr	r3, [r7, #24]
 80147f2:	799b      	ldrb	r3, [r3, #6]
 80147f4:	3301      	adds	r3, #1
 80147f6:	b2da      	uxtb	r2, r3
 80147f8:	69bb      	ldr	r3, [r7, #24]
 80147fa:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80147fc:	69bb      	ldr	r3, [r7, #24]
 80147fe:	799b      	ldrb	r3, [r3, #6]
 8014800:	2b05      	cmp	r3, #5
 8014802:	d80d      	bhi.n	8014820 <dhcp_select+0x1a8>
 8014804:	69bb      	ldr	r3, [r7, #24]
 8014806:	799b      	ldrb	r3, [r3, #6]
 8014808:	461a      	mov	r2, r3
 801480a:	2301      	movs	r3, #1
 801480c:	4093      	lsls	r3, r2
 801480e:	b29b      	uxth	r3, r3
 8014810:	461a      	mov	r2, r3
 8014812:	0152      	lsls	r2, r2, #5
 8014814:	1ad2      	subs	r2, r2, r3
 8014816:	0092      	lsls	r2, r2, #2
 8014818:	4413      	add	r3, r2
 801481a:	00db      	lsls	r3, r3, #3
 801481c:	b29b      	uxth	r3, r3
 801481e:	e001      	b.n	8014824 <dhcp_select+0x1ac>
 8014820:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014824:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014826:	89fb      	ldrh	r3, [r7, #14]
 8014828:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801482c:	4a0f      	ldr	r2, [pc, #60]	; (801486c <dhcp_select+0x1f4>)
 801482e:	fb82 1203 	smull	r1, r2, r2, r3
 8014832:	1152      	asrs	r2, r2, #5
 8014834:	17db      	asrs	r3, r3, #31
 8014836:	1ad3      	subs	r3, r2, r3
 8014838:	b29a      	uxth	r2, r3
 801483a:	69bb      	ldr	r3, [r7, #24]
 801483c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801483e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014842:	4618      	mov	r0, r3
 8014844:	3720      	adds	r7, #32
 8014846:	46bd      	mov	sp, r7
 8014848:	bdb0      	pop	{r4, r5, r7, pc}
 801484a:	bf00      	nop
 801484c:	0801d4a0 	.word	0x0801d4a0
 8014850:	0801d54c 	.word	0x0801d54c
 8014854:	0801d500 	.word	0x0801d500
 8014858:	0801d568 	.word	0x0801d568
 801485c:	20000030 	.word	0x20000030
 8014860:	20011614 	.word	0x20011614
 8014864:	08028184 	.word	0x08028184
 8014868:	08028188 	.word	0x08028188
 801486c:	10624dd3 	.word	0x10624dd3

08014870 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b082      	sub	sp, #8
 8014874:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014876:	4b27      	ldr	r3, [pc, #156]	; (8014914 <dhcp_coarse_tmr+0xa4>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	607b      	str	r3, [r7, #4]
 801487c:	e042      	b.n	8014904 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014882:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d039      	beq.n	80148fe <dhcp_coarse_tmr+0x8e>
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	795b      	ldrb	r3, [r3, #5]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d035      	beq.n	80148fe <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	8a9b      	ldrh	r3, [r3, #20]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d012      	beq.n	80148c0 <dhcp_coarse_tmr+0x50>
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	8a5b      	ldrh	r3, [r3, #18]
 801489e:	3301      	adds	r3, #1
 80148a0:	b29a      	uxth	r2, r3
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	825a      	strh	r2, [r3, #18]
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	8a5a      	ldrh	r2, [r3, #18]
 80148aa:	683b      	ldr	r3, [r7, #0]
 80148ac:	8a9b      	ldrh	r3, [r3, #20]
 80148ae:	429a      	cmp	r2, r3
 80148b0:	d106      	bne.n	80148c0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80148b2:	6878      	ldr	r0, [r7, #4]
 80148b4:	f000 fe32 	bl	801551c <dhcp_release_and_stop>
        dhcp_start(netif);
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	f000 f969 	bl	8014b90 <dhcp_start>
 80148be:	e01e      	b.n	80148fe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	8a1b      	ldrh	r3, [r3, #16]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d00b      	beq.n	80148e0 <dhcp_coarse_tmr+0x70>
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	8a1b      	ldrh	r3, [r3, #16]
 80148cc:	1e5a      	subs	r2, r3, #1
 80148ce:	b291      	uxth	r1, r2
 80148d0:	683a      	ldr	r2, [r7, #0]
 80148d2:	8211      	strh	r1, [r2, #16]
 80148d4:	2b01      	cmp	r3, #1
 80148d6:	d103      	bne.n	80148e0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80148d8:	6878      	ldr	r0, [r7, #4]
 80148da:	f000 f8c6 	bl	8014a6a <dhcp_t2_timeout>
 80148de:	e00e      	b.n	80148fe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	89db      	ldrh	r3, [r3, #14]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d00a      	beq.n	80148fe <dhcp_coarse_tmr+0x8e>
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	89db      	ldrh	r3, [r3, #14]
 80148ec:	1e5a      	subs	r2, r3, #1
 80148ee:	b291      	uxth	r1, r2
 80148f0:	683a      	ldr	r2, [r7, #0]
 80148f2:	81d1      	strh	r1, [r2, #14]
 80148f4:	2b01      	cmp	r3, #1
 80148f6:	d102      	bne.n	80148fe <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f000 f888 	bl	8014a0e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	607b      	str	r3, [r7, #4]
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d1b9      	bne.n	801487e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801490a:	bf00      	nop
 801490c:	bf00      	nop
 801490e:	3708      	adds	r7, #8
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}
 8014914:	20011580 	.word	0x20011580

08014918 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b082      	sub	sp, #8
 801491c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801491e:	4b16      	ldr	r3, [pc, #88]	; (8014978 <dhcp_fine_tmr+0x60>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	607b      	str	r3, [r7, #4]
 8014924:	e020      	b.n	8014968 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801492a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801492c:	683b      	ldr	r3, [r7, #0]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d017      	beq.n	8014962 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	891b      	ldrh	r3, [r3, #8]
 8014936:	2b01      	cmp	r3, #1
 8014938:	d906      	bls.n	8014948 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	891b      	ldrh	r3, [r3, #8]
 801493e:	3b01      	subs	r3, #1
 8014940:	b29a      	uxth	r2, r3
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	811a      	strh	r2, [r3, #8]
 8014946:	e00c      	b.n	8014962 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	891b      	ldrh	r3, [r3, #8]
 801494c:	2b01      	cmp	r3, #1
 801494e:	d108      	bne.n	8014962 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	891b      	ldrh	r3, [r3, #8]
 8014954:	3b01      	subs	r3, #1
 8014956:	b29a      	uxth	r2, r3
 8014958:	683b      	ldr	r3, [r7, #0]
 801495a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f000 f80d 	bl	801497c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	607b      	str	r3, [r7, #4]
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d1db      	bne.n	8014926 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801496e:	bf00      	nop
 8014970:	bf00      	nop
 8014972:	3708      	adds	r7, #8
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	20011580 	.word	0x20011580

0801497c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b084      	sub	sp, #16
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014988:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	795b      	ldrb	r3, [r3, #5]
 801498e:	2b0c      	cmp	r3, #12
 8014990:	d003      	beq.n	801499a <dhcp_timeout+0x1e>
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	795b      	ldrb	r3, [r3, #5]
 8014996:	2b06      	cmp	r3, #6
 8014998:	d103      	bne.n	80149a2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801499a:	6878      	ldr	r0, [r7, #4]
 801499c:	f000 fa54 	bl	8014e48 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80149a0:	e031      	b.n	8014a06 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	795b      	ldrb	r3, [r3, #5]
 80149a6:	2b01      	cmp	r3, #1
 80149a8:	d10e      	bne.n	80149c8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	799b      	ldrb	r3, [r3, #6]
 80149ae:	2b05      	cmp	r3, #5
 80149b0:	d803      	bhi.n	80149ba <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f7ff fe60 	bl	8014678 <dhcp_select>
}
 80149b8:	e025      	b.n	8014a06 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f000 fdae 	bl	801551c <dhcp_release_and_stop>
      dhcp_start(netif);
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f000 f8e5 	bl	8014b90 <dhcp_start>
}
 80149c6:	e01e      	b.n	8014a06 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	795b      	ldrb	r3, [r3, #5]
 80149cc:	2b08      	cmp	r3, #8
 80149ce:	d10b      	bne.n	80149e8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	799b      	ldrb	r3, [r3, #6]
 80149d4:	2b01      	cmp	r3, #1
 80149d6:	d803      	bhi.n	80149e0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f7ff fdf3 	bl	80145c4 <dhcp_check>
}
 80149de:	e012      	b.n	8014a06 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f000 fad3 	bl	8014f8c <dhcp_bind>
}
 80149e6:	e00e      	b.n	8014a06 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	795b      	ldrb	r3, [r3, #5]
 80149ec:	2b03      	cmp	r3, #3
 80149ee:	d10a      	bne.n	8014a06 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	799b      	ldrb	r3, [r3, #6]
 80149f4:	2b01      	cmp	r3, #1
 80149f6:	d803      	bhi.n	8014a00 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80149f8:	6878      	ldr	r0, [r7, #4]
 80149fa:	f000 fcd9 	bl	80153b0 <dhcp_reboot>
}
 80149fe:	e002      	b.n	8014a06 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f000 fa21 	bl	8014e48 <dhcp_discover>
}
 8014a06:	bf00      	nop
 8014a08:	3710      	adds	r7, #16
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd80      	pop	{r7, pc}

08014a0e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014a0e:	b580      	push	{r7, lr}
 8014a10:	b084      	sub	sp, #16
 8014a12:	af00      	add	r7, sp, #0
 8014a14:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a1a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	795b      	ldrb	r3, [r3, #5]
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d007      	beq.n	8014a34 <dhcp_t1_timeout+0x26>
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	795b      	ldrb	r3, [r3, #5]
 8014a28:	2b0a      	cmp	r3, #10
 8014a2a:	d003      	beq.n	8014a34 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014a30:	2b05      	cmp	r3, #5
 8014a32:	d116      	bne.n	8014a62 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014a34:	6878      	ldr	r0, [r7, #4]
 8014a36:	f000 fb83 	bl	8015140 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	899b      	ldrh	r3, [r3, #12]
 8014a3e:	461a      	mov	r2, r3
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	8a5b      	ldrh	r3, [r3, #18]
 8014a44:	1ad3      	subs	r3, r2, r3
 8014a46:	2b01      	cmp	r3, #1
 8014a48:	dd0b      	ble.n	8014a62 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	899b      	ldrh	r3, [r3, #12]
 8014a4e:	461a      	mov	r2, r3
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	8a5b      	ldrh	r3, [r3, #18]
 8014a54:	1ad3      	subs	r3, r2, r3
 8014a56:	0fda      	lsrs	r2, r3, #31
 8014a58:	4413      	add	r3, r2
 8014a5a:	105b      	asrs	r3, r3, #1
 8014a5c:	b29a      	uxth	r2, r3
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014a62:	bf00      	nop
 8014a64:	3710      	adds	r7, #16
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}

08014a6a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014a6a:	b580      	push	{r7, lr}
 8014a6c:	b084      	sub	sp, #16
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a76:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	795b      	ldrb	r3, [r3, #5]
 8014a7c:	2b01      	cmp	r3, #1
 8014a7e:	d00b      	beq.n	8014a98 <dhcp_t2_timeout+0x2e>
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	795b      	ldrb	r3, [r3, #5]
 8014a84:	2b0a      	cmp	r3, #10
 8014a86:	d007      	beq.n	8014a98 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014a8c:	2b05      	cmp	r3, #5
 8014a8e:	d003      	beq.n	8014a98 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	795b      	ldrb	r3, [r3, #5]
 8014a94:	2b04      	cmp	r3, #4
 8014a96:	d116      	bne.n	8014ac6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f000 fbed 	bl	8015278 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	8a9b      	ldrh	r3, [r3, #20]
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	8a5b      	ldrh	r3, [r3, #18]
 8014aa8:	1ad3      	subs	r3, r2, r3
 8014aaa:	2b01      	cmp	r3, #1
 8014aac:	dd0b      	ble.n	8014ac6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	8a9b      	ldrh	r3, [r3, #20]
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	8a5b      	ldrh	r3, [r3, #18]
 8014ab8:	1ad3      	subs	r3, r2, r3
 8014aba:	0fda      	lsrs	r2, r3, #31
 8014abc:	4413      	add	r3, r2
 8014abe:	105b      	asrs	r3, r3, #1
 8014ac0:	b29a      	uxth	r2, r3
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014ac6:	bf00      	nop
 8014ac8:	3710      	adds	r7, #16
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
	...

08014ad0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b084      	sub	sp, #16
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
 8014ad8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ade:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	2200      	movs	r2, #0
 8014aea:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014aec:	4b26      	ldr	r3, [pc, #152]	; (8014b88 <dhcp_handle_ack+0xb8>)
 8014aee:	78db      	ldrb	r3, [r3, #3]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d003      	beq.n	8014afc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014af4:	4b25      	ldr	r3, [pc, #148]	; (8014b8c <dhcp_handle_ack+0xbc>)
 8014af6:	68da      	ldr	r2, [r3, #12]
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014afc:	4b22      	ldr	r3, [pc, #136]	; (8014b88 <dhcp_handle_ack+0xb8>)
 8014afe:	791b      	ldrb	r3, [r3, #4]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d004      	beq.n	8014b0e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014b04:	4b21      	ldr	r3, [pc, #132]	; (8014b8c <dhcp_handle_ack+0xbc>)
 8014b06:	691a      	ldr	r2, [r3, #16]
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8014b0c:	e004      	b.n	8014b18 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b12:	085a      	lsrs	r2, r3, #1
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014b18:	4b1b      	ldr	r3, [pc, #108]	; (8014b88 <dhcp_handle_ack+0xb8>)
 8014b1a:	795b      	ldrb	r3, [r3, #5]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d004      	beq.n	8014b2a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014b20:	4b1a      	ldr	r3, [pc, #104]	; (8014b8c <dhcp_handle_ack+0xbc>)
 8014b22:	695a      	ldr	r2, [r3, #20]
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	631a      	str	r2, [r3, #48]	; 0x30
 8014b28:	e007      	b.n	8014b3a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014b2e:	4613      	mov	r3, r2
 8014b30:	00db      	lsls	r3, r3, #3
 8014b32:	1a9b      	subs	r3, r3, r2
 8014b34:	08da      	lsrs	r2, r3, #3
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	691a      	ldr	r2, [r3, #16]
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014b42:	4b11      	ldr	r3, [pc, #68]	; (8014b88 <dhcp_handle_ack+0xb8>)
 8014b44:	799b      	ldrb	r3, [r3, #6]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d00b      	beq.n	8014b62 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014b4a:	4b10      	ldr	r3, [pc, #64]	; (8014b8c <dhcp_handle_ack+0xbc>)
 8014b4c:	699b      	ldr	r3, [r3, #24]
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f7f6 fdc9 	bl	800b6e6 <lwip_htonl>
 8014b54:	4602      	mov	r2, r0
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2201      	movs	r2, #1
 8014b5e:	71da      	strb	r2, [r3, #7]
 8014b60:	e002      	b.n	8014b68 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	2200      	movs	r2, #0
 8014b66:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014b68:	4b07      	ldr	r3, [pc, #28]	; (8014b88 <dhcp_handle_ack+0xb8>)
 8014b6a:	79db      	ldrb	r3, [r3, #7]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d007      	beq.n	8014b80 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014b70:	4b06      	ldr	r3, [pc, #24]	; (8014b8c <dhcp_handle_ack+0xbc>)
 8014b72:	69db      	ldr	r3, [r3, #28]
 8014b74:	4618      	mov	r0, r3
 8014b76:	f7f6 fdb6 	bl	800b6e6 <lwip_htonl>
 8014b7a:	4602      	mov	r2, r0
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014b80:	bf00      	nop
 8014b82:	3710      	adds	r7, #16
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}
 8014b88:	2001160c 	.word	0x2001160c
 8014b8c:	200115ec 	.word	0x200115ec

08014b90 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b084      	sub	sp, #16
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d109      	bne.n	8014bb2 <dhcp_start+0x22>
 8014b9e:	4b37      	ldr	r3, [pc, #220]	; (8014c7c <dhcp_start+0xec>)
 8014ba0:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014ba4:	4936      	ldr	r1, [pc, #216]	; (8014c80 <dhcp_start+0xf0>)
 8014ba6:	4837      	ldr	r0, [pc, #220]	; (8014c84 <dhcp_start+0xf4>)
 8014ba8:	f004 f9c4 	bl	8018f34 <iprintf>
 8014bac:	f06f 030f 	mvn.w	r3, #15
 8014bb0:	e060      	b.n	8014c74 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014bb8:	f003 0301 	and.w	r3, r3, #1
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d109      	bne.n	8014bd4 <dhcp_start+0x44>
 8014bc0:	4b2e      	ldr	r3, [pc, #184]	; (8014c7c <dhcp_start+0xec>)
 8014bc2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8014bc6:	4930      	ldr	r1, [pc, #192]	; (8014c88 <dhcp_start+0xf8>)
 8014bc8:	482e      	ldr	r0, [pc, #184]	; (8014c84 <dhcp_start+0xf4>)
 8014bca:	f004 f9b3 	bl	8018f34 <iprintf>
 8014bce:	f06f 030f 	mvn.w	r3, #15
 8014bd2:	e04f      	b.n	8014c74 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bd8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014bde:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014be2:	d202      	bcs.n	8014bea <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014be4:	f04f 33ff 	mov.w	r3, #4294967295
 8014be8:	e044      	b.n	8014c74 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d10d      	bne.n	8014c0c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014bf0:	2034      	movs	r0, #52	; 0x34
 8014bf2:	f7f7 f8cd 	bl	800bd90 <mem_malloc>
 8014bf6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d102      	bne.n	8014c04 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8014c02:	e037      	b.n	8014c74 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	68fa      	ldr	r2, [r7, #12]
 8014c08:	625a      	str	r2, [r3, #36]	; 0x24
 8014c0a:	e005      	b.n	8014c18 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	791b      	ldrb	r3, [r3, #4]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d001      	beq.n	8014c18 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014c14:	f7ff fc92 	bl	801453c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014c18:	2234      	movs	r2, #52	; 0x34
 8014c1a:	2100      	movs	r1, #0
 8014c1c:	68f8      	ldr	r0, [r7, #12]
 8014c1e:	f004 f8ec 	bl	8018dfa <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014c22:	f7ff fc39 	bl	8014498 <dhcp_inc_pcb_refcount>
 8014c26:	4603      	mov	r3, r0
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d002      	beq.n	8014c32 <dhcp_start+0xa2>
    return ERR_MEM;
 8014c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c30:	e020      	b.n	8014c74 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	2201      	movs	r2, #1
 8014c36:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014c3e:	f003 0304 	and.w	r3, r3, #4
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d105      	bne.n	8014c52 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014c46:	2102      	movs	r1, #2
 8014c48:	68f8      	ldr	r0, [r7, #12]
 8014c4a:	f000 fd01 	bl	8015650 <dhcp_set_state>
    return ERR_OK;
 8014c4e:	2300      	movs	r3, #0
 8014c50:	e010      	b.n	8014c74 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f000 f8f8 	bl	8014e48 <dhcp_discover>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014c5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d005      	beq.n	8014c70 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f000 fc59 	bl	801551c <dhcp_release_and_stop>
    return ERR_MEM;
 8014c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c6e:	e001      	b.n	8014c74 <dhcp_start+0xe4>
  }
  return result;
 8014c70:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014c74:	4618      	mov	r0, r3
 8014c76:	3710      	adds	r7, #16
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}
 8014c7c:	0801d4a0 	.word	0x0801d4a0
 8014c80:	0801d584 	.word	0x0801d584
 8014c84:	0801d500 	.word	0x0801d500
 8014c88:	0801d5c8 	.word	0x0801d5c8

08014c8c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b084      	sub	sp, #16
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c98:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d025      	beq.n	8014cec <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	795b      	ldrb	r3, [r3, #5]
 8014ca4:	2b0a      	cmp	r3, #10
 8014ca6:	d008      	beq.n	8014cba <dhcp_network_changed+0x2e>
 8014ca8:	2b0a      	cmp	r3, #10
 8014caa:	dc0d      	bgt.n	8014cc8 <dhcp_network_changed+0x3c>
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d01f      	beq.n	8014cf0 <dhcp_network_changed+0x64>
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	db09      	blt.n	8014cc8 <dhcp_network_changed+0x3c>
 8014cb4:	3b03      	subs	r3, #3
 8014cb6:	2b02      	cmp	r3, #2
 8014cb8:	d806      	bhi.n	8014cc8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	f000 fb75 	bl	80153b0 <dhcp_reboot>
      break;
 8014cc6:	e014      	b.n	8014cf2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	795b      	ldrb	r3, [r3, #5]
 8014ccc:	2b0c      	cmp	r3, #12
 8014cce:	d906      	bls.n	8014cde <dhcp_network_changed+0x52>
 8014cd0:	4b09      	ldr	r3, [pc, #36]	; (8014cf8 <dhcp_network_changed+0x6c>)
 8014cd2:	f240 326d 	movw	r2, #877	; 0x36d
 8014cd6:	4909      	ldr	r1, [pc, #36]	; (8014cfc <dhcp_network_changed+0x70>)
 8014cd8:	4809      	ldr	r0, [pc, #36]	; (8014d00 <dhcp_network_changed+0x74>)
 8014cda:	f004 f92b 	bl	8018f34 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f000 f8af 	bl	8014e48 <dhcp_discover>
      break;
 8014cea:	e002      	b.n	8014cf2 <dhcp_network_changed+0x66>
    return;
 8014cec:	bf00      	nop
 8014cee:	e000      	b.n	8014cf2 <dhcp_network_changed+0x66>
      break;
 8014cf0:	bf00      	nop
  }
}
 8014cf2:	3710      	adds	r7, #16
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}
 8014cf8:	0801d4a0 	.word	0x0801d4a0
 8014cfc:	0801d5ec 	.word	0x0801d5ec
 8014d00:	0801d500 	.word	0x0801d500

08014d04 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b084      	sub	sp, #16
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d107      	bne.n	8014d24 <dhcp_arp_reply+0x20>
 8014d14:	4b0e      	ldr	r3, [pc, #56]	; (8014d50 <dhcp_arp_reply+0x4c>)
 8014d16:	f240 328b 	movw	r2, #907	; 0x38b
 8014d1a:	490e      	ldr	r1, [pc, #56]	; (8014d54 <dhcp_arp_reply+0x50>)
 8014d1c:	480e      	ldr	r0, [pc, #56]	; (8014d58 <dhcp_arp_reply+0x54>)
 8014d1e:	f004 f909 	bl	8018f34 <iprintf>
 8014d22:	e012      	b.n	8014d4a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d28:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d00c      	beq.n	8014d4a <dhcp_arp_reply+0x46>
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	795b      	ldrb	r3, [r3, #5]
 8014d34:	2b08      	cmp	r3, #8
 8014d36:	d108      	bne.n	8014d4a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014d38:	683b      	ldr	r3, [r7, #0]
 8014d3a:	681a      	ldr	r2, [r3, #0]
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	69db      	ldr	r3, [r3, #28]
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d102      	bne.n	8014d4a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f000 f809 	bl	8014d5c <dhcp_decline>
    }
  }
}
 8014d4a:	3710      	adds	r7, #16
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}
 8014d50:	0801d4a0 	.word	0x0801d4a0
 8014d54:	0801d584 	.word	0x0801d584
 8014d58:	0801d500 	.word	0x0801d500

08014d5c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014d5c:	b5b0      	push	{r4, r5, r7, lr}
 8014d5e:	b08a      	sub	sp, #40	; 0x28
 8014d60:	af02      	add	r7, sp, #8
 8014d62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d68:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014d6a:	210c      	movs	r1, #12
 8014d6c:	69b8      	ldr	r0, [r7, #24]
 8014d6e:	f000 fc6f 	bl	8015650 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014d72:	f107 030c 	add.w	r3, r7, #12
 8014d76:	2204      	movs	r2, #4
 8014d78:	69b9      	ldr	r1, [r7, #24]
 8014d7a:	6878      	ldr	r0, [r7, #4]
 8014d7c:	f001 f8f4 	bl	8015f68 <dhcp_create_msg>
 8014d80:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d035      	beq.n	8014df4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	685b      	ldr	r3, [r3, #4]
 8014d8c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014d8e:	89b8      	ldrh	r0, [r7, #12]
 8014d90:	693b      	ldr	r3, [r7, #16]
 8014d92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d96:	2304      	movs	r3, #4
 8014d98:	2232      	movs	r2, #50	; 0x32
 8014d9a:	f000 fc73 	bl	8015684 <dhcp_option>
 8014d9e:	4603      	mov	r3, r0
 8014da0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014da2:	89bc      	ldrh	r4, [r7, #12]
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014daa:	69bb      	ldr	r3, [r7, #24]
 8014dac:	69db      	ldr	r3, [r3, #28]
 8014dae:	4618      	mov	r0, r3
 8014db0:	f7f6 fc99 	bl	800b6e6 <lwip_htonl>
 8014db4:	4603      	mov	r3, r0
 8014db6:	461a      	mov	r2, r3
 8014db8:	4629      	mov	r1, r5
 8014dba:	4620      	mov	r0, r4
 8014dbc:	f000 fcee 	bl	801579c <dhcp_option_long>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014dc4:	89b8      	ldrh	r0, [r7, #12]
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	33f0      	adds	r3, #240	; 0xf0
 8014dca:	697a      	ldr	r2, [r7, #20]
 8014dcc:	4619      	mov	r1, r3
 8014dce:	f001 f9a1 	bl	8016114 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014dd2:	4b19      	ldr	r3, [pc, #100]	; (8014e38 <dhcp_decline+0xdc>)
 8014dd4:	6818      	ldr	r0, [r3, #0]
 8014dd6:	4b19      	ldr	r3, [pc, #100]	; (8014e3c <dhcp_decline+0xe0>)
 8014dd8:	9301      	str	r3, [sp, #4]
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	9300      	str	r3, [sp, #0]
 8014dde:	2343      	movs	r3, #67	; 0x43
 8014de0:	4a17      	ldr	r2, [pc, #92]	; (8014e40 <dhcp_decline+0xe4>)
 8014de2:	6979      	ldr	r1, [r7, #20]
 8014de4:	f7ff f8c6 	bl	8013f74 <udp_sendto_if_src>
 8014de8:	4603      	mov	r3, r0
 8014dea:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014dec:	6978      	ldr	r0, [r7, #20]
 8014dee:	f7f8 f899 	bl	800cf24 <pbuf_free>
 8014df2:	e001      	b.n	8014df8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014df4:	23ff      	movs	r3, #255	; 0xff
 8014df6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	799b      	ldrb	r3, [r3, #6]
 8014dfc:	2bff      	cmp	r3, #255	; 0xff
 8014dfe:	d005      	beq.n	8014e0c <dhcp_decline+0xb0>
    dhcp->tries++;
 8014e00:	69bb      	ldr	r3, [r7, #24]
 8014e02:	799b      	ldrb	r3, [r3, #6]
 8014e04:	3301      	adds	r3, #1
 8014e06:	b2da      	uxtb	r2, r3
 8014e08:	69bb      	ldr	r3, [r7, #24]
 8014e0a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014e0c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014e10:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014e12:	89fb      	ldrh	r3, [r7, #14]
 8014e14:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014e18:	4a0a      	ldr	r2, [pc, #40]	; (8014e44 <dhcp_decline+0xe8>)
 8014e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8014e1e:	1152      	asrs	r2, r2, #5
 8014e20:	17db      	asrs	r3, r3, #31
 8014e22:	1ad3      	subs	r3, r2, r3
 8014e24:	b29a      	uxth	r2, r3
 8014e26:	69bb      	ldr	r3, [r7, #24]
 8014e28:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014e2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014e2e:	4618      	mov	r0, r3
 8014e30:	3720      	adds	r7, #32
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bdb0      	pop	{r4, r5, r7, pc}
 8014e36:	bf00      	nop
 8014e38:	20011614 	.word	0x20011614
 8014e3c:	08028184 	.word	0x08028184
 8014e40:	08028188 	.word	0x08028188
 8014e44:	10624dd3 	.word	0x10624dd3

08014e48 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b08a      	sub	sp, #40	; 0x28
 8014e4c:	af02      	add	r7, sp, #8
 8014e4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e54:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014e56:	2300      	movs	r3, #0
 8014e58:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014e5a:	69bb      	ldr	r3, [r7, #24]
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014e60:	2106      	movs	r1, #6
 8014e62:	69b8      	ldr	r0, [r7, #24]
 8014e64:	f000 fbf4 	bl	8015650 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014e68:	f107 0308 	add.w	r3, r7, #8
 8014e6c:	2201      	movs	r2, #1
 8014e6e:	69b9      	ldr	r1, [r7, #24]
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f001 f879 	bl	8015f68 <dhcp_create_msg>
 8014e76:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014e78:	693b      	ldr	r3, [r7, #16]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d04b      	beq.n	8014f16 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014e7e:	693b      	ldr	r3, [r7, #16]
 8014e80:	685b      	ldr	r3, [r3, #4]
 8014e82:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014e84:	8938      	ldrh	r0, [r7, #8]
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e8c:	2302      	movs	r3, #2
 8014e8e:	2239      	movs	r2, #57	; 0x39
 8014e90:	f000 fbf8 	bl	8015684 <dhcp_option>
 8014e94:	4603      	mov	r3, r0
 8014e96:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014e98:	8938      	ldrh	r0, [r7, #8]
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ea4:	461a      	mov	r2, r3
 8014ea6:	f000 fc47 	bl	8015738 <dhcp_option_short>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014eae:	8938      	ldrh	r0, [r7, #8]
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014eb6:	2303      	movs	r3, #3
 8014eb8:	2237      	movs	r2, #55	; 0x37
 8014eba:	f000 fbe3 	bl	8015684 <dhcp_option>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	77fb      	strb	r3, [r7, #31]
 8014ec6:	e00e      	b.n	8014ee6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014ec8:	8938      	ldrh	r0, [r7, #8]
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ed0:	7ffb      	ldrb	r3, [r7, #31]
 8014ed2:	4a29      	ldr	r2, [pc, #164]	; (8014f78 <dhcp_discover+0x130>)
 8014ed4:	5cd3      	ldrb	r3, [r2, r3]
 8014ed6:	461a      	mov	r2, r3
 8014ed8:	f000 fc08 	bl	80156ec <dhcp_option_byte>
 8014edc:	4603      	mov	r3, r0
 8014ede:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ee0:	7ffb      	ldrb	r3, [r7, #31]
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	77fb      	strb	r3, [r7, #31]
 8014ee6:	7ffb      	ldrb	r3, [r7, #31]
 8014ee8:	2b02      	cmp	r3, #2
 8014eea:	d9ed      	bls.n	8014ec8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014eec:	8938      	ldrh	r0, [r7, #8]
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	33f0      	adds	r3, #240	; 0xf0
 8014ef2:	693a      	ldr	r2, [r7, #16]
 8014ef4:	4619      	mov	r1, r3
 8014ef6:	f001 f90d 	bl	8016114 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014efa:	4b20      	ldr	r3, [pc, #128]	; (8014f7c <dhcp_discover+0x134>)
 8014efc:	6818      	ldr	r0, [r3, #0]
 8014efe:	4b20      	ldr	r3, [pc, #128]	; (8014f80 <dhcp_discover+0x138>)
 8014f00:	9301      	str	r3, [sp, #4]
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	9300      	str	r3, [sp, #0]
 8014f06:	2343      	movs	r3, #67	; 0x43
 8014f08:	4a1e      	ldr	r2, [pc, #120]	; (8014f84 <dhcp_discover+0x13c>)
 8014f0a:	6939      	ldr	r1, [r7, #16]
 8014f0c:	f7ff f832 	bl	8013f74 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014f10:	6938      	ldr	r0, [r7, #16]
 8014f12:	f7f8 f807 	bl	800cf24 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014f16:	69bb      	ldr	r3, [r7, #24]
 8014f18:	799b      	ldrb	r3, [r3, #6]
 8014f1a:	2bff      	cmp	r3, #255	; 0xff
 8014f1c:	d005      	beq.n	8014f2a <dhcp_discover+0xe2>
    dhcp->tries++;
 8014f1e:	69bb      	ldr	r3, [r7, #24]
 8014f20:	799b      	ldrb	r3, [r3, #6]
 8014f22:	3301      	adds	r3, #1
 8014f24:	b2da      	uxtb	r2, r3
 8014f26:	69bb      	ldr	r3, [r7, #24]
 8014f28:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014f2a:	69bb      	ldr	r3, [r7, #24]
 8014f2c:	799b      	ldrb	r3, [r3, #6]
 8014f2e:	2b05      	cmp	r3, #5
 8014f30:	d80d      	bhi.n	8014f4e <dhcp_discover+0x106>
 8014f32:	69bb      	ldr	r3, [r7, #24]
 8014f34:	799b      	ldrb	r3, [r3, #6]
 8014f36:	461a      	mov	r2, r3
 8014f38:	2301      	movs	r3, #1
 8014f3a:	4093      	lsls	r3, r2
 8014f3c:	b29b      	uxth	r3, r3
 8014f3e:	461a      	mov	r2, r3
 8014f40:	0152      	lsls	r2, r2, #5
 8014f42:	1ad2      	subs	r2, r2, r3
 8014f44:	0092      	lsls	r2, r2, #2
 8014f46:	4413      	add	r3, r2
 8014f48:	00db      	lsls	r3, r3, #3
 8014f4a:	b29b      	uxth	r3, r3
 8014f4c:	e001      	b.n	8014f52 <dhcp_discover+0x10a>
 8014f4e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014f52:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014f54:	897b      	ldrh	r3, [r7, #10]
 8014f56:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014f5a:	4a0b      	ldr	r2, [pc, #44]	; (8014f88 <dhcp_discover+0x140>)
 8014f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8014f60:	1152      	asrs	r2, r2, #5
 8014f62:	17db      	asrs	r3, r3, #31
 8014f64:	1ad3      	subs	r3, r2, r3
 8014f66:	b29a      	uxth	r2, r3
 8014f68:	69bb      	ldr	r3, [r7, #24]
 8014f6a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014f6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014f70:	4618      	mov	r0, r3
 8014f72:	3720      	adds	r7, #32
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	20000030 	.word	0x20000030
 8014f7c:	20011614 	.word	0x20011614
 8014f80:	08028184 	.word	0x08028184
 8014f84:	08028188 	.word	0x08028188
 8014f88:	10624dd3 	.word	0x10624dd3

08014f8c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b088      	sub	sp, #32
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d107      	bne.n	8014faa <dhcp_bind+0x1e>
 8014f9a:	4b64      	ldr	r3, [pc, #400]	; (801512c <dhcp_bind+0x1a0>)
 8014f9c:	f240 4215 	movw	r2, #1045	; 0x415
 8014fa0:	4963      	ldr	r1, [pc, #396]	; (8015130 <dhcp_bind+0x1a4>)
 8014fa2:	4864      	ldr	r0, [pc, #400]	; (8015134 <dhcp_bind+0x1a8>)
 8014fa4:	f003 ffc6 	bl	8018f34 <iprintf>
 8014fa8:	e0bc      	b.n	8015124 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fae:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014fb0:	69bb      	ldr	r3, [r7, #24]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d107      	bne.n	8014fc6 <dhcp_bind+0x3a>
 8014fb6:	4b5d      	ldr	r3, [pc, #372]	; (801512c <dhcp_bind+0x1a0>)
 8014fb8:	f240 4217 	movw	r2, #1047	; 0x417
 8014fbc:	495e      	ldr	r1, [pc, #376]	; (8015138 <dhcp_bind+0x1ac>)
 8014fbe:	485d      	ldr	r0, [pc, #372]	; (8015134 <dhcp_bind+0x1a8>)
 8014fc0:	f003 ffb8 	bl	8018f34 <iprintf>
 8014fc4:	e0ae      	b.n	8015124 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014fc6:	69bb      	ldr	r3, [r7, #24]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014fcc:	69bb      	ldr	r3, [r7, #24]
 8014fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fd4:	d019      	beq.n	801500a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014fd6:	69bb      	ldr	r3, [r7, #24]
 8014fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fda:	331e      	adds	r3, #30
 8014fdc:	4a57      	ldr	r2, [pc, #348]	; (801513c <dhcp_bind+0x1b0>)
 8014fde:	fba2 2303 	umull	r2, r3, r2, r3
 8014fe2:	095b      	lsrs	r3, r3, #5
 8014fe4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014fe6:	69fb      	ldr	r3, [r7, #28]
 8014fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014fec:	d302      	bcc.n	8014ff4 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014fee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ff2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014ff4:	69fb      	ldr	r3, [r7, #28]
 8014ff6:	b29a      	uxth	r2, r3
 8014ff8:	69bb      	ldr	r3, [r7, #24]
 8014ffa:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014ffc:	69bb      	ldr	r3, [r7, #24]
 8014ffe:	8a9b      	ldrh	r3, [r3, #20]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d102      	bne.n	801500a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015004:	69bb      	ldr	r3, [r7, #24]
 8015006:	2201      	movs	r2, #1
 8015008:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801500a:	69bb      	ldr	r3, [r7, #24]
 801500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015012:	d01d      	beq.n	8015050 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015014:	69bb      	ldr	r3, [r7, #24]
 8015016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015018:	331e      	adds	r3, #30
 801501a:	4a48      	ldr	r2, [pc, #288]	; (801513c <dhcp_bind+0x1b0>)
 801501c:	fba2 2303 	umull	r2, r3, r2, r3
 8015020:	095b      	lsrs	r3, r3, #5
 8015022:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015024:	69fb      	ldr	r3, [r7, #28]
 8015026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801502a:	d302      	bcc.n	8015032 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801502c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015030:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015032:	69fb      	ldr	r3, [r7, #28]
 8015034:	b29a      	uxth	r2, r3
 8015036:	69bb      	ldr	r3, [r7, #24]
 8015038:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801503a:	69bb      	ldr	r3, [r7, #24]
 801503c:	895b      	ldrh	r3, [r3, #10]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d102      	bne.n	8015048 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8015042:	69bb      	ldr	r3, [r7, #24]
 8015044:	2201      	movs	r2, #1
 8015046:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015048:	69bb      	ldr	r3, [r7, #24]
 801504a:	895a      	ldrh	r2, [r3, #10]
 801504c:	69bb      	ldr	r3, [r7, #24]
 801504e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015050:	69bb      	ldr	r3, [r7, #24]
 8015052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015058:	d01d      	beq.n	8015096 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801505a:	69bb      	ldr	r3, [r7, #24]
 801505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801505e:	331e      	adds	r3, #30
 8015060:	4a36      	ldr	r2, [pc, #216]	; (801513c <dhcp_bind+0x1b0>)
 8015062:	fba2 2303 	umull	r2, r3, r2, r3
 8015066:	095b      	lsrs	r3, r3, #5
 8015068:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801506a:	69fb      	ldr	r3, [r7, #28]
 801506c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015070:	d302      	bcc.n	8015078 <dhcp_bind+0xec>
      timeout = 0xffff;
 8015072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015076:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8015078:	69fb      	ldr	r3, [r7, #28]
 801507a:	b29a      	uxth	r2, r3
 801507c:	69bb      	ldr	r3, [r7, #24]
 801507e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015080:	69bb      	ldr	r3, [r7, #24]
 8015082:	899b      	ldrh	r3, [r3, #12]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d102      	bne.n	801508e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015088:	69bb      	ldr	r3, [r7, #24]
 801508a:	2201      	movs	r2, #1
 801508c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801508e:	69bb      	ldr	r3, [r7, #24]
 8015090:	899a      	ldrh	r2, [r3, #12]
 8015092:	69bb      	ldr	r3, [r7, #24]
 8015094:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	895a      	ldrh	r2, [r3, #10]
 801509a:	69bb      	ldr	r3, [r7, #24]
 801509c:	899b      	ldrh	r3, [r3, #12]
 801509e:	429a      	cmp	r2, r3
 80150a0:	d306      	bcc.n	80150b0 <dhcp_bind+0x124>
 80150a2:	69bb      	ldr	r3, [r7, #24]
 80150a4:	899b      	ldrh	r3, [r3, #12]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d002      	beq.n	80150b0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80150aa:	69bb      	ldr	r3, [r7, #24]
 80150ac:	2200      	movs	r2, #0
 80150ae:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80150b0:	69bb      	ldr	r3, [r7, #24]
 80150b2:	79db      	ldrb	r3, [r3, #7]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d003      	beq.n	80150c0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80150b8:	69bb      	ldr	r3, [r7, #24]
 80150ba:	6a1b      	ldr	r3, [r3, #32]
 80150bc:	613b      	str	r3, [r7, #16]
 80150be:	e014      	b.n	80150ea <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80150c0:	69bb      	ldr	r3, [r7, #24]
 80150c2:	331c      	adds	r3, #28
 80150c4:	781b      	ldrb	r3, [r3, #0]
 80150c6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80150c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	db02      	blt.n	80150d6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80150d0:	23ff      	movs	r3, #255	; 0xff
 80150d2:	613b      	str	r3, [r7, #16]
 80150d4:	e009      	b.n	80150ea <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80150d6:	7dfb      	ldrb	r3, [r7, #23]
 80150d8:	2bbf      	cmp	r3, #191	; 0xbf
 80150da:	d903      	bls.n	80150e4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80150dc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80150e0:	613b      	str	r3, [r7, #16]
 80150e2:	e002      	b.n	80150ea <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80150e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150e8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80150ea:	69bb      	ldr	r3, [r7, #24]
 80150ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150ee:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d108      	bne.n	8015108 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80150f6:	69bb      	ldr	r3, [r7, #24]
 80150f8:	69da      	ldr	r2, [r3, #28]
 80150fa:	693b      	ldr	r3, [r7, #16]
 80150fc:	4013      	ands	r3, r2
 80150fe:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015106:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015108:	210a      	movs	r1, #10
 801510a:	69b8      	ldr	r0, [r7, #24]
 801510c:	f000 faa0 	bl	8015650 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015110:	69bb      	ldr	r3, [r7, #24]
 8015112:	f103 011c 	add.w	r1, r3, #28
 8015116:	f107 030c 	add.w	r3, r7, #12
 801511a:	f107 0210 	add.w	r2, r7, #16
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f7f7 f9f2 	bl	800c508 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015124:	3720      	adds	r7, #32
 8015126:	46bd      	mov	sp, r7
 8015128:	bd80      	pop	{r7, pc}
 801512a:	bf00      	nop
 801512c:	0801d4a0 	.word	0x0801d4a0
 8015130:	0801d600 	.word	0x0801d600
 8015134:	0801d500 	.word	0x0801d500
 8015138:	0801d61c 	.word	0x0801d61c
 801513c:	88888889 	.word	0x88888889

08015140 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b08a      	sub	sp, #40	; 0x28
 8015144:	af02      	add	r7, sp, #8
 8015146:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801514c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801514e:	2105      	movs	r1, #5
 8015150:	69b8      	ldr	r0, [r7, #24]
 8015152:	f000 fa7d 	bl	8015650 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015156:	f107 030c 	add.w	r3, r7, #12
 801515a:	2203      	movs	r2, #3
 801515c:	69b9      	ldr	r1, [r7, #24]
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f000 ff02 	bl	8015f68 <dhcp_create_msg>
 8015164:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d04e      	beq.n	801520a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801516c:	697b      	ldr	r3, [r7, #20]
 801516e:	685b      	ldr	r3, [r3, #4]
 8015170:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015172:	89b8      	ldrh	r0, [r7, #12]
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801517a:	2302      	movs	r3, #2
 801517c:	2239      	movs	r2, #57	; 0x39
 801517e:	f000 fa81 	bl	8015684 <dhcp_option>
 8015182:	4603      	mov	r3, r0
 8015184:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015186:	89b8      	ldrh	r0, [r7, #12]
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015192:	461a      	mov	r2, r3
 8015194:	f000 fad0 	bl	8015738 <dhcp_option_short>
 8015198:	4603      	mov	r3, r0
 801519a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801519c:	89b8      	ldrh	r0, [r7, #12]
 801519e:	693b      	ldr	r3, [r7, #16]
 80151a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151a4:	2303      	movs	r3, #3
 80151a6:	2237      	movs	r2, #55	; 0x37
 80151a8:	f000 fa6c 	bl	8015684 <dhcp_option>
 80151ac:	4603      	mov	r3, r0
 80151ae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80151b0:	2300      	movs	r3, #0
 80151b2:	77bb      	strb	r3, [r7, #30]
 80151b4:	e00e      	b.n	80151d4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80151b6:	89b8      	ldrh	r0, [r7, #12]
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151be:	7fbb      	ldrb	r3, [r7, #30]
 80151c0:	4a2a      	ldr	r2, [pc, #168]	; (801526c <dhcp_renew+0x12c>)
 80151c2:	5cd3      	ldrb	r3, [r2, r3]
 80151c4:	461a      	mov	r2, r3
 80151c6:	f000 fa91 	bl	80156ec <dhcp_option_byte>
 80151ca:	4603      	mov	r3, r0
 80151cc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80151ce:	7fbb      	ldrb	r3, [r7, #30]
 80151d0:	3301      	adds	r3, #1
 80151d2:	77bb      	strb	r3, [r7, #30]
 80151d4:	7fbb      	ldrb	r3, [r7, #30]
 80151d6:	2b02      	cmp	r3, #2
 80151d8:	d9ed      	bls.n	80151b6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80151da:	89b8      	ldrh	r0, [r7, #12]
 80151dc:	693b      	ldr	r3, [r7, #16]
 80151de:	33f0      	adds	r3, #240	; 0xf0
 80151e0:	697a      	ldr	r2, [r7, #20]
 80151e2:	4619      	mov	r1, r3
 80151e4:	f000 ff96 	bl	8016114 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80151e8:	4b21      	ldr	r3, [pc, #132]	; (8015270 <dhcp_renew+0x130>)
 80151ea:	6818      	ldr	r0, [r3, #0]
 80151ec:	69bb      	ldr	r3, [r7, #24]
 80151ee:	f103 0218 	add.w	r2, r3, #24
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	9300      	str	r3, [sp, #0]
 80151f6:	2343      	movs	r3, #67	; 0x43
 80151f8:	6979      	ldr	r1, [r7, #20]
 80151fa:	f7fe fe47 	bl	8013e8c <udp_sendto_if>
 80151fe:	4603      	mov	r3, r0
 8015200:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015202:	6978      	ldr	r0, [r7, #20]
 8015204:	f7f7 fe8e 	bl	800cf24 <pbuf_free>
 8015208:	e001      	b.n	801520e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801520a:	23ff      	movs	r3, #255	; 0xff
 801520c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801520e:	69bb      	ldr	r3, [r7, #24]
 8015210:	799b      	ldrb	r3, [r3, #6]
 8015212:	2bff      	cmp	r3, #255	; 0xff
 8015214:	d005      	beq.n	8015222 <dhcp_renew+0xe2>
    dhcp->tries++;
 8015216:	69bb      	ldr	r3, [r7, #24]
 8015218:	799b      	ldrb	r3, [r3, #6]
 801521a:	3301      	adds	r3, #1
 801521c:	b2da      	uxtb	r2, r3
 801521e:	69bb      	ldr	r3, [r7, #24]
 8015220:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015222:	69bb      	ldr	r3, [r7, #24]
 8015224:	799b      	ldrb	r3, [r3, #6]
 8015226:	2b09      	cmp	r3, #9
 8015228:	d80a      	bhi.n	8015240 <dhcp_renew+0x100>
 801522a:	69bb      	ldr	r3, [r7, #24]
 801522c:	799b      	ldrb	r3, [r3, #6]
 801522e:	b29b      	uxth	r3, r3
 8015230:	461a      	mov	r2, r3
 8015232:	0152      	lsls	r2, r2, #5
 8015234:	1ad2      	subs	r2, r2, r3
 8015236:	0092      	lsls	r2, r2, #2
 8015238:	4413      	add	r3, r2
 801523a:	011b      	lsls	r3, r3, #4
 801523c:	b29b      	uxth	r3, r3
 801523e:	e001      	b.n	8015244 <dhcp_renew+0x104>
 8015240:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015244:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015246:	89fb      	ldrh	r3, [r7, #14]
 8015248:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801524c:	4a09      	ldr	r2, [pc, #36]	; (8015274 <dhcp_renew+0x134>)
 801524e:	fb82 1203 	smull	r1, r2, r2, r3
 8015252:	1152      	asrs	r2, r2, #5
 8015254:	17db      	asrs	r3, r3, #31
 8015256:	1ad3      	subs	r3, r2, r3
 8015258:	b29a      	uxth	r2, r3
 801525a:	69bb      	ldr	r3, [r7, #24]
 801525c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801525e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015262:	4618      	mov	r0, r3
 8015264:	3720      	adds	r7, #32
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}
 801526a:	bf00      	nop
 801526c:	20000030 	.word	0x20000030
 8015270:	20011614 	.word	0x20011614
 8015274:	10624dd3 	.word	0x10624dd3

08015278 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b08a      	sub	sp, #40	; 0x28
 801527c:	af02      	add	r7, sp, #8
 801527e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015284:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015286:	2104      	movs	r1, #4
 8015288:	69b8      	ldr	r0, [r7, #24]
 801528a:	f000 f9e1 	bl	8015650 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801528e:	f107 030c 	add.w	r3, r7, #12
 8015292:	2203      	movs	r2, #3
 8015294:	69b9      	ldr	r1, [r7, #24]
 8015296:	6878      	ldr	r0, [r7, #4]
 8015298:	f000 fe66 	bl	8015f68 <dhcp_create_msg>
 801529c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d04c      	beq.n	801533e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80152a4:	697b      	ldr	r3, [r7, #20]
 80152a6:	685b      	ldr	r3, [r3, #4]
 80152a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80152aa:	89b8      	ldrh	r0, [r7, #12]
 80152ac:	693b      	ldr	r3, [r7, #16]
 80152ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152b2:	2302      	movs	r3, #2
 80152b4:	2239      	movs	r2, #57	; 0x39
 80152b6:	f000 f9e5 	bl	8015684 <dhcp_option>
 80152ba:	4603      	mov	r3, r0
 80152bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80152be:	89b8      	ldrh	r0, [r7, #12]
 80152c0:	693b      	ldr	r3, [r7, #16]
 80152c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80152ca:	461a      	mov	r2, r3
 80152cc:	f000 fa34 	bl	8015738 <dhcp_option_short>
 80152d0:	4603      	mov	r3, r0
 80152d2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80152d4:	89b8      	ldrh	r0, [r7, #12]
 80152d6:	693b      	ldr	r3, [r7, #16]
 80152d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152dc:	2303      	movs	r3, #3
 80152de:	2237      	movs	r2, #55	; 0x37
 80152e0:	f000 f9d0 	bl	8015684 <dhcp_option>
 80152e4:	4603      	mov	r3, r0
 80152e6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80152e8:	2300      	movs	r3, #0
 80152ea:	77bb      	strb	r3, [r7, #30]
 80152ec:	e00e      	b.n	801530c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80152ee:	89b8      	ldrh	r0, [r7, #12]
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152f6:	7fbb      	ldrb	r3, [r7, #30]
 80152f8:	4a29      	ldr	r2, [pc, #164]	; (80153a0 <dhcp_rebind+0x128>)
 80152fa:	5cd3      	ldrb	r3, [r2, r3]
 80152fc:	461a      	mov	r2, r3
 80152fe:	f000 f9f5 	bl	80156ec <dhcp_option_byte>
 8015302:	4603      	mov	r3, r0
 8015304:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015306:	7fbb      	ldrb	r3, [r7, #30]
 8015308:	3301      	adds	r3, #1
 801530a:	77bb      	strb	r3, [r7, #30]
 801530c:	7fbb      	ldrb	r3, [r7, #30]
 801530e:	2b02      	cmp	r3, #2
 8015310:	d9ed      	bls.n	80152ee <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015312:	89b8      	ldrh	r0, [r7, #12]
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	33f0      	adds	r3, #240	; 0xf0
 8015318:	697a      	ldr	r2, [r7, #20]
 801531a:	4619      	mov	r1, r3
 801531c:	f000 fefa 	bl	8016114 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015320:	4b20      	ldr	r3, [pc, #128]	; (80153a4 <dhcp_rebind+0x12c>)
 8015322:	6818      	ldr	r0, [r3, #0]
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	9300      	str	r3, [sp, #0]
 8015328:	2343      	movs	r3, #67	; 0x43
 801532a:	4a1f      	ldr	r2, [pc, #124]	; (80153a8 <dhcp_rebind+0x130>)
 801532c:	6979      	ldr	r1, [r7, #20]
 801532e:	f7fe fdad 	bl	8013e8c <udp_sendto_if>
 8015332:	4603      	mov	r3, r0
 8015334:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015336:	6978      	ldr	r0, [r7, #20]
 8015338:	f7f7 fdf4 	bl	800cf24 <pbuf_free>
 801533c:	e001      	b.n	8015342 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801533e:	23ff      	movs	r3, #255	; 0xff
 8015340:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015342:	69bb      	ldr	r3, [r7, #24]
 8015344:	799b      	ldrb	r3, [r3, #6]
 8015346:	2bff      	cmp	r3, #255	; 0xff
 8015348:	d005      	beq.n	8015356 <dhcp_rebind+0xde>
    dhcp->tries++;
 801534a:	69bb      	ldr	r3, [r7, #24]
 801534c:	799b      	ldrb	r3, [r3, #6]
 801534e:	3301      	adds	r3, #1
 8015350:	b2da      	uxtb	r2, r3
 8015352:	69bb      	ldr	r3, [r7, #24]
 8015354:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015356:	69bb      	ldr	r3, [r7, #24]
 8015358:	799b      	ldrb	r3, [r3, #6]
 801535a:	2b09      	cmp	r3, #9
 801535c:	d80a      	bhi.n	8015374 <dhcp_rebind+0xfc>
 801535e:	69bb      	ldr	r3, [r7, #24]
 8015360:	799b      	ldrb	r3, [r3, #6]
 8015362:	b29b      	uxth	r3, r3
 8015364:	461a      	mov	r2, r3
 8015366:	0152      	lsls	r2, r2, #5
 8015368:	1ad2      	subs	r2, r2, r3
 801536a:	0092      	lsls	r2, r2, #2
 801536c:	4413      	add	r3, r2
 801536e:	00db      	lsls	r3, r3, #3
 8015370:	b29b      	uxth	r3, r3
 8015372:	e001      	b.n	8015378 <dhcp_rebind+0x100>
 8015374:	f242 7310 	movw	r3, #10000	; 0x2710
 8015378:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801537a:	89fb      	ldrh	r3, [r7, #14]
 801537c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015380:	4a0a      	ldr	r2, [pc, #40]	; (80153ac <dhcp_rebind+0x134>)
 8015382:	fb82 1203 	smull	r1, r2, r2, r3
 8015386:	1152      	asrs	r2, r2, #5
 8015388:	17db      	asrs	r3, r3, #31
 801538a:	1ad3      	subs	r3, r2, r3
 801538c:	b29a      	uxth	r2, r3
 801538e:	69bb      	ldr	r3, [r7, #24]
 8015390:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015392:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015396:	4618      	mov	r0, r3
 8015398:	3720      	adds	r7, #32
 801539a:	46bd      	mov	sp, r7
 801539c:	bd80      	pop	{r7, pc}
 801539e:	bf00      	nop
 80153a0:	20000030 	.word	0x20000030
 80153a4:	20011614 	.word	0x20011614
 80153a8:	08028188 	.word	0x08028188
 80153ac:	10624dd3 	.word	0x10624dd3

080153b0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80153b0:	b5b0      	push	{r4, r5, r7, lr}
 80153b2:	b08a      	sub	sp, #40	; 0x28
 80153b4:	af02      	add	r7, sp, #8
 80153b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153bc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80153be:	2103      	movs	r1, #3
 80153c0:	69b8      	ldr	r0, [r7, #24]
 80153c2:	f000 f945 	bl	8015650 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80153c6:	f107 030c 	add.w	r3, r7, #12
 80153ca:	2203      	movs	r2, #3
 80153cc:	69b9      	ldr	r1, [r7, #24]
 80153ce:	6878      	ldr	r0, [r7, #4]
 80153d0:	f000 fdca 	bl	8015f68 <dhcp_create_msg>
 80153d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80153d6:	697b      	ldr	r3, [r7, #20]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d066      	beq.n	80154aa <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	685b      	ldr	r3, [r3, #4]
 80153e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80153e2:	89b8      	ldrh	r0, [r7, #12]
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80153ea:	2302      	movs	r3, #2
 80153ec:	2239      	movs	r2, #57	; 0x39
 80153ee:	f000 f949 	bl	8015684 <dhcp_option>
 80153f2:	4603      	mov	r3, r0
 80153f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80153f6:	89b8      	ldrh	r0, [r7, #12]
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	33f0      	adds	r3, #240	; 0xf0
 80153fc:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015400:	4619      	mov	r1, r3
 8015402:	f000 f999 	bl	8015738 <dhcp_option_short>
 8015406:	4603      	mov	r3, r0
 8015408:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801540a:	89b8      	ldrh	r0, [r7, #12]
 801540c:	693b      	ldr	r3, [r7, #16]
 801540e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015412:	2304      	movs	r3, #4
 8015414:	2232      	movs	r2, #50	; 0x32
 8015416:	f000 f935 	bl	8015684 <dhcp_option>
 801541a:	4603      	mov	r3, r0
 801541c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801541e:	89bc      	ldrh	r4, [r7, #12]
 8015420:	693b      	ldr	r3, [r7, #16]
 8015422:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015426:	69bb      	ldr	r3, [r7, #24]
 8015428:	69db      	ldr	r3, [r3, #28]
 801542a:	4618      	mov	r0, r3
 801542c:	f7f6 f95b 	bl	800b6e6 <lwip_htonl>
 8015430:	4603      	mov	r3, r0
 8015432:	461a      	mov	r2, r3
 8015434:	4629      	mov	r1, r5
 8015436:	4620      	mov	r0, r4
 8015438:	f000 f9b0 	bl	801579c <dhcp_option_long>
 801543c:	4603      	mov	r3, r0
 801543e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015440:	89b8      	ldrh	r0, [r7, #12]
 8015442:	693b      	ldr	r3, [r7, #16]
 8015444:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015448:	2303      	movs	r3, #3
 801544a:	2237      	movs	r2, #55	; 0x37
 801544c:	f000 f91a 	bl	8015684 <dhcp_option>
 8015450:	4603      	mov	r3, r0
 8015452:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015454:	2300      	movs	r3, #0
 8015456:	77bb      	strb	r3, [r7, #30]
 8015458:	e00e      	b.n	8015478 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801545a:	89b8      	ldrh	r0, [r7, #12]
 801545c:	693b      	ldr	r3, [r7, #16]
 801545e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015462:	7fbb      	ldrb	r3, [r7, #30]
 8015464:	4a29      	ldr	r2, [pc, #164]	; (801550c <dhcp_reboot+0x15c>)
 8015466:	5cd3      	ldrb	r3, [r2, r3]
 8015468:	461a      	mov	r2, r3
 801546a:	f000 f93f 	bl	80156ec <dhcp_option_byte>
 801546e:	4603      	mov	r3, r0
 8015470:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015472:	7fbb      	ldrb	r3, [r7, #30]
 8015474:	3301      	adds	r3, #1
 8015476:	77bb      	strb	r3, [r7, #30]
 8015478:	7fbb      	ldrb	r3, [r7, #30]
 801547a:	2b02      	cmp	r3, #2
 801547c:	d9ed      	bls.n	801545a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801547e:	89b8      	ldrh	r0, [r7, #12]
 8015480:	693b      	ldr	r3, [r7, #16]
 8015482:	33f0      	adds	r3, #240	; 0xf0
 8015484:	697a      	ldr	r2, [r7, #20]
 8015486:	4619      	mov	r1, r3
 8015488:	f000 fe44 	bl	8016114 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801548c:	4b20      	ldr	r3, [pc, #128]	; (8015510 <dhcp_reboot+0x160>)
 801548e:	6818      	ldr	r0, [r3, #0]
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	9300      	str	r3, [sp, #0]
 8015494:	2343      	movs	r3, #67	; 0x43
 8015496:	4a1f      	ldr	r2, [pc, #124]	; (8015514 <dhcp_reboot+0x164>)
 8015498:	6979      	ldr	r1, [r7, #20]
 801549a:	f7fe fcf7 	bl	8013e8c <udp_sendto_if>
 801549e:	4603      	mov	r3, r0
 80154a0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80154a2:	6978      	ldr	r0, [r7, #20]
 80154a4:	f7f7 fd3e 	bl	800cf24 <pbuf_free>
 80154a8:	e001      	b.n	80154ae <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80154aa:	23ff      	movs	r3, #255	; 0xff
 80154ac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80154ae:	69bb      	ldr	r3, [r7, #24]
 80154b0:	799b      	ldrb	r3, [r3, #6]
 80154b2:	2bff      	cmp	r3, #255	; 0xff
 80154b4:	d005      	beq.n	80154c2 <dhcp_reboot+0x112>
    dhcp->tries++;
 80154b6:	69bb      	ldr	r3, [r7, #24]
 80154b8:	799b      	ldrb	r3, [r3, #6]
 80154ba:	3301      	adds	r3, #1
 80154bc:	b2da      	uxtb	r2, r3
 80154be:	69bb      	ldr	r3, [r7, #24]
 80154c0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80154c2:	69bb      	ldr	r3, [r7, #24]
 80154c4:	799b      	ldrb	r3, [r3, #6]
 80154c6:	2b09      	cmp	r3, #9
 80154c8:	d80a      	bhi.n	80154e0 <dhcp_reboot+0x130>
 80154ca:	69bb      	ldr	r3, [r7, #24]
 80154cc:	799b      	ldrb	r3, [r3, #6]
 80154ce:	b29b      	uxth	r3, r3
 80154d0:	461a      	mov	r2, r3
 80154d2:	0152      	lsls	r2, r2, #5
 80154d4:	1ad2      	subs	r2, r2, r3
 80154d6:	0092      	lsls	r2, r2, #2
 80154d8:	4413      	add	r3, r2
 80154da:	00db      	lsls	r3, r3, #3
 80154dc:	b29b      	uxth	r3, r3
 80154de:	e001      	b.n	80154e4 <dhcp_reboot+0x134>
 80154e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80154e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80154e6:	89fb      	ldrh	r3, [r7, #14]
 80154e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80154ec:	4a0a      	ldr	r2, [pc, #40]	; (8015518 <dhcp_reboot+0x168>)
 80154ee:	fb82 1203 	smull	r1, r2, r2, r3
 80154f2:	1152      	asrs	r2, r2, #5
 80154f4:	17db      	asrs	r3, r3, #31
 80154f6:	1ad3      	subs	r3, r2, r3
 80154f8:	b29a      	uxth	r2, r3
 80154fa:	69bb      	ldr	r3, [r7, #24]
 80154fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80154fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015502:	4618      	mov	r0, r3
 8015504:	3720      	adds	r7, #32
 8015506:	46bd      	mov	sp, r7
 8015508:	bdb0      	pop	{r4, r5, r7, pc}
 801550a:	bf00      	nop
 801550c:	20000030 	.word	0x20000030
 8015510:	20011614 	.word	0x20011614
 8015514:	08028188 	.word	0x08028188
 8015518:	10624dd3 	.word	0x10624dd3

0801551c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801551c:	b5b0      	push	{r4, r5, r7, lr}
 801551e:	b08a      	sub	sp, #40	; 0x28
 8015520:	af02      	add	r7, sp, #8
 8015522:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015528:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801552a:	69fb      	ldr	r3, [r7, #28]
 801552c:	2b00      	cmp	r3, #0
 801552e:	f000 8084 	beq.w	801563a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015532:	69fb      	ldr	r3, [r7, #28]
 8015534:	795b      	ldrb	r3, [r3, #5]
 8015536:	2b00      	cmp	r3, #0
 8015538:	f000 8081 	beq.w	801563e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801553c:	69fb      	ldr	r3, [r7, #28]
 801553e:	699b      	ldr	r3, [r3, #24]
 8015540:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015542:	69fb      	ldr	r3, [r7, #28]
 8015544:	2200      	movs	r2, #0
 8015546:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015548:	69fb      	ldr	r3, [r7, #28]
 801554a:	2200      	movs	r2, #0
 801554c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801554e:	69fb      	ldr	r3, [r7, #28]
 8015550:	2200      	movs	r2, #0
 8015552:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015554:	69fb      	ldr	r3, [r7, #28]
 8015556:	2200      	movs	r2, #0
 8015558:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801555a:	69fb      	ldr	r3, [r7, #28]
 801555c:	2200      	movs	r2, #0
 801555e:	631a      	str	r2, [r3, #48]	; 0x30
 8015560:	69fb      	ldr	r3, [r7, #28]
 8015562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015564:	69fb      	ldr	r3, [r7, #28]
 8015566:	62da      	str	r2, [r3, #44]	; 0x2c
 8015568:	69fb      	ldr	r3, [r7, #28]
 801556a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801556c:	69fb      	ldr	r3, [r7, #28]
 801556e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015570:	69fb      	ldr	r3, [r7, #28]
 8015572:	2200      	movs	r2, #0
 8015574:	829a      	strh	r2, [r3, #20]
 8015576:	69fb      	ldr	r3, [r7, #28]
 8015578:	8a9a      	ldrh	r2, [r3, #20]
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	825a      	strh	r2, [r3, #18]
 801557e:	69fb      	ldr	r3, [r7, #28]
 8015580:	8a5a      	ldrh	r2, [r3, #18]
 8015582:	69fb      	ldr	r3, [r7, #28]
 8015584:	821a      	strh	r2, [r3, #16]
 8015586:	69fb      	ldr	r3, [r7, #28]
 8015588:	8a1a      	ldrh	r2, [r3, #16]
 801558a:	69fb      	ldr	r3, [r7, #28]
 801558c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801558e:	6878      	ldr	r0, [r7, #4]
 8015590:	f000 fdee 	bl	8016170 <dhcp_supplied_address>
 8015594:	4603      	mov	r3, r0
 8015596:	2b00      	cmp	r3, #0
 8015598:	d03b      	beq.n	8015612 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801559a:	f107 030e 	add.w	r3, r7, #14
 801559e:	2207      	movs	r2, #7
 80155a0:	69f9      	ldr	r1, [r7, #28]
 80155a2:	6878      	ldr	r0, [r7, #4]
 80155a4:	f000 fce0 	bl	8015f68 <dhcp_create_msg>
 80155a8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80155aa:	69bb      	ldr	r3, [r7, #24]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d030      	beq.n	8015612 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80155b0:	69bb      	ldr	r3, [r7, #24]
 80155b2:	685b      	ldr	r3, [r3, #4]
 80155b4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80155b6:	89f8      	ldrh	r0, [r7, #14]
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155be:	2304      	movs	r3, #4
 80155c0:	2236      	movs	r2, #54	; 0x36
 80155c2:	f000 f85f 	bl	8015684 <dhcp_option>
 80155c6:	4603      	mov	r3, r0
 80155c8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80155ca:	89fc      	ldrh	r4, [r7, #14]
 80155cc:	697b      	ldr	r3, [r7, #20]
 80155ce:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80155d2:	693b      	ldr	r3, [r7, #16]
 80155d4:	4618      	mov	r0, r3
 80155d6:	f7f6 f886 	bl	800b6e6 <lwip_htonl>
 80155da:	4603      	mov	r3, r0
 80155dc:	461a      	mov	r2, r3
 80155de:	4629      	mov	r1, r5
 80155e0:	4620      	mov	r0, r4
 80155e2:	f000 f8db 	bl	801579c <dhcp_option_long>
 80155e6:	4603      	mov	r3, r0
 80155e8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80155ea:	89f8      	ldrh	r0, [r7, #14]
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	33f0      	adds	r3, #240	; 0xf0
 80155f0:	69ba      	ldr	r2, [r7, #24]
 80155f2:	4619      	mov	r1, r3
 80155f4:	f000 fd8e 	bl	8016114 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80155f8:	4b13      	ldr	r3, [pc, #76]	; (8015648 <dhcp_release_and_stop+0x12c>)
 80155fa:	6818      	ldr	r0, [r3, #0]
 80155fc:	f107 0210 	add.w	r2, r7, #16
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	9300      	str	r3, [sp, #0]
 8015604:	2343      	movs	r3, #67	; 0x43
 8015606:	69b9      	ldr	r1, [r7, #24]
 8015608:	f7fe fc40 	bl	8013e8c <udp_sendto_if>
      pbuf_free(p_out);
 801560c:	69b8      	ldr	r0, [r7, #24]
 801560e:	f7f7 fc89 	bl	800cf24 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015612:	4b0e      	ldr	r3, [pc, #56]	; (801564c <dhcp_release_and_stop+0x130>)
 8015614:	4a0d      	ldr	r2, [pc, #52]	; (801564c <dhcp_release_and_stop+0x130>)
 8015616:	490d      	ldr	r1, [pc, #52]	; (801564c <dhcp_release_and_stop+0x130>)
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	f7f6 ff75 	bl	800c508 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801561e:	2100      	movs	r1, #0
 8015620:	69f8      	ldr	r0, [r7, #28]
 8015622:	f000 f815 	bl	8015650 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015626:	69fb      	ldr	r3, [r7, #28]
 8015628:	791b      	ldrb	r3, [r3, #4]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d008      	beq.n	8015640 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801562e:	f7fe ff85 	bl	801453c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015632:	69fb      	ldr	r3, [r7, #28]
 8015634:	2200      	movs	r2, #0
 8015636:	711a      	strb	r2, [r3, #4]
 8015638:	e002      	b.n	8015640 <dhcp_release_and_stop+0x124>
    return;
 801563a:	bf00      	nop
 801563c:	e000      	b.n	8015640 <dhcp_release_and_stop+0x124>
    return;
 801563e:	bf00      	nop
  }
}
 8015640:	3720      	adds	r7, #32
 8015642:	46bd      	mov	sp, r7
 8015644:	bdb0      	pop	{r4, r5, r7, pc}
 8015646:	bf00      	nop
 8015648:	20011614 	.word	0x20011614
 801564c:	08028184 	.word	0x08028184

08015650 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015650:	b480      	push	{r7}
 8015652:	b083      	sub	sp, #12
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
 8015658:	460b      	mov	r3, r1
 801565a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	795b      	ldrb	r3, [r3, #5]
 8015660:	78fa      	ldrb	r2, [r7, #3]
 8015662:	429a      	cmp	r2, r3
 8015664:	d008      	beq.n	8015678 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	78fa      	ldrb	r2, [r7, #3]
 801566a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2200      	movs	r2, #0
 8015670:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	2200      	movs	r2, #0
 8015676:	811a      	strh	r2, [r3, #8]
  }
}
 8015678:	bf00      	nop
 801567a:	370c      	adds	r7, #12
 801567c:	46bd      	mov	sp, r7
 801567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015682:	4770      	bx	lr

08015684 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b082      	sub	sp, #8
 8015688:	af00      	add	r7, sp, #0
 801568a:	6039      	str	r1, [r7, #0]
 801568c:	4611      	mov	r1, r2
 801568e:	461a      	mov	r2, r3
 8015690:	4603      	mov	r3, r0
 8015692:	80fb      	strh	r3, [r7, #6]
 8015694:	460b      	mov	r3, r1
 8015696:	717b      	strb	r3, [r7, #5]
 8015698:	4613      	mov	r3, r2
 801569a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801569c:	88fa      	ldrh	r2, [r7, #6]
 801569e:	793b      	ldrb	r3, [r7, #4]
 80156a0:	4413      	add	r3, r2
 80156a2:	3302      	adds	r3, #2
 80156a4:	2b44      	cmp	r3, #68	; 0x44
 80156a6:	d906      	bls.n	80156b6 <dhcp_option+0x32>
 80156a8:	4b0d      	ldr	r3, [pc, #52]	; (80156e0 <dhcp_option+0x5c>)
 80156aa:	f240 529a 	movw	r2, #1434	; 0x59a
 80156ae:	490d      	ldr	r1, [pc, #52]	; (80156e4 <dhcp_option+0x60>)
 80156b0:	480d      	ldr	r0, [pc, #52]	; (80156e8 <dhcp_option+0x64>)
 80156b2:	f003 fc3f 	bl	8018f34 <iprintf>
  options[options_out_len++] = option_type;
 80156b6:	88fb      	ldrh	r3, [r7, #6]
 80156b8:	1c5a      	adds	r2, r3, #1
 80156ba:	80fa      	strh	r2, [r7, #6]
 80156bc:	461a      	mov	r2, r3
 80156be:	683b      	ldr	r3, [r7, #0]
 80156c0:	4413      	add	r3, r2
 80156c2:	797a      	ldrb	r2, [r7, #5]
 80156c4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80156c6:	88fb      	ldrh	r3, [r7, #6]
 80156c8:	1c5a      	adds	r2, r3, #1
 80156ca:	80fa      	strh	r2, [r7, #6]
 80156cc:	461a      	mov	r2, r3
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	4413      	add	r3, r2
 80156d2:	793a      	ldrb	r2, [r7, #4]
 80156d4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80156d6:	88fb      	ldrh	r3, [r7, #6]
}
 80156d8:	4618      	mov	r0, r3
 80156da:	3708      	adds	r7, #8
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}
 80156e0:	0801d4a0 	.word	0x0801d4a0
 80156e4:	0801d634 	.word	0x0801d634
 80156e8:	0801d500 	.word	0x0801d500

080156ec <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b082      	sub	sp, #8
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	4603      	mov	r3, r0
 80156f4:	6039      	str	r1, [r7, #0]
 80156f6:	80fb      	strh	r3, [r7, #6]
 80156f8:	4613      	mov	r3, r2
 80156fa:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80156fc:	88fb      	ldrh	r3, [r7, #6]
 80156fe:	2b43      	cmp	r3, #67	; 0x43
 8015700:	d906      	bls.n	8015710 <dhcp_option_byte+0x24>
 8015702:	4b0a      	ldr	r3, [pc, #40]	; (801572c <dhcp_option_byte+0x40>)
 8015704:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015708:	4909      	ldr	r1, [pc, #36]	; (8015730 <dhcp_option_byte+0x44>)
 801570a:	480a      	ldr	r0, [pc, #40]	; (8015734 <dhcp_option_byte+0x48>)
 801570c:	f003 fc12 	bl	8018f34 <iprintf>
  options[options_out_len++] = value;
 8015710:	88fb      	ldrh	r3, [r7, #6]
 8015712:	1c5a      	adds	r2, r3, #1
 8015714:	80fa      	strh	r2, [r7, #6]
 8015716:	461a      	mov	r2, r3
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	4413      	add	r3, r2
 801571c:	797a      	ldrb	r2, [r7, #5]
 801571e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015720:	88fb      	ldrh	r3, [r7, #6]
}
 8015722:	4618      	mov	r0, r3
 8015724:	3708      	adds	r7, #8
 8015726:	46bd      	mov	sp, r7
 8015728:	bd80      	pop	{r7, pc}
 801572a:	bf00      	nop
 801572c:	0801d4a0 	.word	0x0801d4a0
 8015730:	0801d678 	.word	0x0801d678
 8015734:	0801d500 	.word	0x0801d500

08015738 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b082      	sub	sp, #8
 801573c:	af00      	add	r7, sp, #0
 801573e:	4603      	mov	r3, r0
 8015740:	6039      	str	r1, [r7, #0]
 8015742:	80fb      	strh	r3, [r7, #6]
 8015744:	4613      	mov	r3, r2
 8015746:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015748:	88fb      	ldrh	r3, [r7, #6]
 801574a:	3302      	adds	r3, #2
 801574c:	2b44      	cmp	r3, #68	; 0x44
 801574e:	d906      	bls.n	801575e <dhcp_option_short+0x26>
 8015750:	4b0f      	ldr	r3, [pc, #60]	; (8015790 <dhcp_option_short+0x58>)
 8015752:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015756:	490f      	ldr	r1, [pc, #60]	; (8015794 <dhcp_option_short+0x5c>)
 8015758:	480f      	ldr	r0, [pc, #60]	; (8015798 <dhcp_option_short+0x60>)
 801575a:	f003 fbeb 	bl	8018f34 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801575e:	88bb      	ldrh	r3, [r7, #4]
 8015760:	0a1b      	lsrs	r3, r3, #8
 8015762:	b29a      	uxth	r2, r3
 8015764:	88fb      	ldrh	r3, [r7, #6]
 8015766:	1c59      	adds	r1, r3, #1
 8015768:	80f9      	strh	r1, [r7, #6]
 801576a:	4619      	mov	r1, r3
 801576c:	683b      	ldr	r3, [r7, #0]
 801576e:	440b      	add	r3, r1
 8015770:	b2d2      	uxtb	r2, r2
 8015772:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015774:	88fb      	ldrh	r3, [r7, #6]
 8015776:	1c5a      	adds	r2, r3, #1
 8015778:	80fa      	strh	r2, [r7, #6]
 801577a:	461a      	mov	r2, r3
 801577c:	683b      	ldr	r3, [r7, #0]
 801577e:	4413      	add	r3, r2
 8015780:	88ba      	ldrh	r2, [r7, #4]
 8015782:	b2d2      	uxtb	r2, r2
 8015784:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015786:	88fb      	ldrh	r3, [r7, #6]
}
 8015788:	4618      	mov	r0, r3
 801578a:	3708      	adds	r7, #8
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}
 8015790:	0801d4a0 	.word	0x0801d4a0
 8015794:	0801d6b0 	.word	0x0801d6b0
 8015798:	0801d500 	.word	0x0801d500

0801579c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b084      	sub	sp, #16
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	4603      	mov	r3, r0
 80157a4:	60b9      	str	r1, [r7, #8]
 80157a6:	607a      	str	r2, [r7, #4]
 80157a8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80157aa:	89fb      	ldrh	r3, [r7, #14]
 80157ac:	3304      	adds	r3, #4
 80157ae:	2b44      	cmp	r3, #68	; 0x44
 80157b0:	d906      	bls.n	80157c0 <dhcp_option_long+0x24>
 80157b2:	4b19      	ldr	r3, [pc, #100]	; (8015818 <dhcp_option_long+0x7c>)
 80157b4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80157b8:	4918      	ldr	r1, [pc, #96]	; (801581c <dhcp_option_long+0x80>)
 80157ba:	4819      	ldr	r0, [pc, #100]	; (8015820 <dhcp_option_long+0x84>)
 80157bc:	f003 fbba 	bl	8018f34 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	0e1a      	lsrs	r2, r3, #24
 80157c4:	89fb      	ldrh	r3, [r7, #14]
 80157c6:	1c59      	adds	r1, r3, #1
 80157c8:	81f9      	strh	r1, [r7, #14]
 80157ca:	4619      	mov	r1, r3
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	440b      	add	r3, r1
 80157d0:	b2d2      	uxtb	r2, r2
 80157d2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	0c1a      	lsrs	r2, r3, #16
 80157d8:	89fb      	ldrh	r3, [r7, #14]
 80157da:	1c59      	adds	r1, r3, #1
 80157dc:	81f9      	strh	r1, [r7, #14]
 80157de:	4619      	mov	r1, r3
 80157e0:	68bb      	ldr	r3, [r7, #8]
 80157e2:	440b      	add	r3, r1
 80157e4:	b2d2      	uxtb	r2, r2
 80157e6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	0a1a      	lsrs	r2, r3, #8
 80157ec:	89fb      	ldrh	r3, [r7, #14]
 80157ee:	1c59      	adds	r1, r3, #1
 80157f0:	81f9      	strh	r1, [r7, #14]
 80157f2:	4619      	mov	r1, r3
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	440b      	add	r3, r1
 80157f8:	b2d2      	uxtb	r2, r2
 80157fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80157fc:	89fb      	ldrh	r3, [r7, #14]
 80157fe:	1c5a      	adds	r2, r3, #1
 8015800:	81fa      	strh	r2, [r7, #14]
 8015802:	461a      	mov	r2, r3
 8015804:	68bb      	ldr	r3, [r7, #8]
 8015806:	4413      	add	r3, r2
 8015808:	687a      	ldr	r2, [r7, #4]
 801580a:	b2d2      	uxtb	r2, r2
 801580c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801580e:	89fb      	ldrh	r3, [r7, #14]
}
 8015810:	4618      	mov	r0, r3
 8015812:	3710      	adds	r7, #16
 8015814:	46bd      	mov	sp, r7
 8015816:	bd80      	pop	{r7, pc}
 8015818:	0801d4a0 	.word	0x0801d4a0
 801581c:	0801d6ec 	.word	0x0801d6ec
 8015820:	0801d500 	.word	0x0801d500

08015824 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b090      	sub	sp, #64	; 0x40
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801582e:	2300      	movs	r3, #0
 8015830:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015832:	2300      	movs	r3, #0
 8015834:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015836:	2208      	movs	r2, #8
 8015838:	2100      	movs	r1, #0
 801583a:	48b5      	ldr	r0, [pc, #724]	; (8015b10 <dhcp_parse_reply+0x2ec>)
 801583c:	f003 fadd 	bl	8018dfa <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	895b      	ldrh	r3, [r3, #10]
 8015844:	2b2b      	cmp	r3, #43	; 0x2b
 8015846:	d802      	bhi.n	801584e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015848:	f06f 0301 	mvn.w	r3, #1
 801584c:	e2a7      	b.n	8015d9e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	685b      	ldr	r3, [r3, #4]
 8015852:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015854:	23f0      	movs	r3, #240	; 0xf0
 8015856:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	891b      	ldrh	r3, [r3, #8]
 801585c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015862:	e00c      	b.n	801587e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015866:	895b      	ldrh	r3, [r3, #10]
 8015868:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801586a:	1ad3      	subs	r3, r2, r3
 801586c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015870:	895b      	ldrh	r3, [r3, #10]
 8015872:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015874:	1ad3      	subs	r3, r2, r3
 8015876:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015880:	2b00      	cmp	r3, #0
 8015882:	d004      	beq.n	801588e <dhcp_parse_reply+0x6a>
 8015884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015886:	895b      	ldrh	r3, [r3, #10]
 8015888:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801588a:	429a      	cmp	r2, r3
 801588c:	d2ea      	bcs.n	8015864 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015890:	2b00      	cmp	r3, #0
 8015892:	d102      	bne.n	801589a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015894:	f06f 0301 	mvn.w	r3, #1
 8015898:	e281      	b.n	8015d9e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801589a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801589c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801589e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80158a0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80158a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a4:	685b      	ldr	r3, [r3, #4]
 80158a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80158a8:	e239      	b.n	8015d1e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80158aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80158ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80158ae:	4413      	add	r3, r2
 80158b0:	781b      	ldrb	r3, [r3, #0]
 80158b2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80158b4:	2300      	movs	r3, #0
 80158b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80158ba:	f04f 33ff 	mov.w	r3, #4294967295
 80158be:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80158c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80158c2:	3302      	adds	r3, #2
 80158c4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80158c6:	8bfa      	ldrh	r2, [r7, #30]
 80158c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d202      	bcs.n	80158d4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80158ce:	f06f 0301 	mvn.w	r3, #1
 80158d2:	e264      	b.n	8015d9e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80158d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80158d6:	3301      	adds	r3, #1
 80158d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80158da:	8952      	ldrh	r2, [r2, #10]
 80158dc:	4293      	cmp	r3, r2
 80158de:	da07      	bge.n	80158f0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80158e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80158e2:	3301      	adds	r3, #1
 80158e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80158e6:	4413      	add	r3, r2
 80158e8:	781b      	ldrb	r3, [r3, #0]
 80158ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80158ee:	e00b      	b.n	8015908 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80158f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d004      	beq.n	8015902 <dhcp_parse_reply+0xde>
 80158f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	685b      	ldr	r3, [r3, #4]
 80158fe:	781b      	ldrb	r3, [r3, #0]
 8015900:	e000      	b.n	8015904 <dhcp_parse_reply+0xe0>
 8015902:	2300      	movs	r3, #0
 8015904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801590c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015910:	7dfb      	ldrb	r3, [r7, #23]
 8015912:	2b3b      	cmp	r3, #59	; 0x3b
 8015914:	f200 812c 	bhi.w	8015b70 <dhcp_parse_reply+0x34c>
 8015918:	a201      	add	r2, pc, #4	; (adr r2, 8015920 <dhcp_parse_reply+0xfc>)
 801591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801591e:	bf00      	nop
 8015920:	08015a11 	.word	0x08015a11
 8015924:	08015a21 	.word	0x08015a21
 8015928:	08015b71 	.word	0x08015b71
 801592c:	08015a43 	.word	0x08015a43
 8015930:	08015b71 	.word	0x08015b71
 8015934:	08015b71 	.word	0x08015b71
 8015938:	08015b71 	.word	0x08015b71
 801593c:	08015b71 	.word	0x08015b71
 8015940:	08015b71 	.word	0x08015b71
 8015944:	08015b71 	.word	0x08015b71
 8015948:	08015b71 	.word	0x08015b71
 801594c:	08015b71 	.word	0x08015b71
 8015950:	08015b71 	.word	0x08015b71
 8015954:	08015b71 	.word	0x08015b71
 8015958:	08015b71 	.word	0x08015b71
 801595c:	08015b71 	.word	0x08015b71
 8015960:	08015b71 	.word	0x08015b71
 8015964:	08015b71 	.word	0x08015b71
 8015968:	08015b71 	.word	0x08015b71
 801596c:	08015b71 	.word	0x08015b71
 8015970:	08015b71 	.word	0x08015b71
 8015974:	08015b71 	.word	0x08015b71
 8015978:	08015b71 	.word	0x08015b71
 801597c:	08015b71 	.word	0x08015b71
 8015980:	08015b71 	.word	0x08015b71
 8015984:	08015b71 	.word	0x08015b71
 8015988:	08015b71 	.word	0x08015b71
 801598c:	08015b71 	.word	0x08015b71
 8015990:	08015b71 	.word	0x08015b71
 8015994:	08015b71 	.word	0x08015b71
 8015998:	08015b71 	.word	0x08015b71
 801599c:	08015b71 	.word	0x08015b71
 80159a0:	08015b71 	.word	0x08015b71
 80159a4:	08015b71 	.word	0x08015b71
 80159a8:	08015b71 	.word	0x08015b71
 80159ac:	08015b71 	.word	0x08015b71
 80159b0:	08015b71 	.word	0x08015b71
 80159b4:	08015b71 	.word	0x08015b71
 80159b8:	08015b71 	.word	0x08015b71
 80159bc:	08015b71 	.word	0x08015b71
 80159c0:	08015b71 	.word	0x08015b71
 80159c4:	08015b71 	.word	0x08015b71
 80159c8:	08015b71 	.word	0x08015b71
 80159cc:	08015b71 	.word	0x08015b71
 80159d0:	08015b71 	.word	0x08015b71
 80159d4:	08015b71 	.word	0x08015b71
 80159d8:	08015b71 	.word	0x08015b71
 80159dc:	08015b71 	.word	0x08015b71
 80159e0:	08015b71 	.word	0x08015b71
 80159e4:	08015b71 	.word	0x08015b71
 80159e8:	08015b71 	.word	0x08015b71
 80159ec:	08015a6f 	.word	0x08015a6f
 80159f0:	08015a91 	.word	0x08015a91
 80159f4:	08015acd 	.word	0x08015acd
 80159f8:	08015aef 	.word	0x08015aef
 80159fc:	08015b71 	.word	0x08015b71
 8015a00:	08015b71 	.word	0x08015b71
 8015a04:	08015b71 	.word	0x08015b71
 8015a08:	08015b2d 	.word	0x08015b2d
 8015a0c:	08015b4f 	.word	0x08015b4f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015a10:	2300      	movs	r3, #0
 8015a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8015a1e:	e0ab      	b.n	8015b78 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a24:	2b04      	cmp	r3, #4
 8015a26:	d009      	beq.n	8015a3c <dhcp_parse_reply+0x218>
 8015a28:	4b3a      	ldr	r3, [pc, #232]	; (8015b14 <dhcp_parse_reply+0x2f0>)
 8015a2a:	f240 622e 	movw	r2, #1582	; 0x62e
 8015a2e:	493a      	ldr	r1, [pc, #232]	; (8015b18 <dhcp_parse_reply+0x2f4>)
 8015a30:	483a      	ldr	r0, [pc, #232]	; (8015b1c <dhcp_parse_reply+0x2f8>)
 8015a32:	f003 fa7f 	bl	8018f34 <iprintf>
 8015a36:	f06f 0305 	mvn.w	r3, #5
 8015a3a:	e1b0      	b.n	8015d9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015a3c:	2306      	movs	r3, #6
 8015a3e:	623b      	str	r3, [r7, #32]
        break;
 8015a40:	e09a      	b.n	8015b78 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015a42:	2304      	movs	r3, #4
 8015a44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015a48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015a4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a50:	429a      	cmp	r2, r3
 8015a52:	d209      	bcs.n	8015a68 <dhcp_parse_reply+0x244>
 8015a54:	4b2f      	ldr	r3, [pc, #188]	; (8015b14 <dhcp_parse_reply+0x2f0>)
 8015a56:	f240 6233 	movw	r2, #1587	; 0x633
 8015a5a:	4931      	ldr	r1, [pc, #196]	; (8015b20 <dhcp_parse_reply+0x2fc>)
 8015a5c:	482f      	ldr	r0, [pc, #188]	; (8015b1c <dhcp_parse_reply+0x2f8>)
 8015a5e:	f003 fa69 	bl	8018f34 <iprintf>
 8015a62:	f06f 0305 	mvn.w	r3, #5
 8015a66:	e19a      	b.n	8015d9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015a68:	2307      	movs	r3, #7
 8015a6a:	623b      	str	r3, [r7, #32]
        break;
 8015a6c:	e084      	b.n	8015b78 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a72:	2b04      	cmp	r3, #4
 8015a74:	d009      	beq.n	8015a8a <dhcp_parse_reply+0x266>
 8015a76:	4b27      	ldr	r3, [pc, #156]	; (8015b14 <dhcp_parse_reply+0x2f0>)
 8015a78:	f240 6241 	movw	r2, #1601	; 0x641
 8015a7c:	4926      	ldr	r1, [pc, #152]	; (8015b18 <dhcp_parse_reply+0x2f4>)
 8015a7e:	4827      	ldr	r0, [pc, #156]	; (8015b1c <dhcp_parse_reply+0x2f8>)
 8015a80:	f003 fa58 	bl	8018f34 <iprintf>
 8015a84:	f06f 0305 	mvn.w	r3, #5
 8015a88:	e189      	b.n	8015d9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015a8a:	2303      	movs	r3, #3
 8015a8c:	623b      	str	r3, [r7, #32]
        break;
 8015a8e:	e073      	b.n	8015b78 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a94:	2b01      	cmp	r3, #1
 8015a96:	d009      	beq.n	8015aac <dhcp_parse_reply+0x288>
 8015a98:	4b1e      	ldr	r3, [pc, #120]	; (8015b14 <dhcp_parse_reply+0x2f0>)
 8015a9a:	f240 624f 	movw	r2, #1615	; 0x64f
 8015a9e:	4921      	ldr	r1, [pc, #132]	; (8015b24 <dhcp_parse_reply+0x300>)
 8015aa0:	481e      	ldr	r0, [pc, #120]	; (8015b1c <dhcp_parse_reply+0x2f8>)
 8015aa2:	f003 fa47 	bl	8018f34 <iprintf>
 8015aa6:	f06f 0305 	mvn.w	r3, #5
 8015aaa:	e178      	b.n	8015d9e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015aac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015aae:	2bf0      	cmp	r3, #240	; 0xf0
 8015ab0:	d009      	beq.n	8015ac6 <dhcp_parse_reply+0x2a2>
 8015ab2:	4b18      	ldr	r3, [pc, #96]	; (8015b14 <dhcp_parse_reply+0x2f0>)
 8015ab4:	f240 6251 	movw	r2, #1617	; 0x651
 8015ab8:	491b      	ldr	r1, [pc, #108]	; (8015b28 <dhcp_parse_reply+0x304>)
 8015aba:	4818      	ldr	r0, [pc, #96]	; (8015b1c <dhcp_parse_reply+0x2f8>)
 8015abc:	f003 fa3a 	bl	8018f34 <iprintf>
 8015ac0:	f06f 0305 	mvn.w	r3, #5
 8015ac4:	e16b      	b.n	8015d9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	623b      	str	r3, [r7, #32]
        break;
 8015aca:	e055      	b.n	8015b78 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ad0:	2b01      	cmp	r3, #1
 8015ad2:	d009      	beq.n	8015ae8 <dhcp_parse_reply+0x2c4>
 8015ad4:	4b0f      	ldr	r3, [pc, #60]	; (8015b14 <dhcp_parse_reply+0x2f0>)
 8015ad6:	f240 6255 	movw	r2, #1621	; 0x655
 8015ada:	4912      	ldr	r1, [pc, #72]	; (8015b24 <dhcp_parse_reply+0x300>)
 8015adc:	480f      	ldr	r0, [pc, #60]	; (8015b1c <dhcp_parse_reply+0x2f8>)
 8015ade:	f003 fa29 	bl	8018f34 <iprintf>
 8015ae2:	f06f 0305 	mvn.w	r3, #5
 8015ae6:	e15a      	b.n	8015d9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015ae8:	2301      	movs	r3, #1
 8015aea:	623b      	str	r3, [r7, #32]
        break;
 8015aec:	e044      	b.n	8015b78 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015af2:	2b04      	cmp	r3, #4
 8015af4:	d009      	beq.n	8015b0a <dhcp_parse_reply+0x2e6>
 8015af6:	4b07      	ldr	r3, [pc, #28]	; (8015b14 <dhcp_parse_reply+0x2f0>)
 8015af8:	f240 6259 	movw	r2, #1625	; 0x659
 8015afc:	4906      	ldr	r1, [pc, #24]	; (8015b18 <dhcp_parse_reply+0x2f4>)
 8015afe:	4807      	ldr	r0, [pc, #28]	; (8015b1c <dhcp_parse_reply+0x2f8>)
 8015b00:	f003 fa18 	bl	8018f34 <iprintf>
 8015b04:	f06f 0305 	mvn.w	r3, #5
 8015b08:	e149      	b.n	8015d9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015b0a:	2302      	movs	r3, #2
 8015b0c:	623b      	str	r3, [r7, #32]
        break;
 8015b0e:	e033      	b.n	8015b78 <dhcp_parse_reply+0x354>
 8015b10:	2001160c 	.word	0x2001160c
 8015b14:	0801d4a0 	.word	0x0801d4a0
 8015b18:	0801d728 	.word	0x0801d728
 8015b1c:	0801d500 	.word	0x0801d500
 8015b20:	0801d734 	.word	0x0801d734
 8015b24:	0801d748 	.word	0x0801d748
 8015b28:	0801d754 	.word	0x0801d754
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b30:	2b04      	cmp	r3, #4
 8015b32:	d009      	beq.n	8015b48 <dhcp_parse_reply+0x324>
 8015b34:	4b9c      	ldr	r3, [pc, #624]	; (8015da8 <dhcp_parse_reply+0x584>)
 8015b36:	f240 625d 	movw	r2, #1629	; 0x65d
 8015b3a:	499c      	ldr	r1, [pc, #624]	; (8015dac <dhcp_parse_reply+0x588>)
 8015b3c:	489c      	ldr	r0, [pc, #624]	; (8015db0 <dhcp_parse_reply+0x58c>)
 8015b3e:	f003 f9f9 	bl	8018f34 <iprintf>
 8015b42:	f06f 0305 	mvn.w	r3, #5
 8015b46:	e12a      	b.n	8015d9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015b48:	2304      	movs	r3, #4
 8015b4a:	623b      	str	r3, [r7, #32]
        break;
 8015b4c:	e014      	b.n	8015b78 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b52:	2b04      	cmp	r3, #4
 8015b54:	d009      	beq.n	8015b6a <dhcp_parse_reply+0x346>
 8015b56:	4b94      	ldr	r3, [pc, #592]	; (8015da8 <dhcp_parse_reply+0x584>)
 8015b58:	f240 6261 	movw	r2, #1633	; 0x661
 8015b5c:	4993      	ldr	r1, [pc, #588]	; (8015dac <dhcp_parse_reply+0x588>)
 8015b5e:	4894      	ldr	r0, [pc, #592]	; (8015db0 <dhcp_parse_reply+0x58c>)
 8015b60:	f003 f9e8 	bl	8018f34 <iprintf>
 8015b64:	f06f 0305 	mvn.w	r3, #5
 8015b68:	e119      	b.n	8015d9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015b6a:	2305      	movs	r3, #5
 8015b6c:	623b      	str	r3, [r7, #32]
        break;
 8015b6e:	e003      	b.n	8015b78 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015b70:	2300      	movs	r3, #0
 8015b72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015b76:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015b78:	7dfb      	ldrb	r3, [r7, #23]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d103      	bne.n	8015b86 <dhcp_parse_reply+0x362>
      offset++;
 8015b7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b80:	3301      	adds	r3, #1
 8015b82:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015b84:	e0a1      	b.n	8015cca <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015b86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b8c:	4413      	add	r3, r2
 8015b8e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8015b92:	4293      	cmp	r3, r2
 8015b94:	dd02      	ble.n	8015b9c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8015b96:	f06f 0301 	mvn.w	r3, #1
 8015b9a:	e100      	b.n	8015d9e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ba0:	b29a      	uxth	r2, r3
 8015ba2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ba4:	4413      	add	r3, r2
 8015ba6:	b29b      	uxth	r3, r3
 8015ba8:	3302      	adds	r3, #2
 8015baa:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8015bac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	f000 808a 	beq.w	8015cca <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015bba:	6a3b      	ldr	r3, [r7, #32]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	db02      	blt.n	8015bc6 <dhcp_parse_reply+0x3a2>
 8015bc0:	6a3b      	ldr	r3, [r7, #32]
 8015bc2:	2b07      	cmp	r3, #7
 8015bc4:	dd06      	ble.n	8015bd4 <dhcp_parse_reply+0x3b0>
 8015bc6:	4b78      	ldr	r3, [pc, #480]	; (8015da8 <dhcp_parse_reply+0x584>)
 8015bc8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8015bcc:	4979      	ldr	r1, [pc, #484]	; (8015db4 <dhcp_parse_reply+0x590>)
 8015bce:	4878      	ldr	r0, [pc, #480]	; (8015db0 <dhcp_parse_reply+0x58c>)
 8015bd0:	f003 f9b0 	bl	8018f34 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015bd4:	4a78      	ldr	r2, [pc, #480]	; (8015db8 <dhcp_parse_reply+0x594>)
 8015bd6:	6a3b      	ldr	r3, [r7, #32]
 8015bd8:	4413      	add	r3, r2
 8015bda:	781b      	ldrb	r3, [r3, #0]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d174      	bne.n	8015cca <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015be0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015be4:	2b04      	cmp	r3, #4
 8015be6:	bf28      	it	cs
 8015be8:	2304      	movcs	r3, #4
 8015bea:	b2db      	uxtb	r3, r3
 8015bec:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015bee:	8bfb      	ldrh	r3, [r7, #30]
 8015bf0:	8aba      	ldrh	r2, [r7, #20]
 8015bf2:	f107 0108 	add.w	r1, r7, #8
 8015bf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bf8:	f7f7 fb9a 	bl	800d330 <pbuf_copy_partial>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	461a      	mov	r2, r3
 8015c00:	8abb      	ldrh	r3, [r7, #20]
 8015c02:	4293      	cmp	r3, r2
 8015c04:	d002      	beq.n	8015c0c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8015c06:	f06f 0301 	mvn.w	r3, #1
 8015c0a:	e0c8      	b.n	8015d9e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015c0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015c10:	2b04      	cmp	r3, #4
 8015c12:	d933      	bls.n	8015c7c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015c14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015c18:	f003 0303 	and.w	r3, r3, #3
 8015c1c:	b2db      	uxtb	r3, r3
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d009      	beq.n	8015c36 <dhcp_parse_reply+0x412>
 8015c22:	4b61      	ldr	r3, [pc, #388]	; (8015da8 <dhcp_parse_reply+0x584>)
 8015c24:	f240 6281 	movw	r2, #1665	; 0x681
 8015c28:	4964      	ldr	r1, [pc, #400]	; (8015dbc <dhcp_parse_reply+0x598>)
 8015c2a:	4861      	ldr	r0, [pc, #388]	; (8015db0 <dhcp_parse_reply+0x58c>)
 8015c2c:	f003 f982 	bl	8018f34 <iprintf>
 8015c30:	f06f 0305 	mvn.w	r3, #5
 8015c34:	e0b3      	b.n	8015d9e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8015c36:	4a60      	ldr	r2, [pc, #384]	; (8015db8 <dhcp_parse_reply+0x594>)
 8015c38:	6a3b      	ldr	r3, [r7, #32]
 8015c3a:	4413      	add	r3, r2
 8015c3c:	2201      	movs	r2, #1
 8015c3e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015c40:	68bb      	ldr	r3, [r7, #8]
 8015c42:	4618      	mov	r0, r3
 8015c44:	f7f5 fd4f 	bl	800b6e6 <lwip_htonl>
 8015c48:	4602      	mov	r2, r0
 8015c4a:	495d      	ldr	r1, [pc, #372]	; (8015dc0 <dhcp_parse_reply+0x59c>)
 8015c4c:	6a3b      	ldr	r3, [r7, #32]
 8015c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015c52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015c56:	3b04      	subs	r3, #4
 8015c58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015c5c:	8bfb      	ldrh	r3, [r7, #30]
 8015c5e:	3304      	adds	r3, #4
 8015c60:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015c62:	8a7a      	ldrh	r2, [r7, #18]
 8015c64:	8bfb      	ldrh	r3, [r7, #30]
 8015c66:	429a      	cmp	r2, r3
 8015c68:	d202      	bcs.n	8015c70 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8015c6a:	f06f 0301 	mvn.w	r3, #1
 8015c6e:	e096      	b.n	8015d9e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015c70:	8a7b      	ldrh	r3, [r7, #18]
 8015c72:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015c74:	6a3b      	ldr	r3, [r7, #32]
 8015c76:	3301      	adds	r3, #1
 8015c78:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015c7a:	e79e      	b.n	8015bba <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015c7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015c80:	2b04      	cmp	r3, #4
 8015c82:	d106      	bne.n	8015c92 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015c84:	68bb      	ldr	r3, [r7, #8]
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7f5 fd2d 	bl	800b6e6 <lwip_htonl>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	60bb      	str	r3, [r7, #8]
 8015c90:	e011      	b.n	8015cb6 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015c92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015c96:	2b01      	cmp	r3, #1
 8015c98:	d009      	beq.n	8015cae <dhcp_parse_reply+0x48a>
 8015c9a:	4b43      	ldr	r3, [pc, #268]	; (8015da8 <dhcp_parse_reply+0x584>)
 8015c9c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015ca0:	4948      	ldr	r1, [pc, #288]	; (8015dc4 <dhcp_parse_reply+0x5a0>)
 8015ca2:	4843      	ldr	r0, [pc, #268]	; (8015db0 <dhcp_parse_reply+0x58c>)
 8015ca4:	f003 f946 	bl	8018f34 <iprintf>
 8015ca8:	f06f 0305 	mvn.w	r3, #5
 8015cac:	e077      	b.n	8015d9e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015cae:	f107 0308 	add.w	r3, r7, #8
 8015cb2:	781b      	ldrb	r3, [r3, #0]
 8015cb4:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015cb6:	4a40      	ldr	r2, [pc, #256]	; (8015db8 <dhcp_parse_reply+0x594>)
 8015cb8:	6a3b      	ldr	r3, [r7, #32]
 8015cba:	4413      	add	r3, r2
 8015cbc:	2201      	movs	r2, #1
 8015cbe:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015cc0:	68ba      	ldr	r2, [r7, #8]
 8015cc2:	493f      	ldr	r1, [pc, #252]	; (8015dc0 <dhcp_parse_reply+0x59c>)
 8015cc4:	6a3b      	ldr	r3, [r7, #32]
 8015cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ccc:	895b      	ldrh	r3, [r3, #10]
 8015cce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d324      	bcc.n	8015d1e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cd6:	895b      	ldrh	r3, [r3, #10]
 8015cd8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015cda:	1ad3      	subs	r3, r2, r3
 8015cdc:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ce0:	895b      	ldrh	r3, [r3, #10]
 8015ce2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015ce4:	1ad3      	subs	r3, r2, r3
 8015ce6:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8015ce8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015cea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015cec:	429a      	cmp	r2, r3
 8015cee:	d213      	bcs.n	8015d18 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d109      	bne.n	8015d10 <dhcp_parse_reply+0x4ec>
 8015cfc:	4b2a      	ldr	r3, [pc, #168]	; (8015da8 <dhcp_parse_reply+0x584>)
 8015cfe:	f240 629d 	movw	r2, #1693	; 0x69d
 8015d02:	4931      	ldr	r1, [pc, #196]	; (8015dc8 <dhcp_parse_reply+0x5a4>)
 8015d04:	482a      	ldr	r0, [pc, #168]	; (8015db0 <dhcp_parse_reply+0x58c>)
 8015d06:	f003 f915 	bl	8018f34 <iprintf>
 8015d0a:	f06f 0305 	mvn.w	r3, #5
 8015d0e:	e046      	b.n	8015d9e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d12:	685b      	ldr	r3, [r3, #4]
 8015d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015d16:	e002      	b.n	8015d1e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015d18:	f06f 0301 	mvn.w	r3, #1
 8015d1c:	e03f      	b.n	8015d9e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d00a      	beq.n	8015d3a <dhcp_parse_reply+0x516>
 8015d24:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015d26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015d28:	429a      	cmp	r2, r3
 8015d2a:	d206      	bcs.n	8015d3a <dhcp_parse_reply+0x516>
 8015d2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015d2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015d30:	4413      	add	r3, r2
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	2bff      	cmp	r3, #255	; 0xff
 8015d36:	f47f adb8 	bne.w	80158aa <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015d3a:	4b1f      	ldr	r3, [pc, #124]	; (8015db8 <dhcp_parse_reply+0x594>)
 8015d3c:	781b      	ldrb	r3, [r3, #0]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d018      	beq.n	8015d74 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015d42:	4b1f      	ldr	r3, [pc, #124]	; (8015dc0 <dhcp_parse_reply+0x59c>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015d48:	4b1b      	ldr	r3, [pc, #108]	; (8015db8 <dhcp_parse_reply+0x594>)
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	2b01      	cmp	r3, #1
 8015d52:	d102      	bne.n	8015d5a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015d54:	2301      	movs	r3, #1
 8015d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d58:	e00c      	b.n	8015d74 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	2b02      	cmp	r3, #2
 8015d5e:	d102      	bne.n	8015d66 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015d60:	2301      	movs	r3, #1
 8015d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d64:	e006      	b.n	8015d74 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	2b03      	cmp	r3, #3
 8015d6a:	d103      	bne.n	8015d74 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015d6c:	2301      	movs	r3, #1
 8015d6e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015d70:	2301      	movs	r3, #1
 8015d72:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d006      	beq.n	8015d88 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015d7e:	236c      	movs	r3, #108	; 0x6c
 8015d80:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015d82:	23ec      	movs	r3, #236	; 0xec
 8015d84:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015d86:	e56a      	b.n	801585e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d006      	beq.n	8015d9c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015d92:	232c      	movs	r3, #44	; 0x2c
 8015d94:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015d96:	236c      	movs	r3, #108	; 0x6c
 8015d98:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015d9a:	e560      	b.n	801585e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015d9c:	2300      	movs	r3, #0
}
 8015d9e:	4618      	mov	r0, r3
 8015da0:	3740      	adds	r7, #64	; 0x40
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bd80      	pop	{r7, pc}
 8015da6:	bf00      	nop
 8015da8:	0801d4a0 	.word	0x0801d4a0
 8015dac:	0801d728 	.word	0x0801d728
 8015db0:	0801d500 	.word	0x0801d500
 8015db4:	0801d76c 	.word	0x0801d76c
 8015db8:	2001160c 	.word	0x2001160c
 8015dbc:	0801d780 	.word	0x0801d780
 8015dc0:	200115ec 	.word	0x200115ec
 8015dc4:	0801d798 	.word	0x0801d798
 8015dc8:	0801d7ac 	.word	0x0801d7ac

08015dcc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b08a      	sub	sp, #40	; 0x28
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	60f8      	str	r0, [r7, #12]
 8015dd4:	60b9      	str	r1, [r7, #8]
 8015dd6:	607a      	str	r2, [r7, #4]
 8015dd8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015dda:	4b60      	ldr	r3, [pc, #384]	; (8015f5c <dhcp_recv+0x190>)
 8015ddc:	685b      	ldr	r3, [r3, #4]
 8015dde:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015de0:	6a3b      	ldr	r3, [r7, #32]
 8015de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015de4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	685b      	ldr	r3, [r3, #4]
 8015dea:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015dec:	69fb      	ldr	r3, [r7, #28]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	f000 809d 	beq.w	8015f2e <dhcp_recv+0x162>
 8015df4:	69fb      	ldr	r3, [r7, #28]
 8015df6:	791b      	ldrb	r3, [r3, #4]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	f000 8098 	beq.w	8015f2e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	895b      	ldrh	r3, [r3, #10]
 8015e02:	2b2b      	cmp	r3, #43	; 0x2b
 8015e04:	f240 8095 	bls.w	8015f32 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015e08:	69bb      	ldr	r3, [r7, #24]
 8015e0a:	781b      	ldrb	r3, [r3, #0]
 8015e0c:	2b02      	cmp	r3, #2
 8015e0e:	f040 8092 	bne.w	8015f36 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015e12:	2300      	movs	r3, #0
 8015e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e18:	e012      	b.n	8015e40 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e1e:	6a3a      	ldr	r2, [r7, #32]
 8015e20:	4413      	add	r3, r2
 8015e22:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e2a:	69b9      	ldr	r1, [r7, #24]
 8015e2c:	440b      	add	r3, r1
 8015e2e:	7f1b      	ldrb	r3, [r3, #28]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	f040 8082 	bne.w	8015f3a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e3a:	3301      	adds	r3, #1
 8015e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e40:	6a3b      	ldr	r3, [r7, #32]
 8015e42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015e46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	d203      	bcs.n	8015e56 <dhcp_recv+0x8a>
 8015e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e52:	2b05      	cmp	r3, #5
 8015e54:	d9e1      	bls.n	8015e1a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015e56:	69bb      	ldr	r3, [r7, #24]
 8015e58:	685b      	ldr	r3, [r3, #4]
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f7f5 fc43 	bl	800b6e6 <lwip_htonl>
 8015e60:	4602      	mov	r2, r0
 8015e62:	69fb      	ldr	r3, [r7, #28]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	429a      	cmp	r2, r3
 8015e68:	d169      	bne.n	8015f3e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015e6a:	69f9      	ldr	r1, [r7, #28]
 8015e6c:	6878      	ldr	r0, [r7, #4]
 8015e6e:	f7ff fcd9 	bl	8015824 <dhcp_parse_reply>
 8015e72:	4603      	mov	r3, r0
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d164      	bne.n	8015f42 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015e78:	4b39      	ldr	r3, [pc, #228]	; (8015f60 <dhcp_recv+0x194>)
 8015e7a:	785b      	ldrb	r3, [r3, #1]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d062      	beq.n	8015f46 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	685b      	ldr	r3, [r3, #4]
 8015e84:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015e86:	4b37      	ldr	r3, [pc, #220]	; (8015f64 <dhcp_recv+0x198>)
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015e8c:	7cfb      	ldrb	r3, [r7, #19]
 8015e8e:	2b05      	cmp	r3, #5
 8015e90:	d12a      	bne.n	8015ee8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015e92:	69fb      	ldr	r3, [r7, #28]
 8015e94:	795b      	ldrb	r3, [r3, #5]
 8015e96:	2b01      	cmp	r3, #1
 8015e98:	d112      	bne.n	8015ec0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015e9a:	6979      	ldr	r1, [r7, #20]
 8015e9c:	6a38      	ldr	r0, [r7, #32]
 8015e9e:	f7fe fe17 	bl	8014ad0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015ea2:	6a3b      	ldr	r3, [r7, #32]
 8015ea4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ea8:	f003 0308 	and.w	r3, r3, #8
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d003      	beq.n	8015eb8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015eb0:	6a38      	ldr	r0, [r7, #32]
 8015eb2:	f7fe fb87 	bl	80145c4 <dhcp_check>
 8015eb6:	e049      	b.n	8015f4c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015eb8:	6a38      	ldr	r0, [r7, #32]
 8015eba:	f7ff f867 	bl	8014f8c <dhcp_bind>
 8015ebe:	e045      	b.n	8015f4c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015ec0:	69fb      	ldr	r3, [r7, #28]
 8015ec2:	795b      	ldrb	r3, [r3, #5]
 8015ec4:	2b03      	cmp	r3, #3
 8015ec6:	d007      	beq.n	8015ed8 <dhcp_recv+0x10c>
 8015ec8:	69fb      	ldr	r3, [r7, #28]
 8015eca:	795b      	ldrb	r3, [r3, #5]
 8015ecc:	2b04      	cmp	r3, #4
 8015ece:	d003      	beq.n	8015ed8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015ed0:	69fb      	ldr	r3, [r7, #28]
 8015ed2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015ed4:	2b05      	cmp	r3, #5
 8015ed6:	d139      	bne.n	8015f4c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8015ed8:	6979      	ldr	r1, [r7, #20]
 8015eda:	6a38      	ldr	r0, [r7, #32]
 8015edc:	f7fe fdf8 	bl	8014ad0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015ee0:	6a38      	ldr	r0, [r7, #32]
 8015ee2:	f7ff f853 	bl	8014f8c <dhcp_bind>
 8015ee6:	e031      	b.n	8015f4c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015ee8:	7cfb      	ldrb	r3, [r7, #19]
 8015eea:	2b06      	cmp	r3, #6
 8015eec:	d113      	bne.n	8015f16 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015eee:	69fb      	ldr	r3, [r7, #28]
 8015ef0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015ef2:	2b03      	cmp	r3, #3
 8015ef4:	d00b      	beq.n	8015f0e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015ef6:	69fb      	ldr	r3, [r7, #28]
 8015ef8:	795b      	ldrb	r3, [r3, #5]
 8015efa:	2b01      	cmp	r3, #1
 8015efc:	d007      	beq.n	8015f0e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015efe:	69fb      	ldr	r3, [r7, #28]
 8015f00:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015f02:	2b04      	cmp	r3, #4
 8015f04:	d003      	beq.n	8015f0e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015f06:	69fb      	ldr	r3, [r7, #28]
 8015f08:	795b      	ldrb	r3, [r3, #5]
 8015f0a:	2b05      	cmp	r3, #5
 8015f0c:	d103      	bne.n	8015f16 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015f0e:	6a38      	ldr	r0, [r7, #32]
 8015f10:	f7fe fb3e 	bl	8014590 <dhcp_handle_nak>
 8015f14:	e01a      	b.n	8015f4c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015f16:	7cfb      	ldrb	r3, [r7, #19]
 8015f18:	2b02      	cmp	r3, #2
 8015f1a:	d116      	bne.n	8015f4a <dhcp_recv+0x17e>
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	795b      	ldrb	r3, [r3, #5]
 8015f20:	2b06      	cmp	r3, #6
 8015f22:	d112      	bne.n	8015f4a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015f24:	6979      	ldr	r1, [r7, #20]
 8015f26:	6a38      	ldr	r0, [r7, #32]
 8015f28:	f7fe fb80 	bl	801462c <dhcp_handle_offer>
 8015f2c:	e00e      	b.n	8015f4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015f2e:	bf00      	nop
 8015f30:	e00c      	b.n	8015f4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015f32:	bf00      	nop
 8015f34:	e00a      	b.n	8015f4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015f36:	bf00      	nop
 8015f38:	e008      	b.n	8015f4c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015f3a:	bf00      	nop
 8015f3c:	e006      	b.n	8015f4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015f3e:	bf00      	nop
 8015f40:	e004      	b.n	8015f4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015f42:	bf00      	nop
 8015f44:	e002      	b.n	8015f4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015f46:	bf00      	nop
 8015f48:	e000      	b.n	8015f4c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015f4a:	bf00      	nop
  pbuf_free(p);
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f7f6 ffe9 	bl	800cf24 <pbuf_free>
}
 8015f52:	bf00      	nop
 8015f54:	3728      	adds	r7, #40	; 0x28
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	bf00      	nop
 8015f5c:	2000de18 	.word	0x2000de18
 8015f60:	2001160c 	.word	0x2001160c
 8015f64:	200115ec 	.word	0x200115ec

08015f68 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b088      	sub	sp, #32
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	60b9      	str	r1, [r7, #8]
 8015f72:	603b      	str	r3, [r7, #0]
 8015f74:	4613      	mov	r3, r2
 8015f76:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d108      	bne.n	8015f90 <dhcp_create_msg+0x28>
 8015f7e:	4b5f      	ldr	r3, [pc, #380]	; (80160fc <dhcp_create_msg+0x194>)
 8015f80:	f240 7269 	movw	r2, #1897	; 0x769
 8015f84:	495e      	ldr	r1, [pc, #376]	; (8016100 <dhcp_create_msg+0x198>)
 8015f86:	485f      	ldr	r0, [pc, #380]	; (8016104 <dhcp_create_msg+0x19c>)
 8015f88:	f002 ffd4 	bl	8018f34 <iprintf>
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	e0b1      	b.n	80160f4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d108      	bne.n	8015fa8 <dhcp_create_msg+0x40>
 8015f96:	4b59      	ldr	r3, [pc, #356]	; (80160fc <dhcp_create_msg+0x194>)
 8015f98:	f240 726a 	movw	r2, #1898	; 0x76a
 8015f9c:	495a      	ldr	r1, [pc, #360]	; (8016108 <dhcp_create_msg+0x1a0>)
 8015f9e:	4859      	ldr	r0, [pc, #356]	; (8016104 <dhcp_create_msg+0x19c>)
 8015fa0:	f002 ffc8 	bl	8018f34 <iprintf>
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	e0a5      	b.n	80160f4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015fa8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015fac:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015fb0:	2036      	movs	r0, #54	; 0x36
 8015fb2:	f7f6 fcd3 	bl	800c95c <pbuf_alloc>
 8015fb6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015fb8:	69bb      	ldr	r3, [r7, #24]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d101      	bne.n	8015fc2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	e098      	b.n	80160f4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015fc2:	69bb      	ldr	r3, [r7, #24]
 8015fc4:	895b      	ldrh	r3, [r3, #10]
 8015fc6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8015fca:	d206      	bcs.n	8015fda <dhcp_create_msg+0x72>
 8015fcc:	4b4b      	ldr	r3, [pc, #300]	; (80160fc <dhcp_create_msg+0x194>)
 8015fce:	f240 7271 	movw	r2, #1905	; 0x771
 8015fd2:	494e      	ldr	r1, [pc, #312]	; (801610c <dhcp_create_msg+0x1a4>)
 8015fd4:	484b      	ldr	r0, [pc, #300]	; (8016104 <dhcp_create_msg+0x19c>)
 8015fd6:	f002 ffad 	bl	8018f34 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015fda:	79fb      	ldrb	r3, [r7, #7]
 8015fdc:	2b03      	cmp	r3, #3
 8015fde:	d103      	bne.n	8015fe8 <dhcp_create_msg+0x80>
 8015fe0:	68bb      	ldr	r3, [r7, #8]
 8015fe2:	795b      	ldrb	r3, [r3, #5]
 8015fe4:	2b03      	cmp	r3, #3
 8015fe6:	d10d      	bne.n	8016004 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015fe8:	68bb      	ldr	r3, [r7, #8]
 8015fea:	799b      	ldrb	r3, [r3, #6]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d105      	bne.n	8015ffc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015ff0:	f002 ffe6 	bl	8018fc0 <rand>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	461a      	mov	r2, r3
 8015ff8:	4b45      	ldr	r3, [pc, #276]	; (8016110 <dhcp_create_msg+0x1a8>)
 8015ffa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015ffc:	4b44      	ldr	r3, [pc, #272]	; (8016110 <dhcp_create_msg+0x1a8>)
 8015ffe:	681a      	ldr	r2, [r3, #0]
 8016000:	68bb      	ldr	r3, [r7, #8]
 8016002:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016004:	69bb      	ldr	r3, [r7, #24]
 8016006:	685b      	ldr	r3, [r3, #4]
 8016008:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801600a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801600e:	2100      	movs	r1, #0
 8016010:	6978      	ldr	r0, [r7, #20]
 8016012:	f002 fef2 	bl	8018dfa <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016016:	697b      	ldr	r3, [r7, #20]
 8016018:	2201      	movs	r2, #1
 801601a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801601c:	697b      	ldr	r3, [r7, #20]
 801601e:	2201      	movs	r2, #1
 8016020:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016028:	697b      	ldr	r3, [r7, #20]
 801602a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801602c:	68bb      	ldr	r3, [r7, #8]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	4618      	mov	r0, r3
 8016032:	f7f5 fb58 	bl	800b6e6 <lwip_htonl>
 8016036:	4602      	mov	r2, r0
 8016038:	697b      	ldr	r3, [r7, #20]
 801603a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801603c:	79fb      	ldrb	r3, [r7, #7]
 801603e:	2b08      	cmp	r3, #8
 8016040:	d010      	beq.n	8016064 <dhcp_create_msg+0xfc>
 8016042:	79fb      	ldrb	r3, [r7, #7]
 8016044:	2b04      	cmp	r3, #4
 8016046:	d00d      	beq.n	8016064 <dhcp_create_msg+0xfc>
 8016048:	79fb      	ldrb	r3, [r7, #7]
 801604a:	2b07      	cmp	r3, #7
 801604c:	d00a      	beq.n	8016064 <dhcp_create_msg+0xfc>
 801604e:	79fb      	ldrb	r3, [r7, #7]
 8016050:	2b03      	cmp	r3, #3
 8016052:	d10c      	bne.n	801606e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016054:	68bb      	ldr	r3, [r7, #8]
 8016056:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016058:	2b05      	cmp	r3, #5
 801605a:	d003      	beq.n	8016064 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801605c:	68bb      	ldr	r3, [r7, #8]
 801605e:	795b      	ldrb	r3, [r3, #5]
 8016060:	2b04      	cmp	r3, #4
 8016062:	d104      	bne.n	801606e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	3304      	adds	r3, #4
 8016068:	681a      	ldr	r2, [r3, #0]
 801606a:	697b      	ldr	r3, [r7, #20]
 801606c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801606e:	2300      	movs	r3, #0
 8016070:	83fb      	strh	r3, [r7, #30]
 8016072:	e00c      	b.n	801608e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8016074:	8bfa      	ldrh	r2, [r7, #30]
 8016076:	8bfb      	ldrh	r3, [r7, #30]
 8016078:	68f9      	ldr	r1, [r7, #12]
 801607a:	440a      	add	r2, r1
 801607c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016080:	697a      	ldr	r2, [r7, #20]
 8016082:	4413      	add	r3, r2
 8016084:	460a      	mov	r2, r1
 8016086:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016088:	8bfb      	ldrh	r3, [r7, #30]
 801608a:	3301      	adds	r3, #1
 801608c:	83fb      	strh	r3, [r7, #30]
 801608e:	8bfb      	ldrh	r3, [r7, #30]
 8016090:	2b05      	cmp	r3, #5
 8016092:	d9ef      	bls.n	8016074 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016094:	697b      	ldr	r3, [r7, #20]
 8016096:	2200      	movs	r2, #0
 8016098:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801609c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80160a0:	2200      	movs	r2, #0
 80160a2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80160a6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80160aa:	2200      	movs	r2, #0
 80160ac:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80160b0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80160b4:	2200      	movs	r2, #0
 80160b6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80160ba:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80160be:	697b      	ldr	r3, [r7, #20]
 80160c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80160c4:	2301      	movs	r3, #1
 80160c6:	2235      	movs	r2, #53	; 0x35
 80160c8:	2000      	movs	r0, #0
 80160ca:	f7ff fadb 	bl	8015684 <dhcp_option>
 80160ce:	4603      	mov	r3, r0
 80160d0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80160d2:	697b      	ldr	r3, [r7, #20]
 80160d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80160d8:	79fa      	ldrb	r2, [r7, #7]
 80160da:	8a7b      	ldrh	r3, [r7, #18]
 80160dc:	4618      	mov	r0, r3
 80160de:	f7ff fb05 	bl	80156ec <dhcp_option_byte>
 80160e2:	4603      	mov	r3, r0
 80160e4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d002      	beq.n	80160f2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	8a7a      	ldrh	r2, [r7, #18]
 80160f0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80160f2:	69bb      	ldr	r3, [r7, #24]
}
 80160f4:	4618      	mov	r0, r3
 80160f6:	3720      	adds	r7, #32
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bd80      	pop	{r7, pc}
 80160fc:	0801d4a0 	.word	0x0801d4a0
 8016100:	0801d7c0 	.word	0x0801d7c0
 8016104:	0801d500 	.word	0x0801d500
 8016108:	0801d7e0 	.word	0x0801d7e0
 801610c:	0801d800 	.word	0x0801d800
 8016110:	2001161c 	.word	0x2001161c

08016114 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b084      	sub	sp, #16
 8016118:	af00      	add	r7, sp, #0
 801611a:	4603      	mov	r3, r0
 801611c:	60b9      	str	r1, [r7, #8]
 801611e:	607a      	str	r2, [r7, #4]
 8016120:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016122:	89fb      	ldrh	r3, [r7, #14]
 8016124:	1c5a      	adds	r2, r3, #1
 8016126:	81fa      	strh	r2, [r7, #14]
 8016128:	461a      	mov	r2, r3
 801612a:	68bb      	ldr	r3, [r7, #8]
 801612c:	4413      	add	r3, r2
 801612e:	22ff      	movs	r2, #255	; 0xff
 8016130:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016132:	e007      	b.n	8016144 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016134:	89fb      	ldrh	r3, [r7, #14]
 8016136:	1c5a      	adds	r2, r3, #1
 8016138:	81fa      	strh	r2, [r7, #14]
 801613a:	461a      	mov	r2, r3
 801613c:	68bb      	ldr	r3, [r7, #8]
 801613e:	4413      	add	r3, r2
 8016140:	2200      	movs	r2, #0
 8016142:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016144:	89fb      	ldrh	r3, [r7, #14]
 8016146:	2b43      	cmp	r3, #67	; 0x43
 8016148:	d904      	bls.n	8016154 <dhcp_option_trailer+0x40>
 801614a:	89fb      	ldrh	r3, [r7, #14]
 801614c:	f003 0303 	and.w	r3, r3, #3
 8016150:	2b00      	cmp	r3, #0
 8016152:	d002      	beq.n	801615a <dhcp_option_trailer+0x46>
 8016154:	89fb      	ldrh	r3, [r7, #14]
 8016156:	2b43      	cmp	r3, #67	; 0x43
 8016158:	d9ec      	bls.n	8016134 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801615a:	89fb      	ldrh	r3, [r7, #14]
 801615c:	33f0      	adds	r3, #240	; 0xf0
 801615e:	b29b      	uxth	r3, r3
 8016160:	4619      	mov	r1, r3
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	f7f6 fd58 	bl	800cc18 <pbuf_realloc>
}
 8016168:	bf00      	nop
 801616a:	3710      	adds	r7, #16
 801616c:	46bd      	mov	sp, r7
 801616e:	bd80      	pop	{r7, pc}

08016170 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016170:	b480      	push	{r7}
 8016172:	b085      	sub	sp, #20
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d017      	beq.n	80161ae <dhcp_supplied_address+0x3e>
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016182:	2b00      	cmp	r3, #0
 8016184:	d013      	beq.n	80161ae <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801618a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	795b      	ldrb	r3, [r3, #5]
 8016190:	2b0a      	cmp	r3, #10
 8016192:	d007      	beq.n	80161a4 <dhcp_supplied_address+0x34>
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	795b      	ldrb	r3, [r3, #5]
 8016198:	2b05      	cmp	r3, #5
 801619a:	d003      	beq.n	80161a4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80161a0:	2b04      	cmp	r3, #4
 80161a2:	d101      	bne.n	80161a8 <dhcp_supplied_address+0x38>
 80161a4:	2301      	movs	r3, #1
 80161a6:	e000      	b.n	80161aa <dhcp_supplied_address+0x3a>
 80161a8:	2300      	movs	r3, #0
 80161aa:	b2db      	uxtb	r3, r3
 80161ac:	e000      	b.n	80161b0 <dhcp_supplied_address+0x40>
  }
  return 0;
 80161ae:	2300      	movs	r3, #0
}
 80161b0:	4618      	mov	r0, r3
 80161b2:	3714      	adds	r7, #20
 80161b4:	46bd      	mov	sp, r7
 80161b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ba:	4770      	bx	lr

080161bc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b082      	sub	sp, #8
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80161c4:	4915      	ldr	r1, [pc, #84]	; (801621c <etharp_free_entry+0x60>)
 80161c6:	687a      	ldr	r2, [r7, #4]
 80161c8:	4613      	mov	r3, r2
 80161ca:	005b      	lsls	r3, r3, #1
 80161cc:	4413      	add	r3, r2
 80161ce:	00db      	lsls	r3, r3, #3
 80161d0:	440b      	add	r3, r1
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d013      	beq.n	8016200 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80161d8:	4910      	ldr	r1, [pc, #64]	; (801621c <etharp_free_entry+0x60>)
 80161da:	687a      	ldr	r2, [r7, #4]
 80161dc:	4613      	mov	r3, r2
 80161de:	005b      	lsls	r3, r3, #1
 80161e0:	4413      	add	r3, r2
 80161e2:	00db      	lsls	r3, r3, #3
 80161e4:	440b      	add	r3, r1
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	4618      	mov	r0, r3
 80161ea:	f7f6 fe9b 	bl	800cf24 <pbuf_free>
    arp_table[i].q = NULL;
 80161ee:	490b      	ldr	r1, [pc, #44]	; (801621c <etharp_free_entry+0x60>)
 80161f0:	687a      	ldr	r2, [r7, #4]
 80161f2:	4613      	mov	r3, r2
 80161f4:	005b      	lsls	r3, r3, #1
 80161f6:	4413      	add	r3, r2
 80161f8:	00db      	lsls	r3, r3, #3
 80161fa:	440b      	add	r3, r1
 80161fc:	2200      	movs	r2, #0
 80161fe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016200:	4906      	ldr	r1, [pc, #24]	; (801621c <etharp_free_entry+0x60>)
 8016202:	687a      	ldr	r2, [r7, #4]
 8016204:	4613      	mov	r3, r2
 8016206:	005b      	lsls	r3, r3, #1
 8016208:	4413      	add	r3, r2
 801620a:	00db      	lsls	r3, r3, #3
 801620c:	440b      	add	r3, r1
 801620e:	3314      	adds	r3, #20
 8016210:	2200      	movs	r2, #0
 8016212:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016214:	bf00      	nop
 8016216:	3708      	adds	r7, #8
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}
 801621c:	20011620 	.word	0x20011620

08016220 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b082      	sub	sp, #8
 8016224:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016226:	2300      	movs	r3, #0
 8016228:	607b      	str	r3, [r7, #4]
 801622a:	e096      	b.n	801635a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801622c:	494f      	ldr	r1, [pc, #316]	; (801636c <etharp_tmr+0x14c>)
 801622e:	687a      	ldr	r2, [r7, #4]
 8016230:	4613      	mov	r3, r2
 8016232:	005b      	lsls	r3, r3, #1
 8016234:	4413      	add	r3, r2
 8016236:	00db      	lsls	r3, r3, #3
 8016238:	440b      	add	r3, r1
 801623a:	3314      	adds	r3, #20
 801623c:	781b      	ldrb	r3, [r3, #0]
 801623e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016240:	78fb      	ldrb	r3, [r7, #3]
 8016242:	2b00      	cmp	r3, #0
 8016244:	f000 8086 	beq.w	8016354 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016248:	4948      	ldr	r1, [pc, #288]	; (801636c <etharp_tmr+0x14c>)
 801624a:	687a      	ldr	r2, [r7, #4]
 801624c:	4613      	mov	r3, r2
 801624e:	005b      	lsls	r3, r3, #1
 8016250:	4413      	add	r3, r2
 8016252:	00db      	lsls	r3, r3, #3
 8016254:	440b      	add	r3, r1
 8016256:	3312      	adds	r3, #18
 8016258:	881b      	ldrh	r3, [r3, #0]
 801625a:	3301      	adds	r3, #1
 801625c:	b298      	uxth	r0, r3
 801625e:	4943      	ldr	r1, [pc, #268]	; (801636c <etharp_tmr+0x14c>)
 8016260:	687a      	ldr	r2, [r7, #4]
 8016262:	4613      	mov	r3, r2
 8016264:	005b      	lsls	r3, r3, #1
 8016266:	4413      	add	r3, r2
 8016268:	00db      	lsls	r3, r3, #3
 801626a:	440b      	add	r3, r1
 801626c:	3312      	adds	r3, #18
 801626e:	4602      	mov	r2, r0
 8016270:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016272:	493e      	ldr	r1, [pc, #248]	; (801636c <etharp_tmr+0x14c>)
 8016274:	687a      	ldr	r2, [r7, #4]
 8016276:	4613      	mov	r3, r2
 8016278:	005b      	lsls	r3, r3, #1
 801627a:	4413      	add	r3, r2
 801627c:	00db      	lsls	r3, r3, #3
 801627e:	440b      	add	r3, r1
 8016280:	3312      	adds	r3, #18
 8016282:	881b      	ldrh	r3, [r3, #0]
 8016284:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016288:	d215      	bcs.n	80162b6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801628a:	4938      	ldr	r1, [pc, #224]	; (801636c <etharp_tmr+0x14c>)
 801628c:	687a      	ldr	r2, [r7, #4]
 801628e:	4613      	mov	r3, r2
 8016290:	005b      	lsls	r3, r3, #1
 8016292:	4413      	add	r3, r2
 8016294:	00db      	lsls	r3, r3, #3
 8016296:	440b      	add	r3, r1
 8016298:	3314      	adds	r3, #20
 801629a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801629c:	2b01      	cmp	r3, #1
 801629e:	d10e      	bne.n	80162be <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80162a0:	4932      	ldr	r1, [pc, #200]	; (801636c <etharp_tmr+0x14c>)
 80162a2:	687a      	ldr	r2, [r7, #4]
 80162a4:	4613      	mov	r3, r2
 80162a6:	005b      	lsls	r3, r3, #1
 80162a8:	4413      	add	r3, r2
 80162aa:	00db      	lsls	r3, r3, #3
 80162ac:	440b      	add	r3, r1
 80162ae:	3312      	adds	r3, #18
 80162b0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80162b2:	2b04      	cmp	r3, #4
 80162b4:	d903      	bls.n	80162be <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80162b6:	6878      	ldr	r0, [r7, #4]
 80162b8:	f7ff ff80 	bl	80161bc <etharp_free_entry>
 80162bc:	e04a      	b.n	8016354 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80162be:	492b      	ldr	r1, [pc, #172]	; (801636c <etharp_tmr+0x14c>)
 80162c0:	687a      	ldr	r2, [r7, #4]
 80162c2:	4613      	mov	r3, r2
 80162c4:	005b      	lsls	r3, r3, #1
 80162c6:	4413      	add	r3, r2
 80162c8:	00db      	lsls	r3, r3, #3
 80162ca:	440b      	add	r3, r1
 80162cc:	3314      	adds	r3, #20
 80162ce:	781b      	ldrb	r3, [r3, #0]
 80162d0:	2b03      	cmp	r3, #3
 80162d2:	d10a      	bne.n	80162ea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80162d4:	4925      	ldr	r1, [pc, #148]	; (801636c <etharp_tmr+0x14c>)
 80162d6:	687a      	ldr	r2, [r7, #4]
 80162d8:	4613      	mov	r3, r2
 80162da:	005b      	lsls	r3, r3, #1
 80162dc:	4413      	add	r3, r2
 80162de:	00db      	lsls	r3, r3, #3
 80162e0:	440b      	add	r3, r1
 80162e2:	3314      	adds	r3, #20
 80162e4:	2204      	movs	r2, #4
 80162e6:	701a      	strb	r2, [r3, #0]
 80162e8:	e034      	b.n	8016354 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80162ea:	4920      	ldr	r1, [pc, #128]	; (801636c <etharp_tmr+0x14c>)
 80162ec:	687a      	ldr	r2, [r7, #4]
 80162ee:	4613      	mov	r3, r2
 80162f0:	005b      	lsls	r3, r3, #1
 80162f2:	4413      	add	r3, r2
 80162f4:	00db      	lsls	r3, r3, #3
 80162f6:	440b      	add	r3, r1
 80162f8:	3314      	adds	r3, #20
 80162fa:	781b      	ldrb	r3, [r3, #0]
 80162fc:	2b04      	cmp	r3, #4
 80162fe:	d10a      	bne.n	8016316 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016300:	491a      	ldr	r1, [pc, #104]	; (801636c <etharp_tmr+0x14c>)
 8016302:	687a      	ldr	r2, [r7, #4]
 8016304:	4613      	mov	r3, r2
 8016306:	005b      	lsls	r3, r3, #1
 8016308:	4413      	add	r3, r2
 801630a:	00db      	lsls	r3, r3, #3
 801630c:	440b      	add	r3, r1
 801630e:	3314      	adds	r3, #20
 8016310:	2202      	movs	r2, #2
 8016312:	701a      	strb	r2, [r3, #0]
 8016314:	e01e      	b.n	8016354 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016316:	4915      	ldr	r1, [pc, #84]	; (801636c <etharp_tmr+0x14c>)
 8016318:	687a      	ldr	r2, [r7, #4]
 801631a:	4613      	mov	r3, r2
 801631c:	005b      	lsls	r3, r3, #1
 801631e:	4413      	add	r3, r2
 8016320:	00db      	lsls	r3, r3, #3
 8016322:	440b      	add	r3, r1
 8016324:	3314      	adds	r3, #20
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	2b01      	cmp	r3, #1
 801632a:	d113      	bne.n	8016354 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801632c:	490f      	ldr	r1, [pc, #60]	; (801636c <etharp_tmr+0x14c>)
 801632e:	687a      	ldr	r2, [r7, #4]
 8016330:	4613      	mov	r3, r2
 8016332:	005b      	lsls	r3, r3, #1
 8016334:	4413      	add	r3, r2
 8016336:	00db      	lsls	r3, r3, #3
 8016338:	440b      	add	r3, r1
 801633a:	3308      	adds	r3, #8
 801633c:	6818      	ldr	r0, [r3, #0]
 801633e:	687a      	ldr	r2, [r7, #4]
 8016340:	4613      	mov	r3, r2
 8016342:	005b      	lsls	r3, r3, #1
 8016344:	4413      	add	r3, r2
 8016346:	00db      	lsls	r3, r3, #3
 8016348:	4a08      	ldr	r2, [pc, #32]	; (801636c <etharp_tmr+0x14c>)
 801634a:	4413      	add	r3, r2
 801634c:	3304      	adds	r3, #4
 801634e:	4619      	mov	r1, r3
 8016350:	f000 fe72 	bl	8017038 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	3301      	adds	r3, #1
 8016358:	607b      	str	r3, [r7, #4]
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	2b09      	cmp	r3, #9
 801635e:	f77f af65 	ble.w	801622c <etharp_tmr+0xc>
      }
    }
  }
}
 8016362:	bf00      	nop
 8016364:	bf00      	nop
 8016366:	3708      	adds	r7, #8
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	20011620 	.word	0x20011620

08016370 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b08a      	sub	sp, #40	; 0x28
 8016374:	af00      	add	r7, sp, #0
 8016376:	60f8      	str	r0, [r7, #12]
 8016378:	460b      	mov	r3, r1
 801637a:	607a      	str	r2, [r7, #4]
 801637c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801637e:	230a      	movs	r3, #10
 8016380:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016382:	230a      	movs	r3, #10
 8016384:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016386:	230a      	movs	r3, #10
 8016388:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801638a:	2300      	movs	r3, #0
 801638c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801638e:	230a      	movs	r3, #10
 8016390:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016392:	2300      	movs	r3, #0
 8016394:	83bb      	strh	r3, [r7, #28]
 8016396:	2300      	movs	r3, #0
 8016398:	837b      	strh	r3, [r7, #26]
 801639a:	2300      	movs	r3, #0
 801639c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801639e:	2300      	movs	r3, #0
 80163a0:	843b      	strh	r3, [r7, #32]
 80163a2:	e0ae      	b.n	8016502 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80163a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163a8:	49a6      	ldr	r1, [pc, #664]	; (8016644 <etharp_find_entry+0x2d4>)
 80163aa:	4613      	mov	r3, r2
 80163ac:	005b      	lsls	r3, r3, #1
 80163ae:	4413      	add	r3, r2
 80163b0:	00db      	lsls	r3, r3, #3
 80163b2:	440b      	add	r3, r1
 80163b4:	3314      	adds	r3, #20
 80163b6:	781b      	ldrb	r3, [r3, #0]
 80163b8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80163ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80163be:	2b0a      	cmp	r3, #10
 80163c0:	d105      	bne.n	80163ce <etharp_find_entry+0x5e>
 80163c2:	7dfb      	ldrb	r3, [r7, #23]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d102      	bne.n	80163ce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80163c8:	8c3b      	ldrh	r3, [r7, #32]
 80163ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80163cc:	e095      	b.n	80164fa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80163ce:	7dfb      	ldrb	r3, [r7, #23]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	f000 8092 	beq.w	80164fa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80163d6:	7dfb      	ldrb	r3, [r7, #23]
 80163d8:	2b01      	cmp	r3, #1
 80163da:	d009      	beq.n	80163f0 <etharp_find_entry+0x80>
 80163dc:	7dfb      	ldrb	r3, [r7, #23]
 80163de:	2b01      	cmp	r3, #1
 80163e0:	d806      	bhi.n	80163f0 <etharp_find_entry+0x80>
 80163e2:	4b99      	ldr	r3, [pc, #612]	; (8016648 <etharp_find_entry+0x2d8>)
 80163e4:	f240 1223 	movw	r2, #291	; 0x123
 80163e8:	4998      	ldr	r1, [pc, #608]	; (801664c <etharp_find_entry+0x2dc>)
 80163ea:	4899      	ldr	r0, [pc, #612]	; (8016650 <etharp_find_entry+0x2e0>)
 80163ec:	f002 fda2 	bl	8018f34 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d020      	beq.n	8016438 <etharp_find_entry+0xc8>
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	6819      	ldr	r1, [r3, #0]
 80163fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163fe:	4891      	ldr	r0, [pc, #580]	; (8016644 <etharp_find_entry+0x2d4>)
 8016400:	4613      	mov	r3, r2
 8016402:	005b      	lsls	r3, r3, #1
 8016404:	4413      	add	r3, r2
 8016406:	00db      	lsls	r3, r3, #3
 8016408:	4403      	add	r3, r0
 801640a:	3304      	adds	r3, #4
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	4299      	cmp	r1, r3
 8016410:	d112      	bne.n	8016438 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d00c      	beq.n	8016432 <etharp_find_entry+0xc2>
 8016418:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801641c:	4989      	ldr	r1, [pc, #548]	; (8016644 <etharp_find_entry+0x2d4>)
 801641e:	4613      	mov	r3, r2
 8016420:	005b      	lsls	r3, r3, #1
 8016422:	4413      	add	r3, r2
 8016424:	00db      	lsls	r3, r3, #3
 8016426:	440b      	add	r3, r1
 8016428:	3308      	adds	r3, #8
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	687a      	ldr	r2, [r7, #4]
 801642e:	429a      	cmp	r2, r3
 8016430:	d102      	bne.n	8016438 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016432:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016436:	e100      	b.n	801663a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016438:	7dfb      	ldrb	r3, [r7, #23]
 801643a:	2b01      	cmp	r3, #1
 801643c:	d140      	bne.n	80164c0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801643e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016442:	4980      	ldr	r1, [pc, #512]	; (8016644 <etharp_find_entry+0x2d4>)
 8016444:	4613      	mov	r3, r2
 8016446:	005b      	lsls	r3, r3, #1
 8016448:	4413      	add	r3, r2
 801644a:	00db      	lsls	r3, r3, #3
 801644c:	440b      	add	r3, r1
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d01a      	beq.n	801648a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016454:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016458:	497a      	ldr	r1, [pc, #488]	; (8016644 <etharp_find_entry+0x2d4>)
 801645a:	4613      	mov	r3, r2
 801645c:	005b      	lsls	r3, r3, #1
 801645e:	4413      	add	r3, r2
 8016460:	00db      	lsls	r3, r3, #3
 8016462:	440b      	add	r3, r1
 8016464:	3312      	adds	r3, #18
 8016466:	881b      	ldrh	r3, [r3, #0]
 8016468:	8bba      	ldrh	r2, [r7, #28]
 801646a:	429a      	cmp	r2, r3
 801646c:	d845      	bhi.n	80164fa <etharp_find_entry+0x18a>
            old_queue = i;
 801646e:	8c3b      	ldrh	r3, [r7, #32]
 8016470:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016472:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016476:	4973      	ldr	r1, [pc, #460]	; (8016644 <etharp_find_entry+0x2d4>)
 8016478:	4613      	mov	r3, r2
 801647a:	005b      	lsls	r3, r3, #1
 801647c:	4413      	add	r3, r2
 801647e:	00db      	lsls	r3, r3, #3
 8016480:	440b      	add	r3, r1
 8016482:	3312      	adds	r3, #18
 8016484:	881b      	ldrh	r3, [r3, #0]
 8016486:	83bb      	strh	r3, [r7, #28]
 8016488:	e037      	b.n	80164fa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801648a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801648e:	496d      	ldr	r1, [pc, #436]	; (8016644 <etharp_find_entry+0x2d4>)
 8016490:	4613      	mov	r3, r2
 8016492:	005b      	lsls	r3, r3, #1
 8016494:	4413      	add	r3, r2
 8016496:	00db      	lsls	r3, r3, #3
 8016498:	440b      	add	r3, r1
 801649a:	3312      	adds	r3, #18
 801649c:	881b      	ldrh	r3, [r3, #0]
 801649e:	8b7a      	ldrh	r2, [r7, #26]
 80164a0:	429a      	cmp	r2, r3
 80164a2:	d82a      	bhi.n	80164fa <etharp_find_entry+0x18a>
            old_pending = i;
 80164a4:	8c3b      	ldrh	r3, [r7, #32]
 80164a6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80164a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164ac:	4965      	ldr	r1, [pc, #404]	; (8016644 <etharp_find_entry+0x2d4>)
 80164ae:	4613      	mov	r3, r2
 80164b0:	005b      	lsls	r3, r3, #1
 80164b2:	4413      	add	r3, r2
 80164b4:	00db      	lsls	r3, r3, #3
 80164b6:	440b      	add	r3, r1
 80164b8:	3312      	adds	r3, #18
 80164ba:	881b      	ldrh	r3, [r3, #0]
 80164bc:	837b      	strh	r3, [r7, #26]
 80164be:	e01c      	b.n	80164fa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80164c0:	7dfb      	ldrb	r3, [r7, #23]
 80164c2:	2b01      	cmp	r3, #1
 80164c4:	d919      	bls.n	80164fa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80164c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164ca:	495e      	ldr	r1, [pc, #376]	; (8016644 <etharp_find_entry+0x2d4>)
 80164cc:	4613      	mov	r3, r2
 80164ce:	005b      	lsls	r3, r3, #1
 80164d0:	4413      	add	r3, r2
 80164d2:	00db      	lsls	r3, r3, #3
 80164d4:	440b      	add	r3, r1
 80164d6:	3312      	adds	r3, #18
 80164d8:	881b      	ldrh	r3, [r3, #0]
 80164da:	8b3a      	ldrh	r2, [r7, #24]
 80164dc:	429a      	cmp	r2, r3
 80164de:	d80c      	bhi.n	80164fa <etharp_find_entry+0x18a>
            old_stable = i;
 80164e0:	8c3b      	ldrh	r3, [r7, #32]
 80164e2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80164e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164e8:	4956      	ldr	r1, [pc, #344]	; (8016644 <etharp_find_entry+0x2d4>)
 80164ea:	4613      	mov	r3, r2
 80164ec:	005b      	lsls	r3, r3, #1
 80164ee:	4413      	add	r3, r2
 80164f0:	00db      	lsls	r3, r3, #3
 80164f2:	440b      	add	r3, r1
 80164f4:	3312      	adds	r3, #18
 80164f6:	881b      	ldrh	r3, [r3, #0]
 80164f8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80164fa:	8c3b      	ldrh	r3, [r7, #32]
 80164fc:	3301      	adds	r3, #1
 80164fe:	b29b      	uxth	r3, r3
 8016500:	843b      	strh	r3, [r7, #32]
 8016502:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016506:	2b09      	cmp	r3, #9
 8016508:	f77f af4c 	ble.w	80163a4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801650c:	7afb      	ldrb	r3, [r7, #11]
 801650e:	f003 0302 	and.w	r3, r3, #2
 8016512:	2b00      	cmp	r3, #0
 8016514:	d108      	bne.n	8016528 <etharp_find_entry+0x1b8>
 8016516:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801651a:	2b0a      	cmp	r3, #10
 801651c:	d107      	bne.n	801652e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801651e:	7afb      	ldrb	r3, [r7, #11]
 8016520:	f003 0301 	and.w	r3, r3, #1
 8016524:	2b00      	cmp	r3, #0
 8016526:	d102      	bne.n	801652e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016528:	f04f 33ff 	mov.w	r3, #4294967295
 801652c:	e085      	b.n	801663a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801652e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016532:	2b09      	cmp	r3, #9
 8016534:	dc02      	bgt.n	801653c <etharp_find_entry+0x1cc>
    i = empty;
 8016536:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016538:	843b      	strh	r3, [r7, #32]
 801653a:	e039      	b.n	80165b0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801653c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016540:	2b09      	cmp	r3, #9
 8016542:	dc14      	bgt.n	801656e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016546:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016548:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801654c:	493d      	ldr	r1, [pc, #244]	; (8016644 <etharp_find_entry+0x2d4>)
 801654e:	4613      	mov	r3, r2
 8016550:	005b      	lsls	r3, r3, #1
 8016552:	4413      	add	r3, r2
 8016554:	00db      	lsls	r3, r3, #3
 8016556:	440b      	add	r3, r1
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d018      	beq.n	8016590 <etharp_find_entry+0x220>
 801655e:	4b3a      	ldr	r3, [pc, #232]	; (8016648 <etharp_find_entry+0x2d8>)
 8016560:	f240 126d 	movw	r2, #365	; 0x16d
 8016564:	493b      	ldr	r1, [pc, #236]	; (8016654 <etharp_find_entry+0x2e4>)
 8016566:	483a      	ldr	r0, [pc, #232]	; (8016650 <etharp_find_entry+0x2e0>)
 8016568:	f002 fce4 	bl	8018f34 <iprintf>
 801656c:	e010      	b.n	8016590 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801656e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016572:	2b09      	cmp	r3, #9
 8016574:	dc02      	bgt.n	801657c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016576:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016578:	843b      	strh	r3, [r7, #32]
 801657a:	e009      	b.n	8016590 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801657c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016580:	2b09      	cmp	r3, #9
 8016582:	dc02      	bgt.n	801658a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016584:	8bfb      	ldrh	r3, [r7, #30]
 8016586:	843b      	strh	r3, [r7, #32]
 8016588:	e002      	b.n	8016590 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801658a:	f04f 33ff 	mov.w	r3, #4294967295
 801658e:	e054      	b.n	801663a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016590:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016594:	2b09      	cmp	r3, #9
 8016596:	dd06      	ble.n	80165a6 <etharp_find_entry+0x236>
 8016598:	4b2b      	ldr	r3, [pc, #172]	; (8016648 <etharp_find_entry+0x2d8>)
 801659a:	f240 127f 	movw	r2, #383	; 0x17f
 801659e:	492e      	ldr	r1, [pc, #184]	; (8016658 <etharp_find_entry+0x2e8>)
 80165a0:	482b      	ldr	r0, [pc, #172]	; (8016650 <etharp_find_entry+0x2e0>)
 80165a2:	f002 fcc7 	bl	8018f34 <iprintf>
    etharp_free_entry(i);
 80165a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80165aa:	4618      	mov	r0, r3
 80165ac:	f7ff fe06 	bl	80161bc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80165b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80165b4:	2b09      	cmp	r3, #9
 80165b6:	dd06      	ble.n	80165c6 <etharp_find_entry+0x256>
 80165b8:	4b23      	ldr	r3, [pc, #140]	; (8016648 <etharp_find_entry+0x2d8>)
 80165ba:	f240 1283 	movw	r2, #387	; 0x183
 80165be:	4926      	ldr	r1, [pc, #152]	; (8016658 <etharp_find_entry+0x2e8>)
 80165c0:	4823      	ldr	r0, [pc, #140]	; (8016650 <etharp_find_entry+0x2e0>)
 80165c2:	f002 fcb7 	bl	8018f34 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80165c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165ca:	491e      	ldr	r1, [pc, #120]	; (8016644 <etharp_find_entry+0x2d4>)
 80165cc:	4613      	mov	r3, r2
 80165ce:	005b      	lsls	r3, r3, #1
 80165d0:	4413      	add	r3, r2
 80165d2:	00db      	lsls	r3, r3, #3
 80165d4:	440b      	add	r3, r1
 80165d6:	3314      	adds	r3, #20
 80165d8:	781b      	ldrb	r3, [r3, #0]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d006      	beq.n	80165ec <etharp_find_entry+0x27c>
 80165de:	4b1a      	ldr	r3, [pc, #104]	; (8016648 <etharp_find_entry+0x2d8>)
 80165e0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80165e4:	491d      	ldr	r1, [pc, #116]	; (801665c <etharp_find_entry+0x2ec>)
 80165e6:	481a      	ldr	r0, [pc, #104]	; (8016650 <etharp_find_entry+0x2e0>)
 80165e8:	f002 fca4 	bl	8018f34 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d00b      	beq.n	801660a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80165f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	6819      	ldr	r1, [r3, #0]
 80165fa:	4812      	ldr	r0, [pc, #72]	; (8016644 <etharp_find_entry+0x2d4>)
 80165fc:	4613      	mov	r3, r2
 80165fe:	005b      	lsls	r3, r3, #1
 8016600:	4413      	add	r3, r2
 8016602:	00db      	lsls	r3, r3, #3
 8016604:	4403      	add	r3, r0
 8016606:	3304      	adds	r3, #4
 8016608:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801660a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801660e:	490d      	ldr	r1, [pc, #52]	; (8016644 <etharp_find_entry+0x2d4>)
 8016610:	4613      	mov	r3, r2
 8016612:	005b      	lsls	r3, r3, #1
 8016614:	4413      	add	r3, r2
 8016616:	00db      	lsls	r3, r3, #3
 8016618:	440b      	add	r3, r1
 801661a:	3312      	adds	r3, #18
 801661c:	2200      	movs	r2, #0
 801661e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016620:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016624:	4907      	ldr	r1, [pc, #28]	; (8016644 <etharp_find_entry+0x2d4>)
 8016626:	4613      	mov	r3, r2
 8016628:	005b      	lsls	r3, r3, #1
 801662a:	4413      	add	r3, r2
 801662c:	00db      	lsls	r3, r3, #3
 801662e:	440b      	add	r3, r1
 8016630:	3308      	adds	r3, #8
 8016632:	687a      	ldr	r2, [r7, #4]
 8016634:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016636:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801663a:	4618      	mov	r0, r3
 801663c:	3728      	adds	r7, #40	; 0x28
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}
 8016642:	bf00      	nop
 8016644:	20011620 	.word	0x20011620
 8016648:	0801d840 	.word	0x0801d840
 801664c:	0801d878 	.word	0x0801d878
 8016650:	0801d8b8 	.word	0x0801d8b8
 8016654:	0801d8e0 	.word	0x0801d8e0
 8016658:	0801d8f8 	.word	0x0801d8f8
 801665c:	0801d90c 	.word	0x0801d90c

08016660 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b088      	sub	sp, #32
 8016664:	af02      	add	r7, sp, #8
 8016666:	60f8      	str	r0, [r7, #12]
 8016668:	60b9      	str	r1, [r7, #8]
 801666a:	607a      	str	r2, [r7, #4]
 801666c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016674:	2b06      	cmp	r3, #6
 8016676:	d006      	beq.n	8016686 <etharp_update_arp_entry+0x26>
 8016678:	4b48      	ldr	r3, [pc, #288]	; (801679c <etharp_update_arp_entry+0x13c>)
 801667a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801667e:	4948      	ldr	r1, [pc, #288]	; (80167a0 <etharp_update_arp_entry+0x140>)
 8016680:	4848      	ldr	r0, [pc, #288]	; (80167a4 <etharp_update_arp_entry+0x144>)
 8016682:	f002 fc57 	bl	8018f34 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016686:	68bb      	ldr	r3, [r7, #8]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d012      	beq.n	80166b2 <etharp_update_arp_entry+0x52>
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d00e      	beq.n	80166b2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	68f9      	ldr	r1, [r7, #12]
 801669a:	4618      	mov	r0, r3
 801669c:	f001 f920 	bl	80178e0 <ip4_addr_isbroadcast_u32>
 80166a0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d105      	bne.n	80166b2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80166ae:	2be0      	cmp	r3, #224	; 0xe0
 80166b0:	d102      	bne.n	80166b8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80166b2:	f06f 030f 	mvn.w	r3, #15
 80166b6:	e06c      	b.n	8016792 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80166b8:	78fb      	ldrb	r3, [r7, #3]
 80166ba:	68fa      	ldr	r2, [r7, #12]
 80166bc:	4619      	mov	r1, r3
 80166be:	68b8      	ldr	r0, [r7, #8]
 80166c0:	f7ff fe56 	bl	8016370 <etharp_find_entry>
 80166c4:	4603      	mov	r3, r0
 80166c6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80166c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	da02      	bge.n	80166d6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80166d0:	8afb      	ldrh	r3, [r7, #22]
 80166d2:	b25b      	sxtb	r3, r3
 80166d4:	e05d      	b.n	8016792 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80166d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166da:	4933      	ldr	r1, [pc, #204]	; (80167a8 <etharp_update_arp_entry+0x148>)
 80166dc:	4613      	mov	r3, r2
 80166de:	005b      	lsls	r3, r3, #1
 80166e0:	4413      	add	r3, r2
 80166e2:	00db      	lsls	r3, r3, #3
 80166e4:	440b      	add	r3, r1
 80166e6:	3314      	adds	r3, #20
 80166e8:	2202      	movs	r2, #2
 80166ea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80166ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166f0:	492d      	ldr	r1, [pc, #180]	; (80167a8 <etharp_update_arp_entry+0x148>)
 80166f2:	4613      	mov	r3, r2
 80166f4:	005b      	lsls	r3, r3, #1
 80166f6:	4413      	add	r3, r2
 80166f8:	00db      	lsls	r3, r3, #3
 80166fa:	440b      	add	r3, r1
 80166fc:	3308      	adds	r3, #8
 80166fe:	68fa      	ldr	r2, [r7, #12]
 8016700:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016702:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016706:	4613      	mov	r3, r2
 8016708:	005b      	lsls	r3, r3, #1
 801670a:	4413      	add	r3, r2
 801670c:	00db      	lsls	r3, r3, #3
 801670e:	3308      	adds	r3, #8
 8016710:	4a25      	ldr	r2, [pc, #148]	; (80167a8 <etharp_update_arp_entry+0x148>)
 8016712:	4413      	add	r3, r2
 8016714:	3304      	adds	r3, #4
 8016716:	2206      	movs	r2, #6
 8016718:	6879      	ldr	r1, [r7, #4]
 801671a:	4618      	mov	r0, r3
 801671c:	f002 fb45 	bl	8018daa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016720:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016724:	4920      	ldr	r1, [pc, #128]	; (80167a8 <etharp_update_arp_entry+0x148>)
 8016726:	4613      	mov	r3, r2
 8016728:	005b      	lsls	r3, r3, #1
 801672a:	4413      	add	r3, r2
 801672c:	00db      	lsls	r3, r3, #3
 801672e:	440b      	add	r3, r1
 8016730:	3312      	adds	r3, #18
 8016732:	2200      	movs	r2, #0
 8016734:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016736:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801673a:	491b      	ldr	r1, [pc, #108]	; (80167a8 <etharp_update_arp_entry+0x148>)
 801673c:	4613      	mov	r3, r2
 801673e:	005b      	lsls	r3, r3, #1
 8016740:	4413      	add	r3, r2
 8016742:	00db      	lsls	r3, r3, #3
 8016744:	440b      	add	r3, r1
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d021      	beq.n	8016790 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801674c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016750:	4915      	ldr	r1, [pc, #84]	; (80167a8 <etharp_update_arp_entry+0x148>)
 8016752:	4613      	mov	r3, r2
 8016754:	005b      	lsls	r3, r3, #1
 8016756:	4413      	add	r3, r2
 8016758:	00db      	lsls	r3, r3, #3
 801675a:	440b      	add	r3, r1
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016760:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016764:	4910      	ldr	r1, [pc, #64]	; (80167a8 <etharp_update_arp_entry+0x148>)
 8016766:	4613      	mov	r3, r2
 8016768:	005b      	lsls	r3, r3, #1
 801676a:	4413      	add	r3, r2
 801676c:	00db      	lsls	r3, r3, #3
 801676e:	440b      	add	r3, r1
 8016770:	2200      	movs	r2, #0
 8016772:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801677a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801677e:	9300      	str	r3, [sp, #0]
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	6939      	ldr	r1, [r7, #16]
 8016784:	68f8      	ldr	r0, [r7, #12]
 8016786:	f001 ffb9 	bl	80186fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801678a:	6938      	ldr	r0, [r7, #16]
 801678c:	f7f6 fbca 	bl	800cf24 <pbuf_free>
  }
  return ERR_OK;
 8016790:	2300      	movs	r3, #0
}
 8016792:	4618      	mov	r0, r3
 8016794:	3718      	adds	r7, #24
 8016796:	46bd      	mov	sp, r7
 8016798:	bd80      	pop	{r7, pc}
 801679a:	bf00      	nop
 801679c:	0801d840 	.word	0x0801d840
 80167a0:	0801d938 	.word	0x0801d938
 80167a4:	0801d8b8 	.word	0x0801d8b8
 80167a8:	20011620 	.word	0x20011620

080167ac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b084      	sub	sp, #16
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80167b4:	2300      	movs	r3, #0
 80167b6:	60fb      	str	r3, [r7, #12]
 80167b8:	e01e      	b.n	80167f8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80167ba:	4913      	ldr	r1, [pc, #76]	; (8016808 <etharp_cleanup_netif+0x5c>)
 80167bc:	68fa      	ldr	r2, [r7, #12]
 80167be:	4613      	mov	r3, r2
 80167c0:	005b      	lsls	r3, r3, #1
 80167c2:	4413      	add	r3, r2
 80167c4:	00db      	lsls	r3, r3, #3
 80167c6:	440b      	add	r3, r1
 80167c8:	3314      	adds	r3, #20
 80167ca:	781b      	ldrb	r3, [r3, #0]
 80167cc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80167ce:	7afb      	ldrb	r3, [r7, #11]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d00e      	beq.n	80167f2 <etharp_cleanup_netif+0x46>
 80167d4:	490c      	ldr	r1, [pc, #48]	; (8016808 <etharp_cleanup_netif+0x5c>)
 80167d6:	68fa      	ldr	r2, [r7, #12]
 80167d8:	4613      	mov	r3, r2
 80167da:	005b      	lsls	r3, r3, #1
 80167dc:	4413      	add	r3, r2
 80167de:	00db      	lsls	r3, r3, #3
 80167e0:	440b      	add	r3, r1
 80167e2:	3308      	adds	r3, #8
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	687a      	ldr	r2, [r7, #4]
 80167e8:	429a      	cmp	r2, r3
 80167ea:	d102      	bne.n	80167f2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80167ec:	68f8      	ldr	r0, [r7, #12]
 80167ee:	f7ff fce5 	bl	80161bc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	3301      	adds	r3, #1
 80167f6:	60fb      	str	r3, [r7, #12]
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	2b09      	cmp	r3, #9
 80167fc:	dddd      	ble.n	80167ba <etharp_cleanup_netif+0xe>
    }
  }
}
 80167fe:	bf00      	nop
 8016800:	bf00      	nop
 8016802:	3710      	adds	r7, #16
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}
 8016808:	20011620 	.word	0x20011620

0801680c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801680c:	b5b0      	push	{r4, r5, r7, lr}
 801680e:	b08a      	sub	sp, #40	; 0x28
 8016810:	af04      	add	r7, sp, #16
 8016812:	6078      	str	r0, [r7, #4]
 8016814:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016816:	683b      	ldr	r3, [r7, #0]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d107      	bne.n	801682c <etharp_input+0x20>
 801681c:	4b3f      	ldr	r3, [pc, #252]	; (801691c <etharp_input+0x110>)
 801681e:	f240 228a 	movw	r2, #650	; 0x28a
 8016822:	493f      	ldr	r1, [pc, #252]	; (8016920 <etharp_input+0x114>)
 8016824:	483f      	ldr	r0, [pc, #252]	; (8016924 <etharp_input+0x118>)
 8016826:	f002 fb85 	bl	8018f34 <iprintf>
 801682a:	e074      	b.n	8016916 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	685b      	ldr	r3, [r3, #4]
 8016830:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016832:	693b      	ldr	r3, [r7, #16]
 8016834:	881b      	ldrh	r3, [r3, #0]
 8016836:	b29b      	uxth	r3, r3
 8016838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801683c:	d10c      	bne.n	8016858 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801683e:	693b      	ldr	r3, [r7, #16]
 8016840:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016842:	2b06      	cmp	r3, #6
 8016844:	d108      	bne.n	8016858 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016846:	693b      	ldr	r3, [r7, #16]
 8016848:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801684a:	2b04      	cmp	r3, #4
 801684c:	d104      	bne.n	8016858 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801684e:	693b      	ldr	r3, [r7, #16]
 8016850:	885b      	ldrh	r3, [r3, #2]
 8016852:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016854:	2b08      	cmp	r3, #8
 8016856:	d003      	beq.n	8016860 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016858:	6878      	ldr	r0, [r7, #4]
 801685a:	f7f6 fb63 	bl	800cf24 <pbuf_free>
    return;
 801685e:	e05a      	b.n	8016916 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016860:	693b      	ldr	r3, [r7, #16]
 8016862:	330e      	adds	r3, #14
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016868:	693b      	ldr	r3, [r7, #16]
 801686a:	3318      	adds	r3, #24
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	3304      	adds	r3, #4
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d102      	bne.n	8016880 <etharp_input+0x74>
    for_us = 0;
 801687a:	2300      	movs	r3, #0
 801687c:	75fb      	strb	r3, [r7, #23]
 801687e:	e009      	b.n	8016894 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016880:	68ba      	ldr	r2, [r7, #8]
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	3304      	adds	r3, #4
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	429a      	cmp	r2, r3
 801688a:	bf0c      	ite	eq
 801688c:	2301      	moveq	r3, #1
 801688e:	2300      	movne	r3, #0
 8016890:	b2db      	uxtb	r3, r3
 8016892:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016894:	693b      	ldr	r3, [r7, #16]
 8016896:	f103 0208 	add.w	r2, r3, #8
 801689a:	7dfb      	ldrb	r3, [r7, #23]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d001      	beq.n	80168a4 <etharp_input+0x98>
 80168a0:	2301      	movs	r3, #1
 80168a2:	e000      	b.n	80168a6 <etharp_input+0x9a>
 80168a4:	2302      	movs	r3, #2
 80168a6:	f107 010c 	add.w	r1, r7, #12
 80168aa:	6838      	ldr	r0, [r7, #0]
 80168ac:	f7ff fed8 	bl	8016660 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80168b0:	693b      	ldr	r3, [r7, #16]
 80168b2:	88db      	ldrh	r3, [r3, #6]
 80168b4:	b29b      	uxth	r3, r3
 80168b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80168ba:	d003      	beq.n	80168c4 <etharp_input+0xb8>
 80168bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80168c0:	d01e      	beq.n	8016900 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80168c2:	e025      	b.n	8016910 <etharp_input+0x104>
      if (for_us) {
 80168c4:	7dfb      	ldrb	r3, [r7, #23]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d021      	beq.n	801690e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80168d0:	693b      	ldr	r3, [r7, #16]
 80168d2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80168d6:	683b      	ldr	r3, [r7, #0]
 80168d8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80168e0:	693a      	ldr	r2, [r7, #16]
 80168e2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80168e4:	2102      	movs	r1, #2
 80168e6:	9103      	str	r1, [sp, #12]
 80168e8:	f107 010c 	add.w	r1, r7, #12
 80168ec:	9102      	str	r1, [sp, #8]
 80168ee:	9201      	str	r2, [sp, #4]
 80168f0:	9300      	str	r3, [sp, #0]
 80168f2:	462b      	mov	r3, r5
 80168f4:	4622      	mov	r2, r4
 80168f6:	4601      	mov	r1, r0
 80168f8:	6838      	ldr	r0, [r7, #0]
 80168fa:	f000 faef 	bl	8016edc <etharp_raw>
      break;
 80168fe:	e006      	b.n	801690e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016900:	f107 030c 	add.w	r3, r7, #12
 8016904:	4619      	mov	r1, r3
 8016906:	6838      	ldr	r0, [r7, #0]
 8016908:	f7fe f9fc 	bl	8014d04 <dhcp_arp_reply>
      break;
 801690c:	e000      	b.n	8016910 <etharp_input+0x104>
      break;
 801690e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016910:	6878      	ldr	r0, [r7, #4]
 8016912:	f7f6 fb07 	bl	800cf24 <pbuf_free>
}
 8016916:	3718      	adds	r7, #24
 8016918:	46bd      	mov	sp, r7
 801691a:	bdb0      	pop	{r4, r5, r7, pc}
 801691c:	0801d840 	.word	0x0801d840
 8016920:	0801d990 	.word	0x0801d990
 8016924:	0801d8b8 	.word	0x0801d8b8

08016928 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b086      	sub	sp, #24
 801692c:	af02      	add	r7, sp, #8
 801692e:	60f8      	str	r0, [r7, #12]
 8016930:	60b9      	str	r1, [r7, #8]
 8016932:	4613      	mov	r3, r2
 8016934:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016936:	79fa      	ldrb	r2, [r7, #7]
 8016938:	4944      	ldr	r1, [pc, #272]	; (8016a4c <etharp_output_to_arp_index+0x124>)
 801693a:	4613      	mov	r3, r2
 801693c:	005b      	lsls	r3, r3, #1
 801693e:	4413      	add	r3, r2
 8016940:	00db      	lsls	r3, r3, #3
 8016942:	440b      	add	r3, r1
 8016944:	3314      	adds	r3, #20
 8016946:	781b      	ldrb	r3, [r3, #0]
 8016948:	2b01      	cmp	r3, #1
 801694a:	d806      	bhi.n	801695a <etharp_output_to_arp_index+0x32>
 801694c:	4b40      	ldr	r3, [pc, #256]	; (8016a50 <etharp_output_to_arp_index+0x128>)
 801694e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016952:	4940      	ldr	r1, [pc, #256]	; (8016a54 <etharp_output_to_arp_index+0x12c>)
 8016954:	4840      	ldr	r0, [pc, #256]	; (8016a58 <etharp_output_to_arp_index+0x130>)
 8016956:	f002 faed 	bl	8018f34 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801695a:	79fa      	ldrb	r2, [r7, #7]
 801695c:	493b      	ldr	r1, [pc, #236]	; (8016a4c <etharp_output_to_arp_index+0x124>)
 801695e:	4613      	mov	r3, r2
 8016960:	005b      	lsls	r3, r3, #1
 8016962:	4413      	add	r3, r2
 8016964:	00db      	lsls	r3, r3, #3
 8016966:	440b      	add	r3, r1
 8016968:	3314      	adds	r3, #20
 801696a:	781b      	ldrb	r3, [r3, #0]
 801696c:	2b02      	cmp	r3, #2
 801696e:	d153      	bne.n	8016a18 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016970:	79fa      	ldrb	r2, [r7, #7]
 8016972:	4936      	ldr	r1, [pc, #216]	; (8016a4c <etharp_output_to_arp_index+0x124>)
 8016974:	4613      	mov	r3, r2
 8016976:	005b      	lsls	r3, r3, #1
 8016978:	4413      	add	r3, r2
 801697a:	00db      	lsls	r3, r3, #3
 801697c:	440b      	add	r3, r1
 801697e:	3312      	adds	r3, #18
 8016980:	881b      	ldrh	r3, [r3, #0]
 8016982:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016986:	d919      	bls.n	80169bc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016988:	79fa      	ldrb	r2, [r7, #7]
 801698a:	4613      	mov	r3, r2
 801698c:	005b      	lsls	r3, r3, #1
 801698e:	4413      	add	r3, r2
 8016990:	00db      	lsls	r3, r3, #3
 8016992:	4a2e      	ldr	r2, [pc, #184]	; (8016a4c <etharp_output_to_arp_index+0x124>)
 8016994:	4413      	add	r3, r2
 8016996:	3304      	adds	r3, #4
 8016998:	4619      	mov	r1, r3
 801699a:	68f8      	ldr	r0, [r7, #12]
 801699c:	f000 fb4c 	bl	8017038 <etharp_request>
 80169a0:	4603      	mov	r3, r0
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d138      	bne.n	8016a18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80169a6:	79fa      	ldrb	r2, [r7, #7]
 80169a8:	4928      	ldr	r1, [pc, #160]	; (8016a4c <etharp_output_to_arp_index+0x124>)
 80169aa:	4613      	mov	r3, r2
 80169ac:	005b      	lsls	r3, r3, #1
 80169ae:	4413      	add	r3, r2
 80169b0:	00db      	lsls	r3, r3, #3
 80169b2:	440b      	add	r3, r1
 80169b4:	3314      	adds	r3, #20
 80169b6:	2203      	movs	r2, #3
 80169b8:	701a      	strb	r2, [r3, #0]
 80169ba:	e02d      	b.n	8016a18 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80169bc:	79fa      	ldrb	r2, [r7, #7]
 80169be:	4923      	ldr	r1, [pc, #140]	; (8016a4c <etharp_output_to_arp_index+0x124>)
 80169c0:	4613      	mov	r3, r2
 80169c2:	005b      	lsls	r3, r3, #1
 80169c4:	4413      	add	r3, r2
 80169c6:	00db      	lsls	r3, r3, #3
 80169c8:	440b      	add	r3, r1
 80169ca:	3312      	adds	r3, #18
 80169cc:	881b      	ldrh	r3, [r3, #0]
 80169ce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80169d2:	d321      	bcc.n	8016a18 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80169d4:	79fa      	ldrb	r2, [r7, #7]
 80169d6:	4613      	mov	r3, r2
 80169d8:	005b      	lsls	r3, r3, #1
 80169da:	4413      	add	r3, r2
 80169dc:	00db      	lsls	r3, r3, #3
 80169de:	4a1b      	ldr	r2, [pc, #108]	; (8016a4c <etharp_output_to_arp_index+0x124>)
 80169e0:	4413      	add	r3, r2
 80169e2:	1d19      	adds	r1, r3, #4
 80169e4:	79fa      	ldrb	r2, [r7, #7]
 80169e6:	4613      	mov	r3, r2
 80169e8:	005b      	lsls	r3, r3, #1
 80169ea:	4413      	add	r3, r2
 80169ec:	00db      	lsls	r3, r3, #3
 80169ee:	3308      	adds	r3, #8
 80169f0:	4a16      	ldr	r2, [pc, #88]	; (8016a4c <etharp_output_to_arp_index+0x124>)
 80169f2:	4413      	add	r3, r2
 80169f4:	3304      	adds	r3, #4
 80169f6:	461a      	mov	r2, r3
 80169f8:	68f8      	ldr	r0, [r7, #12]
 80169fa:	f000 fafb 	bl	8016ff4 <etharp_request_dst>
 80169fe:	4603      	mov	r3, r0
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d109      	bne.n	8016a18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016a04:	79fa      	ldrb	r2, [r7, #7]
 8016a06:	4911      	ldr	r1, [pc, #68]	; (8016a4c <etharp_output_to_arp_index+0x124>)
 8016a08:	4613      	mov	r3, r2
 8016a0a:	005b      	lsls	r3, r3, #1
 8016a0c:	4413      	add	r3, r2
 8016a0e:	00db      	lsls	r3, r3, #3
 8016a10:	440b      	add	r3, r1
 8016a12:	3314      	adds	r3, #20
 8016a14:	2203      	movs	r2, #3
 8016a16:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8016a1e:	79fa      	ldrb	r2, [r7, #7]
 8016a20:	4613      	mov	r3, r2
 8016a22:	005b      	lsls	r3, r3, #1
 8016a24:	4413      	add	r3, r2
 8016a26:	00db      	lsls	r3, r3, #3
 8016a28:	3308      	adds	r3, #8
 8016a2a:	4a08      	ldr	r2, [pc, #32]	; (8016a4c <etharp_output_to_arp_index+0x124>)
 8016a2c:	4413      	add	r3, r2
 8016a2e:	3304      	adds	r3, #4
 8016a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016a34:	9200      	str	r2, [sp, #0]
 8016a36:	460a      	mov	r2, r1
 8016a38:	68b9      	ldr	r1, [r7, #8]
 8016a3a:	68f8      	ldr	r0, [r7, #12]
 8016a3c:	f001 fe5e 	bl	80186fc <ethernet_output>
 8016a40:	4603      	mov	r3, r0
}
 8016a42:	4618      	mov	r0, r3
 8016a44:	3710      	adds	r7, #16
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}
 8016a4a:	bf00      	nop
 8016a4c:	20011620 	.word	0x20011620
 8016a50:	0801d840 	.word	0x0801d840
 8016a54:	0801d9b0 	.word	0x0801d9b0
 8016a58:	0801d8b8 	.word	0x0801d8b8

08016a5c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b08a      	sub	sp, #40	; 0x28
 8016a60:	af02      	add	r7, sp, #8
 8016a62:	60f8      	str	r0, [r7, #12]
 8016a64:	60b9      	str	r1, [r7, #8]
 8016a66:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d106      	bne.n	8016a80 <etharp_output+0x24>
 8016a72:	4b73      	ldr	r3, [pc, #460]	; (8016c40 <etharp_output+0x1e4>)
 8016a74:	f240 321e 	movw	r2, #798	; 0x31e
 8016a78:	4972      	ldr	r1, [pc, #456]	; (8016c44 <etharp_output+0x1e8>)
 8016a7a:	4873      	ldr	r0, [pc, #460]	; (8016c48 <etharp_output+0x1ec>)
 8016a7c:	f002 fa5a 	bl	8018f34 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016a80:	68bb      	ldr	r3, [r7, #8]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d106      	bne.n	8016a94 <etharp_output+0x38>
 8016a86:	4b6e      	ldr	r3, [pc, #440]	; (8016c40 <etharp_output+0x1e4>)
 8016a88:	f240 321f 	movw	r2, #799	; 0x31f
 8016a8c:	496f      	ldr	r1, [pc, #444]	; (8016c4c <etharp_output+0x1f0>)
 8016a8e:	486e      	ldr	r0, [pc, #440]	; (8016c48 <etharp_output+0x1ec>)
 8016a90:	f002 fa50 	bl	8018f34 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d106      	bne.n	8016aa8 <etharp_output+0x4c>
 8016a9a:	4b69      	ldr	r3, [pc, #420]	; (8016c40 <etharp_output+0x1e4>)
 8016a9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016aa0:	496b      	ldr	r1, [pc, #428]	; (8016c50 <etharp_output+0x1f4>)
 8016aa2:	4869      	ldr	r0, [pc, #420]	; (8016c48 <etharp_output+0x1ec>)
 8016aa4:	f002 fa46 	bl	8018f34 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	68f9      	ldr	r1, [r7, #12]
 8016aae:	4618      	mov	r0, r3
 8016ab0:	f000 ff16 	bl	80178e0 <ip4_addr_isbroadcast_u32>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d002      	beq.n	8016ac0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016aba:	4b66      	ldr	r3, [pc, #408]	; (8016c54 <etharp_output+0x1f8>)
 8016abc:	61fb      	str	r3, [r7, #28]
 8016abe:	e0af      	b.n	8016c20 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016ac8:	2be0      	cmp	r3, #224	; 0xe0
 8016aca:	d118      	bne.n	8016afe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016acc:	2301      	movs	r3, #1
 8016ace:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016ad4:	235e      	movs	r3, #94	; 0x5e
 8016ad6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	3301      	adds	r3, #1
 8016adc:	781b      	ldrb	r3, [r3, #0]
 8016ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016ae2:	b2db      	uxtb	r3, r3
 8016ae4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	3302      	adds	r3, #2
 8016aea:	781b      	ldrb	r3, [r3, #0]
 8016aec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	3303      	adds	r3, #3
 8016af2:	781b      	ldrb	r3, [r3, #0]
 8016af4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016af6:	f107 0310 	add.w	r3, r7, #16
 8016afa:	61fb      	str	r3, [r7, #28]
 8016afc:	e090      	b.n	8016c20 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	681a      	ldr	r2, [r3, #0]
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	3304      	adds	r3, #4
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	405a      	eors	r2, r3
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	3308      	adds	r3, #8
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	4013      	ands	r3, r2
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d012      	beq.n	8016b3c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016b1c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016b20:	4293      	cmp	r3, r2
 8016b22:	d00b      	beq.n	8016b3c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	330c      	adds	r3, #12
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d003      	beq.n	8016b36 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	330c      	adds	r3, #12
 8016b32:	61bb      	str	r3, [r7, #24]
 8016b34:	e002      	b.n	8016b3c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016b36:	f06f 0303 	mvn.w	r3, #3
 8016b3a:	e07d      	b.n	8016c38 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016b3c:	4b46      	ldr	r3, [pc, #280]	; (8016c58 <etharp_output+0x1fc>)
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	4619      	mov	r1, r3
 8016b42:	4a46      	ldr	r2, [pc, #280]	; (8016c5c <etharp_output+0x200>)
 8016b44:	460b      	mov	r3, r1
 8016b46:	005b      	lsls	r3, r3, #1
 8016b48:	440b      	add	r3, r1
 8016b4a:	00db      	lsls	r3, r3, #3
 8016b4c:	4413      	add	r3, r2
 8016b4e:	3314      	adds	r3, #20
 8016b50:	781b      	ldrb	r3, [r3, #0]
 8016b52:	2b01      	cmp	r3, #1
 8016b54:	d925      	bls.n	8016ba2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016b56:	4b40      	ldr	r3, [pc, #256]	; (8016c58 <etharp_output+0x1fc>)
 8016b58:	781b      	ldrb	r3, [r3, #0]
 8016b5a:	4619      	mov	r1, r3
 8016b5c:	4a3f      	ldr	r2, [pc, #252]	; (8016c5c <etharp_output+0x200>)
 8016b5e:	460b      	mov	r3, r1
 8016b60:	005b      	lsls	r3, r3, #1
 8016b62:	440b      	add	r3, r1
 8016b64:	00db      	lsls	r3, r3, #3
 8016b66:	4413      	add	r3, r2
 8016b68:	3308      	adds	r3, #8
 8016b6a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016b6c:	68fa      	ldr	r2, [r7, #12]
 8016b6e:	429a      	cmp	r2, r3
 8016b70:	d117      	bne.n	8016ba2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016b72:	69bb      	ldr	r3, [r7, #24]
 8016b74:	681a      	ldr	r2, [r3, #0]
 8016b76:	4b38      	ldr	r3, [pc, #224]	; (8016c58 <etharp_output+0x1fc>)
 8016b78:	781b      	ldrb	r3, [r3, #0]
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	4937      	ldr	r1, [pc, #220]	; (8016c5c <etharp_output+0x200>)
 8016b7e:	4603      	mov	r3, r0
 8016b80:	005b      	lsls	r3, r3, #1
 8016b82:	4403      	add	r3, r0
 8016b84:	00db      	lsls	r3, r3, #3
 8016b86:	440b      	add	r3, r1
 8016b88:	3304      	adds	r3, #4
 8016b8a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016b8c:	429a      	cmp	r2, r3
 8016b8e:	d108      	bne.n	8016ba2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016b90:	4b31      	ldr	r3, [pc, #196]	; (8016c58 <etharp_output+0x1fc>)
 8016b92:	781b      	ldrb	r3, [r3, #0]
 8016b94:	461a      	mov	r2, r3
 8016b96:	68b9      	ldr	r1, [r7, #8]
 8016b98:	68f8      	ldr	r0, [r7, #12]
 8016b9a:	f7ff fec5 	bl	8016928 <etharp_output_to_arp_index>
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	e04a      	b.n	8016c38 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	75fb      	strb	r3, [r7, #23]
 8016ba6:	e031      	b.n	8016c0c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ba8:	7dfa      	ldrb	r2, [r7, #23]
 8016baa:	492c      	ldr	r1, [pc, #176]	; (8016c5c <etharp_output+0x200>)
 8016bac:	4613      	mov	r3, r2
 8016bae:	005b      	lsls	r3, r3, #1
 8016bb0:	4413      	add	r3, r2
 8016bb2:	00db      	lsls	r3, r3, #3
 8016bb4:	440b      	add	r3, r1
 8016bb6:	3314      	adds	r3, #20
 8016bb8:	781b      	ldrb	r3, [r3, #0]
 8016bba:	2b01      	cmp	r3, #1
 8016bbc:	d923      	bls.n	8016c06 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016bbe:	7dfa      	ldrb	r2, [r7, #23]
 8016bc0:	4926      	ldr	r1, [pc, #152]	; (8016c5c <etharp_output+0x200>)
 8016bc2:	4613      	mov	r3, r2
 8016bc4:	005b      	lsls	r3, r3, #1
 8016bc6:	4413      	add	r3, r2
 8016bc8:	00db      	lsls	r3, r3, #3
 8016bca:	440b      	add	r3, r1
 8016bcc:	3308      	adds	r3, #8
 8016bce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016bd0:	68fa      	ldr	r2, [r7, #12]
 8016bd2:	429a      	cmp	r2, r3
 8016bd4:	d117      	bne.n	8016c06 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016bd6:	69bb      	ldr	r3, [r7, #24]
 8016bd8:	6819      	ldr	r1, [r3, #0]
 8016bda:	7dfa      	ldrb	r2, [r7, #23]
 8016bdc:	481f      	ldr	r0, [pc, #124]	; (8016c5c <etharp_output+0x200>)
 8016bde:	4613      	mov	r3, r2
 8016be0:	005b      	lsls	r3, r3, #1
 8016be2:	4413      	add	r3, r2
 8016be4:	00db      	lsls	r3, r3, #3
 8016be6:	4403      	add	r3, r0
 8016be8:	3304      	adds	r3, #4
 8016bea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016bec:	4299      	cmp	r1, r3
 8016bee:	d10a      	bne.n	8016c06 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016bf0:	4a19      	ldr	r2, [pc, #100]	; (8016c58 <etharp_output+0x1fc>)
 8016bf2:	7dfb      	ldrb	r3, [r7, #23]
 8016bf4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016bf6:	7dfb      	ldrb	r3, [r7, #23]
 8016bf8:	461a      	mov	r2, r3
 8016bfa:	68b9      	ldr	r1, [r7, #8]
 8016bfc:	68f8      	ldr	r0, [r7, #12]
 8016bfe:	f7ff fe93 	bl	8016928 <etharp_output_to_arp_index>
 8016c02:	4603      	mov	r3, r0
 8016c04:	e018      	b.n	8016c38 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016c06:	7dfb      	ldrb	r3, [r7, #23]
 8016c08:	3301      	adds	r3, #1
 8016c0a:	75fb      	strb	r3, [r7, #23]
 8016c0c:	7dfb      	ldrb	r3, [r7, #23]
 8016c0e:	2b09      	cmp	r3, #9
 8016c10:	d9ca      	bls.n	8016ba8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016c12:	68ba      	ldr	r2, [r7, #8]
 8016c14:	69b9      	ldr	r1, [r7, #24]
 8016c16:	68f8      	ldr	r0, [r7, #12]
 8016c18:	f000 f822 	bl	8016c60 <etharp_query>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	e00b      	b.n	8016c38 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016c26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016c2a:	9300      	str	r3, [sp, #0]
 8016c2c:	69fb      	ldr	r3, [r7, #28]
 8016c2e:	68b9      	ldr	r1, [r7, #8]
 8016c30:	68f8      	ldr	r0, [r7, #12]
 8016c32:	f001 fd63 	bl	80186fc <ethernet_output>
 8016c36:	4603      	mov	r3, r0
}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3720      	adds	r7, #32
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}
 8016c40:	0801d840 	.word	0x0801d840
 8016c44:	0801d990 	.word	0x0801d990
 8016c48:	0801d8b8 	.word	0x0801d8b8
 8016c4c:	0801d9e0 	.word	0x0801d9e0
 8016c50:	0801d980 	.word	0x0801d980
 8016c54:	0802818c 	.word	0x0802818c
 8016c58:	20011710 	.word	0x20011710
 8016c5c:	20011620 	.word	0x20011620

08016c60 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b08c      	sub	sp, #48	; 0x30
 8016c64:	af02      	add	r7, sp, #8
 8016c66:	60f8      	str	r0, [r7, #12]
 8016c68:	60b9      	str	r1, [r7, #8]
 8016c6a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	332a      	adds	r3, #42	; 0x2a
 8016c70:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016c72:	23ff      	movs	r3, #255	; 0xff
 8016c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016c78:	2300      	movs	r3, #0
 8016c7a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c7c:	68bb      	ldr	r3, [r7, #8]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	68f9      	ldr	r1, [r7, #12]
 8016c82:	4618      	mov	r0, r3
 8016c84:	f000 fe2c 	bl	80178e0 <ip4_addr_isbroadcast_u32>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d10c      	bne.n	8016ca8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016c8e:	68bb      	ldr	r3, [r7, #8]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c96:	2be0      	cmp	r3, #224	; 0xe0
 8016c98:	d006      	beq.n	8016ca8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016c9a:	68bb      	ldr	r3, [r7, #8]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d003      	beq.n	8016ca8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016ca0:	68bb      	ldr	r3, [r7, #8]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d102      	bne.n	8016cae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016ca8:	f06f 030f 	mvn.w	r3, #15
 8016cac:	e101      	b.n	8016eb2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016cae:	68fa      	ldr	r2, [r7, #12]
 8016cb0:	2101      	movs	r1, #1
 8016cb2:	68b8      	ldr	r0, [r7, #8]
 8016cb4:	f7ff fb5c 	bl	8016370 <etharp_find_entry>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016cbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	da02      	bge.n	8016cca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016cc4:	8a7b      	ldrh	r3, [r7, #18]
 8016cc6:	b25b      	sxtb	r3, r3
 8016cc8:	e0f3      	b.n	8016eb2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016cca:	8a7b      	ldrh	r3, [r7, #18]
 8016ccc:	2b7e      	cmp	r3, #126	; 0x7e
 8016cce:	d906      	bls.n	8016cde <etharp_query+0x7e>
 8016cd0:	4b7a      	ldr	r3, [pc, #488]	; (8016ebc <etharp_query+0x25c>)
 8016cd2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016cd6:	497a      	ldr	r1, [pc, #488]	; (8016ec0 <etharp_query+0x260>)
 8016cd8:	487a      	ldr	r0, [pc, #488]	; (8016ec4 <etharp_query+0x264>)
 8016cda:	f002 f92b 	bl	8018f34 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016cde:	8a7b      	ldrh	r3, [r7, #18]
 8016ce0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016ce2:	7c7a      	ldrb	r2, [r7, #17]
 8016ce4:	4978      	ldr	r1, [pc, #480]	; (8016ec8 <etharp_query+0x268>)
 8016ce6:	4613      	mov	r3, r2
 8016ce8:	005b      	lsls	r3, r3, #1
 8016cea:	4413      	add	r3, r2
 8016cec:	00db      	lsls	r3, r3, #3
 8016cee:	440b      	add	r3, r1
 8016cf0:	3314      	adds	r3, #20
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d115      	bne.n	8016d24 <etharp_query+0xc4>
    is_new_entry = 1;
 8016cf8:	2301      	movs	r3, #1
 8016cfa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016cfc:	7c7a      	ldrb	r2, [r7, #17]
 8016cfe:	4972      	ldr	r1, [pc, #456]	; (8016ec8 <etharp_query+0x268>)
 8016d00:	4613      	mov	r3, r2
 8016d02:	005b      	lsls	r3, r3, #1
 8016d04:	4413      	add	r3, r2
 8016d06:	00db      	lsls	r3, r3, #3
 8016d08:	440b      	add	r3, r1
 8016d0a:	3314      	adds	r3, #20
 8016d0c:	2201      	movs	r2, #1
 8016d0e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016d10:	7c7a      	ldrb	r2, [r7, #17]
 8016d12:	496d      	ldr	r1, [pc, #436]	; (8016ec8 <etharp_query+0x268>)
 8016d14:	4613      	mov	r3, r2
 8016d16:	005b      	lsls	r3, r3, #1
 8016d18:	4413      	add	r3, r2
 8016d1a:	00db      	lsls	r3, r3, #3
 8016d1c:	440b      	add	r3, r1
 8016d1e:	3308      	adds	r3, #8
 8016d20:	68fa      	ldr	r2, [r7, #12]
 8016d22:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016d24:	7c7a      	ldrb	r2, [r7, #17]
 8016d26:	4968      	ldr	r1, [pc, #416]	; (8016ec8 <etharp_query+0x268>)
 8016d28:	4613      	mov	r3, r2
 8016d2a:	005b      	lsls	r3, r3, #1
 8016d2c:	4413      	add	r3, r2
 8016d2e:	00db      	lsls	r3, r3, #3
 8016d30:	440b      	add	r3, r1
 8016d32:	3314      	adds	r3, #20
 8016d34:	781b      	ldrb	r3, [r3, #0]
 8016d36:	2b01      	cmp	r3, #1
 8016d38:	d011      	beq.n	8016d5e <etharp_query+0xfe>
 8016d3a:	7c7a      	ldrb	r2, [r7, #17]
 8016d3c:	4962      	ldr	r1, [pc, #392]	; (8016ec8 <etharp_query+0x268>)
 8016d3e:	4613      	mov	r3, r2
 8016d40:	005b      	lsls	r3, r3, #1
 8016d42:	4413      	add	r3, r2
 8016d44:	00db      	lsls	r3, r3, #3
 8016d46:	440b      	add	r3, r1
 8016d48:	3314      	adds	r3, #20
 8016d4a:	781b      	ldrb	r3, [r3, #0]
 8016d4c:	2b01      	cmp	r3, #1
 8016d4e:	d806      	bhi.n	8016d5e <etharp_query+0xfe>
 8016d50:	4b5a      	ldr	r3, [pc, #360]	; (8016ebc <etharp_query+0x25c>)
 8016d52:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016d56:	495d      	ldr	r1, [pc, #372]	; (8016ecc <etharp_query+0x26c>)
 8016d58:	485a      	ldr	r0, [pc, #360]	; (8016ec4 <etharp_query+0x264>)
 8016d5a:	f002 f8eb 	bl	8018f34 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016d5e:	6a3b      	ldr	r3, [r7, #32]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d102      	bne.n	8016d6a <etharp_query+0x10a>
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d10c      	bne.n	8016d84 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016d6a:	68b9      	ldr	r1, [r7, #8]
 8016d6c:	68f8      	ldr	r0, [r7, #12]
 8016d6e:	f000 f963 	bl	8017038 <etharp_request>
 8016d72:	4603      	mov	r3, r0
 8016d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d102      	bne.n	8016d84 <etharp_query+0x124>
      return result;
 8016d7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016d82:	e096      	b.n	8016eb2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d106      	bne.n	8016d98 <etharp_query+0x138>
 8016d8a:	4b4c      	ldr	r3, [pc, #304]	; (8016ebc <etharp_query+0x25c>)
 8016d8c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016d90:	494f      	ldr	r1, [pc, #316]	; (8016ed0 <etharp_query+0x270>)
 8016d92:	484c      	ldr	r0, [pc, #304]	; (8016ec4 <etharp_query+0x264>)
 8016d94:	f002 f8ce 	bl	8018f34 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016d98:	7c7a      	ldrb	r2, [r7, #17]
 8016d9a:	494b      	ldr	r1, [pc, #300]	; (8016ec8 <etharp_query+0x268>)
 8016d9c:	4613      	mov	r3, r2
 8016d9e:	005b      	lsls	r3, r3, #1
 8016da0:	4413      	add	r3, r2
 8016da2:	00db      	lsls	r3, r3, #3
 8016da4:	440b      	add	r3, r1
 8016da6:	3314      	adds	r3, #20
 8016da8:	781b      	ldrb	r3, [r3, #0]
 8016daa:	2b01      	cmp	r3, #1
 8016dac:	d917      	bls.n	8016dde <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016dae:	4a49      	ldr	r2, [pc, #292]	; (8016ed4 <etharp_query+0x274>)
 8016db0:	7c7b      	ldrb	r3, [r7, #17]
 8016db2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016db4:	7c7a      	ldrb	r2, [r7, #17]
 8016db6:	4613      	mov	r3, r2
 8016db8:	005b      	lsls	r3, r3, #1
 8016dba:	4413      	add	r3, r2
 8016dbc:	00db      	lsls	r3, r3, #3
 8016dbe:	3308      	adds	r3, #8
 8016dc0:	4a41      	ldr	r2, [pc, #260]	; (8016ec8 <etharp_query+0x268>)
 8016dc2:	4413      	add	r3, r2
 8016dc4:	3304      	adds	r3, #4
 8016dc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016dca:	9200      	str	r2, [sp, #0]
 8016dcc:	697a      	ldr	r2, [r7, #20]
 8016dce:	6879      	ldr	r1, [r7, #4]
 8016dd0:	68f8      	ldr	r0, [r7, #12]
 8016dd2:	f001 fc93 	bl	80186fc <ethernet_output>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ddc:	e067      	b.n	8016eae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016dde:	7c7a      	ldrb	r2, [r7, #17]
 8016de0:	4939      	ldr	r1, [pc, #228]	; (8016ec8 <etharp_query+0x268>)
 8016de2:	4613      	mov	r3, r2
 8016de4:	005b      	lsls	r3, r3, #1
 8016de6:	4413      	add	r3, r2
 8016de8:	00db      	lsls	r3, r3, #3
 8016dea:	440b      	add	r3, r1
 8016dec:	3314      	adds	r3, #20
 8016dee:	781b      	ldrb	r3, [r3, #0]
 8016df0:	2b01      	cmp	r3, #1
 8016df2:	d15c      	bne.n	8016eae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016df4:	2300      	movs	r3, #0
 8016df6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016dfc:	e01c      	b.n	8016e38 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016dfe:	69fb      	ldr	r3, [r7, #28]
 8016e00:	895a      	ldrh	r2, [r3, #10]
 8016e02:	69fb      	ldr	r3, [r7, #28]
 8016e04:	891b      	ldrh	r3, [r3, #8]
 8016e06:	429a      	cmp	r2, r3
 8016e08:	d10a      	bne.n	8016e20 <etharp_query+0x1c0>
 8016e0a:	69fb      	ldr	r3, [r7, #28]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d006      	beq.n	8016e20 <etharp_query+0x1c0>
 8016e12:	4b2a      	ldr	r3, [pc, #168]	; (8016ebc <etharp_query+0x25c>)
 8016e14:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016e18:	492f      	ldr	r1, [pc, #188]	; (8016ed8 <etharp_query+0x278>)
 8016e1a:	482a      	ldr	r0, [pc, #168]	; (8016ec4 <etharp_query+0x264>)
 8016e1c:	f002 f88a 	bl	8018f34 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016e20:	69fb      	ldr	r3, [r7, #28]
 8016e22:	7b1b      	ldrb	r3, [r3, #12]
 8016e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d002      	beq.n	8016e32 <etharp_query+0x1d2>
        copy_needed = 1;
 8016e2c:	2301      	movs	r3, #1
 8016e2e:	61bb      	str	r3, [r7, #24]
        break;
 8016e30:	e005      	b.n	8016e3e <etharp_query+0x1de>
      }
      p = p->next;
 8016e32:	69fb      	ldr	r3, [r7, #28]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016e38:	69fb      	ldr	r3, [r7, #28]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d1df      	bne.n	8016dfe <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016e3e:	69bb      	ldr	r3, [r7, #24]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d007      	beq.n	8016e54 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016e44:	687a      	ldr	r2, [r7, #4]
 8016e46:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016e4a:	200e      	movs	r0, #14
 8016e4c:	f7f6 fae2 	bl	800d414 <pbuf_clone>
 8016e50:	61f8      	str	r0, [r7, #28]
 8016e52:	e004      	b.n	8016e5e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016e58:	69f8      	ldr	r0, [r7, #28]
 8016e5a:	f7f6 f909 	bl	800d070 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016e5e:	69fb      	ldr	r3, [r7, #28]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d021      	beq.n	8016ea8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016e64:	7c7a      	ldrb	r2, [r7, #17]
 8016e66:	4918      	ldr	r1, [pc, #96]	; (8016ec8 <etharp_query+0x268>)
 8016e68:	4613      	mov	r3, r2
 8016e6a:	005b      	lsls	r3, r3, #1
 8016e6c:	4413      	add	r3, r2
 8016e6e:	00db      	lsls	r3, r3, #3
 8016e70:	440b      	add	r3, r1
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d00a      	beq.n	8016e8e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016e78:	7c7a      	ldrb	r2, [r7, #17]
 8016e7a:	4913      	ldr	r1, [pc, #76]	; (8016ec8 <etharp_query+0x268>)
 8016e7c:	4613      	mov	r3, r2
 8016e7e:	005b      	lsls	r3, r3, #1
 8016e80:	4413      	add	r3, r2
 8016e82:	00db      	lsls	r3, r3, #3
 8016e84:	440b      	add	r3, r1
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	4618      	mov	r0, r3
 8016e8a:	f7f6 f84b 	bl	800cf24 <pbuf_free>
      }
      arp_table[i].q = p;
 8016e8e:	7c7a      	ldrb	r2, [r7, #17]
 8016e90:	490d      	ldr	r1, [pc, #52]	; (8016ec8 <etharp_query+0x268>)
 8016e92:	4613      	mov	r3, r2
 8016e94:	005b      	lsls	r3, r3, #1
 8016e96:	4413      	add	r3, r2
 8016e98:	00db      	lsls	r3, r3, #3
 8016e9a:	440b      	add	r3, r1
 8016e9c:	69fa      	ldr	r2, [r7, #28]
 8016e9e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ea6:	e002      	b.n	8016eae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016ea8:	23ff      	movs	r3, #255	; 0xff
 8016eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016eae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	3728      	adds	r7, #40	; 0x28
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	bd80      	pop	{r7, pc}
 8016eba:	bf00      	nop
 8016ebc:	0801d840 	.word	0x0801d840
 8016ec0:	0801d9ec 	.word	0x0801d9ec
 8016ec4:	0801d8b8 	.word	0x0801d8b8
 8016ec8:	20011620 	.word	0x20011620
 8016ecc:	0801d9fc 	.word	0x0801d9fc
 8016ed0:	0801d9e0 	.word	0x0801d9e0
 8016ed4:	20011710 	.word	0x20011710
 8016ed8:	0801da24 	.word	0x0801da24

08016edc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b08a      	sub	sp, #40	; 0x28
 8016ee0:	af02      	add	r7, sp, #8
 8016ee2:	60f8      	str	r0, [r7, #12]
 8016ee4:	60b9      	str	r1, [r7, #8]
 8016ee6:	607a      	str	r2, [r7, #4]
 8016ee8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016eea:	2300      	movs	r3, #0
 8016eec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d106      	bne.n	8016f02 <etharp_raw+0x26>
 8016ef4:	4b3a      	ldr	r3, [pc, #232]	; (8016fe0 <etharp_raw+0x104>)
 8016ef6:	f240 4257 	movw	r2, #1111	; 0x457
 8016efa:	493a      	ldr	r1, [pc, #232]	; (8016fe4 <etharp_raw+0x108>)
 8016efc:	483a      	ldr	r0, [pc, #232]	; (8016fe8 <etharp_raw+0x10c>)
 8016efe:	f002 f819 	bl	8018f34 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016f02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f06:	211c      	movs	r1, #28
 8016f08:	200e      	movs	r0, #14
 8016f0a:	f7f5 fd27 	bl	800c95c <pbuf_alloc>
 8016f0e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016f10:	69bb      	ldr	r3, [r7, #24]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d102      	bne.n	8016f1c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016f16:	f04f 33ff 	mov.w	r3, #4294967295
 8016f1a:	e05d      	b.n	8016fd8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016f1c:	69bb      	ldr	r3, [r7, #24]
 8016f1e:	895b      	ldrh	r3, [r3, #10]
 8016f20:	2b1b      	cmp	r3, #27
 8016f22:	d806      	bhi.n	8016f32 <etharp_raw+0x56>
 8016f24:	4b2e      	ldr	r3, [pc, #184]	; (8016fe0 <etharp_raw+0x104>)
 8016f26:	f240 4262 	movw	r2, #1122	; 0x462
 8016f2a:	4930      	ldr	r1, [pc, #192]	; (8016fec <etharp_raw+0x110>)
 8016f2c:	482e      	ldr	r0, [pc, #184]	; (8016fe8 <etharp_raw+0x10c>)
 8016f2e:	f002 f801 	bl	8018f34 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016f32:	69bb      	ldr	r3, [r7, #24]
 8016f34:	685b      	ldr	r3, [r3, #4]
 8016f36:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016f38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	f7f4 fbbe 	bl	800b6bc <lwip_htons>
 8016f40:	4603      	mov	r3, r0
 8016f42:	461a      	mov	r2, r3
 8016f44:	697b      	ldr	r3, [r7, #20]
 8016f46:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016f4e:	2b06      	cmp	r3, #6
 8016f50:	d006      	beq.n	8016f60 <etharp_raw+0x84>
 8016f52:	4b23      	ldr	r3, [pc, #140]	; (8016fe0 <etharp_raw+0x104>)
 8016f54:	f240 4269 	movw	r2, #1129	; 0x469
 8016f58:	4925      	ldr	r1, [pc, #148]	; (8016ff0 <etharp_raw+0x114>)
 8016f5a:	4823      	ldr	r0, [pc, #140]	; (8016fe8 <etharp_raw+0x10c>)
 8016f5c:	f001 ffea 	bl	8018f34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016f60:	697b      	ldr	r3, [r7, #20]
 8016f62:	3308      	adds	r3, #8
 8016f64:	2206      	movs	r2, #6
 8016f66:	6839      	ldr	r1, [r7, #0]
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f001 ff1e 	bl	8018daa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016f6e:	697b      	ldr	r3, [r7, #20]
 8016f70:	3312      	adds	r3, #18
 8016f72:	2206      	movs	r2, #6
 8016f74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016f76:	4618      	mov	r0, r3
 8016f78:	f001 ff17 	bl	8018daa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016f7c:	697b      	ldr	r3, [r7, #20]
 8016f7e:	330e      	adds	r3, #14
 8016f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016f82:	6812      	ldr	r2, [r2, #0]
 8016f84:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016f86:	697b      	ldr	r3, [r7, #20]
 8016f88:	3318      	adds	r3, #24
 8016f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f8c:	6812      	ldr	r2, [r2, #0]
 8016f8e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016f90:	697b      	ldr	r3, [r7, #20]
 8016f92:	2200      	movs	r2, #0
 8016f94:	701a      	strb	r2, [r3, #0]
 8016f96:	2200      	movs	r2, #0
 8016f98:	f042 0201 	orr.w	r2, r2, #1
 8016f9c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016f9e:	697b      	ldr	r3, [r7, #20]
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	f042 0208 	orr.w	r2, r2, #8
 8016fa6:	709a      	strb	r2, [r3, #2]
 8016fa8:	2200      	movs	r2, #0
 8016faa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016fac:	697b      	ldr	r3, [r7, #20]
 8016fae:	2206      	movs	r2, #6
 8016fb0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016fb2:	697b      	ldr	r3, [r7, #20]
 8016fb4:	2204      	movs	r2, #4
 8016fb6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016fb8:	f640 0306 	movw	r3, #2054	; 0x806
 8016fbc:	9300      	str	r3, [sp, #0]
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	68ba      	ldr	r2, [r7, #8]
 8016fc2:	69b9      	ldr	r1, [r7, #24]
 8016fc4:	68f8      	ldr	r0, [r7, #12]
 8016fc6:	f001 fb99 	bl	80186fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016fca:	69b8      	ldr	r0, [r7, #24]
 8016fcc:	f7f5 ffaa 	bl	800cf24 <pbuf_free>
  p = NULL;
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016fd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016fd8:	4618      	mov	r0, r3
 8016fda:	3720      	adds	r7, #32
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd80      	pop	{r7, pc}
 8016fe0:	0801d840 	.word	0x0801d840
 8016fe4:	0801d990 	.word	0x0801d990
 8016fe8:	0801d8b8 	.word	0x0801d8b8
 8016fec:	0801da40 	.word	0x0801da40
 8016ff0:	0801da74 	.word	0x0801da74

08016ff4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b088      	sub	sp, #32
 8016ff8:	af04      	add	r7, sp, #16
 8016ffa:	60f8      	str	r0, [r7, #12]
 8016ffc:	60b9      	str	r1, [r7, #8]
 8016ffe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017010:	2201      	movs	r2, #1
 8017012:	9203      	str	r2, [sp, #12]
 8017014:	68ba      	ldr	r2, [r7, #8]
 8017016:	9202      	str	r2, [sp, #8]
 8017018:	4a06      	ldr	r2, [pc, #24]	; (8017034 <etharp_request_dst+0x40>)
 801701a:	9201      	str	r2, [sp, #4]
 801701c:	9300      	str	r3, [sp, #0]
 801701e:	4603      	mov	r3, r0
 8017020:	687a      	ldr	r2, [r7, #4]
 8017022:	68f8      	ldr	r0, [r7, #12]
 8017024:	f7ff ff5a 	bl	8016edc <etharp_raw>
 8017028:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801702a:	4618      	mov	r0, r3
 801702c:	3710      	adds	r7, #16
 801702e:	46bd      	mov	sp, r7
 8017030:	bd80      	pop	{r7, pc}
 8017032:	bf00      	nop
 8017034:	08028194 	.word	0x08028194

08017038 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b082      	sub	sp, #8
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
 8017040:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017042:	4a05      	ldr	r2, [pc, #20]	; (8017058 <etharp_request+0x20>)
 8017044:	6839      	ldr	r1, [r7, #0]
 8017046:	6878      	ldr	r0, [r7, #4]
 8017048:	f7ff ffd4 	bl	8016ff4 <etharp_request_dst>
 801704c:	4603      	mov	r3, r0
}
 801704e:	4618      	mov	r0, r3
 8017050:	3708      	adds	r7, #8
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}
 8017056:	bf00      	nop
 8017058:	0802818c 	.word	0x0802818c

0801705c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b08e      	sub	sp, #56	; 0x38
 8017060:	af04      	add	r7, sp, #16
 8017062:	6078      	str	r0, [r7, #4]
 8017064:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017066:	4b79      	ldr	r3, [pc, #484]	; (801724c <icmp_input+0x1f0>)
 8017068:	689b      	ldr	r3, [r3, #8]
 801706a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801706e:	781b      	ldrb	r3, [r3, #0]
 8017070:	f003 030f 	and.w	r3, r3, #15
 8017074:	b2db      	uxtb	r3, r3
 8017076:	009b      	lsls	r3, r3, #2
 8017078:	b2db      	uxtb	r3, r3
 801707a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801707c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801707e:	2b13      	cmp	r3, #19
 8017080:	f240 80cd 	bls.w	801721e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	895b      	ldrh	r3, [r3, #10]
 8017088:	2b03      	cmp	r3, #3
 801708a:	f240 80ca 	bls.w	8017222 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	685b      	ldr	r3, [r3, #4]
 8017092:	781b      	ldrb	r3, [r3, #0]
 8017094:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017098:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801709c:	2b00      	cmp	r3, #0
 801709e:	f000 80b7 	beq.w	8017210 <icmp_input+0x1b4>
 80170a2:	2b08      	cmp	r3, #8
 80170a4:	f040 80b7 	bne.w	8017216 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80170a8:	4b69      	ldr	r3, [pc, #420]	; (8017250 <icmp_input+0x1f4>)
 80170aa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80170ac:	4b67      	ldr	r3, [pc, #412]	; (801724c <icmp_input+0x1f0>)
 80170ae:	695b      	ldr	r3, [r3, #20]
 80170b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80170b4:	2be0      	cmp	r3, #224	; 0xe0
 80170b6:	f000 80bb 	beq.w	8017230 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80170ba:	4b64      	ldr	r3, [pc, #400]	; (801724c <icmp_input+0x1f0>)
 80170bc:	695b      	ldr	r3, [r3, #20]
 80170be:	4a63      	ldr	r2, [pc, #396]	; (801724c <icmp_input+0x1f0>)
 80170c0:	6812      	ldr	r2, [r2, #0]
 80170c2:	4611      	mov	r1, r2
 80170c4:	4618      	mov	r0, r3
 80170c6:	f000 fc0b 	bl	80178e0 <ip4_addr_isbroadcast_u32>
 80170ca:	4603      	mov	r3, r0
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	f040 80b1 	bne.w	8017234 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	891b      	ldrh	r3, [r3, #8]
 80170d6:	2b07      	cmp	r3, #7
 80170d8:	f240 80a5 	bls.w	8017226 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80170dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80170de:	330e      	adds	r3, #14
 80170e0:	4619      	mov	r1, r3
 80170e2:	6878      	ldr	r0, [r7, #4]
 80170e4:	f7f5 fe88 	bl	800cdf8 <pbuf_add_header>
 80170e8:	4603      	mov	r3, r0
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d04b      	beq.n	8017186 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	891a      	ldrh	r2, [r3, #8]
 80170f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80170f4:	4413      	add	r3, r2
 80170f6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	891b      	ldrh	r3, [r3, #8]
 80170fc:	8b7a      	ldrh	r2, [r7, #26]
 80170fe:	429a      	cmp	r2, r3
 8017100:	f0c0 809a 	bcc.w	8017238 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017104:	8b7b      	ldrh	r3, [r7, #26]
 8017106:	f44f 7220 	mov.w	r2, #640	; 0x280
 801710a:	4619      	mov	r1, r3
 801710c:	200e      	movs	r0, #14
 801710e:	f7f5 fc25 	bl	800c95c <pbuf_alloc>
 8017112:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017114:	697b      	ldr	r3, [r7, #20]
 8017116:	2b00      	cmp	r3, #0
 8017118:	f000 8090 	beq.w	801723c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	895b      	ldrh	r3, [r3, #10]
 8017120:	461a      	mov	r2, r3
 8017122:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017124:	3308      	adds	r3, #8
 8017126:	429a      	cmp	r2, r3
 8017128:	d203      	bcs.n	8017132 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801712a:	6978      	ldr	r0, [r7, #20]
 801712c:	f7f5 fefa 	bl	800cf24 <pbuf_free>
          goto icmperr;
 8017130:	e085      	b.n	801723e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017132:	697b      	ldr	r3, [r7, #20]
 8017134:	685b      	ldr	r3, [r3, #4]
 8017136:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801713a:	4618      	mov	r0, r3
 801713c:	f001 fe35 	bl	8018daa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017140:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017142:	4619      	mov	r1, r3
 8017144:	6978      	ldr	r0, [r7, #20]
 8017146:	f7f5 fe67 	bl	800ce18 <pbuf_remove_header>
 801714a:	4603      	mov	r3, r0
 801714c:	2b00      	cmp	r3, #0
 801714e:	d009      	beq.n	8017164 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017150:	4b40      	ldr	r3, [pc, #256]	; (8017254 <icmp_input+0x1f8>)
 8017152:	22b6      	movs	r2, #182	; 0xb6
 8017154:	4940      	ldr	r1, [pc, #256]	; (8017258 <icmp_input+0x1fc>)
 8017156:	4841      	ldr	r0, [pc, #260]	; (801725c <icmp_input+0x200>)
 8017158:	f001 feec 	bl	8018f34 <iprintf>
          pbuf_free(r);
 801715c:	6978      	ldr	r0, [r7, #20]
 801715e:	f7f5 fee1 	bl	800cf24 <pbuf_free>
          goto icmperr;
 8017162:	e06c      	b.n	801723e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017164:	6879      	ldr	r1, [r7, #4]
 8017166:	6978      	ldr	r0, [r7, #20]
 8017168:	f7f6 f810 	bl	800d18c <pbuf_copy>
 801716c:	4603      	mov	r3, r0
 801716e:	2b00      	cmp	r3, #0
 8017170:	d003      	beq.n	801717a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017172:	6978      	ldr	r0, [r7, #20]
 8017174:	f7f5 fed6 	bl	800cf24 <pbuf_free>
          goto icmperr;
 8017178:	e061      	b.n	801723e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801717a:	6878      	ldr	r0, [r7, #4]
 801717c:	f7f5 fed2 	bl	800cf24 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017180:	697b      	ldr	r3, [r7, #20]
 8017182:	607b      	str	r3, [r7, #4]
 8017184:	e00f      	b.n	80171a6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017186:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017188:	330e      	adds	r3, #14
 801718a:	4619      	mov	r1, r3
 801718c:	6878      	ldr	r0, [r7, #4]
 801718e:	f7f5 fe43 	bl	800ce18 <pbuf_remove_header>
 8017192:	4603      	mov	r3, r0
 8017194:	2b00      	cmp	r3, #0
 8017196:	d006      	beq.n	80171a6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017198:	4b2e      	ldr	r3, [pc, #184]	; (8017254 <icmp_input+0x1f8>)
 801719a:	22c7      	movs	r2, #199	; 0xc7
 801719c:	4930      	ldr	r1, [pc, #192]	; (8017260 <icmp_input+0x204>)
 801719e:	482f      	ldr	r0, [pc, #188]	; (801725c <icmp_input+0x200>)
 80171a0:	f001 fec8 	bl	8018f34 <iprintf>
          goto icmperr;
 80171a4:	e04b      	b.n	801723e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	685b      	ldr	r3, [r3, #4]
 80171aa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80171ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171ae:	4619      	mov	r1, r3
 80171b0:	6878      	ldr	r0, [r7, #4]
 80171b2:	f7f5 fe21 	bl	800cdf8 <pbuf_add_header>
 80171b6:	4603      	mov	r3, r0
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d12b      	bne.n	8017214 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	685b      	ldr	r3, [r3, #4]
 80171c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80171c2:	69fb      	ldr	r3, [r7, #28]
 80171c4:	681a      	ldr	r2, [r3, #0]
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80171ca:	4b20      	ldr	r3, [pc, #128]	; (801724c <icmp_input+0x1f0>)
 80171cc:	691a      	ldr	r2, [r3, #16]
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80171d2:	693b      	ldr	r3, [r7, #16]
 80171d4:	2200      	movs	r2, #0
 80171d6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80171d8:	693b      	ldr	r3, [r7, #16]
 80171da:	2200      	movs	r2, #0
 80171dc:	709a      	strb	r2, [r3, #2]
 80171de:	2200      	movs	r2, #0
 80171e0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	22ff      	movs	r2, #255	; 0xff
 80171e6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	2200      	movs	r2, #0
 80171ec:	729a      	strb	r2, [r3, #10]
 80171ee:	2200      	movs	r2, #0
 80171f0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	9302      	str	r3, [sp, #8]
 80171f6:	2301      	movs	r3, #1
 80171f8:	9301      	str	r3, [sp, #4]
 80171fa:	2300      	movs	r3, #0
 80171fc:	9300      	str	r3, [sp, #0]
 80171fe:	23ff      	movs	r3, #255	; 0xff
 8017200:	2200      	movs	r2, #0
 8017202:	69f9      	ldr	r1, [r7, #28]
 8017204:	6878      	ldr	r0, [r7, #4]
 8017206:	f000 fa93 	bl	8017730 <ip4_output_if>
 801720a:	4603      	mov	r3, r0
 801720c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801720e:	e001      	b.n	8017214 <icmp_input+0x1b8>
      break;
 8017210:	bf00      	nop
 8017212:	e000      	b.n	8017216 <icmp_input+0x1ba>
      break;
 8017214:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017216:	6878      	ldr	r0, [r7, #4]
 8017218:	f7f5 fe84 	bl	800cf24 <pbuf_free>
  return;
 801721c:	e013      	b.n	8017246 <icmp_input+0x1ea>
    goto lenerr;
 801721e:	bf00      	nop
 8017220:	e002      	b.n	8017228 <icmp_input+0x1cc>
    goto lenerr;
 8017222:	bf00      	nop
 8017224:	e000      	b.n	8017228 <icmp_input+0x1cc>
        goto lenerr;
 8017226:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017228:	6878      	ldr	r0, [r7, #4]
 801722a:	f7f5 fe7b 	bl	800cf24 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801722e:	e00a      	b.n	8017246 <icmp_input+0x1ea>
        goto icmperr;
 8017230:	bf00      	nop
 8017232:	e004      	b.n	801723e <icmp_input+0x1e2>
        goto icmperr;
 8017234:	bf00      	nop
 8017236:	e002      	b.n	801723e <icmp_input+0x1e2>
          goto icmperr;
 8017238:	bf00      	nop
 801723a:	e000      	b.n	801723e <icmp_input+0x1e2>
          goto icmperr;
 801723c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801723e:	6878      	ldr	r0, [r7, #4]
 8017240:	f7f5 fe70 	bl	800cf24 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017244:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017246:	3728      	adds	r7, #40	; 0x28
 8017248:	46bd      	mov	sp, r7
 801724a:	bd80      	pop	{r7, pc}
 801724c:	2000de18 	.word	0x2000de18
 8017250:	2000de2c 	.word	0x2000de2c
 8017254:	0801dab8 	.word	0x0801dab8
 8017258:	0801daf0 	.word	0x0801daf0
 801725c:	0801db28 	.word	0x0801db28
 8017260:	0801db50 	.word	0x0801db50

08017264 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017264:	b580      	push	{r7, lr}
 8017266:	b082      	sub	sp, #8
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
 801726c:	460b      	mov	r3, r1
 801726e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017270:	78fb      	ldrb	r3, [r7, #3]
 8017272:	461a      	mov	r2, r3
 8017274:	2103      	movs	r1, #3
 8017276:	6878      	ldr	r0, [r7, #4]
 8017278:	f000 f814 	bl	80172a4 <icmp_send_response>
}
 801727c:	bf00      	nop
 801727e:	3708      	adds	r7, #8
 8017280:	46bd      	mov	sp, r7
 8017282:	bd80      	pop	{r7, pc}

08017284 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b082      	sub	sp, #8
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
 801728c:	460b      	mov	r3, r1
 801728e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017290:	78fb      	ldrb	r3, [r7, #3]
 8017292:	461a      	mov	r2, r3
 8017294:	210b      	movs	r1, #11
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	f000 f804 	bl	80172a4 <icmp_send_response>
}
 801729c:	bf00      	nop
 801729e:	3708      	adds	r7, #8
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b08c      	sub	sp, #48	; 0x30
 80172a8:	af04      	add	r7, sp, #16
 80172aa:	6078      	str	r0, [r7, #4]
 80172ac:	460b      	mov	r3, r1
 80172ae:	70fb      	strb	r3, [r7, #3]
 80172b0:	4613      	mov	r3, r2
 80172b2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80172b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80172b8:	2124      	movs	r1, #36	; 0x24
 80172ba:	2022      	movs	r0, #34	; 0x22
 80172bc:	f7f5 fb4e 	bl	800c95c <pbuf_alloc>
 80172c0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80172c2:	69fb      	ldr	r3, [r7, #28]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d04c      	beq.n	8017362 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80172c8:	69fb      	ldr	r3, [r7, #28]
 80172ca:	895b      	ldrh	r3, [r3, #10]
 80172cc:	2b23      	cmp	r3, #35	; 0x23
 80172ce:	d806      	bhi.n	80172de <icmp_send_response+0x3a>
 80172d0:	4b26      	ldr	r3, [pc, #152]	; (801736c <icmp_send_response+0xc8>)
 80172d2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80172d6:	4926      	ldr	r1, [pc, #152]	; (8017370 <icmp_send_response+0xcc>)
 80172d8:	4826      	ldr	r0, [pc, #152]	; (8017374 <icmp_send_response+0xd0>)
 80172da:	f001 fe2b 	bl	8018f34 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	685b      	ldr	r3, [r3, #4]
 80172e2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80172e4:	69fb      	ldr	r3, [r7, #28]
 80172e6:	685b      	ldr	r3, [r3, #4]
 80172e8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80172ea:	697b      	ldr	r3, [r7, #20]
 80172ec:	78fa      	ldrb	r2, [r7, #3]
 80172ee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80172f0:	697b      	ldr	r3, [r7, #20]
 80172f2:	78ba      	ldrb	r2, [r7, #2]
 80172f4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80172f6:	697b      	ldr	r3, [r7, #20]
 80172f8:	2200      	movs	r2, #0
 80172fa:	711a      	strb	r2, [r3, #4]
 80172fc:	2200      	movs	r2, #0
 80172fe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017300:	697b      	ldr	r3, [r7, #20]
 8017302:	2200      	movs	r2, #0
 8017304:	719a      	strb	r2, [r3, #6]
 8017306:	2200      	movs	r2, #0
 8017308:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801730a:	69fb      	ldr	r3, [r7, #28]
 801730c:	685b      	ldr	r3, [r3, #4]
 801730e:	f103 0008 	add.w	r0, r3, #8
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	685b      	ldr	r3, [r3, #4]
 8017316:	221c      	movs	r2, #28
 8017318:	4619      	mov	r1, r3
 801731a:	f001 fd46 	bl	8018daa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801731e:	69bb      	ldr	r3, [r7, #24]
 8017320:	68db      	ldr	r3, [r3, #12]
 8017322:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017324:	f107 030c 	add.w	r3, r7, #12
 8017328:	4618      	mov	r0, r3
 801732a:	f000 f825 	bl	8017378 <ip4_route>
 801732e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017330:	693b      	ldr	r3, [r7, #16]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d011      	beq.n	801735a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017336:	697b      	ldr	r3, [r7, #20]
 8017338:	2200      	movs	r2, #0
 801733a:	709a      	strb	r2, [r3, #2]
 801733c:	2200      	movs	r2, #0
 801733e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017340:	f107 020c 	add.w	r2, r7, #12
 8017344:	693b      	ldr	r3, [r7, #16]
 8017346:	9302      	str	r3, [sp, #8]
 8017348:	2301      	movs	r3, #1
 801734a:	9301      	str	r3, [sp, #4]
 801734c:	2300      	movs	r3, #0
 801734e:	9300      	str	r3, [sp, #0]
 8017350:	23ff      	movs	r3, #255	; 0xff
 8017352:	2100      	movs	r1, #0
 8017354:	69f8      	ldr	r0, [r7, #28]
 8017356:	f000 f9eb 	bl	8017730 <ip4_output_if>
  }
  pbuf_free(q);
 801735a:	69f8      	ldr	r0, [r7, #28]
 801735c:	f7f5 fde2 	bl	800cf24 <pbuf_free>
 8017360:	e000      	b.n	8017364 <icmp_send_response+0xc0>
    return;
 8017362:	bf00      	nop
}
 8017364:	3720      	adds	r7, #32
 8017366:	46bd      	mov	sp, r7
 8017368:	bd80      	pop	{r7, pc}
 801736a:	bf00      	nop
 801736c:	0801dab8 	.word	0x0801dab8
 8017370:	0801db84 	.word	0x0801db84
 8017374:	0801db28 	.word	0x0801db28

08017378 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017378:	b480      	push	{r7}
 801737a:	b085      	sub	sp, #20
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017380:	4b33      	ldr	r3, [pc, #204]	; (8017450 <ip4_route+0xd8>)
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	60fb      	str	r3, [r7, #12]
 8017386:	e036      	b.n	80173f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801738e:	f003 0301 	and.w	r3, r3, #1
 8017392:	b2db      	uxtb	r3, r3
 8017394:	2b00      	cmp	r3, #0
 8017396:	d02b      	beq.n	80173f0 <ip4_route+0x78>
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801739e:	089b      	lsrs	r3, r3, #2
 80173a0:	f003 0301 	and.w	r3, r3, #1
 80173a4:	b2db      	uxtb	r3, r3
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d022      	beq.n	80173f0 <ip4_route+0x78>
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	3304      	adds	r3, #4
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d01d      	beq.n	80173f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	681a      	ldr	r2, [r3, #0]
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	3304      	adds	r3, #4
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	405a      	eors	r2, r3
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	3308      	adds	r3, #8
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	4013      	ands	r3, r2
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d101      	bne.n	80173d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	e038      	b.n	8017442 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80173d6:	f003 0302 	and.w	r3, r3, #2
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d108      	bne.n	80173f0 <ip4_route+0x78>
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	681a      	ldr	r2, [r3, #0]
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	330c      	adds	r3, #12
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	429a      	cmp	r2, r3
 80173ea:	d101      	bne.n	80173f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	e028      	b.n	8017442 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	60fb      	str	r3, [r7, #12]
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d1c5      	bne.n	8017388 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80173fc:	4b15      	ldr	r3, [pc, #84]	; (8017454 <ip4_route+0xdc>)
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d01a      	beq.n	801743a <ip4_route+0xc2>
 8017404:	4b13      	ldr	r3, [pc, #76]	; (8017454 <ip4_route+0xdc>)
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801740c:	f003 0301 	and.w	r3, r3, #1
 8017410:	2b00      	cmp	r3, #0
 8017412:	d012      	beq.n	801743a <ip4_route+0xc2>
 8017414:	4b0f      	ldr	r3, [pc, #60]	; (8017454 <ip4_route+0xdc>)
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801741c:	f003 0304 	and.w	r3, r3, #4
 8017420:	2b00      	cmp	r3, #0
 8017422:	d00a      	beq.n	801743a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017424:	4b0b      	ldr	r3, [pc, #44]	; (8017454 <ip4_route+0xdc>)
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	3304      	adds	r3, #4
 801742a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801742c:	2b00      	cmp	r3, #0
 801742e:	d004      	beq.n	801743a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	b2db      	uxtb	r3, r3
 8017436:	2b7f      	cmp	r3, #127	; 0x7f
 8017438:	d101      	bne.n	801743e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801743a:	2300      	movs	r3, #0
 801743c:	e001      	b.n	8017442 <ip4_route+0xca>
  }

  return netif_default;
 801743e:	4b05      	ldr	r3, [pc, #20]	; (8017454 <ip4_route+0xdc>)
 8017440:	681b      	ldr	r3, [r3, #0]
}
 8017442:	4618      	mov	r0, r3
 8017444:	3714      	adds	r7, #20
 8017446:	46bd      	mov	sp, r7
 8017448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801744c:	4770      	bx	lr
 801744e:	bf00      	nop
 8017450:	20011580 	.word	0x20011580
 8017454:	20011584 	.word	0x20011584

08017458 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b082      	sub	sp, #8
 801745c:	af00      	add	r7, sp, #0
 801745e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017466:	f003 0301 	and.w	r3, r3, #1
 801746a:	b2db      	uxtb	r3, r3
 801746c:	2b00      	cmp	r3, #0
 801746e:	d016      	beq.n	801749e <ip4_input_accept+0x46>
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	3304      	adds	r3, #4
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d011      	beq.n	801749e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801747a:	4b0b      	ldr	r3, [pc, #44]	; (80174a8 <ip4_input_accept+0x50>)
 801747c:	695a      	ldr	r2, [r3, #20]
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	3304      	adds	r3, #4
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	429a      	cmp	r2, r3
 8017486:	d008      	beq.n	801749a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017488:	4b07      	ldr	r3, [pc, #28]	; (80174a8 <ip4_input_accept+0x50>)
 801748a:	695b      	ldr	r3, [r3, #20]
 801748c:	6879      	ldr	r1, [r7, #4]
 801748e:	4618      	mov	r0, r3
 8017490:	f000 fa26 	bl	80178e0 <ip4_addr_isbroadcast_u32>
 8017494:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017496:	2b00      	cmp	r3, #0
 8017498:	d001      	beq.n	801749e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801749a:	2301      	movs	r3, #1
 801749c:	e000      	b.n	80174a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801749e:	2300      	movs	r3, #0
}
 80174a0:	4618      	mov	r0, r3
 80174a2:	3708      	adds	r7, #8
 80174a4:	46bd      	mov	sp, r7
 80174a6:	bd80      	pop	{r7, pc}
 80174a8:	2000de18 	.word	0x2000de18

080174ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b088      	sub	sp, #32
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
 80174b4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80174b6:	2301      	movs	r3, #1
 80174b8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	685b      	ldr	r3, [r3, #4]
 80174be:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80174c0:	69fb      	ldr	r3, [r7, #28]
 80174c2:	781b      	ldrb	r3, [r3, #0]
 80174c4:	091b      	lsrs	r3, r3, #4
 80174c6:	b2db      	uxtb	r3, r3
 80174c8:	2b04      	cmp	r3, #4
 80174ca:	d004      	beq.n	80174d6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80174cc:	6878      	ldr	r0, [r7, #4]
 80174ce:	f7f5 fd29 	bl	800cf24 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80174d2:	2300      	movs	r3, #0
 80174d4:	e123      	b.n	801771e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80174d6:	69fb      	ldr	r3, [r7, #28]
 80174d8:	781b      	ldrb	r3, [r3, #0]
 80174da:	f003 030f 	and.w	r3, r3, #15
 80174de:	b2db      	uxtb	r3, r3
 80174e0:	009b      	lsls	r3, r3, #2
 80174e2:	b2db      	uxtb	r3, r3
 80174e4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80174e6:	69fb      	ldr	r3, [r7, #28]
 80174e8:	885b      	ldrh	r3, [r3, #2]
 80174ea:	b29b      	uxth	r3, r3
 80174ec:	4618      	mov	r0, r3
 80174ee:	f7f4 f8e5 	bl	800b6bc <lwip_htons>
 80174f2:	4603      	mov	r3, r0
 80174f4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	891b      	ldrh	r3, [r3, #8]
 80174fa:	8a3a      	ldrh	r2, [r7, #16]
 80174fc:	429a      	cmp	r2, r3
 80174fe:	d204      	bcs.n	801750a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017500:	8a3b      	ldrh	r3, [r7, #16]
 8017502:	4619      	mov	r1, r3
 8017504:	6878      	ldr	r0, [r7, #4]
 8017506:	f7f5 fb87 	bl	800cc18 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	895b      	ldrh	r3, [r3, #10]
 801750e:	8a7a      	ldrh	r2, [r7, #18]
 8017510:	429a      	cmp	r2, r3
 8017512:	d807      	bhi.n	8017524 <ip4_input+0x78>
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	891b      	ldrh	r3, [r3, #8]
 8017518:	8a3a      	ldrh	r2, [r7, #16]
 801751a:	429a      	cmp	r2, r3
 801751c:	d802      	bhi.n	8017524 <ip4_input+0x78>
 801751e:	8a7b      	ldrh	r3, [r7, #18]
 8017520:	2b13      	cmp	r3, #19
 8017522:	d804      	bhi.n	801752e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017524:	6878      	ldr	r0, [r7, #4]
 8017526:	f7f5 fcfd 	bl	800cf24 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801752a:	2300      	movs	r3, #0
 801752c:	e0f7      	b.n	801771e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801752e:	69fb      	ldr	r3, [r7, #28]
 8017530:	691b      	ldr	r3, [r3, #16]
 8017532:	4a7d      	ldr	r2, [pc, #500]	; (8017728 <ip4_input+0x27c>)
 8017534:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017536:	69fb      	ldr	r3, [r7, #28]
 8017538:	68db      	ldr	r3, [r3, #12]
 801753a:	4a7b      	ldr	r2, [pc, #492]	; (8017728 <ip4_input+0x27c>)
 801753c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801753e:	4b7a      	ldr	r3, [pc, #488]	; (8017728 <ip4_input+0x27c>)
 8017540:	695b      	ldr	r3, [r3, #20]
 8017542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017546:	2be0      	cmp	r3, #224	; 0xe0
 8017548:	d112      	bne.n	8017570 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801754a:	683b      	ldr	r3, [r7, #0]
 801754c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017550:	f003 0301 	and.w	r3, r3, #1
 8017554:	b2db      	uxtb	r3, r3
 8017556:	2b00      	cmp	r3, #0
 8017558:	d007      	beq.n	801756a <ip4_input+0xbe>
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	3304      	adds	r3, #4
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d002      	beq.n	801756a <ip4_input+0xbe>
      netif = inp;
 8017564:	683b      	ldr	r3, [r7, #0]
 8017566:	61bb      	str	r3, [r7, #24]
 8017568:	e02a      	b.n	80175c0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801756a:	2300      	movs	r3, #0
 801756c:	61bb      	str	r3, [r7, #24]
 801756e:	e027      	b.n	80175c0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017570:	6838      	ldr	r0, [r7, #0]
 8017572:	f7ff ff71 	bl	8017458 <ip4_input_accept>
 8017576:	4603      	mov	r3, r0
 8017578:	2b00      	cmp	r3, #0
 801757a:	d002      	beq.n	8017582 <ip4_input+0xd6>
      netif = inp;
 801757c:	683b      	ldr	r3, [r7, #0]
 801757e:	61bb      	str	r3, [r7, #24]
 8017580:	e01e      	b.n	80175c0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017582:	2300      	movs	r3, #0
 8017584:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017586:	4b68      	ldr	r3, [pc, #416]	; (8017728 <ip4_input+0x27c>)
 8017588:	695b      	ldr	r3, [r3, #20]
 801758a:	b2db      	uxtb	r3, r3
 801758c:	2b7f      	cmp	r3, #127	; 0x7f
 801758e:	d017      	beq.n	80175c0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017590:	4b66      	ldr	r3, [pc, #408]	; (801772c <ip4_input+0x280>)
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	61bb      	str	r3, [r7, #24]
 8017596:	e00e      	b.n	80175b6 <ip4_input+0x10a>
          if (netif == inp) {
 8017598:	69ba      	ldr	r2, [r7, #24]
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	429a      	cmp	r2, r3
 801759e:	d006      	beq.n	80175ae <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80175a0:	69b8      	ldr	r0, [r7, #24]
 80175a2:	f7ff ff59 	bl	8017458 <ip4_input_accept>
 80175a6:	4603      	mov	r3, r0
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d108      	bne.n	80175be <ip4_input+0x112>
 80175ac:	e000      	b.n	80175b0 <ip4_input+0x104>
            continue;
 80175ae:	bf00      	nop
        NETIF_FOREACH(netif) {
 80175b0:	69bb      	ldr	r3, [r7, #24]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	61bb      	str	r3, [r7, #24]
 80175b6:	69bb      	ldr	r3, [r7, #24]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d1ed      	bne.n	8017598 <ip4_input+0xec>
 80175bc:	e000      	b.n	80175c0 <ip4_input+0x114>
            break;
 80175be:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80175c0:	69bb      	ldr	r3, [r7, #24]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d111      	bne.n	80175ea <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80175c6:	69fb      	ldr	r3, [r7, #28]
 80175c8:	7a5b      	ldrb	r3, [r3, #9]
 80175ca:	2b11      	cmp	r3, #17
 80175cc:	d10d      	bne.n	80175ea <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80175ce:	8a7b      	ldrh	r3, [r7, #18]
 80175d0:	69fa      	ldr	r2, [r7, #28]
 80175d2:	4413      	add	r3, r2
 80175d4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	885b      	ldrh	r3, [r3, #2]
 80175da:	b29b      	uxth	r3, r3
 80175dc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80175e0:	d103      	bne.n	80175ea <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80175e6:	2300      	movs	r3, #0
 80175e8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80175ea:	697b      	ldr	r3, [r7, #20]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d017      	beq.n	8017620 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80175f0:	4b4d      	ldr	r3, [pc, #308]	; (8017728 <ip4_input+0x27c>)
 80175f2:	691b      	ldr	r3, [r3, #16]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d013      	beq.n	8017620 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80175f8:	4b4b      	ldr	r3, [pc, #300]	; (8017728 <ip4_input+0x27c>)
 80175fa:	691b      	ldr	r3, [r3, #16]
 80175fc:	6839      	ldr	r1, [r7, #0]
 80175fe:	4618      	mov	r0, r3
 8017600:	f000 f96e 	bl	80178e0 <ip4_addr_isbroadcast_u32>
 8017604:	4603      	mov	r3, r0
 8017606:	2b00      	cmp	r3, #0
 8017608:	d105      	bne.n	8017616 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801760a:	4b47      	ldr	r3, [pc, #284]	; (8017728 <ip4_input+0x27c>)
 801760c:	691b      	ldr	r3, [r3, #16]
 801760e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017612:	2be0      	cmp	r3, #224	; 0xe0
 8017614:	d104      	bne.n	8017620 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017616:	6878      	ldr	r0, [r7, #4]
 8017618:	f7f5 fc84 	bl	800cf24 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801761c:	2300      	movs	r3, #0
 801761e:	e07e      	b.n	801771e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017620:	69bb      	ldr	r3, [r7, #24]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d104      	bne.n	8017630 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017626:	6878      	ldr	r0, [r7, #4]
 8017628:	f7f5 fc7c 	bl	800cf24 <pbuf_free>
    return ERR_OK;
 801762c:	2300      	movs	r3, #0
 801762e:	e076      	b.n	801771e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017630:	69fb      	ldr	r3, [r7, #28]
 8017632:	88db      	ldrh	r3, [r3, #6]
 8017634:	b29b      	uxth	r3, r3
 8017636:	461a      	mov	r2, r3
 8017638:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801763c:	4013      	ands	r3, r2
 801763e:	2b00      	cmp	r3, #0
 8017640:	d00b      	beq.n	801765a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017642:	6878      	ldr	r0, [r7, #4]
 8017644:	f000 fc92 	bl	8017f6c <ip4_reass>
 8017648:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d101      	bne.n	8017654 <ip4_input+0x1a8>
      return ERR_OK;
 8017650:	2300      	movs	r3, #0
 8017652:	e064      	b.n	801771e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	685b      	ldr	r3, [r3, #4]
 8017658:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801765a:	4a33      	ldr	r2, [pc, #204]	; (8017728 <ip4_input+0x27c>)
 801765c:	69bb      	ldr	r3, [r7, #24]
 801765e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017660:	4a31      	ldr	r2, [pc, #196]	; (8017728 <ip4_input+0x27c>)
 8017662:	683b      	ldr	r3, [r7, #0]
 8017664:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017666:	4a30      	ldr	r2, [pc, #192]	; (8017728 <ip4_input+0x27c>)
 8017668:	69fb      	ldr	r3, [r7, #28]
 801766a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801766c:	69fb      	ldr	r3, [r7, #28]
 801766e:	781b      	ldrb	r3, [r3, #0]
 8017670:	f003 030f 	and.w	r3, r3, #15
 8017674:	b2db      	uxtb	r3, r3
 8017676:	009b      	lsls	r3, r3, #2
 8017678:	b2db      	uxtb	r3, r3
 801767a:	b29a      	uxth	r2, r3
 801767c:	4b2a      	ldr	r3, [pc, #168]	; (8017728 <ip4_input+0x27c>)
 801767e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017680:	8a7b      	ldrh	r3, [r7, #18]
 8017682:	4619      	mov	r1, r3
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	f7f5 fbc7 	bl	800ce18 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801768a:	69fb      	ldr	r3, [r7, #28]
 801768c:	7a5b      	ldrb	r3, [r3, #9]
 801768e:	2b11      	cmp	r3, #17
 8017690:	d006      	beq.n	80176a0 <ip4_input+0x1f4>
 8017692:	2b11      	cmp	r3, #17
 8017694:	dc13      	bgt.n	80176be <ip4_input+0x212>
 8017696:	2b01      	cmp	r3, #1
 8017698:	d00c      	beq.n	80176b4 <ip4_input+0x208>
 801769a:	2b06      	cmp	r3, #6
 801769c:	d005      	beq.n	80176aa <ip4_input+0x1fe>
 801769e:	e00e      	b.n	80176be <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80176a0:	6839      	ldr	r1, [r7, #0]
 80176a2:	6878      	ldr	r0, [r7, #4]
 80176a4:	f7fc fade 	bl	8013c64 <udp_input>
        break;
 80176a8:	e026      	b.n	80176f8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80176aa:	6839      	ldr	r1, [r7, #0]
 80176ac:	6878      	ldr	r0, [r7, #4]
 80176ae:	f7f7 fe97 	bl	800f3e0 <tcp_input>
        break;
 80176b2:	e021      	b.n	80176f8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80176b4:	6839      	ldr	r1, [r7, #0]
 80176b6:	6878      	ldr	r0, [r7, #4]
 80176b8:	f7ff fcd0 	bl	801705c <icmp_input>
        break;
 80176bc:	e01c      	b.n	80176f8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80176be:	4b1a      	ldr	r3, [pc, #104]	; (8017728 <ip4_input+0x27c>)
 80176c0:	695b      	ldr	r3, [r3, #20]
 80176c2:	69b9      	ldr	r1, [r7, #24]
 80176c4:	4618      	mov	r0, r3
 80176c6:	f000 f90b 	bl	80178e0 <ip4_addr_isbroadcast_u32>
 80176ca:	4603      	mov	r3, r0
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d10f      	bne.n	80176f0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80176d0:	4b15      	ldr	r3, [pc, #84]	; (8017728 <ip4_input+0x27c>)
 80176d2:	695b      	ldr	r3, [r3, #20]
 80176d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80176d8:	2be0      	cmp	r3, #224	; 0xe0
 80176da:	d009      	beq.n	80176f0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80176dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80176e0:	4619      	mov	r1, r3
 80176e2:	6878      	ldr	r0, [r7, #4]
 80176e4:	f7f5 fc0b 	bl	800cefe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80176e8:	2102      	movs	r1, #2
 80176ea:	6878      	ldr	r0, [r7, #4]
 80176ec:	f7ff fdba 	bl	8017264 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80176f0:	6878      	ldr	r0, [r7, #4]
 80176f2:	f7f5 fc17 	bl	800cf24 <pbuf_free>
        break;
 80176f6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80176f8:	4b0b      	ldr	r3, [pc, #44]	; (8017728 <ip4_input+0x27c>)
 80176fa:	2200      	movs	r2, #0
 80176fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80176fe:	4b0a      	ldr	r3, [pc, #40]	; (8017728 <ip4_input+0x27c>)
 8017700:	2200      	movs	r2, #0
 8017702:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017704:	4b08      	ldr	r3, [pc, #32]	; (8017728 <ip4_input+0x27c>)
 8017706:	2200      	movs	r2, #0
 8017708:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801770a:	4b07      	ldr	r3, [pc, #28]	; (8017728 <ip4_input+0x27c>)
 801770c:	2200      	movs	r2, #0
 801770e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017710:	4b05      	ldr	r3, [pc, #20]	; (8017728 <ip4_input+0x27c>)
 8017712:	2200      	movs	r2, #0
 8017714:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017716:	4b04      	ldr	r3, [pc, #16]	; (8017728 <ip4_input+0x27c>)
 8017718:	2200      	movs	r2, #0
 801771a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801771c:	2300      	movs	r3, #0
}
 801771e:	4618      	mov	r0, r3
 8017720:	3720      	adds	r7, #32
 8017722:	46bd      	mov	sp, r7
 8017724:	bd80      	pop	{r7, pc}
 8017726:	bf00      	nop
 8017728:	2000de18 	.word	0x2000de18
 801772c:	20011580 	.word	0x20011580

08017730 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b08a      	sub	sp, #40	; 0x28
 8017734:	af04      	add	r7, sp, #16
 8017736:	60f8      	str	r0, [r7, #12]
 8017738:	60b9      	str	r1, [r7, #8]
 801773a:	607a      	str	r2, [r7, #4]
 801773c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801773e:	68bb      	ldr	r3, [r7, #8]
 8017740:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d009      	beq.n	801775c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017748:	68bb      	ldr	r3, [r7, #8]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d003      	beq.n	8017756 <ip4_output_if+0x26>
 801774e:	68bb      	ldr	r3, [r7, #8]
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d102      	bne.n	801775c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017758:	3304      	adds	r3, #4
 801775a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801775c:	78fa      	ldrb	r2, [r7, #3]
 801775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017760:	9302      	str	r3, [sp, #8]
 8017762:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017766:	9301      	str	r3, [sp, #4]
 8017768:	f897 3020 	ldrb.w	r3, [r7, #32]
 801776c:	9300      	str	r3, [sp, #0]
 801776e:	4613      	mov	r3, r2
 8017770:	687a      	ldr	r2, [r7, #4]
 8017772:	6979      	ldr	r1, [r7, #20]
 8017774:	68f8      	ldr	r0, [r7, #12]
 8017776:	f000 f805 	bl	8017784 <ip4_output_if_src>
 801777a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801777c:	4618      	mov	r0, r3
 801777e:	3718      	adds	r7, #24
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}

08017784 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b088      	sub	sp, #32
 8017788:	af00      	add	r7, sp, #0
 801778a:	60f8      	str	r0, [r7, #12]
 801778c:	60b9      	str	r1, [r7, #8]
 801778e:	607a      	str	r2, [r7, #4]
 8017790:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	7b9b      	ldrb	r3, [r3, #14]
 8017796:	2b01      	cmp	r3, #1
 8017798:	d006      	beq.n	80177a8 <ip4_output_if_src+0x24>
 801779a:	4b4b      	ldr	r3, [pc, #300]	; (80178c8 <ip4_output_if_src+0x144>)
 801779c:	f44f 7255 	mov.w	r2, #852	; 0x354
 80177a0:	494a      	ldr	r1, [pc, #296]	; (80178cc <ip4_output_if_src+0x148>)
 80177a2:	484b      	ldr	r0, [pc, #300]	; (80178d0 <ip4_output_if_src+0x14c>)
 80177a4:	f001 fbc6 	bl	8018f34 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d060      	beq.n	8017870 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80177ae:	2314      	movs	r3, #20
 80177b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80177b2:	2114      	movs	r1, #20
 80177b4:	68f8      	ldr	r0, [r7, #12]
 80177b6:	f7f5 fb1f 	bl	800cdf8 <pbuf_add_header>
 80177ba:	4603      	mov	r3, r0
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d002      	beq.n	80177c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80177c0:	f06f 0301 	mvn.w	r3, #1
 80177c4:	e07c      	b.n	80178c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	685b      	ldr	r3, [r3, #4]
 80177ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	895b      	ldrh	r3, [r3, #10]
 80177d0:	2b13      	cmp	r3, #19
 80177d2:	d806      	bhi.n	80177e2 <ip4_output_if_src+0x5e>
 80177d4:	4b3c      	ldr	r3, [pc, #240]	; (80178c8 <ip4_output_if_src+0x144>)
 80177d6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80177da:	493e      	ldr	r1, [pc, #248]	; (80178d4 <ip4_output_if_src+0x150>)
 80177dc:	483c      	ldr	r0, [pc, #240]	; (80178d0 <ip4_output_if_src+0x14c>)
 80177de:	f001 fba9 	bl	8018f34 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80177e2:	69fb      	ldr	r3, [r7, #28]
 80177e4:	78fa      	ldrb	r2, [r7, #3]
 80177e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80177e8:	69fb      	ldr	r3, [r7, #28]
 80177ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80177ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	681a      	ldr	r2, [r3, #0]
 80177f4:	69fb      	ldr	r3, [r7, #28]
 80177f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80177f8:	8b7b      	ldrh	r3, [r7, #26]
 80177fa:	089b      	lsrs	r3, r3, #2
 80177fc:	b29b      	uxth	r3, r3
 80177fe:	b2db      	uxtb	r3, r3
 8017800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017804:	b2da      	uxtb	r2, r3
 8017806:	69fb      	ldr	r3, [r7, #28]
 8017808:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801780a:	69fb      	ldr	r3, [r7, #28]
 801780c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017810:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	891b      	ldrh	r3, [r3, #8]
 8017816:	4618      	mov	r0, r3
 8017818:	f7f3 ff50 	bl	800b6bc <lwip_htons>
 801781c:	4603      	mov	r3, r0
 801781e:	461a      	mov	r2, r3
 8017820:	69fb      	ldr	r3, [r7, #28]
 8017822:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017824:	69fb      	ldr	r3, [r7, #28]
 8017826:	2200      	movs	r2, #0
 8017828:	719a      	strb	r2, [r3, #6]
 801782a:	2200      	movs	r2, #0
 801782c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801782e:	4b2a      	ldr	r3, [pc, #168]	; (80178d8 <ip4_output_if_src+0x154>)
 8017830:	881b      	ldrh	r3, [r3, #0]
 8017832:	4618      	mov	r0, r3
 8017834:	f7f3 ff42 	bl	800b6bc <lwip_htons>
 8017838:	4603      	mov	r3, r0
 801783a:	461a      	mov	r2, r3
 801783c:	69fb      	ldr	r3, [r7, #28]
 801783e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017840:	4b25      	ldr	r3, [pc, #148]	; (80178d8 <ip4_output_if_src+0x154>)
 8017842:	881b      	ldrh	r3, [r3, #0]
 8017844:	3301      	adds	r3, #1
 8017846:	b29a      	uxth	r2, r3
 8017848:	4b23      	ldr	r3, [pc, #140]	; (80178d8 <ip4_output_if_src+0x154>)
 801784a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801784c:	68bb      	ldr	r3, [r7, #8]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d104      	bne.n	801785c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017852:	4b22      	ldr	r3, [pc, #136]	; (80178dc <ip4_output_if_src+0x158>)
 8017854:	681a      	ldr	r2, [r3, #0]
 8017856:	69fb      	ldr	r3, [r7, #28]
 8017858:	60da      	str	r2, [r3, #12]
 801785a:	e003      	b.n	8017864 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801785c:	68bb      	ldr	r3, [r7, #8]
 801785e:	681a      	ldr	r2, [r3, #0]
 8017860:	69fb      	ldr	r3, [r7, #28]
 8017862:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017864:	69fb      	ldr	r3, [r7, #28]
 8017866:	2200      	movs	r2, #0
 8017868:	729a      	strb	r2, [r3, #10]
 801786a:	2200      	movs	r2, #0
 801786c:	72da      	strb	r2, [r3, #11]
 801786e:	e00f      	b.n	8017890 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	895b      	ldrh	r3, [r3, #10]
 8017874:	2b13      	cmp	r3, #19
 8017876:	d802      	bhi.n	801787e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017878:	f06f 0301 	mvn.w	r3, #1
 801787c:	e020      	b.n	80178c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	685b      	ldr	r3, [r3, #4]
 8017882:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017884:	69fb      	ldr	r3, [r7, #28]
 8017886:	691b      	ldr	r3, [r3, #16]
 8017888:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801788a:	f107 0314 	add.w	r3, r7, #20
 801788e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017894:	2b00      	cmp	r3, #0
 8017896:	d00c      	beq.n	80178b2 <ip4_output_if_src+0x12e>
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	891a      	ldrh	r2, [r3, #8]
 801789c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801789e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178a0:	429a      	cmp	r2, r3
 80178a2:	d906      	bls.n	80178b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80178a4:	687a      	ldr	r2, [r7, #4]
 80178a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80178a8:	68f8      	ldr	r0, [r7, #12]
 80178aa:	f000 fd53 	bl	8018354 <ip4_frag>
 80178ae:	4603      	mov	r3, r0
 80178b0:	e006      	b.n	80178c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80178b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178b4:	695b      	ldr	r3, [r3, #20]
 80178b6:	687a      	ldr	r2, [r7, #4]
 80178b8:	68f9      	ldr	r1, [r7, #12]
 80178ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80178bc:	4798      	blx	r3
 80178be:	4603      	mov	r3, r0
}
 80178c0:	4618      	mov	r0, r3
 80178c2:	3720      	adds	r7, #32
 80178c4:	46bd      	mov	sp, r7
 80178c6:	bd80      	pop	{r7, pc}
 80178c8:	0801dbb0 	.word	0x0801dbb0
 80178cc:	0801dbe4 	.word	0x0801dbe4
 80178d0:	0801dbf0 	.word	0x0801dbf0
 80178d4:	0801dc18 	.word	0x0801dc18
 80178d8:	20011712 	.word	0x20011712
 80178dc:	08028184 	.word	0x08028184

080178e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80178e0:	b480      	push	{r7}
 80178e2:	b085      	sub	sp, #20
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]
 80178e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178f4:	d002      	beq.n	80178fc <ip4_addr_isbroadcast_u32+0x1c>
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d101      	bne.n	8017900 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80178fc:	2301      	movs	r3, #1
 80178fe:	e02a      	b.n	8017956 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017900:	683b      	ldr	r3, [r7, #0]
 8017902:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017906:	f003 0302 	and.w	r3, r3, #2
 801790a:	2b00      	cmp	r3, #0
 801790c:	d101      	bne.n	8017912 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801790e:	2300      	movs	r3, #0
 8017910:	e021      	b.n	8017956 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017912:	683b      	ldr	r3, [r7, #0]
 8017914:	3304      	adds	r3, #4
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	687a      	ldr	r2, [r7, #4]
 801791a:	429a      	cmp	r2, r3
 801791c:	d101      	bne.n	8017922 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801791e:	2300      	movs	r3, #0
 8017920:	e019      	b.n	8017956 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017922:	68fa      	ldr	r2, [r7, #12]
 8017924:	683b      	ldr	r3, [r7, #0]
 8017926:	3304      	adds	r3, #4
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	405a      	eors	r2, r3
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	3308      	adds	r3, #8
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	4013      	ands	r3, r2
 8017934:	2b00      	cmp	r3, #0
 8017936:	d10d      	bne.n	8017954 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017938:	683b      	ldr	r3, [r7, #0]
 801793a:	3308      	adds	r3, #8
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	43da      	mvns	r2, r3
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017944:	683b      	ldr	r3, [r7, #0]
 8017946:	3308      	adds	r3, #8
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801794c:	429a      	cmp	r2, r3
 801794e:	d101      	bne.n	8017954 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017950:	2301      	movs	r3, #1
 8017952:	e000      	b.n	8017956 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017954:	2300      	movs	r3, #0
  }
}
 8017956:	4618      	mov	r0, r3
 8017958:	3714      	adds	r7, #20
 801795a:	46bd      	mov	sp, r7
 801795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017960:	4770      	bx	lr
	...

08017964 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b084      	sub	sp, #16
 8017968:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801796a:	2300      	movs	r3, #0
 801796c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801796e:	4b12      	ldr	r3, [pc, #72]	; (80179b8 <ip_reass_tmr+0x54>)
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017974:	e018      	b.n	80179a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	7fdb      	ldrb	r3, [r3, #31]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d00b      	beq.n	8017996 <ip_reass_tmr+0x32>
      r->timer--;
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	7fdb      	ldrb	r3, [r3, #31]
 8017982:	3b01      	subs	r3, #1
 8017984:	b2da      	uxtb	r2, r3
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	60fb      	str	r3, [r7, #12]
 8017994:	e008      	b.n	80179a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80179a0:	68b9      	ldr	r1, [r7, #8]
 80179a2:	6878      	ldr	r0, [r7, #4]
 80179a4:	f000 f80a 	bl	80179bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d1e3      	bne.n	8017976 <ip_reass_tmr+0x12>
    }
  }
}
 80179ae:	bf00      	nop
 80179b0:	bf00      	nop
 80179b2:	3710      	adds	r7, #16
 80179b4:	46bd      	mov	sp, r7
 80179b6:	bd80      	pop	{r7, pc}
 80179b8:	20011714 	.word	0x20011714

080179bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b088      	sub	sp, #32
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	6078      	str	r0, [r7, #4]
 80179c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80179c6:	2300      	movs	r3, #0
 80179c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80179ca:	683a      	ldr	r2, [r7, #0]
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	429a      	cmp	r2, r3
 80179d0:	d105      	bne.n	80179de <ip_reass_free_complete_datagram+0x22>
 80179d2:	4b45      	ldr	r3, [pc, #276]	; (8017ae8 <ip_reass_free_complete_datagram+0x12c>)
 80179d4:	22ab      	movs	r2, #171	; 0xab
 80179d6:	4945      	ldr	r1, [pc, #276]	; (8017aec <ip_reass_free_complete_datagram+0x130>)
 80179d8:	4845      	ldr	r0, [pc, #276]	; (8017af0 <ip_reass_free_complete_datagram+0x134>)
 80179da:	f001 faab 	bl	8018f34 <iprintf>
  if (prev != NULL) {
 80179de:	683b      	ldr	r3, [r7, #0]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d00a      	beq.n	80179fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	687a      	ldr	r2, [r7, #4]
 80179ea:	429a      	cmp	r2, r3
 80179ec:	d005      	beq.n	80179fa <ip_reass_free_complete_datagram+0x3e>
 80179ee:	4b3e      	ldr	r3, [pc, #248]	; (8017ae8 <ip_reass_free_complete_datagram+0x12c>)
 80179f0:	22ad      	movs	r2, #173	; 0xad
 80179f2:	4940      	ldr	r1, [pc, #256]	; (8017af4 <ip_reass_free_complete_datagram+0x138>)
 80179f4:	483e      	ldr	r0, [pc, #248]	; (8017af0 <ip_reass_free_complete_datagram+0x134>)
 80179f6:	f001 fa9d 	bl	8018f34 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	685b      	ldr	r3, [r3, #4]
 80179fe:	685b      	ldr	r3, [r3, #4]
 8017a00:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017a02:	697b      	ldr	r3, [r7, #20]
 8017a04:	889b      	ldrh	r3, [r3, #4]
 8017a06:	b29b      	uxth	r3, r3
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d12a      	bne.n	8017a62 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	685b      	ldr	r3, [r3, #4]
 8017a10:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017a12:	697b      	ldr	r3, [r7, #20]
 8017a14:	681a      	ldr	r2, [r3, #0]
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017a1a:	69bb      	ldr	r3, [r7, #24]
 8017a1c:	6858      	ldr	r0, [r3, #4]
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	3308      	adds	r3, #8
 8017a22:	2214      	movs	r2, #20
 8017a24:	4619      	mov	r1, r3
 8017a26:	f001 f9c0 	bl	8018daa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017a2a:	2101      	movs	r1, #1
 8017a2c:	69b8      	ldr	r0, [r7, #24]
 8017a2e:	f7ff fc29 	bl	8017284 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017a32:	69b8      	ldr	r0, [r7, #24]
 8017a34:	f7f5 fb04 	bl	800d040 <pbuf_clen>
 8017a38:	4603      	mov	r3, r0
 8017a3a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017a3c:	8bfa      	ldrh	r2, [r7, #30]
 8017a3e:	8a7b      	ldrh	r3, [r7, #18]
 8017a40:	4413      	add	r3, r2
 8017a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017a46:	db05      	blt.n	8017a54 <ip_reass_free_complete_datagram+0x98>
 8017a48:	4b27      	ldr	r3, [pc, #156]	; (8017ae8 <ip_reass_free_complete_datagram+0x12c>)
 8017a4a:	22bc      	movs	r2, #188	; 0xbc
 8017a4c:	492a      	ldr	r1, [pc, #168]	; (8017af8 <ip_reass_free_complete_datagram+0x13c>)
 8017a4e:	4828      	ldr	r0, [pc, #160]	; (8017af0 <ip_reass_free_complete_datagram+0x134>)
 8017a50:	f001 fa70 	bl	8018f34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017a54:	8bfa      	ldrh	r2, [r7, #30]
 8017a56:	8a7b      	ldrh	r3, [r7, #18]
 8017a58:	4413      	add	r3, r2
 8017a5a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017a5c:	69b8      	ldr	r0, [r7, #24]
 8017a5e:	f7f5 fa61 	bl	800cf24 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	685b      	ldr	r3, [r3, #4]
 8017a66:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017a68:	e01f      	b.n	8017aaa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017a6a:	69bb      	ldr	r3, [r7, #24]
 8017a6c:	685b      	ldr	r3, [r3, #4]
 8017a6e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017a70:	69bb      	ldr	r3, [r7, #24]
 8017a72:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017a74:	697b      	ldr	r3, [r7, #20]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017a7a:	68f8      	ldr	r0, [r7, #12]
 8017a7c:	f7f5 fae0 	bl	800d040 <pbuf_clen>
 8017a80:	4603      	mov	r3, r0
 8017a82:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017a84:	8bfa      	ldrh	r2, [r7, #30]
 8017a86:	8a7b      	ldrh	r3, [r7, #18]
 8017a88:	4413      	add	r3, r2
 8017a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017a8e:	db05      	blt.n	8017a9c <ip_reass_free_complete_datagram+0xe0>
 8017a90:	4b15      	ldr	r3, [pc, #84]	; (8017ae8 <ip_reass_free_complete_datagram+0x12c>)
 8017a92:	22cc      	movs	r2, #204	; 0xcc
 8017a94:	4918      	ldr	r1, [pc, #96]	; (8017af8 <ip_reass_free_complete_datagram+0x13c>)
 8017a96:	4816      	ldr	r0, [pc, #88]	; (8017af0 <ip_reass_free_complete_datagram+0x134>)
 8017a98:	f001 fa4c 	bl	8018f34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017a9c:	8bfa      	ldrh	r2, [r7, #30]
 8017a9e:	8a7b      	ldrh	r3, [r7, #18]
 8017aa0:	4413      	add	r3, r2
 8017aa2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017aa4:	68f8      	ldr	r0, [r7, #12]
 8017aa6:	f7f5 fa3d 	bl	800cf24 <pbuf_free>
  while (p != NULL) {
 8017aaa:	69bb      	ldr	r3, [r7, #24]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d1dc      	bne.n	8017a6a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017ab0:	6839      	ldr	r1, [r7, #0]
 8017ab2:	6878      	ldr	r0, [r7, #4]
 8017ab4:	f000 f8c2 	bl	8017c3c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017ab8:	4b10      	ldr	r3, [pc, #64]	; (8017afc <ip_reass_free_complete_datagram+0x140>)
 8017aba:	881b      	ldrh	r3, [r3, #0]
 8017abc:	8bfa      	ldrh	r2, [r7, #30]
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	d905      	bls.n	8017ace <ip_reass_free_complete_datagram+0x112>
 8017ac2:	4b09      	ldr	r3, [pc, #36]	; (8017ae8 <ip_reass_free_complete_datagram+0x12c>)
 8017ac4:	22d2      	movs	r2, #210	; 0xd2
 8017ac6:	490e      	ldr	r1, [pc, #56]	; (8017b00 <ip_reass_free_complete_datagram+0x144>)
 8017ac8:	4809      	ldr	r0, [pc, #36]	; (8017af0 <ip_reass_free_complete_datagram+0x134>)
 8017aca:	f001 fa33 	bl	8018f34 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017ace:	4b0b      	ldr	r3, [pc, #44]	; (8017afc <ip_reass_free_complete_datagram+0x140>)
 8017ad0:	881a      	ldrh	r2, [r3, #0]
 8017ad2:	8bfb      	ldrh	r3, [r7, #30]
 8017ad4:	1ad3      	subs	r3, r2, r3
 8017ad6:	b29a      	uxth	r2, r3
 8017ad8:	4b08      	ldr	r3, [pc, #32]	; (8017afc <ip_reass_free_complete_datagram+0x140>)
 8017ada:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017adc:	8bfb      	ldrh	r3, [r7, #30]
}
 8017ade:	4618      	mov	r0, r3
 8017ae0:	3720      	adds	r7, #32
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	bd80      	pop	{r7, pc}
 8017ae6:	bf00      	nop
 8017ae8:	0801dc48 	.word	0x0801dc48
 8017aec:	0801dc84 	.word	0x0801dc84
 8017af0:	0801dc90 	.word	0x0801dc90
 8017af4:	0801dcb8 	.word	0x0801dcb8
 8017af8:	0801dccc 	.word	0x0801dccc
 8017afc:	20011718 	.word	0x20011718
 8017b00:	0801dcec 	.word	0x0801dcec

08017b04 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b08a      	sub	sp, #40	; 0x28
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
 8017b0c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017b12:	2300      	movs	r3, #0
 8017b14:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017b16:	2300      	movs	r3, #0
 8017b18:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017b1e:	2300      	movs	r3, #0
 8017b20:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017b22:	4b28      	ldr	r3, [pc, #160]	; (8017bc4 <ip_reass_remove_oldest_datagram+0xc0>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017b28:	e030      	b.n	8017b8c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b2c:	695a      	ldr	r2, [r3, #20]
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	68db      	ldr	r3, [r3, #12]
 8017b32:	429a      	cmp	r2, r3
 8017b34:	d10c      	bne.n	8017b50 <ip_reass_remove_oldest_datagram+0x4c>
 8017b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b38:	699a      	ldr	r2, [r3, #24]
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	691b      	ldr	r3, [r3, #16]
 8017b3e:	429a      	cmp	r2, r3
 8017b40:	d106      	bne.n	8017b50 <ip_reass_remove_oldest_datagram+0x4c>
 8017b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b44:	899a      	ldrh	r2, [r3, #12]
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	889b      	ldrh	r3, [r3, #4]
 8017b4a:	b29b      	uxth	r3, r3
 8017b4c:	429a      	cmp	r2, r3
 8017b4e:	d014      	beq.n	8017b7a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017b50:	693b      	ldr	r3, [r7, #16]
 8017b52:	3301      	adds	r3, #1
 8017b54:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017b56:	6a3b      	ldr	r3, [r7, #32]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d104      	bne.n	8017b66 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b5e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017b60:	69fb      	ldr	r3, [r7, #28]
 8017b62:	61bb      	str	r3, [r7, #24]
 8017b64:	e009      	b.n	8017b7a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b68:	7fda      	ldrb	r2, [r3, #31]
 8017b6a:	6a3b      	ldr	r3, [r7, #32]
 8017b6c:	7fdb      	ldrb	r3, [r3, #31]
 8017b6e:	429a      	cmp	r2, r3
 8017b70:	d803      	bhi.n	8017b7a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b74:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017b76:	69fb      	ldr	r3, [r7, #28]
 8017b78:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d001      	beq.n	8017b86 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b84:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d1cb      	bne.n	8017b2a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017b92:	6a3b      	ldr	r3, [r7, #32]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d008      	beq.n	8017baa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017b98:	69b9      	ldr	r1, [r7, #24]
 8017b9a:	6a38      	ldr	r0, [r7, #32]
 8017b9c:	f7ff ff0e 	bl	80179bc <ip_reass_free_complete_datagram>
 8017ba0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017ba2:	697a      	ldr	r2, [r7, #20]
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	4413      	add	r3, r2
 8017ba8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017baa:	697a      	ldr	r2, [r7, #20]
 8017bac:	683b      	ldr	r3, [r7, #0]
 8017bae:	429a      	cmp	r2, r3
 8017bb0:	da02      	bge.n	8017bb8 <ip_reass_remove_oldest_datagram+0xb4>
 8017bb2:	693b      	ldr	r3, [r7, #16]
 8017bb4:	2b01      	cmp	r3, #1
 8017bb6:	dcac      	bgt.n	8017b12 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017bb8:	697b      	ldr	r3, [r7, #20]
}
 8017bba:	4618      	mov	r0, r3
 8017bbc:	3728      	adds	r7, #40	; 0x28
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	bd80      	pop	{r7, pc}
 8017bc2:	bf00      	nop
 8017bc4:	20011714 	.word	0x20011714

08017bc8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017bc8:	b580      	push	{r7, lr}
 8017bca:	b084      	sub	sp, #16
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
 8017bd0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017bd2:	2004      	movs	r0, #4
 8017bd4:	f7f4 fa80 	bl	800c0d8 <memp_malloc>
 8017bd8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d110      	bne.n	8017c02 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017be0:	6839      	ldr	r1, [r7, #0]
 8017be2:	6878      	ldr	r0, [r7, #4]
 8017be4:	f7ff ff8e 	bl	8017b04 <ip_reass_remove_oldest_datagram>
 8017be8:	4602      	mov	r2, r0
 8017bea:	683b      	ldr	r3, [r7, #0]
 8017bec:	4293      	cmp	r3, r2
 8017bee:	dc03      	bgt.n	8017bf8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017bf0:	2004      	movs	r0, #4
 8017bf2:	f7f4 fa71 	bl	800c0d8 <memp_malloc>
 8017bf6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d101      	bne.n	8017c02 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017bfe:	2300      	movs	r3, #0
 8017c00:	e016      	b.n	8017c30 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017c02:	2220      	movs	r2, #32
 8017c04:	2100      	movs	r1, #0
 8017c06:	68f8      	ldr	r0, [r7, #12]
 8017c08:	f001 f8f7 	bl	8018dfa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	220f      	movs	r2, #15
 8017c10:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017c12:	4b09      	ldr	r3, [pc, #36]	; (8017c38 <ip_reass_enqueue_new_datagram+0x70>)
 8017c14:	681a      	ldr	r2, [r3, #0]
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017c1a:	4a07      	ldr	r2, [pc, #28]	; (8017c38 <ip_reass_enqueue_new_datagram+0x70>)
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	3308      	adds	r3, #8
 8017c24:	2214      	movs	r2, #20
 8017c26:	6879      	ldr	r1, [r7, #4]
 8017c28:	4618      	mov	r0, r3
 8017c2a:	f001 f8be 	bl	8018daa <memcpy>
  return ipr;
 8017c2e:	68fb      	ldr	r3, [r7, #12]
}
 8017c30:	4618      	mov	r0, r3
 8017c32:	3710      	adds	r7, #16
 8017c34:	46bd      	mov	sp, r7
 8017c36:	bd80      	pop	{r7, pc}
 8017c38:	20011714 	.word	0x20011714

08017c3c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b082      	sub	sp, #8
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
 8017c44:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017c46:	4b10      	ldr	r3, [pc, #64]	; (8017c88 <ip_reass_dequeue_datagram+0x4c>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	687a      	ldr	r2, [r7, #4]
 8017c4c:	429a      	cmp	r2, r3
 8017c4e:	d104      	bne.n	8017c5a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	4a0c      	ldr	r2, [pc, #48]	; (8017c88 <ip_reass_dequeue_datagram+0x4c>)
 8017c56:	6013      	str	r3, [r2, #0]
 8017c58:	e00d      	b.n	8017c76 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017c5a:	683b      	ldr	r3, [r7, #0]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d106      	bne.n	8017c6e <ip_reass_dequeue_datagram+0x32>
 8017c60:	4b0a      	ldr	r3, [pc, #40]	; (8017c8c <ip_reass_dequeue_datagram+0x50>)
 8017c62:	f240 1245 	movw	r2, #325	; 0x145
 8017c66:	490a      	ldr	r1, [pc, #40]	; (8017c90 <ip_reass_dequeue_datagram+0x54>)
 8017c68:	480a      	ldr	r0, [pc, #40]	; (8017c94 <ip_reass_dequeue_datagram+0x58>)
 8017c6a:	f001 f963 	bl	8018f34 <iprintf>
    prev->next = ipr->next;
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	681a      	ldr	r2, [r3, #0]
 8017c72:	683b      	ldr	r3, [r7, #0]
 8017c74:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017c76:	6879      	ldr	r1, [r7, #4]
 8017c78:	2004      	movs	r0, #4
 8017c7a:	f7f4 faa3 	bl	800c1c4 <memp_free>
}
 8017c7e:	bf00      	nop
 8017c80:	3708      	adds	r7, #8
 8017c82:	46bd      	mov	sp, r7
 8017c84:	bd80      	pop	{r7, pc}
 8017c86:	bf00      	nop
 8017c88:	20011714 	.word	0x20011714
 8017c8c:	0801dc48 	.word	0x0801dc48
 8017c90:	0801dd10 	.word	0x0801dd10
 8017c94:	0801dc90 	.word	0x0801dc90

08017c98 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b08c      	sub	sp, #48	; 0x30
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	60f8      	str	r0, [r7, #12]
 8017ca0:	60b9      	str	r1, [r7, #8]
 8017ca2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017ca8:	2301      	movs	r3, #1
 8017caa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017cac:	68bb      	ldr	r3, [r7, #8]
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017cb2:	69fb      	ldr	r3, [r7, #28]
 8017cb4:	885b      	ldrh	r3, [r3, #2]
 8017cb6:	b29b      	uxth	r3, r3
 8017cb8:	4618      	mov	r0, r3
 8017cba:	f7f3 fcff 	bl	800b6bc <lwip_htons>
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017cc2:	69fb      	ldr	r3, [r7, #28]
 8017cc4:	781b      	ldrb	r3, [r3, #0]
 8017cc6:	f003 030f 	and.w	r3, r3, #15
 8017cca:	b2db      	uxtb	r3, r3
 8017ccc:	009b      	lsls	r3, r3, #2
 8017cce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017cd0:	7e7b      	ldrb	r3, [r7, #25]
 8017cd2:	b29b      	uxth	r3, r3
 8017cd4:	8b7a      	ldrh	r2, [r7, #26]
 8017cd6:	429a      	cmp	r2, r3
 8017cd8:	d202      	bcs.n	8017ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017cda:	f04f 33ff 	mov.w	r3, #4294967295
 8017cde:	e135      	b.n	8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017ce0:	7e7b      	ldrb	r3, [r7, #25]
 8017ce2:	b29b      	uxth	r3, r3
 8017ce4:	8b7a      	ldrh	r2, [r7, #26]
 8017ce6:	1ad3      	subs	r3, r2, r3
 8017ce8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017cea:	69fb      	ldr	r3, [r7, #28]
 8017cec:	88db      	ldrh	r3, [r3, #6]
 8017cee:	b29b      	uxth	r3, r3
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	f7f3 fce3 	bl	800b6bc <lwip_htons>
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017cfc:	b29b      	uxth	r3, r3
 8017cfe:	00db      	lsls	r3, r3, #3
 8017d00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017d02:	68bb      	ldr	r3, [r7, #8]
 8017d04:	685b      	ldr	r3, [r3, #4]
 8017d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	701a      	strb	r2, [r3, #0]
 8017d0e:	2200      	movs	r2, #0
 8017d10:	705a      	strb	r2, [r3, #1]
 8017d12:	2200      	movs	r2, #0
 8017d14:	709a      	strb	r2, [r3, #2]
 8017d16:	2200      	movs	r2, #0
 8017d18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d1c:	8afa      	ldrh	r2, [r7, #22]
 8017d1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017d20:	8afa      	ldrh	r2, [r7, #22]
 8017d22:	8b7b      	ldrh	r3, [r7, #26]
 8017d24:	4413      	add	r3, r2
 8017d26:	b29a      	uxth	r2, r3
 8017d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d2e:	88db      	ldrh	r3, [r3, #6]
 8017d30:	b29b      	uxth	r3, r3
 8017d32:	8afa      	ldrh	r2, [r7, #22]
 8017d34:	429a      	cmp	r2, r3
 8017d36:	d902      	bls.n	8017d3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017d38:	f04f 33ff 	mov.w	r3, #4294967295
 8017d3c:	e106      	b.n	8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	685b      	ldr	r3, [r3, #4]
 8017d42:	627b      	str	r3, [r7, #36]	; 0x24
 8017d44:	e068      	b.n	8017e18 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d48:	685b      	ldr	r3, [r3, #4]
 8017d4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d4e:	889b      	ldrh	r3, [r3, #4]
 8017d50:	b29a      	uxth	r2, r3
 8017d52:	693b      	ldr	r3, [r7, #16]
 8017d54:	889b      	ldrh	r3, [r3, #4]
 8017d56:	b29b      	uxth	r3, r3
 8017d58:	429a      	cmp	r2, r3
 8017d5a:	d235      	bcs.n	8017dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d020      	beq.n	8017daa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d6a:	889b      	ldrh	r3, [r3, #4]
 8017d6c:	b29a      	uxth	r2, r3
 8017d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d70:	88db      	ldrh	r3, [r3, #6]
 8017d72:	b29b      	uxth	r3, r3
 8017d74:	429a      	cmp	r2, r3
 8017d76:	d307      	bcc.n	8017d88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d7a:	88db      	ldrh	r3, [r3, #6]
 8017d7c:	b29a      	uxth	r2, r3
 8017d7e:	693b      	ldr	r3, [r7, #16]
 8017d80:	889b      	ldrh	r3, [r3, #4]
 8017d82:	b29b      	uxth	r3, r3
 8017d84:	429a      	cmp	r2, r3
 8017d86:	d902      	bls.n	8017d8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017d88:	f04f 33ff 	mov.w	r3, #4294967295
 8017d8c:	e0de      	b.n	8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d90:	68ba      	ldr	r2, [r7, #8]
 8017d92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d96:	88db      	ldrh	r3, [r3, #6]
 8017d98:	b29a      	uxth	r2, r3
 8017d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d9c:	889b      	ldrh	r3, [r3, #4]
 8017d9e:	b29b      	uxth	r3, r3
 8017da0:	429a      	cmp	r2, r3
 8017da2:	d03d      	beq.n	8017e20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017da4:	2300      	movs	r3, #0
 8017da6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017da8:	e03a      	b.n	8017e20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dac:	88db      	ldrh	r3, [r3, #6]
 8017dae:	b29a      	uxth	r2, r3
 8017db0:	693b      	ldr	r3, [r7, #16]
 8017db2:	889b      	ldrh	r3, [r3, #4]
 8017db4:	b29b      	uxth	r3, r3
 8017db6:	429a      	cmp	r2, r3
 8017db8:	d902      	bls.n	8017dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017dba:	f04f 33ff 	mov.w	r3, #4294967295
 8017dbe:	e0c5      	b.n	8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	68ba      	ldr	r2, [r7, #8]
 8017dc4:	605a      	str	r2, [r3, #4]
      break;
 8017dc6:	e02b      	b.n	8017e20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dca:	889b      	ldrh	r3, [r3, #4]
 8017dcc:	b29a      	uxth	r2, r3
 8017dce:	693b      	ldr	r3, [r7, #16]
 8017dd0:	889b      	ldrh	r3, [r3, #4]
 8017dd2:	b29b      	uxth	r3, r3
 8017dd4:	429a      	cmp	r2, r3
 8017dd6:	d102      	bne.n	8017dde <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8017ddc:	e0b6      	b.n	8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de0:	889b      	ldrh	r3, [r3, #4]
 8017de2:	b29a      	uxth	r2, r3
 8017de4:	693b      	ldr	r3, [r7, #16]
 8017de6:	88db      	ldrh	r3, [r3, #6]
 8017de8:	b29b      	uxth	r3, r3
 8017dea:	429a      	cmp	r2, r3
 8017dec:	d202      	bcs.n	8017df4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017dee:	f04f 33ff 	mov.w	r3, #4294967295
 8017df2:	e0ab      	b.n	8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d009      	beq.n	8017e0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dfc:	88db      	ldrh	r3, [r3, #6]
 8017dfe:	b29a      	uxth	r2, r3
 8017e00:	693b      	ldr	r3, [r7, #16]
 8017e02:	889b      	ldrh	r3, [r3, #4]
 8017e04:	b29b      	uxth	r3, r3
 8017e06:	429a      	cmp	r2, r3
 8017e08:	d001      	beq.n	8017e0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017e0e:	693b      	ldr	r3, [r7, #16]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017e14:	693b      	ldr	r3, [r7, #16]
 8017e16:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d193      	bne.n	8017d46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017e1e:	e000      	b.n	8017e22 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017e20:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d12d      	bne.n	8017e84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d01c      	beq.n	8017e68 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e30:	88db      	ldrh	r3, [r3, #6]
 8017e32:	b29a      	uxth	r2, r3
 8017e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e36:	889b      	ldrh	r3, [r3, #4]
 8017e38:	b29b      	uxth	r3, r3
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d906      	bls.n	8017e4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017e3e:	4b45      	ldr	r3, [pc, #276]	; (8017f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e40:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017e44:	4944      	ldr	r1, [pc, #272]	; (8017f58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017e46:	4845      	ldr	r0, [pc, #276]	; (8017f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017e48:	f001 f874 	bl	8018f34 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e4e:	68ba      	ldr	r2, [r7, #8]
 8017e50:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e54:	88db      	ldrh	r3, [r3, #6]
 8017e56:	b29a      	uxth	r2, r3
 8017e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e5a:	889b      	ldrh	r3, [r3, #4]
 8017e5c:	b29b      	uxth	r3, r3
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	d010      	beq.n	8017e84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017e62:	2300      	movs	r3, #0
 8017e64:	623b      	str	r3, [r7, #32]
 8017e66:	e00d      	b.n	8017e84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	685b      	ldr	r3, [r3, #4]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d006      	beq.n	8017e7e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017e70:	4b38      	ldr	r3, [pc, #224]	; (8017f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e72:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017e76:	493a      	ldr	r1, [pc, #232]	; (8017f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017e78:	4838      	ldr	r0, [pc, #224]	; (8017f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017e7a:	f001 f85b 	bl	8018f34 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	68ba      	ldr	r2, [r7, #8]
 8017e82:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d105      	bne.n	8017e96 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	7f9b      	ldrb	r3, [r3, #30]
 8017e8e:	f003 0301 	and.w	r3, r3, #1
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d059      	beq.n	8017f4a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017e96:	6a3b      	ldr	r3, [r7, #32]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d04f      	beq.n	8017f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	685b      	ldr	r3, [r3, #4]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d006      	beq.n	8017eb2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	685b      	ldr	r3, [r3, #4]
 8017ea8:	685b      	ldr	r3, [r3, #4]
 8017eaa:	889b      	ldrh	r3, [r3, #4]
 8017eac:	b29b      	uxth	r3, r3
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d002      	beq.n	8017eb8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	623b      	str	r3, [r7, #32]
 8017eb6:	e041      	b.n	8017f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017ec2:	e012      	b.n	8017eea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec6:	685b      	ldr	r3, [r3, #4]
 8017ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ecc:	88db      	ldrh	r3, [r3, #6]
 8017ece:	b29a      	uxth	r2, r3
 8017ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ed2:	889b      	ldrh	r3, [r3, #4]
 8017ed4:	b29b      	uxth	r3, r3
 8017ed6:	429a      	cmp	r2, r3
 8017ed8:	d002      	beq.n	8017ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017eda:	2300      	movs	r3, #0
 8017edc:	623b      	str	r3, [r7, #32]
            break;
 8017ede:	e007      	b.n	8017ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ee2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d1e9      	bne.n	8017ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017ef0:	6a3b      	ldr	r3, [r7, #32]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d022      	beq.n	8017f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	685b      	ldr	r3, [r3, #4]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d106      	bne.n	8017f0c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017efe:	4b15      	ldr	r3, [pc, #84]	; (8017f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f00:	f240 12df 	movw	r2, #479	; 0x1df
 8017f04:	4917      	ldr	r1, [pc, #92]	; (8017f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017f06:	4815      	ldr	r0, [pc, #84]	; (8017f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f08:	f001 f814 	bl	8018f34 <iprintf>
          LWIP_ASSERT("sanity check",
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	685b      	ldr	r3, [r3, #4]
 8017f10:	685b      	ldr	r3, [r3, #4]
 8017f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f14:	429a      	cmp	r2, r3
 8017f16:	d106      	bne.n	8017f26 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017f18:	4b0e      	ldr	r3, [pc, #56]	; (8017f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017f1e:	4911      	ldr	r1, [pc, #68]	; (8017f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017f20:	480e      	ldr	r0, [pc, #56]	; (8017f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f22:	f001 f807 	bl	8018f34 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d006      	beq.n	8017f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017f2e:	4b09      	ldr	r3, [pc, #36]	; (8017f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f30:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017f34:	490c      	ldr	r1, [pc, #48]	; (8017f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017f36:	4809      	ldr	r0, [pc, #36]	; (8017f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f38:	f000 fffc 	bl	8018f34 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017f3c:	6a3b      	ldr	r3, [r7, #32]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	bf14      	ite	ne
 8017f42:	2301      	movne	r3, #1
 8017f44:	2300      	moveq	r3, #0
 8017f46:	b2db      	uxtb	r3, r3
 8017f48:	e000      	b.n	8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017f4a:	2300      	movs	r3, #0
}
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	3730      	adds	r7, #48	; 0x30
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}
 8017f54:	0801dc48 	.word	0x0801dc48
 8017f58:	0801dd2c 	.word	0x0801dd2c
 8017f5c:	0801dc90 	.word	0x0801dc90
 8017f60:	0801dd4c 	.word	0x0801dd4c
 8017f64:	0801dd84 	.word	0x0801dd84
 8017f68:	0801dd94 	.word	0x0801dd94

08017f6c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b08e      	sub	sp, #56	; 0x38
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	685b      	ldr	r3, [r3, #4]
 8017f78:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f7c:	781b      	ldrb	r3, [r3, #0]
 8017f7e:	f003 030f 	and.w	r3, r3, #15
 8017f82:	b2db      	uxtb	r3, r3
 8017f84:	009b      	lsls	r3, r3, #2
 8017f86:	b2db      	uxtb	r3, r3
 8017f88:	2b14      	cmp	r3, #20
 8017f8a:	f040 8171 	bne.w	8018270 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f90:	88db      	ldrh	r3, [r3, #6]
 8017f92:	b29b      	uxth	r3, r3
 8017f94:	4618      	mov	r0, r3
 8017f96:	f7f3 fb91 	bl	800b6bc <lwip_htons>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017fa0:	b29b      	uxth	r3, r3
 8017fa2:	00db      	lsls	r3, r3, #3
 8017fa4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fa8:	885b      	ldrh	r3, [r3, #2]
 8017faa:	b29b      	uxth	r3, r3
 8017fac:	4618      	mov	r0, r3
 8017fae:	f7f3 fb85 	bl	800b6bc <lwip_htons>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fb8:	781b      	ldrb	r3, [r3, #0]
 8017fba:	f003 030f 	and.w	r3, r3, #15
 8017fbe:	b2db      	uxtb	r3, r3
 8017fc0:	009b      	lsls	r3, r3, #2
 8017fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017fc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017fca:	b29b      	uxth	r3, r3
 8017fcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	f0c0 8150 	bcc.w	8018274 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017fd8:	b29b      	uxth	r3, r3
 8017fda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017fdc:	1ad3      	subs	r3, r2, r3
 8017fde:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017fe0:	6878      	ldr	r0, [r7, #4]
 8017fe2:	f7f5 f82d 	bl	800d040 <pbuf_clen>
 8017fe6:	4603      	mov	r3, r0
 8017fe8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017fea:	4b8c      	ldr	r3, [pc, #560]	; (801821c <ip4_reass+0x2b0>)
 8017fec:	881b      	ldrh	r3, [r3, #0]
 8017fee:	461a      	mov	r2, r3
 8017ff0:	8c3b      	ldrh	r3, [r7, #32]
 8017ff2:	4413      	add	r3, r2
 8017ff4:	2b0a      	cmp	r3, #10
 8017ff6:	dd10      	ble.n	801801a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017ff8:	8c3b      	ldrh	r3, [r7, #32]
 8017ffa:	4619      	mov	r1, r3
 8017ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ffe:	f7ff fd81 	bl	8017b04 <ip_reass_remove_oldest_datagram>
 8018002:	4603      	mov	r3, r0
 8018004:	2b00      	cmp	r3, #0
 8018006:	f000 8137 	beq.w	8018278 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801800a:	4b84      	ldr	r3, [pc, #528]	; (801821c <ip4_reass+0x2b0>)
 801800c:	881b      	ldrh	r3, [r3, #0]
 801800e:	461a      	mov	r2, r3
 8018010:	8c3b      	ldrh	r3, [r7, #32]
 8018012:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018014:	2b0a      	cmp	r3, #10
 8018016:	f300 812f 	bgt.w	8018278 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801801a:	4b81      	ldr	r3, [pc, #516]	; (8018220 <ip4_reass+0x2b4>)
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	633b      	str	r3, [r7, #48]	; 0x30
 8018020:	e015      	b.n	801804e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018024:	695a      	ldr	r2, [r3, #20]
 8018026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018028:	68db      	ldr	r3, [r3, #12]
 801802a:	429a      	cmp	r2, r3
 801802c:	d10c      	bne.n	8018048 <ip4_reass+0xdc>
 801802e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018030:	699a      	ldr	r2, [r3, #24]
 8018032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018034:	691b      	ldr	r3, [r3, #16]
 8018036:	429a      	cmp	r2, r3
 8018038:	d106      	bne.n	8018048 <ip4_reass+0xdc>
 801803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801803c:	899a      	ldrh	r2, [r3, #12]
 801803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018040:	889b      	ldrh	r3, [r3, #4]
 8018042:	b29b      	uxth	r3, r3
 8018044:	429a      	cmp	r2, r3
 8018046:	d006      	beq.n	8018056 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	633b      	str	r3, [r7, #48]	; 0x30
 801804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018050:	2b00      	cmp	r3, #0
 8018052:	d1e6      	bne.n	8018022 <ip4_reass+0xb6>
 8018054:	e000      	b.n	8018058 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018056:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801805a:	2b00      	cmp	r3, #0
 801805c:	d109      	bne.n	8018072 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801805e:	8c3b      	ldrh	r3, [r7, #32]
 8018060:	4619      	mov	r1, r3
 8018062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018064:	f7ff fdb0 	bl	8017bc8 <ip_reass_enqueue_new_datagram>
 8018068:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801806c:	2b00      	cmp	r3, #0
 801806e:	d11c      	bne.n	80180aa <ip4_reass+0x13e>
      goto nullreturn;
 8018070:	e105      	b.n	801827e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018074:	88db      	ldrh	r3, [r3, #6]
 8018076:	b29b      	uxth	r3, r3
 8018078:	4618      	mov	r0, r3
 801807a:	f7f3 fb1f 	bl	800b6bc <lwip_htons>
 801807e:	4603      	mov	r3, r0
 8018080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018084:	2b00      	cmp	r3, #0
 8018086:	d110      	bne.n	80180aa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801808a:	89db      	ldrh	r3, [r3, #14]
 801808c:	4618      	mov	r0, r3
 801808e:	f7f3 fb15 	bl	800b6bc <lwip_htons>
 8018092:	4603      	mov	r3, r0
 8018094:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018098:	2b00      	cmp	r3, #0
 801809a:	d006      	beq.n	80180aa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801809e:	3308      	adds	r3, #8
 80180a0:	2214      	movs	r2, #20
 80180a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80180a4:	4618      	mov	r0, r3
 80180a6:	f000 fe80 	bl	8018daa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80180aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ac:	88db      	ldrh	r3, [r3, #6]
 80180ae:	b29b      	uxth	r3, r3
 80180b0:	f003 0320 	and.w	r3, r3, #32
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	bf0c      	ite	eq
 80180b8:	2301      	moveq	r3, #1
 80180ba:	2300      	movne	r3, #0
 80180bc:	b2db      	uxtb	r3, r3
 80180be:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80180c0:	69fb      	ldr	r3, [r7, #28]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d00e      	beq.n	80180e4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80180c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80180c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80180ca:	4413      	add	r3, r2
 80180cc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80180ce:	8b7a      	ldrh	r2, [r7, #26]
 80180d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80180d2:	429a      	cmp	r2, r3
 80180d4:	f0c0 80a0 	bcc.w	8018218 <ip4_reass+0x2ac>
 80180d8:	8b7b      	ldrh	r3, [r7, #26]
 80180da:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80180de:	4293      	cmp	r3, r2
 80180e0:	f200 809a 	bhi.w	8018218 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80180e4:	69fa      	ldr	r2, [r7, #28]
 80180e6:	6879      	ldr	r1, [r7, #4]
 80180e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180ea:	f7ff fdd5 	bl	8017c98 <ip_reass_chain_frag_into_datagram_and_validate>
 80180ee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80180f0:	697b      	ldr	r3, [r7, #20]
 80180f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180f6:	f000 809b 	beq.w	8018230 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80180fa:	4b48      	ldr	r3, [pc, #288]	; (801821c <ip4_reass+0x2b0>)
 80180fc:	881a      	ldrh	r2, [r3, #0]
 80180fe:	8c3b      	ldrh	r3, [r7, #32]
 8018100:	4413      	add	r3, r2
 8018102:	b29a      	uxth	r2, r3
 8018104:	4b45      	ldr	r3, [pc, #276]	; (801821c <ip4_reass+0x2b0>)
 8018106:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018108:	69fb      	ldr	r3, [r7, #28]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d00d      	beq.n	801812a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801810e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018112:	4413      	add	r3, r2
 8018114:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018118:	8a7a      	ldrh	r2, [r7, #18]
 801811a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801811e:	7f9b      	ldrb	r3, [r3, #30]
 8018120:	f043 0301 	orr.w	r3, r3, #1
 8018124:	b2da      	uxtb	r2, r3
 8018126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018128:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801812a:	697b      	ldr	r3, [r7, #20]
 801812c:	2b01      	cmp	r3, #1
 801812e:	d171      	bne.n	8018214 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018132:	8b9b      	ldrh	r3, [r3, #28]
 8018134:	3314      	adds	r3, #20
 8018136:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801813a:	685b      	ldr	r3, [r3, #4]
 801813c:	685b      	ldr	r3, [r3, #4]
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018144:	685b      	ldr	r3, [r3, #4]
 8018146:	685b      	ldr	r3, [r3, #4]
 8018148:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801814c:	3308      	adds	r3, #8
 801814e:	2214      	movs	r2, #20
 8018150:	4619      	mov	r1, r3
 8018152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018154:	f000 fe29 	bl	8018daa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018158:	8a3b      	ldrh	r3, [r7, #16]
 801815a:	4618      	mov	r0, r3
 801815c:	f7f3 faae 	bl	800b6bc <lwip_htons>
 8018160:	4603      	mov	r3, r0
 8018162:	461a      	mov	r2, r3
 8018164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018166:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801816a:	2200      	movs	r2, #0
 801816c:	719a      	strb	r2, [r3, #6]
 801816e:	2200      	movs	r2, #0
 8018170:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018174:	2200      	movs	r2, #0
 8018176:	729a      	strb	r2, [r3, #10]
 8018178:	2200      	movs	r2, #0
 801817a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801817e:	685b      	ldr	r3, [r3, #4]
 8018180:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018182:	e00d      	b.n	80181a0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018186:	685b      	ldr	r3, [r3, #4]
 8018188:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801818a:	2114      	movs	r1, #20
 801818c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801818e:	f7f4 fe43 	bl	800ce18 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018192:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018194:	6878      	ldr	r0, [r7, #4]
 8018196:	f7f4 ff93 	bl	800d0c0 <pbuf_cat>
      r = iprh->next_pbuf;
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80181a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d1ee      	bne.n	8018184 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80181a6:	4b1e      	ldr	r3, [pc, #120]	; (8018220 <ip4_reass+0x2b4>)
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80181ac:	429a      	cmp	r2, r3
 80181ae:	d102      	bne.n	80181b6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80181b0:	2300      	movs	r3, #0
 80181b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80181b4:	e010      	b.n	80181d8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80181b6:	4b1a      	ldr	r3, [pc, #104]	; (8018220 <ip4_reass+0x2b4>)
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80181bc:	e007      	b.n	80181ce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80181be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80181c4:	429a      	cmp	r2, r3
 80181c6:	d006      	beq.n	80181d6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80181c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80181ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d1f4      	bne.n	80181be <ip4_reass+0x252>
 80181d4:	e000      	b.n	80181d8 <ip4_reass+0x26c>
          break;
 80181d6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80181d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80181da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181dc:	f7ff fd2e 	bl	8017c3c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80181e0:	6878      	ldr	r0, [r7, #4]
 80181e2:	f7f4 ff2d 	bl	800d040 <pbuf_clen>
 80181e6:	4603      	mov	r3, r0
 80181e8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80181ea:	4b0c      	ldr	r3, [pc, #48]	; (801821c <ip4_reass+0x2b0>)
 80181ec:	881b      	ldrh	r3, [r3, #0]
 80181ee:	8c3a      	ldrh	r2, [r7, #32]
 80181f0:	429a      	cmp	r2, r3
 80181f2:	d906      	bls.n	8018202 <ip4_reass+0x296>
 80181f4:	4b0b      	ldr	r3, [pc, #44]	; (8018224 <ip4_reass+0x2b8>)
 80181f6:	f240 229b 	movw	r2, #667	; 0x29b
 80181fa:	490b      	ldr	r1, [pc, #44]	; (8018228 <ip4_reass+0x2bc>)
 80181fc:	480b      	ldr	r0, [pc, #44]	; (801822c <ip4_reass+0x2c0>)
 80181fe:	f000 fe99 	bl	8018f34 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018202:	4b06      	ldr	r3, [pc, #24]	; (801821c <ip4_reass+0x2b0>)
 8018204:	881a      	ldrh	r2, [r3, #0]
 8018206:	8c3b      	ldrh	r3, [r7, #32]
 8018208:	1ad3      	subs	r3, r2, r3
 801820a:	b29a      	uxth	r2, r3
 801820c:	4b03      	ldr	r3, [pc, #12]	; (801821c <ip4_reass+0x2b0>)
 801820e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	e038      	b.n	8018286 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018214:	2300      	movs	r3, #0
 8018216:	e036      	b.n	8018286 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018218:	bf00      	nop
 801821a:	e00a      	b.n	8018232 <ip4_reass+0x2c6>
 801821c:	20011718 	.word	0x20011718
 8018220:	20011714 	.word	0x20011714
 8018224:	0801dc48 	.word	0x0801dc48
 8018228:	0801ddb8 	.word	0x0801ddb8
 801822c:	0801dc90 	.word	0x0801dc90
    goto nullreturn_ipr;
 8018230:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018234:	2b00      	cmp	r3, #0
 8018236:	d106      	bne.n	8018246 <ip4_reass+0x2da>
 8018238:	4b15      	ldr	r3, [pc, #84]	; (8018290 <ip4_reass+0x324>)
 801823a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801823e:	4915      	ldr	r1, [pc, #84]	; (8018294 <ip4_reass+0x328>)
 8018240:	4815      	ldr	r0, [pc, #84]	; (8018298 <ip4_reass+0x32c>)
 8018242:	f000 fe77 	bl	8018f34 <iprintf>
  if (ipr->p == NULL) {
 8018246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018248:	685b      	ldr	r3, [r3, #4]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d116      	bne.n	801827c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801824e:	4b13      	ldr	r3, [pc, #76]	; (801829c <ip4_reass+0x330>)
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018254:	429a      	cmp	r2, r3
 8018256:	d006      	beq.n	8018266 <ip4_reass+0x2fa>
 8018258:	4b0d      	ldr	r3, [pc, #52]	; (8018290 <ip4_reass+0x324>)
 801825a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801825e:	4910      	ldr	r1, [pc, #64]	; (80182a0 <ip4_reass+0x334>)
 8018260:	480d      	ldr	r0, [pc, #52]	; (8018298 <ip4_reass+0x32c>)
 8018262:	f000 fe67 	bl	8018f34 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018266:	2100      	movs	r1, #0
 8018268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801826a:	f7ff fce7 	bl	8017c3c <ip_reass_dequeue_datagram>
 801826e:	e006      	b.n	801827e <ip4_reass+0x312>
    goto nullreturn;
 8018270:	bf00      	nop
 8018272:	e004      	b.n	801827e <ip4_reass+0x312>
    goto nullreturn;
 8018274:	bf00      	nop
 8018276:	e002      	b.n	801827e <ip4_reass+0x312>
      goto nullreturn;
 8018278:	bf00      	nop
 801827a:	e000      	b.n	801827e <ip4_reass+0x312>
  }

nullreturn:
 801827c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801827e:	6878      	ldr	r0, [r7, #4]
 8018280:	f7f4 fe50 	bl	800cf24 <pbuf_free>
  return NULL;
 8018284:	2300      	movs	r3, #0
}
 8018286:	4618      	mov	r0, r3
 8018288:	3738      	adds	r7, #56	; 0x38
 801828a:	46bd      	mov	sp, r7
 801828c:	bd80      	pop	{r7, pc}
 801828e:	bf00      	nop
 8018290:	0801dc48 	.word	0x0801dc48
 8018294:	0801ddd4 	.word	0x0801ddd4
 8018298:	0801dc90 	.word	0x0801dc90
 801829c:	20011714 	.word	0x20011714
 80182a0:	0801dde0 	.word	0x0801dde0

080182a4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80182a8:	2005      	movs	r0, #5
 80182aa:	f7f3 ff15 	bl	800c0d8 <memp_malloc>
 80182ae:	4603      	mov	r3, r0
}
 80182b0:	4618      	mov	r0, r3
 80182b2:	bd80      	pop	{r7, pc}

080182b4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b082      	sub	sp, #8
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d106      	bne.n	80182d0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80182c2:	4b07      	ldr	r3, [pc, #28]	; (80182e0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80182c4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80182c8:	4906      	ldr	r1, [pc, #24]	; (80182e4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80182ca:	4807      	ldr	r0, [pc, #28]	; (80182e8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80182cc:	f000 fe32 	bl	8018f34 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80182d0:	6879      	ldr	r1, [r7, #4]
 80182d2:	2005      	movs	r0, #5
 80182d4:	f7f3 ff76 	bl	800c1c4 <memp_free>
}
 80182d8:	bf00      	nop
 80182da:	3708      	adds	r7, #8
 80182dc:	46bd      	mov	sp, r7
 80182de:	bd80      	pop	{r7, pc}
 80182e0:	0801dc48 	.word	0x0801dc48
 80182e4:	0801de00 	.word	0x0801de00
 80182e8:	0801dc90 	.word	0x0801dc90

080182ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b084      	sub	sp, #16
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d106      	bne.n	801830c <ipfrag_free_pbuf_custom+0x20>
 80182fe:	4b11      	ldr	r3, [pc, #68]	; (8018344 <ipfrag_free_pbuf_custom+0x58>)
 8018300:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018304:	4910      	ldr	r1, [pc, #64]	; (8018348 <ipfrag_free_pbuf_custom+0x5c>)
 8018306:	4811      	ldr	r0, [pc, #68]	; (801834c <ipfrag_free_pbuf_custom+0x60>)
 8018308:	f000 fe14 	bl	8018f34 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801830c:	68fa      	ldr	r2, [r7, #12]
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	429a      	cmp	r2, r3
 8018312:	d006      	beq.n	8018322 <ipfrag_free_pbuf_custom+0x36>
 8018314:	4b0b      	ldr	r3, [pc, #44]	; (8018344 <ipfrag_free_pbuf_custom+0x58>)
 8018316:	f240 22cf 	movw	r2, #719	; 0x2cf
 801831a:	490d      	ldr	r1, [pc, #52]	; (8018350 <ipfrag_free_pbuf_custom+0x64>)
 801831c:	480b      	ldr	r0, [pc, #44]	; (801834c <ipfrag_free_pbuf_custom+0x60>)
 801831e:	f000 fe09 	bl	8018f34 <iprintf>
  if (pcr->original != NULL) {
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	695b      	ldr	r3, [r3, #20]
 8018326:	2b00      	cmp	r3, #0
 8018328:	d004      	beq.n	8018334 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	695b      	ldr	r3, [r3, #20]
 801832e:	4618      	mov	r0, r3
 8018330:	f7f4 fdf8 	bl	800cf24 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018334:	68f8      	ldr	r0, [r7, #12]
 8018336:	f7ff ffbd 	bl	80182b4 <ip_frag_free_pbuf_custom_ref>
}
 801833a:	bf00      	nop
 801833c:	3710      	adds	r7, #16
 801833e:	46bd      	mov	sp, r7
 8018340:	bd80      	pop	{r7, pc}
 8018342:	bf00      	nop
 8018344:	0801dc48 	.word	0x0801dc48
 8018348:	0801de0c 	.word	0x0801de0c
 801834c:	0801dc90 	.word	0x0801dc90
 8018350:	0801de18 	.word	0x0801de18

08018354 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018354:	b580      	push	{r7, lr}
 8018356:	b094      	sub	sp, #80	; 0x50
 8018358:	af02      	add	r7, sp, #8
 801835a:	60f8      	str	r0, [r7, #12]
 801835c:	60b9      	str	r1, [r7, #8]
 801835e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018360:	2300      	movs	r3, #0
 8018362:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018366:	68bb      	ldr	r3, [r7, #8]
 8018368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801836a:	3b14      	subs	r3, #20
 801836c:	2b00      	cmp	r3, #0
 801836e:	da00      	bge.n	8018372 <ip4_frag+0x1e>
 8018370:	3307      	adds	r3, #7
 8018372:	10db      	asrs	r3, r3, #3
 8018374:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018376:	2314      	movs	r3, #20
 8018378:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	685b      	ldr	r3, [r3, #4]
 801837e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018382:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018386:	781b      	ldrb	r3, [r3, #0]
 8018388:	f003 030f 	and.w	r3, r3, #15
 801838c:	b2db      	uxtb	r3, r3
 801838e:	009b      	lsls	r3, r3, #2
 8018390:	b2db      	uxtb	r3, r3
 8018392:	2b14      	cmp	r3, #20
 8018394:	d002      	beq.n	801839c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018396:	f06f 0305 	mvn.w	r3, #5
 801839a:	e110      	b.n	80185be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	895b      	ldrh	r3, [r3, #10]
 80183a0:	2b13      	cmp	r3, #19
 80183a2:	d809      	bhi.n	80183b8 <ip4_frag+0x64>
 80183a4:	4b88      	ldr	r3, [pc, #544]	; (80185c8 <ip4_frag+0x274>)
 80183a6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80183aa:	4988      	ldr	r1, [pc, #544]	; (80185cc <ip4_frag+0x278>)
 80183ac:	4888      	ldr	r0, [pc, #544]	; (80185d0 <ip4_frag+0x27c>)
 80183ae:	f000 fdc1 	bl	8018f34 <iprintf>
 80183b2:	f06f 0305 	mvn.w	r3, #5
 80183b6:	e102      	b.n	80185be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80183b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ba:	88db      	ldrh	r3, [r3, #6]
 80183bc:	b29b      	uxth	r3, r3
 80183be:	4618      	mov	r0, r3
 80183c0:	f7f3 f97c 	bl	800b6bc <lwip_htons>
 80183c4:	4603      	mov	r3, r0
 80183c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80183c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80183ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80183ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80183d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80183d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80183d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	891b      	ldrh	r3, [r3, #8]
 80183de:	3b14      	subs	r3, #20
 80183e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80183e4:	e0e1      	b.n	80185aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80183e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80183e8:	00db      	lsls	r3, r3, #3
 80183ea:	b29b      	uxth	r3, r3
 80183ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80183f0:	4293      	cmp	r3, r2
 80183f2:	bf28      	it	cs
 80183f4:	4613      	movcs	r3, r2
 80183f6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80183f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80183fc:	2114      	movs	r1, #20
 80183fe:	200e      	movs	r0, #14
 8018400:	f7f4 faac 	bl	800c95c <pbuf_alloc>
 8018404:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018408:	2b00      	cmp	r3, #0
 801840a:	f000 80d5 	beq.w	80185b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018410:	895b      	ldrh	r3, [r3, #10]
 8018412:	2b13      	cmp	r3, #19
 8018414:	d806      	bhi.n	8018424 <ip4_frag+0xd0>
 8018416:	4b6c      	ldr	r3, [pc, #432]	; (80185c8 <ip4_frag+0x274>)
 8018418:	f44f 7249 	mov.w	r2, #804	; 0x324
 801841c:	496d      	ldr	r1, [pc, #436]	; (80185d4 <ip4_frag+0x280>)
 801841e:	486c      	ldr	r0, [pc, #432]	; (80185d0 <ip4_frag+0x27c>)
 8018420:	f000 fd88 	bl	8018f34 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018426:	685b      	ldr	r3, [r3, #4]
 8018428:	2214      	movs	r2, #20
 801842a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801842c:	4618      	mov	r0, r3
 801842e:	f000 fcbc 	bl	8018daa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018434:	685b      	ldr	r3, [r3, #4]
 8018436:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018438:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801843a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801843e:	e064      	b.n	801850a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	895a      	ldrh	r2, [r3, #10]
 8018444:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018446:	1ad3      	subs	r3, r2, r3
 8018448:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	895b      	ldrh	r3, [r3, #10]
 801844e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018450:	429a      	cmp	r2, r3
 8018452:	d906      	bls.n	8018462 <ip4_frag+0x10e>
 8018454:	4b5c      	ldr	r3, [pc, #368]	; (80185c8 <ip4_frag+0x274>)
 8018456:	f240 322d 	movw	r2, #813	; 0x32d
 801845a:	495f      	ldr	r1, [pc, #380]	; (80185d8 <ip4_frag+0x284>)
 801845c:	485c      	ldr	r0, [pc, #368]	; (80185d0 <ip4_frag+0x27c>)
 801845e:	f000 fd69 	bl	8018f34 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018462:	8bfa      	ldrh	r2, [r7, #30]
 8018464:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018468:	4293      	cmp	r3, r2
 801846a:	bf28      	it	cs
 801846c:	4613      	movcs	r3, r2
 801846e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018472:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018476:	2b00      	cmp	r3, #0
 8018478:	d105      	bne.n	8018486 <ip4_frag+0x132>
        poff = 0;
 801847a:	2300      	movs	r3, #0
 801847c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	60fb      	str	r3, [r7, #12]
        continue;
 8018484:	e041      	b.n	801850a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018486:	f7ff ff0d 	bl	80182a4 <ip_frag_alloc_pbuf_custom_ref>
 801848a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801848c:	69bb      	ldr	r3, [r7, #24]
 801848e:	2b00      	cmp	r3, #0
 8018490:	d103      	bne.n	801849a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018492:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018494:	f7f4 fd46 	bl	800cf24 <pbuf_free>
        goto memerr;
 8018498:	e08f      	b.n	80185ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801849a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80184a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80184a2:	4413      	add	r3, r2
 80184a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80184a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80184ac:	9201      	str	r2, [sp, #4]
 80184ae:	9300      	str	r3, [sp, #0]
 80184b0:	4603      	mov	r3, r0
 80184b2:	2241      	movs	r2, #65	; 0x41
 80184b4:	2000      	movs	r0, #0
 80184b6:	f7f4 fb7b 	bl	800cbb0 <pbuf_alloced_custom>
 80184ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80184bc:	697b      	ldr	r3, [r7, #20]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d106      	bne.n	80184d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80184c2:	69b8      	ldr	r0, [r7, #24]
 80184c4:	f7ff fef6 	bl	80182b4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80184c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184ca:	f7f4 fd2b 	bl	800cf24 <pbuf_free>
        goto memerr;
 80184ce:	e074      	b.n	80185ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80184d0:	68f8      	ldr	r0, [r7, #12]
 80184d2:	f7f4 fdcd 	bl	800d070 <pbuf_ref>
      pcr->original = p;
 80184d6:	69bb      	ldr	r3, [r7, #24]
 80184d8:	68fa      	ldr	r2, [r7, #12]
 80184da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80184dc:	69bb      	ldr	r3, [r7, #24]
 80184de:	4a3f      	ldr	r2, [pc, #252]	; (80185dc <ip4_frag+0x288>)
 80184e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80184e2:	6979      	ldr	r1, [r7, #20]
 80184e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184e6:	f7f4 fdeb 	bl	800d0c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80184ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80184ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80184f2:	1ad3      	subs	r3, r2, r3
 80184f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80184f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d004      	beq.n	801850a <ip4_frag+0x1b6>
        poff = 0;
 8018500:	2300      	movs	r3, #0
 8018502:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801850a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801850e:	2b00      	cmp	r3, #0
 8018510:	d196      	bne.n	8018440 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018512:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018518:	4413      	add	r3, r2
 801851a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801851c:	68bb      	ldr	r3, [r7, #8]
 801851e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018520:	f1a3 0213 	sub.w	r2, r3, #19
 8018524:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018528:	429a      	cmp	r2, r3
 801852a:	bfcc      	ite	gt
 801852c:	2301      	movgt	r3, #1
 801852e:	2300      	movle	r3, #0
 8018530:	b2db      	uxtb	r3, r3
 8018532:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018534:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801853c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801853e:	6a3b      	ldr	r3, [r7, #32]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d002      	beq.n	801854a <ip4_frag+0x1f6>
 8018544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018546:	2b00      	cmp	r3, #0
 8018548:	d003      	beq.n	8018552 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801854a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801854c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018550:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018552:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018554:	4618      	mov	r0, r3
 8018556:	f7f3 f8b1 	bl	800b6bc <lwip_htons>
 801855a:	4603      	mov	r3, r0
 801855c:	461a      	mov	r2, r3
 801855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018560:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018562:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018564:	3314      	adds	r3, #20
 8018566:	b29b      	uxth	r3, r3
 8018568:	4618      	mov	r0, r3
 801856a:	f7f3 f8a7 	bl	800b6bc <lwip_htons>
 801856e:	4603      	mov	r3, r0
 8018570:	461a      	mov	r2, r3
 8018572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018574:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018578:	2200      	movs	r2, #0
 801857a:	729a      	strb	r2, [r3, #10]
 801857c:	2200      	movs	r2, #0
 801857e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018580:	68bb      	ldr	r3, [r7, #8]
 8018582:	695b      	ldr	r3, [r3, #20]
 8018584:	687a      	ldr	r2, [r7, #4]
 8018586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018588:	68b8      	ldr	r0, [r7, #8]
 801858a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801858c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801858e:	f7f4 fcc9 	bl	800cf24 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018592:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018596:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018598:	1ad3      	subs	r3, r2, r3
 801859a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801859e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80185a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80185a4:	4413      	add	r3, r2
 80185a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80185aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	f47f af19 	bne.w	80183e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80185b4:	2300      	movs	r3, #0
 80185b6:	e002      	b.n	80185be <ip4_frag+0x26a>
      goto memerr;
 80185b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80185ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80185be:	4618      	mov	r0, r3
 80185c0:	3748      	adds	r7, #72	; 0x48
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bd80      	pop	{r7, pc}
 80185c6:	bf00      	nop
 80185c8:	0801dc48 	.word	0x0801dc48
 80185cc:	0801de24 	.word	0x0801de24
 80185d0:	0801dc90 	.word	0x0801dc90
 80185d4:	0801de40 	.word	0x0801de40
 80185d8:	0801de60 	.word	0x0801de60
 80185dc:	080182ed 	.word	0x080182ed

080185e0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b086      	sub	sp, #24
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	6078      	str	r0, [r7, #4]
 80185e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80185ea:	230e      	movs	r3, #14
 80185ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	895b      	ldrh	r3, [r3, #10]
 80185f2:	2b0e      	cmp	r3, #14
 80185f4:	d96e      	bls.n	80186d4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	7bdb      	ldrb	r3, [r3, #15]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d106      	bne.n	801860c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80185fe:	683b      	ldr	r3, [r7, #0]
 8018600:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018604:	3301      	adds	r3, #1
 8018606:	b2da      	uxtb	r2, r3
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	685b      	ldr	r3, [r3, #4]
 8018610:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018612:	693b      	ldr	r3, [r7, #16]
 8018614:	7b1a      	ldrb	r2, [r3, #12]
 8018616:	7b5b      	ldrb	r3, [r3, #13]
 8018618:	021b      	lsls	r3, r3, #8
 801861a:	4313      	orrs	r3, r2
 801861c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801861e:	693b      	ldr	r3, [r7, #16]
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	f003 0301 	and.w	r3, r3, #1
 8018626:	2b00      	cmp	r3, #0
 8018628:	d023      	beq.n	8018672 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801862a:	693b      	ldr	r3, [r7, #16]
 801862c:	781b      	ldrb	r3, [r3, #0]
 801862e:	2b01      	cmp	r3, #1
 8018630:	d10f      	bne.n	8018652 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018632:	693b      	ldr	r3, [r7, #16]
 8018634:	785b      	ldrb	r3, [r3, #1]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d11b      	bne.n	8018672 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801863a:	693b      	ldr	r3, [r7, #16]
 801863c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801863e:	2b5e      	cmp	r3, #94	; 0x5e
 8018640:	d117      	bne.n	8018672 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	7b5b      	ldrb	r3, [r3, #13]
 8018646:	f043 0310 	orr.w	r3, r3, #16
 801864a:	b2da      	uxtb	r2, r3
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	735a      	strb	r2, [r3, #13]
 8018650:	e00f      	b.n	8018672 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018652:	693b      	ldr	r3, [r7, #16]
 8018654:	2206      	movs	r2, #6
 8018656:	4928      	ldr	r1, [pc, #160]	; (80186f8 <ethernet_input+0x118>)
 8018658:	4618      	mov	r0, r3
 801865a:	f000 fb96 	bl	8018d8a <memcmp>
 801865e:	4603      	mov	r3, r0
 8018660:	2b00      	cmp	r3, #0
 8018662:	d106      	bne.n	8018672 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	7b5b      	ldrb	r3, [r3, #13]
 8018668:	f043 0308 	orr.w	r3, r3, #8
 801866c:	b2da      	uxtb	r2, r3
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018672:	89fb      	ldrh	r3, [r7, #14]
 8018674:	2b08      	cmp	r3, #8
 8018676:	d003      	beq.n	8018680 <ethernet_input+0xa0>
 8018678:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801867c:	d014      	beq.n	80186a8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801867e:	e032      	b.n	80186e6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018680:	683b      	ldr	r3, [r7, #0]
 8018682:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018686:	f003 0308 	and.w	r3, r3, #8
 801868a:	2b00      	cmp	r3, #0
 801868c:	d024      	beq.n	80186d8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801868e:	8afb      	ldrh	r3, [r7, #22]
 8018690:	4619      	mov	r1, r3
 8018692:	6878      	ldr	r0, [r7, #4]
 8018694:	f7f4 fbc0 	bl	800ce18 <pbuf_remove_header>
 8018698:	4603      	mov	r3, r0
 801869a:	2b00      	cmp	r3, #0
 801869c:	d11e      	bne.n	80186dc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801869e:	6839      	ldr	r1, [r7, #0]
 80186a0:	6878      	ldr	r0, [r7, #4]
 80186a2:	f7fe ff03 	bl	80174ac <ip4_input>
      break;
 80186a6:	e013      	b.n	80186d0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80186a8:	683b      	ldr	r3, [r7, #0]
 80186aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80186ae:	f003 0308 	and.w	r3, r3, #8
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d014      	beq.n	80186e0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80186b6:	8afb      	ldrh	r3, [r7, #22]
 80186b8:	4619      	mov	r1, r3
 80186ba:	6878      	ldr	r0, [r7, #4]
 80186bc:	f7f4 fbac 	bl	800ce18 <pbuf_remove_header>
 80186c0:	4603      	mov	r3, r0
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d10e      	bne.n	80186e4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80186c6:	6839      	ldr	r1, [r7, #0]
 80186c8:	6878      	ldr	r0, [r7, #4]
 80186ca:	f7fe f89f 	bl	801680c <etharp_input>
      break;
 80186ce:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80186d0:	2300      	movs	r3, #0
 80186d2:	e00c      	b.n	80186ee <ethernet_input+0x10e>
    goto free_and_return;
 80186d4:	bf00      	nop
 80186d6:	e006      	b.n	80186e6 <ethernet_input+0x106>
        goto free_and_return;
 80186d8:	bf00      	nop
 80186da:	e004      	b.n	80186e6 <ethernet_input+0x106>
        goto free_and_return;
 80186dc:	bf00      	nop
 80186de:	e002      	b.n	80186e6 <ethernet_input+0x106>
        goto free_and_return;
 80186e0:	bf00      	nop
 80186e2:	e000      	b.n	80186e6 <ethernet_input+0x106>
        goto free_and_return;
 80186e4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80186e6:	6878      	ldr	r0, [r7, #4]
 80186e8:	f7f4 fc1c 	bl	800cf24 <pbuf_free>
  return ERR_OK;
 80186ec:	2300      	movs	r3, #0
}
 80186ee:	4618      	mov	r0, r3
 80186f0:	3718      	adds	r7, #24
 80186f2:	46bd      	mov	sp, r7
 80186f4:	bd80      	pop	{r7, pc}
 80186f6:	bf00      	nop
 80186f8:	0802818c 	.word	0x0802818c

080186fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b086      	sub	sp, #24
 8018700:	af00      	add	r7, sp, #0
 8018702:	60f8      	str	r0, [r7, #12]
 8018704:	60b9      	str	r1, [r7, #8]
 8018706:	607a      	str	r2, [r7, #4]
 8018708:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801870a:	8c3b      	ldrh	r3, [r7, #32]
 801870c:	4618      	mov	r0, r3
 801870e:	f7f2 ffd5 	bl	800b6bc <lwip_htons>
 8018712:	4603      	mov	r3, r0
 8018714:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018716:	210e      	movs	r1, #14
 8018718:	68b8      	ldr	r0, [r7, #8]
 801871a:	f7f4 fb6d 	bl	800cdf8 <pbuf_add_header>
 801871e:	4603      	mov	r3, r0
 8018720:	2b00      	cmp	r3, #0
 8018722:	d125      	bne.n	8018770 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018724:	68bb      	ldr	r3, [r7, #8]
 8018726:	685b      	ldr	r3, [r3, #4]
 8018728:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801872a:	693b      	ldr	r3, [r7, #16]
 801872c:	8afa      	ldrh	r2, [r7, #22]
 801872e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018730:	693b      	ldr	r3, [r7, #16]
 8018732:	2206      	movs	r2, #6
 8018734:	6839      	ldr	r1, [r7, #0]
 8018736:	4618      	mov	r0, r3
 8018738:	f000 fb37 	bl	8018daa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801873c:	693b      	ldr	r3, [r7, #16]
 801873e:	3306      	adds	r3, #6
 8018740:	2206      	movs	r2, #6
 8018742:	6879      	ldr	r1, [r7, #4]
 8018744:	4618      	mov	r0, r3
 8018746:	f000 fb30 	bl	8018daa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018750:	2b06      	cmp	r3, #6
 8018752:	d006      	beq.n	8018762 <ethernet_output+0x66>
 8018754:	4b0a      	ldr	r3, [pc, #40]	; (8018780 <ethernet_output+0x84>)
 8018756:	f44f 7299 	mov.w	r2, #306	; 0x132
 801875a:	490a      	ldr	r1, [pc, #40]	; (8018784 <ethernet_output+0x88>)
 801875c:	480a      	ldr	r0, [pc, #40]	; (8018788 <ethernet_output+0x8c>)
 801875e:	f000 fbe9 	bl	8018f34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	699b      	ldr	r3, [r3, #24]
 8018766:	68b9      	ldr	r1, [r7, #8]
 8018768:	68f8      	ldr	r0, [r7, #12]
 801876a:	4798      	blx	r3
 801876c:	4603      	mov	r3, r0
 801876e:	e002      	b.n	8018776 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018770:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018772:	f06f 0301 	mvn.w	r3, #1
}
 8018776:	4618      	mov	r0, r3
 8018778:	3718      	adds	r7, #24
 801877a:	46bd      	mov	sp, r7
 801877c:	bd80      	pop	{r7, pc}
 801877e:	bf00      	nop
 8018780:	0801de70 	.word	0x0801de70
 8018784:	0801dea8 	.word	0x0801dea8
 8018788:	0801dedc 	.word	0x0801dedc

0801878c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b086      	sub	sp, #24
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
 8018794:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018796:	683b      	ldr	r3, [r7, #0]
 8018798:	60bb      	str	r3, [r7, #8]
 801879a:	2304      	movs	r3, #4
 801879c:	60fb      	str	r3, [r7, #12]
 801879e:	2300      	movs	r3, #0
 80187a0:	613b      	str	r3, [r7, #16]
 80187a2:	2300      	movs	r3, #0
 80187a4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80187a6:	f107 0308 	add.w	r3, r7, #8
 80187aa:	2100      	movs	r1, #0
 80187ac:	4618      	mov	r0, r3
 80187ae:	f7ec fee4 	bl	800557a <osMessageCreate>
 80187b2:	4602      	mov	r2, r0
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d102      	bne.n	80187c6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80187c0:	f04f 33ff 	mov.w	r3, #4294967295
 80187c4:	e000      	b.n	80187c8 <sys_mbox_new+0x3c>

  return ERR_OK;
 80187c6:	2300      	movs	r3, #0
}
 80187c8:	4618      	mov	r0, r3
 80187ca:	3718      	adds	r7, #24
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}

080187d0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b082      	sub	sp, #8
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	4618      	mov	r0, r3
 80187de:	f7ec ffa9 	bl	8005734 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	4618      	mov	r0, r3
 80187e8:	f7ec ffba 	bl	8005760 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80187ec:	bf00      	nop
 80187ee:	3708      	adds	r7, #8
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}

080187f4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b084      	sub	sp, #16
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
 80187fc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	6839      	ldr	r1, [r7, #0]
 8018804:	2200      	movs	r2, #0
 8018806:	4618      	mov	r0, r3
 8018808:	f7ec fee0 	bl	80055cc <osMessagePut>
 801880c:	4603      	mov	r3, r0
 801880e:	2b00      	cmp	r3, #0
 8018810:	d102      	bne.n	8018818 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018812:	2300      	movs	r3, #0
 8018814:	73fb      	strb	r3, [r7, #15]
 8018816:	e001      	b.n	801881c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018818:	23ff      	movs	r3, #255	; 0xff
 801881a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801881c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018820:	4618      	mov	r0, r3
 8018822:	3710      	adds	r7, #16
 8018824:	46bd      	mov	sp, r7
 8018826:	bd80      	pop	{r7, pc}

08018828 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b08c      	sub	sp, #48	; 0x30
 801882c:	af00      	add	r7, sp, #0
 801882e:	61f8      	str	r0, [r7, #28]
 8018830:	61b9      	str	r1, [r7, #24]
 8018832:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018834:	f7ec fccc 	bl	80051d0 <osKernelSysTick>
 8018838:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801883a:	697b      	ldr	r3, [r7, #20]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d017      	beq.n	8018870 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018840:	69fb      	ldr	r3, [r7, #28]
 8018842:	6819      	ldr	r1, [r3, #0]
 8018844:	f107 0320 	add.w	r3, r7, #32
 8018848:	697a      	ldr	r2, [r7, #20]
 801884a:	4618      	mov	r0, r3
 801884c:	f7ec fefe 	bl	800564c <osMessageGet>

    if(event.status == osEventMessage)
 8018850:	6a3b      	ldr	r3, [r7, #32]
 8018852:	2b10      	cmp	r3, #16
 8018854:	d109      	bne.n	801886a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018858:	461a      	mov	r2, r3
 801885a:	69bb      	ldr	r3, [r7, #24]
 801885c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801885e:	f7ec fcb7 	bl	80051d0 <osKernelSysTick>
 8018862:	4602      	mov	r2, r0
 8018864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018866:	1ad3      	subs	r3, r2, r3
 8018868:	e019      	b.n	801889e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801886a:	f04f 33ff 	mov.w	r3, #4294967295
 801886e:	e016      	b.n	801889e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018870:	69fb      	ldr	r3, [r7, #28]
 8018872:	6819      	ldr	r1, [r3, #0]
 8018874:	463b      	mov	r3, r7
 8018876:	f04f 32ff 	mov.w	r2, #4294967295
 801887a:	4618      	mov	r0, r3
 801887c:	f7ec fee6 	bl	800564c <osMessageGet>
 8018880:	f107 0320 	add.w	r3, r7, #32
 8018884:	463a      	mov	r2, r7
 8018886:	ca07      	ldmia	r2, {r0, r1, r2}
 8018888:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801888e:	461a      	mov	r2, r3
 8018890:	69bb      	ldr	r3, [r7, #24]
 8018892:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018894:	f7ec fc9c 	bl	80051d0 <osKernelSysTick>
 8018898:	4602      	mov	r2, r0
 801889a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801889c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801889e:	4618      	mov	r0, r3
 80188a0:	3730      	adds	r7, #48	; 0x30
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}

080188a6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80188a6:	b580      	push	{r7, lr}
 80188a8:	b086      	sub	sp, #24
 80188aa:	af00      	add	r7, sp, #0
 80188ac:	6078      	str	r0, [r7, #4]
 80188ae:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	6819      	ldr	r1, [r3, #0]
 80188b4:	f107 030c 	add.w	r3, r7, #12
 80188b8:	2200      	movs	r2, #0
 80188ba:	4618      	mov	r0, r3
 80188bc:	f7ec fec6 	bl	800564c <osMessageGet>

  if(event.status == osEventMessage)
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	2b10      	cmp	r3, #16
 80188c4:	d105      	bne.n	80188d2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80188c6:	693b      	ldr	r3, [r7, #16]
 80188c8:	461a      	mov	r2, r3
 80188ca:	683b      	ldr	r3, [r7, #0]
 80188cc:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80188ce:	2300      	movs	r3, #0
 80188d0:	e001      	b.n	80188d6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80188d2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80188d6:	4618      	mov	r0, r3
 80188d8:	3718      	adds	r7, #24
 80188da:	46bd      	mov	sp, r7
 80188dc:	bd80      	pop	{r7, pc}

080188de <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80188de:	b480      	push	{r7}
 80188e0:	b083      	sub	sp, #12
 80188e2:	af00      	add	r7, sp, #0
 80188e4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d101      	bne.n	80188f2 <sys_mbox_valid+0x14>
    return 0;
 80188ee:	2300      	movs	r3, #0
 80188f0:	e000      	b.n	80188f4 <sys_mbox_valid+0x16>
  else
    return 1;
 80188f2:	2301      	movs	r3, #1
}
 80188f4:	4618      	mov	r0, r3
 80188f6:	370c      	adds	r7, #12
 80188f8:	46bd      	mov	sp, r7
 80188fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fe:	4770      	bx	lr

08018900 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018900:	b480      	push	{r7}
 8018902:	b083      	sub	sp, #12
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	2200      	movs	r2, #0
 801890c:	601a      	str	r2, [r3, #0]
}
 801890e:	bf00      	nop
 8018910:	370c      	adds	r7, #12
 8018912:	46bd      	mov	sp, r7
 8018914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018918:	4770      	bx	lr

0801891a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801891a:	b580      	push	{r7, lr}
 801891c:	b084      	sub	sp, #16
 801891e:	af00      	add	r7, sp, #0
 8018920:	6078      	str	r0, [r7, #4]
 8018922:	460b      	mov	r3, r1
 8018924:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018926:	2300      	movs	r3, #0
 8018928:	60bb      	str	r3, [r7, #8]
 801892a:	2300      	movs	r3, #0
 801892c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801892e:	f107 0308 	add.w	r3, r7, #8
 8018932:	2101      	movs	r1, #1
 8018934:	4618      	mov	r0, r3
 8018936:	f7ec fd57 	bl	80053e8 <osSemaphoreCreate>
 801893a:	4602      	mov	r2, r0
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	2b00      	cmp	r3, #0
 8018946:	d102      	bne.n	801894e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018948:	f04f 33ff 	mov.w	r3, #4294967295
 801894c:	e009      	b.n	8018962 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801894e:	78fb      	ldrb	r3, [r7, #3]
 8018950:	2b00      	cmp	r3, #0
 8018952:	d105      	bne.n	8018960 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	2100      	movs	r1, #0
 801895a:	4618      	mov	r0, r3
 801895c:	f7ec fd76 	bl	800544c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018960:	2300      	movs	r3, #0
}
 8018962:	4618      	mov	r0, r3
 8018964:	3710      	adds	r7, #16
 8018966:	46bd      	mov	sp, r7
 8018968:	bd80      	pop	{r7, pc}

0801896a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801896a:	b580      	push	{r7, lr}
 801896c:	b084      	sub	sp, #16
 801896e:	af00      	add	r7, sp, #0
 8018970:	6078      	str	r0, [r7, #4]
 8018972:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018974:	f7ec fc2c 	bl	80051d0 <osKernelSysTick>
 8018978:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d011      	beq.n	80189a4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	6839      	ldr	r1, [r7, #0]
 8018986:	4618      	mov	r0, r3
 8018988:	f7ec fd60 	bl	800544c <osSemaphoreWait>
 801898c:	4603      	mov	r3, r0
 801898e:	2b00      	cmp	r3, #0
 8018990:	d105      	bne.n	801899e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018992:	f7ec fc1d 	bl	80051d0 <osKernelSysTick>
 8018996:	4602      	mov	r2, r0
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	1ad3      	subs	r3, r2, r3
 801899c:	e012      	b.n	80189c4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801899e:	f04f 33ff 	mov.w	r3, #4294967295
 80189a2:	e00f      	b.n	80189c4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80189a4:	bf00      	nop
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	f04f 31ff 	mov.w	r1, #4294967295
 80189ae:	4618      	mov	r0, r3
 80189b0:	f7ec fd4c 	bl	800544c <osSemaphoreWait>
 80189b4:	4603      	mov	r3, r0
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d1f5      	bne.n	80189a6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80189ba:	f7ec fc09 	bl	80051d0 <osKernelSysTick>
 80189be:	4602      	mov	r2, r0
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80189c4:	4618      	mov	r0, r3
 80189c6:	3710      	adds	r7, #16
 80189c8:	46bd      	mov	sp, r7
 80189ca:	bd80      	pop	{r7, pc}

080189cc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b082      	sub	sp, #8
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	4618      	mov	r0, r3
 80189da:	f7ec fd85 	bl	80054e8 <osSemaphoreRelease>
}
 80189de:	bf00      	nop
 80189e0:	3708      	adds	r7, #8
 80189e2:	46bd      	mov	sp, r7
 80189e4:	bd80      	pop	{r7, pc}

080189e6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80189e6:	b580      	push	{r7, lr}
 80189e8:	b082      	sub	sp, #8
 80189ea:	af00      	add	r7, sp, #0
 80189ec:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	4618      	mov	r0, r3
 80189f4:	f7ec fdae 	bl	8005554 <osSemaphoreDelete>
}
 80189f8:	bf00      	nop
 80189fa:	3708      	adds	r7, #8
 80189fc:	46bd      	mov	sp, r7
 80189fe:	bd80      	pop	{r7, pc}

08018a00 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018a00:	b480      	push	{r7}
 8018a02:	b083      	sub	sp, #12
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d101      	bne.n	8018a14 <sys_sem_valid+0x14>
    return 0;
 8018a10:	2300      	movs	r3, #0
 8018a12:	e000      	b.n	8018a16 <sys_sem_valid+0x16>
  else
    return 1;
 8018a14:	2301      	movs	r3, #1
}
 8018a16:	4618      	mov	r0, r3
 8018a18:	370c      	adds	r7, #12
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a20:	4770      	bx	lr

08018a22 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018a22:	b480      	push	{r7}
 8018a24:	b083      	sub	sp, #12
 8018a26:	af00      	add	r7, sp, #0
 8018a28:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	2200      	movs	r2, #0
 8018a2e:	601a      	str	r2, [r3, #0]
}
 8018a30:	bf00      	nop
 8018a32:	370c      	adds	r7, #12
 8018a34:	46bd      	mov	sp, r7
 8018a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a3a:	4770      	bx	lr

08018a3c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018a40:	4803      	ldr	r0, [pc, #12]	; (8018a50 <sys_init+0x14>)
 8018a42:	f7ec fc35 	bl	80052b0 <osMutexCreate>
 8018a46:	4603      	mov	r3, r0
 8018a48:	4a02      	ldr	r2, [pc, #8]	; (8018a54 <sys_init+0x18>)
 8018a4a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018a4c:	bf00      	nop
 8018a4e:	bd80      	pop	{r7, pc}
 8018a50:	0802819c 	.word	0x0802819c
 8018a54:	2001171c 	.word	0x2001171c

08018a58 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018a58:	b580      	push	{r7, lr}
 8018a5a:	b084      	sub	sp, #16
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018a60:	2300      	movs	r3, #0
 8018a62:	60bb      	str	r3, [r7, #8]
 8018a64:	2300      	movs	r3, #0
 8018a66:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018a68:	f107 0308 	add.w	r3, r7, #8
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f7ec fc1f 	bl	80052b0 <osMutexCreate>
 8018a72:	4602      	mov	r2, r0
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d102      	bne.n	8018a86 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018a80:	f04f 33ff 	mov.w	r3, #4294967295
 8018a84:	e000      	b.n	8018a88 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018a86:	2300      	movs	r3, #0
}
 8018a88:	4618      	mov	r0, r3
 8018a8a:	3710      	adds	r7, #16
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	bd80      	pop	{r7, pc}

08018a90 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b082      	sub	sp, #8
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	f7ec fc1d 	bl	80052e0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018aa6:	bf00      	nop
 8018aa8:	3708      	adds	r7, #8
 8018aaa:	46bd      	mov	sp, r7
 8018aac:	bd80      	pop	{r7, pc}

08018aae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018aae:	b580      	push	{r7, lr}
 8018ab0:	b082      	sub	sp, #8
 8018ab2:	af00      	add	r7, sp, #0
 8018ab4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	4618      	mov	r0, r3
 8018abc:	f7ec fc5e 	bl	800537c <osMutexRelease>
}
 8018ac0:	bf00      	nop
 8018ac2:	3708      	adds	r7, #8
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	bd80      	pop	{r7, pc}

08018ac8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	b08c      	sub	sp, #48	; 0x30
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	60f8      	str	r0, [r7, #12]
 8018ad0:	60b9      	str	r1, [r7, #8]
 8018ad2:	607a      	str	r2, [r7, #4]
 8018ad4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018ad6:	f107 0314 	add.w	r3, r7, #20
 8018ada:	2200      	movs	r2, #0
 8018adc:	601a      	str	r2, [r3, #0]
 8018ade:	605a      	str	r2, [r3, #4]
 8018ae0:	609a      	str	r2, [r3, #8]
 8018ae2:	60da      	str	r2, [r3, #12]
 8018ae4:	611a      	str	r2, [r3, #16]
 8018ae6:	615a      	str	r2, [r3, #20]
 8018ae8:	619a      	str	r2, [r3, #24]
 8018aea:	68fb      	ldr	r3, [r7, #12]
 8018aec:	617b      	str	r3, [r7, #20]
 8018aee:	68bb      	ldr	r3, [r7, #8]
 8018af0:	61bb      	str	r3, [r7, #24]
 8018af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018af4:	b21b      	sxth	r3, r3
 8018af6:	83bb      	strh	r3, [r7, #28]
 8018af8:	683b      	ldr	r3, [r7, #0]
 8018afa:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018afc:	f107 0314 	add.w	r3, r7, #20
 8018b00:	6879      	ldr	r1, [r7, #4]
 8018b02:	4618      	mov	r0, r3
 8018b04:	f7ec fb74 	bl	80051f0 <osThreadCreate>
 8018b08:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	3730      	adds	r7, #48	; 0x30
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd80      	pop	{r7, pc}
	...

08018b14 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018b18:	4b04      	ldr	r3, [pc, #16]	; (8018b2c <sys_arch_protect+0x18>)
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8018b20:	4618      	mov	r0, r3
 8018b22:	f7ec fbdd 	bl	80052e0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018b26:	2301      	movs	r3, #1
}
 8018b28:	4618      	mov	r0, r3
 8018b2a:	bd80      	pop	{r7, pc}
 8018b2c:	2001171c 	.word	0x2001171c

08018b30 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b082      	sub	sp, #8
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018b38:	4b04      	ldr	r3, [pc, #16]	; (8018b4c <sys_arch_unprotect+0x1c>)
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	f7ec fc1d 	bl	800537c <osMutexRelease>
}
 8018b42:	bf00      	nop
 8018b44:	3708      	adds	r7, #8
 8018b46:	46bd      	mov	sp, r7
 8018b48:	bd80      	pop	{r7, pc}
 8018b4a:	bf00      	nop
 8018b4c:	2001171c 	.word	0x2001171c

08018b50 <std>:
 8018b50:	2300      	movs	r3, #0
 8018b52:	b510      	push	{r4, lr}
 8018b54:	4604      	mov	r4, r0
 8018b56:	e9c0 3300 	strd	r3, r3, [r0]
 8018b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018b5e:	6083      	str	r3, [r0, #8]
 8018b60:	8181      	strh	r1, [r0, #12]
 8018b62:	6643      	str	r3, [r0, #100]	; 0x64
 8018b64:	81c2      	strh	r2, [r0, #14]
 8018b66:	6183      	str	r3, [r0, #24]
 8018b68:	4619      	mov	r1, r3
 8018b6a:	2208      	movs	r2, #8
 8018b6c:	305c      	adds	r0, #92	; 0x5c
 8018b6e:	f000 f944 	bl	8018dfa <memset>
 8018b72:	4b05      	ldr	r3, [pc, #20]	; (8018b88 <std+0x38>)
 8018b74:	6263      	str	r3, [r4, #36]	; 0x24
 8018b76:	4b05      	ldr	r3, [pc, #20]	; (8018b8c <std+0x3c>)
 8018b78:	62a3      	str	r3, [r4, #40]	; 0x28
 8018b7a:	4b05      	ldr	r3, [pc, #20]	; (8018b90 <std+0x40>)
 8018b7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018b7e:	4b05      	ldr	r3, [pc, #20]	; (8018b94 <std+0x44>)
 8018b80:	6224      	str	r4, [r4, #32]
 8018b82:	6323      	str	r3, [r4, #48]	; 0x30
 8018b84:	bd10      	pop	{r4, pc}
 8018b86:	bf00      	nop
 8018b88:	08019171 	.word	0x08019171
 8018b8c:	08019193 	.word	0x08019193
 8018b90:	080191cb 	.word	0x080191cb
 8018b94:	080191ef 	.word	0x080191ef

08018b98 <_cleanup_r>:
 8018b98:	4901      	ldr	r1, [pc, #4]	; (8018ba0 <_cleanup_r+0x8>)
 8018b9a:	f000 b8af 	b.w	8018cfc <_fwalk_reent>
 8018b9e:	bf00      	nop
 8018ba0:	080194b5 	.word	0x080194b5

08018ba4 <__sfmoreglue>:
 8018ba4:	b570      	push	{r4, r5, r6, lr}
 8018ba6:	2268      	movs	r2, #104	; 0x68
 8018ba8:	1e4d      	subs	r5, r1, #1
 8018baa:	4355      	muls	r5, r2
 8018bac:	460e      	mov	r6, r1
 8018bae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018bb2:	f000 f94b 	bl	8018e4c <_malloc_r>
 8018bb6:	4604      	mov	r4, r0
 8018bb8:	b140      	cbz	r0, 8018bcc <__sfmoreglue+0x28>
 8018bba:	2100      	movs	r1, #0
 8018bbc:	e9c0 1600 	strd	r1, r6, [r0]
 8018bc0:	300c      	adds	r0, #12
 8018bc2:	60a0      	str	r0, [r4, #8]
 8018bc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018bc8:	f000 f917 	bl	8018dfa <memset>
 8018bcc:	4620      	mov	r0, r4
 8018bce:	bd70      	pop	{r4, r5, r6, pc}

08018bd0 <__sfp_lock_acquire>:
 8018bd0:	4801      	ldr	r0, [pc, #4]	; (8018bd8 <__sfp_lock_acquire+0x8>)
 8018bd2:	f000 b8d8 	b.w	8018d86 <__retarget_lock_acquire_recursive>
 8018bd6:	bf00      	nop
 8018bd8:	20011721 	.word	0x20011721

08018bdc <__sfp_lock_release>:
 8018bdc:	4801      	ldr	r0, [pc, #4]	; (8018be4 <__sfp_lock_release+0x8>)
 8018bde:	f000 b8d3 	b.w	8018d88 <__retarget_lock_release_recursive>
 8018be2:	bf00      	nop
 8018be4:	20011721 	.word	0x20011721

08018be8 <__sinit_lock_acquire>:
 8018be8:	4801      	ldr	r0, [pc, #4]	; (8018bf0 <__sinit_lock_acquire+0x8>)
 8018bea:	f000 b8cc 	b.w	8018d86 <__retarget_lock_acquire_recursive>
 8018bee:	bf00      	nop
 8018bf0:	20011722 	.word	0x20011722

08018bf4 <__sinit_lock_release>:
 8018bf4:	4801      	ldr	r0, [pc, #4]	; (8018bfc <__sinit_lock_release+0x8>)
 8018bf6:	f000 b8c7 	b.w	8018d88 <__retarget_lock_release_recursive>
 8018bfa:	bf00      	nop
 8018bfc:	20011722 	.word	0x20011722

08018c00 <__sinit>:
 8018c00:	b510      	push	{r4, lr}
 8018c02:	4604      	mov	r4, r0
 8018c04:	f7ff fff0 	bl	8018be8 <__sinit_lock_acquire>
 8018c08:	69a3      	ldr	r3, [r4, #24]
 8018c0a:	b11b      	cbz	r3, 8018c14 <__sinit+0x14>
 8018c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c10:	f7ff bff0 	b.w	8018bf4 <__sinit_lock_release>
 8018c14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018c18:	6523      	str	r3, [r4, #80]	; 0x50
 8018c1a:	4b13      	ldr	r3, [pc, #76]	; (8018c68 <__sinit+0x68>)
 8018c1c:	4a13      	ldr	r2, [pc, #76]	; (8018c6c <__sinit+0x6c>)
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	62a2      	str	r2, [r4, #40]	; 0x28
 8018c22:	42a3      	cmp	r3, r4
 8018c24:	bf04      	itt	eq
 8018c26:	2301      	moveq	r3, #1
 8018c28:	61a3      	streq	r3, [r4, #24]
 8018c2a:	4620      	mov	r0, r4
 8018c2c:	f000 f820 	bl	8018c70 <__sfp>
 8018c30:	6060      	str	r0, [r4, #4]
 8018c32:	4620      	mov	r0, r4
 8018c34:	f000 f81c 	bl	8018c70 <__sfp>
 8018c38:	60a0      	str	r0, [r4, #8]
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	f000 f818 	bl	8018c70 <__sfp>
 8018c40:	2200      	movs	r2, #0
 8018c42:	60e0      	str	r0, [r4, #12]
 8018c44:	2104      	movs	r1, #4
 8018c46:	6860      	ldr	r0, [r4, #4]
 8018c48:	f7ff ff82 	bl	8018b50 <std>
 8018c4c:	68a0      	ldr	r0, [r4, #8]
 8018c4e:	2201      	movs	r2, #1
 8018c50:	2109      	movs	r1, #9
 8018c52:	f7ff ff7d 	bl	8018b50 <std>
 8018c56:	68e0      	ldr	r0, [r4, #12]
 8018c58:	2202      	movs	r2, #2
 8018c5a:	2112      	movs	r1, #18
 8018c5c:	f7ff ff78 	bl	8018b50 <std>
 8018c60:	2301      	movs	r3, #1
 8018c62:	61a3      	str	r3, [r4, #24]
 8018c64:	e7d2      	b.n	8018c0c <__sinit+0xc>
 8018c66:	bf00      	nop
 8018c68:	08028308 	.word	0x08028308
 8018c6c:	08018b99 	.word	0x08018b99

08018c70 <__sfp>:
 8018c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c72:	4607      	mov	r7, r0
 8018c74:	f7ff ffac 	bl	8018bd0 <__sfp_lock_acquire>
 8018c78:	4b1e      	ldr	r3, [pc, #120]	; (8018cf4 <__sfp+0x84>)
 8018c7a:	681e      	ldr	r6, [r3, #0]
 8018c7c:	69b3      	ldr	r3, [r6, #24]
 8018c7e:	b913      	cbnz	r3, 8018c86 <__sfp+0x16>
 8018c80:	4630      	mov	r0, r6
 8018c82:	f7ff ffbd 	bl	8018c00 <__sinit>
 8018c86:	3648      	adds	r6, #72	; 0x48
 8018c88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018c8c:	3b01      	subs	r3, #1
 8018c8e:	d503      	bpl.n	8018c98 <__sfp+0x28>
 8018c90:	6833      	ldr	r3, [r6, #0]
 8018c92:	b30b      	cbz	r3, 8018cd8 <__sfp+0x68>
 8018c94:	6836      	ldr	r6, [r6, #0]
 8018c96:	e7f7      	b.n	8018c88 <__sfp+0x18>
 8018c98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018c9c:	b9d5      	cbnz	r5, 8018cd4 <__sfp+0x64>
 8018c9e:	4b16      	ldr	r3, [pc, #88]	; (8018cf8 <__sfp+0x88>)
 8018ca0:	60e3      	str	r3, [r4, #12]
 8018ca2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018ca6:	6665      	str	r5, [r4, #100]	; 0x64
 8018ca8:	f000 f86c 	bl	8018d84 <__retarget_lock_init_recursive>
 8018cac:	f7ff ff96 	bl	8018bdc <__sfp_lock_release>
 8018cb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018cb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018cb8:	6025      	str	r5, [r4, #0]
 8018cba:	61a5      	str	r5, [r4, #24]
 8018cbc:	2208      	movs	r2, #8
 8018cbe:	4629      	mov	r1, r5
 8018cc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018cc4:	f000 f899 	bl	8018dfa <memset>
 8018cc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018ccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018cd0:	4620      	mov	r0, r4
 8018cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cd4:	3468      	adds	r4, #104	; 0x68
 8018cd6:	e7d9      	b.n	8018c8c <__sfp+0x1c>
 8018cd8:	2104      	movs	r1, #4
 8018cda:	4638      	mov	r0, r7
 8018cdc:	f7ff ff62 	bl	8018ba4 <__sfmoreglue>
 8018ce0:	4604      	mov	r4, r0
 8018ce2:	6030      	str	r0, [r6, #0]
 8018ce4:	2800      	cmp	r0, #0
 8018ce6:	d1d5      	bne.n	8018c94 <__sfp+0x24>
 8018ce8:	f7ff ff78 	bl	8018bdc <__sfp_lock_release>
 8018cec:	230c      	movs	r3, #12
 8018cee:	603b      	str	r3, [r7, #0]
 8018cf0:	e7ee      	b.n	8018cd0 <__sfp+0x60>
 8018cf2:	bf00      	nop
 8018cf4:	08028308 	.word	0x08028308
 8018cf8:	ffff0001 	.word	0xffff0001

08018cfc <_fwalk_reent>:
 8018cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d00:	4606      	mov	r6, r0
 8018d02:	4688      	mov	r8, r1
 8018d04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018d08:	2700      	movs	r7, #0
 8018d0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018d0e:	f1b9 0901 	subs.w	r9, r9, #1
 8018d12:	d505      	bpl.n	8018d20 <_fwalk_reent+0x24>
 8018d14:	6824      	ldr	r4, [r4, #0]
 8018d16:	2c00      	cmp	r4, #0
 8018d18:	d1f7      	bne.n	8018d0a <_fwalk_reent+0xe>
 8018d1a:	4638      	mov	r0, r7
 8018d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d20:	89ab      	ldrh	r3, [r5, #12]
 8018d22:	2b01      	cmp	r3, #1
 8018d24:	d907      	bls.n	8018d36 <_fwalk_reent+0x3a>
 8018d26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018d2a:	3301      	adds	r3, #1
 8018d2c:	d003      	beq.n	8018d36 <_fwalk_reent+0x3a>
 8018d2e:	4629      	mov	r1, r5
 8018d30:	4630      	mov	r0, r6
 8018d32:	47c0      	blx	r8
 8018d34:	4307      	orrs	r7, r0
 8018d36:	3568      	adds	r5, #104	; 0x68
 8018d38:	e7e9      	b.n	8018d0e <_fwalk_reent+0x12>
	...

08018d3c <__libc_init_array>:
 8018d3c:	b570      	push	{r4, r5, r6, lr}
 8018d3e:	4d0d      	ldr	r5, [pc, #52]	; (8018d74 <__libc_init_array+0x38>)
 8018d40:	4c0d      	ldr	r4, [pc, #52]	; (8018d78 <__libc_init_array+0x3c>)
 8018d42:	1b64      	subs	r4, r4, r5
 8018d44:	10a4      	asrs	r4, r4, #2
 8018d46:	2600      	movs	r6, #0
 8018d48:	42a6      	cmp	r6, r4
 8018d4a:	d109      	bne.n	8018d60 <__libc_init_array+0x24>
 8018d4c:	4d0b      	ldr	r5, [pc, #44]	; (8018d7c <__libc_init_array+0x40>)
 8018d4e:	4c0c      	ldr	r4, [pc, #48]	; (8018d80 <__libc_init_array+0x44>)
 8018d50:	f001 fa96 	bl	801a280 <_init>
 8018d54:	1b64      	subs	r4, r4, r5
 8018d56:	10a4      	asrs	r4, r4, #2
 8018d58:	2600      	movs	r6, #0
 8018d5a:	42a6      	cmp	r6, r4
 8018d5c:	d105      	bne.n	8018d6a <__libc_init_array+0x2e>
 8018d5e:	bd70      	pop	{r4, r5, r6, pc}
 8018d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8018d64:	4798      	blx	r3
 8018d66:	3601      	adds	r6, #1
 8018d68:	e7ee      	b.n	8018d48 <__libc_init_array+0xc>
 8018d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8018d6e:	4798      	blx	r3
 8018d70:	3601      	adds	r6, #1
 8018d72:	e7f2      	b.n	8018d5a <__libc_init_array+0x1e>
 8018d74:	08028454 	.word	0x08028454
 8018d78:	08028454 	.word	0x08028454
 8018d7c:	08028454 	.word	0x08028454
 8018d80:	08028458 	.word	0x08028458

08018d84 <__retarget_lock_init_recursive>:
 8018d84:	4770      	bx	lr

08018d86 <__retarget_lock_acquire_recursive>:
 8018d86:	4770      	bx	lr

08018d88 <__retarget_lock_release_recursive>:
 8018d88:	4770      	bx	lr

08018d8a <memcmp>:
 8018d8a:	b510      	push	{r4, lr}
 8018d8c:	3901      	subs	r1, #1
 8018d8e:	4402      	add	r2, r0
 8018d90:	4290      	cmp	r0, r2
 8018d92:	d101      	bne.n	8018d98 <memcmp+0xe>
 8018d94:	2000      	movs	r0, #0
 8018d96:	e005      	b.n	8018da4 <memcmp+0x1a>
 8018d98:	7803      	ldrb	r3, [r0, #0]
 8018d9a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018d9e:	42a3      	cmp	r3, r4
 8018da0:	d001      	beq.n	8018da6 <memcmp+0x1c>
 8018da2:	1b18      	subs	r0, r3, r4
 8018da4:	bd10      	pop	{r4, pc}
 8018da6:	3001      	adds	r0, #1
 8018da8:	e7f2      	b.n	8018d90 <memcmp+0x6>

08018daa <memcpy>:
 8018daa:	440a      	add	r2, r1
 8018dac:	4291      	cmp	r1, r2
 8018dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8018db2:	d100      	bne.n	8018db6 <memcpy+0xc>
 8018db4:	4770      	bx	lr
 8018db6:	b510      	push	{r4, lr}
 8018db8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018dbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018dc0:	4291      	cmp	r1, r2
 8018dc2:	d1f9      	bne.n	8018db8 <memcpy+0xe>
 8018dc4:	bd10      	pop	{r4, pc}

08018dc6 <memmove>:
 8018dc6:	4288      	cmp	r0, r1
 8018dc8:	b510      	push	{r4, lr}
 8018dca:	eb01 0402 	add.w	r4, r1, r2
 8018dce:	d902      	bls.n	8018dd6 <memmove+0x10>
 8018dd0:	4284      	cmp	r4, r0
 8018dd2:	4623      	mov	r3, r4
 8018dd4:	d807      	bhi.n	8018de6 <memmove+0x20>
 8018dd6:	1e43      	subs	r3, r0, #1
 8018dd8:	42a1      	cmp	r1, r4
 8018dda:	d008      	beq.n	8018dee <memmove+0x28>
 8018ddc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018de0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018de4:	e7f8      	b.n	8018dd8 <memmove+0x12>
 8018de6:	4402      	add	r2, r0
 8018de8:	4601      	mov	r1, r0
 8018dea:	428a      	cmp	r2, r1
 8018dec:	d100      	bne.n	8018df0 <memmove+0x2a>
 8018dee:	bd10      	pop	{r4, pc}
 8018df0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018df4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018df8:	e7f7      	b.n	8018dea <memmove+0x24>

08018dfa <memset>:
 8018dfa:	4402      	add	r2, r0
 8018dfc:	4603      	mov	r3, r0
 8018dfe:	4293      	cmp	r3, r2
 8018e00:	d100      	bne.n	8018e04 <memset+0xa>
 8018e02:	4770      	bx	lr
 8018e04:	f803 1b01 	strb.w	r1, [r3], #1
 8018e08:	e7f9      	b.n	8018dfe <memset+0x4>
	...

08018e0c <sbrk_aligned>:
 8018e0c:	b570      	push	{r4, r5, r6, lr}
 8018e0e:	4e0e      	ldr	r6, [pc, #56]	; (8018e48 <sbrk_aligned+0x3c>)
 8018e10:	460c      	mov	r4, r1
 8018e12:	6831      	ldr	r1, [r6, #0]
 8018e14:	4605      	mov	r5, r0
 8018e16:	b911      	cbnz	r1, 8018e1e <sbrk_aligned+0x12>
 8018e18:	f000 f97a 	bl	8019110 <_sbrk_r>
 8018e1c:	6030      	str	r0, [r6, #0]
 8018e1e:	4621      	mov	r1, r4
 8018e20:	4628      	mov	r0, r5
 8018e22:	f000 f975 	bl	8019110 <_sbrk_r>
 8018e26:	1c43      	adds	r3, r0, #1
 8018e28:	d00a      	beq.n	8018e40 <sbrk_aligned+0x34>
 8018e2a:	1cc4      	adds	r4, r0, #3
 8018e2c:	f024 0403 	bic.w	r4, r4, #3
 8018e30:	42a0      	cmp	r0, r4
 8018e32:	d007      	beq.n	8018e44 <sbrk_aligned+0x38>
 8018e34:	1a21      	subs	r1, r4, r0
 8018e36:	4628      	mov	r0, r5
 8018e38:	f000 f96a 	bl	8019110 <_sbrk_r>
 8018e3c:	3001      	adds	r0, #1
 8018e3e:	d101      	bne.n	8018e44 <sbrk_aligned+0x38>
 8018e40:	f04f 34ff 	mov.w	r4, #4294967295
 8018e44:	4620      	mov	r0, r4
 8018e46:	bd70      	pop	{r4, r5, r6, pc}
 8018e48:	20011728 	.word	0x20011728

08018e4c <_malloc_r>:
 8018e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e50:	1ccd      	adds	r5, r1, #3
 8018e52:	f025 0503 	bic.w	r5, r5, #3
 8018e56:	3508      	adds	r5, #8
 8018e58:	2d0c      	cmp	r5, #12
 8018e5a:	bf38      	it	cc
 8018e5c:	250c      	movcc	r5, #12
 8018e5e:	2d00      	cmp	r5, #0
 8018e60:	4607      	mov	r7, r0
 8018e62:	db01      	blt.n	8018e68 <_malloc_r+0x1c>
 8018e64:	42a9      	cmp	r1, r5
 8018e66:	d905      	bls.n	8018e74 <_malloc_r+0x28>
 8018e68:	230c      	movs	r3, #12
 8018e6a:	603b      	str	r3, [r7, #0]
 8018e6c:	2600      	movs	r6, #0
 8018e6e:	4630      	mov	r0, r6
 8018e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e74:	4e2e      	ldr	r6, [pc, #184]	; (8018f30 <_malloc_r+0xe4>)
 8018e76:	f000 fb85 	bl	8019584 <__malloc_lock>
 8018e7a:	6833      	ldr	r3, [r6, #0]
 8018e7c:	461c      	mov	r4, r3
 8018e7e:	bb34      	cbnz	r4, 8018ece <_malloc_r+0x82>
 8018e80:	4629      	mov	r1, r5
 8018e82:	4638      	mov	r0, r7
 8018e84:	f7ff ffc2 	bl	8018e0c <sbrk_aligned>
 8018e88:	1c43      	adds	r3, r0, #1
 8018e8a:	4604      	mov	r4, r0
 8018e8c:	d14d      	bne.n	8018f2a <_malloc_r+0xde>
 8018e8e:	6834      	ldr	r4, [r6, #0]
 8018e90:	4626      	mov	r6, r4
 8018e92:	2e00      	cmp	r6, #0
 8018e94:	d140      	bne.n	8018f18 <_malloc_r+0xcc>
 8018e96:	6823      	ldr	r3, [r4, #0]
 8018e98:	4631      	mov	r1, r6
 8018e9a:	4638      	mov	r0, r7
 8018e9c:	eb04 0803 	add.w	r8, r4, r3
 8018ea0:	f000 f936 	bl	8019110 <_sbrk_r>
 8018ea4:	4580      	cmp	r8, r0
 8018ea6:	d13a      	bne.n	8018f1e <_malloc_r+0xd2>
 8018ea8:	6821      	ldr	r1, [r4, #0]
 8018eaa:	3503      	adds	r5, #3
 8018eac:	1a6d      	subs	r5, r5, r1
 8018eae:	f025 0503 	bic.w	r5, r5, #3
 8018eb2:	3508      	adds	r5, #8
 8018eb4:	2d0c      	cmp	r5, #12
 8018eb6:	bf38      	it	cc
 8018eb8:	250c      	movcc	r5, #12
 8018eba:	4629      	mov	r1, r5
 8018ebc:	4638      	mov	r0, r7
 8018ebe:	f7ff ffa5 	bl	8018e0c <sbrk_aligned>
 8018ec2:	3001      	adds	r0, #1
 8018ec4:	d02b      	beq.n	8018f1e <_malloc_r+0xd2>
 8018ec6:	6823      	ldr	r3, [r4, #0]
 8018ec8:	442b      	add	r3, r5
 8018eca:	6023      	str	r3, [r4, #0]
 8018ecc:	e00e      	b.n	8018eec <_malloc_r+0xa0>
 8018ece:	6822      	ldr	r2, [r4, #0]
 8018ed0:	1b52      	subs	r2, r2, r5
 8018ed2:	d41e      	bmi.n	8018f12 <_malloc_r+0xc6>
 8018ed4:	2a0b      	cmp	r2, #11
 8018ed6:	d916      	bls.n	8018f06 <_malloc_r+0xba>
 8018ed8:	1961      	adds	r1, r4, r5
 8018eda:	42a3      	cmp	r3, r4
 8018edc:	6025      	str	r5, [r4, #0]
 8018ede:	bf18      	it	ne
 8018ee0:	6059      	strne	r1, [r3, #4]
 8018ee2:	6863      	ldr	r3, [r4, #4]
 8018ee4:	bf08      	it	eq
 8018ee6:	6031      	streq	r1, [r6, #0]
 8018ee8:	5162      	str	r2, [r4, r5]
 8018eea:	604b      	str	r3, [r1, #4]
 8018eec:	4638      	mov	r0, r7
 8018eee:	f104 060b 	add.w	r6, r4, #11
 8018ef2:	f000 fb4d 	bl	8019590 <__malloc_unlock>
 8018ef6:	f026 0607 	bic.w	r6, r6, #7
 8018efa:	1d23      	adds	r3, r4, #4
 8018efc:	1af2      	subs	r2, r6, r3
 8018efe:	d0b6      	beq.n	8018e6e <_malloc_r+0x22>
 8018f00:	1b9b      	subs	r3, r3, r6
 8018f02:	50a3      	str	r3, [r4, r2]
 8018f04:	e7b3      	b.n	8018e6e <_malloc_r+0x22>
 8018f06:	6862      	ldr	r2, [r4, #4]
 8018f08:	42a3      	cmp	r3, r4
 8018f0a:	bf0c      	ite	eq
 8018f0c:	6032      	streq	r2, [r6, #0]
 8018f0e:	605a      	strne	r2, [r3, #4]
 8018f10:	e7ec      	b.n	8018eec <_malloc_r+0xa0>
 8018f12:	4623      	mov	r3, r4
 8018f14:	6864      	ldr	r4, [r4, #4]
 8018f16:	e7b2      	b.n	8018e7e <_malloc_r+0x32>
 8018f18:	4634      	mov	r4, r6
 8018f1a:	6876      	ldr	r6, [r6, #4]
 8018f1c:	e7b9      	b.n	8018e92 <_malloc_r+0x46>
 8018f1e:	230c      	movs	r3, #12
 8018f20:	603b      	str	r3, [r7, #0]
 8018f22:	4638      	mov	r0, r7
 8018f24:	f000 fb34 	bl	8019590 <__malloc_unlock>
 8018f28:	e7a1      	b.n	8018e6e <_malloc_r+0x22>
 8018f2a:	6025      	str	r5, [r4, #0]
 8018f2c:	e7de      	b.n	8018eec <_malloc_r+0xa0>
 8018f2e:	bf00      	nop
 8018f30:	20011724 	.word	0x20011724

08018f34 <iprintf>:
 8018f34:	b40f      	push	{r0, r1, r2, r3}
 8018f36:	4b0a      	ldr	r3, [pc, #40]	; (8018f60 <iprintf+0x2c>)
 8018f38:	b513      	push	{r0, r1, r4, lr}
 8018f3a:	681c      	ldr	r4, [r3, #0]
 8018f3c:	b124      	cbz	r4, 8018f48 <iprintf+0x14>
 8018f3e:	69a3      	ldr	r3, [r4, #24]
 8018f40:	b913      	cbnz	r3, 8018f48 <iprintf+0x14>
 8018f42:	4620      	mov	r0, r4
 8018f44:	f7ff fe5c 	bl	8018c00 <__sinit>
 8018f48:	ab05      	add	r3, sp, #20
 8018f4a:	9a04      	ldr	r2, [sp, #16]
 8018f4c:	68a1      	ldr	r1, [r4, #8]
 8018f4e:	9301      	str	r3, [sp, #4]
 8018f50:	4620      	mov	r0, r4
 8018f52:	f000 fcf5 	bl	8019940 <_vfiprintf_r>
 8018f56:	b002      	add	sp, #8
 8018f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f5c:	b004      	add	sp, #16
 8018f5e:	4770      	bx	lr
 8018f60:	20000034 	.word	0x20000034

08018f64 <srand>:
 8018f64:	b538      	push	{r3, r4, r5, lr}
 8018f66:	4b10      	ldr	r3, [pc, #64]	; (8018fa8 <srand+0x44>)
 8018f68:	681d      	ldr	r5, [r3, #0]
 8018f6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8018f6c:	4604      	mov	r4, r0
 8018f6e:	b9b3      	cbnz	r3, 8018f9e <srand+0x3a>
 8018f70:	2018      	movs	r0, #24
 8018f72:	f000 faff 	bl	8019574 <malloc>
 8018f76:	4602      	mov	r2, r0
 8018f78:	63a8      	str	r0, [r5, #56]	; 0x38
 8018f7a:	b920      	cbnz	r0, 8018f86 <srand+0x22>
 8018f7c:	4b0b      	ldr	r3, [pc, #44]	; (8018fac <srand+0x48>)
 8018f7e:	480c      	ldr	r0, [pc, #48]	; (8018fb0 <srand+0x4c>)
 8018f80:	2142      	movs	r1, #66	; 0x42
 8018f82:	f000 f9e3 	bl	801934c <__assert_func>
 8018f86:	490b      	ldr	r1, [pc, #44]	; (8018fb4 <srand+0x50>)
 8018f88:	4b0b      	ldr	r3, [pc, #44]	; (8018fb8 <srand+0x54>)
 8018f8a:	e9c0 1300 	strd	r1, r3, [r0]
 8018f8e:	4b0b      	ldr	r3, [pc, #44]	; (8018fbc <srand+0x58>)
 8018f90:	6083      	str	r3, [r0, #8]
 8018f92:	230b      	movs	r3, #11
 8018f94:	8183      	strh	r3, [r0, #12]
 8018f96:	2100      	movs	r1, #0
 8018f98:	2001      	movs	r0, #1
 8018f9a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018f9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8018fa0:	2200      	movs	r2, #0
 8018fa2:	611c      	str	r4, [r3, #16]
 8018fa4:	615a      	str	r2, [r3, #20]
 8018fa6:	bd38      	pop	{r3, r4, r5, pc}
 8018fa8:	20000034 	.word	0x20000034
 8018fac:	0802830c 	.word	0x0802830c
 8018fb0:	08028323 	.word	0x08028323
 8018fb4:	abcd330e 	.word	0xabcd330e
 8018fb8:	e66d1234 	.word	0xe66d1234
 8018fbc:	0005deec 	.word	0x0005deec

08018fc0 <rand>:
 8018fc0:	4b16      	ldr	r3, [pc, #88]	; (801901c <rand+0x5c>)
 8018fc2:	b510      	push	{r4, lr}
 8018fc4:	681c      	ldr	r4, [r3, #0]
 8018fc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018fc8:	b9b3      	cbnz	r3, 8018ff8 <rand+0x38>
 8018fca:	2018      	movs	r0, #24
 8018fcc:	f000 fad2 	bl	8019574 <malloc>
 8018fd0:	63a0      	str	r0, [r4, #56]	; 0x38
 8018fd2:	b928      	cbnz	r0, 8018fe0 <rand+0x20>
 8018fd4:	4602      	mov	r2, r0
 8018fd6:	4b12      	ldr	r3, [pc, #72]	; (8019020 <rand+0x60>)
 8018fd8:	4812      	ldr	r0, [pc, #72]	; (8019024 <rand+0x64>)
 8018fda:	214e      	movs	r1, #78	; 0x4e
 8018fdc:	f000 f9b6 	bl	801934c <__assert_func>
 8018fe0:	4a11      	ldr	r2, [pc, #68]	; (8019028 <rand+0x68>)
 8018fe2:	4b12      	ldr	r3, [pc, #72]	; (801902c <rand+0x6c>)
 8018fe4:	e9c0 2300 	strd	r2, r3, [r0]
 8018fe8:	4b11      	ldr	r3, [pc, #68]	; (8019030 <rand+0x70>)
 8018fea:	6083      	str	r3, [r0, #8]
 8018fec:	230b      	movs	r3, #11
 8018fee:	8183      	strh	r3, [r0, #12]
 8018ff0:	2201      	movs	r2, #1
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018ff8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8018ffa:	4a0e      	ldr	r2, [pc, #56]	; (8019034 <rand+0x74>)
 8018ffc:	6920      	ldr	r0, [r4, #16]
 8018ffe:	6963      	ldr	r3, [r4, #20]
 8019000:	490d      	ldr	r1, [pc, #52]	; (8019038 <rand+0x78>)
 8019002:	4342      	muls	r2, r0
 8019004:	fb01 2203 	mla	r2, r1, r3, r2
 8019008:	fba0 0101 	umull	r0, r1, r0, r1
 801900c:	1c43      	adds	r3, r0, #1
 801900e:	eb42 0001 	adc.w	r0, r2, r1
 8019012:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8019016:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801901a:	bd10      	pop	{r4, pc}
 801901c:	20000034 	.word	0x20000034
 8019020:	0802830c 	.word	0x0802830c
 8019024:	08028323 	.word	0x08028323
 8019028:	abcd330e 	.word	0xabcd330e
 801902c:	e66d1234 	.word	0xe66d1234
 8019030:	0005deec 	.word	0x0005deec
 8019034:	5851f42d 	.word	0x5851f42d
 8019038:	4c957f2d 	.word	0x4c957f2d

0801903c <cleanup_glue>:
 801903c:	b538      	push	{r3, r4, r5, lr}
 801903e:	460c      	mov	r4, r1
 8019040:	6809      	ldr	r1, [r1, #0]
 8019042:	4605      	mov	r5, r0
 8019044:	b109      	cbz	r1, 801904a <cleanup_glue+0xe>
 8019046:	f7ff fff9 	bl	801903c <cleanup_glue>
 801904a:	4621      	mov	r1, r4
 801904c:	4628      	mov	r0, r5
 801904e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019052:	f000 baa3 	b.w	801959c <_free_r>
	...

08019058 <_reclaim_reent>:
 8019058:	4b2c      	ldr	r3, [pc, #176]	; (801910c <_reclaim_reent+0xb4>)
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	4283      	cmp	r3, r0
 801905e:	b570      	push	{r4, r5, r6, lr}
 8019060:	4604      	mov	r4, r0
 8019062:	d051      	beq.n	8019108 <_reclaim_reent+0xb0>
 8019064:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019066:	b143      	cbz	r3, 801907a <_reclaim_reent+0x22>
 8019068:	68db      	ldr	r3, [r3, #12]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d14a      	bne.n	8019104 <_reclaim_reent+0xac>
 801906e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019070:	6819      	ldr	r1, [r3, #0]
 8019072:	b111      	cbz	r1, 801907a <_reclaim_reent+0x22>
 8019074:	4620      	mov	r0, r4
 8019076:	f000 fa91 	bl	801959c <_free_r>
 801907a:	6961      	ldr	r1, [r4, #20]
 801907c:	b111      	cbz	r1, 8019084 <_reclaim_reent+0x2c>
 801907e:	4620      	mov	r0, r4
 8019080:	f000 fa8c 	bl	801959c <_free_r>
 8019084:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019086:	b111      	cbz	r1, 801908e <_reclaim_reent+0x36>
 8019088:	4620      	mov	r0, r4
 801908a:	f000 fa87 	bl	801959c <_free_r>
 801908e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019090:	b111      	cbz	r1, 8019098 <_reclaim_reent+0x40>
 8019092:	4620      	mov	r0, r4
 8019094:	f000 fa82 	bl	801959c <_free_r>
 8019098:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801909a:	b111      	cbz	r1, 80190a2 <_reclaim_reent+0x4a>
 801909c:	4620      	mov	r0, r4
 801909e:	f000 fa7d 	bl	801959c <_free_r>
 80190a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80190a4:	b111      	cbz	r1, 80190ac <_reclaim_reent+0x54>
 80190a6:	4620      	mov	r0, r4
 80190a8:	f000 fa78 	bl	801959c <_free_r>
 80190ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80190ae:	b111      	cbz	r1, 80190b6 <_reclaim_reent+0x5e>
 80190b0:	4620      	mov	r0, r4
 80190b2:	f000 fa73 	bl	801959c <_free_r>
 80190b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80190b8:	b111      	cbz	r1, 80190c0 <_reclaim_reent+0x68>
 80190ba:	4620      	mov	r0, r4
 80190bc:	f000 fa6e 	bl	801959c <_free_r>
 80190c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80190c2:	b111      	cbz	r1, 80190ca <_reclaim_reent+0x72>
 80190c4:	4620      	mov	r0, r4
 80190c6:	f000 fa69 	bl	801959c <_free_r>
 80190ca:	69a3      	ldr	r3, [r4, #24]
 80190cc:	b1e3      	cbz	r3, 8019108 <_reclaim_reent+0xb0>
 80190ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80190d0:	4620      	mov	r0, r4
 80190d2:	4798      	blx	r3
 80190d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80190d6:	b1b9      	cbz	r1, 8019108 <_reclaim_reent+0xb0>
 80190d8:	4620      	mov	r0, r4
 80190da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80190de:	f7ff bfad 	b.w	801903c <cleanup_glue>
 80190e2:	5949      	ldr	r1, [r1, r5]
 80190e4:	b941      	cbnz	r1, 80190f8 <_reclaim_reent+0xa0>
 80190e6:	3504      	adds	r5, #4
 80190e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80190ea:	2d80      	cmp	r5, #128	; 0x80
 80190ec:	68d9      	ldr	r1, [r3, #12]
 80190ee:	d1f8      	bne.n	80190e2 <_reclaim_reent+0x8a>
 80190f0:	4620      	mov	r0, r4
 80190f2:	f000 fa53 	bl	801959c <_free_r>
 80190f6:	e7ba      	b.n	801906e <_reclaim_reent+0x16>
 80190f8:	680e      	ldr	r6, [r1, #0]
 80190fa:	4620      	mov	r0, r4
 80190fc:	f000 fa4e 	bl	801959c <_free_r>
 8019100:	4631      	mov	r1, r6
 8019102:	e7ef      	b.n	80190e4 <_reclaim_reent+0x8c>
 8019104:	2500      	movs	r5, #0
 8019106:	e7ef      	b.n	80190e8 <_reclaim_reent+0x90>
 8019108:	bd70      	pop	{r4, r5, r6, pc}
 801910a:	bf00      	nop
 801910c:	20000034 	.word	0x20000034

08019110 <_sbrk_r>:
 8019110:	b538      	push	{r3, r4, r5, lr}
 8019112:	4d06      	ldr	r5, [pc, #24]	; (801912c <_sbrk_r+0x1c>)
 8019114:	2300      	movs	r3, #0
 8019116:	4604      	mov	r4, r0
 8019118:	4608      	mov	r0, r1
 801911a:	602b      	str	r3, [r5, #0]
 801911c:	f7e7 fe0a 	bl	8000d34 <_sbrk>
 8019120:	1c43      	adds	r3, r0, #1
 8019122:	d102      	bne.n	801912a <_sbrk_r+0x1a>
 8019124:	682b      	ldr	r3, [r5, #0]
 8019126:	b103      	cbz	r3, 801912a <_sbrk_r+0x1a>
 8019128:	6023      	str	r3, [r4, #0]
 801912a:	bd38      	pop	{r3, r4, r5, pc}
 801912c:	2001172c 	.word	0x2001172c

08019130 <siprintf>:
 8019130:	b40e      	push	{r1, r2, r3}
 8019132:	b500      	push	{lr}
 8019134:	b09c      	sub	sp, #112	; 0x70
 8019136:	ab1d      	add	r3, sp, #116	; 0x74
 8019138:	9002      	str	r0, [sp, #8]
 801913a:	9006      	str	r0, [sp, #24]
 801913c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019140:	4809      	ldr	r0, [pc, #36]	; (8019168 <siprintf+0x38>)
 8019142:	9107      	str	r1, [sp, #28]
 8019144:	9104      	str	r1, [sp, #16]
 8019146:	4909      	ldr	r1, [pc, #36]	; (801916c <siprintf+0x3c>)
 8019148:	f853 2b04 	ldr.w	r2, [r3], #4
 801914c:	9105      	str	r1, [sp, #20]
 801914e:	6800      	ldr	r0, [r0, #0]
 8019150:	9301      	str	r3, [sp, #4]
 8019152:	a902      	add	r1, sp, #8
 8019154:	f000 faca 	bl	80196ec <_svfiprintf_r>
 8019158:	9b02      	ldr	r3, [sp, #8]
 801915a:	2200      	movs	r2, #0
 801915c:	701a      	strb	r2, [r3, #0]
 801915e:	b01c      	add	sp, #112	; 0x70
 8019160:	f85d eb04 	ldr.w	lr, [sp], #4
 8019164:	b003      	add	sp, #12
 8019166:	4770      	bx	lr
 8019168:	20000034 	.word	0x20000034
 801916c:	ffff0208 	.word	0xffff0208

08019170 <__sread>:
 8019170:	b510      	push	{r4, lr}
 8019172:	460c      	mov	r4, r1
 8019174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019178:	f000 fea6 	bl	8019ec8 <_read_r>
 801917c:	2800      	cmp	r0, #0
 801917e:	bfab      	itete	ge
 8019180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019182:	89a3      	ldrhlt	r3, [r4, #12]
 8019184:	181b      	addge	r3, r3, r0
 8019186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801918a:	bfac      	ite	ge
 801918c:	6563      	strge	r3, [r4, #84]	; 0x54
 801918e:	81a3      	strhlt	r3, [r4, #12]
 8019190:	bd10      	pop	{r4, pc}

08019192 <__swrite>:
 8019192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019196:	461f      	mov	r7, r3
 8019198:	898b      	ldrh	r3, [r1, #12]
 801919a:	05db      	lsls	r3, r3, #23
 801919c:	4605      	mov	r5, r0
 801919e:	460c      	mov	r4, r1
 80191a0:	4616      	mov	r6, r2
 80191a2:	d505      	bpl.n	80191b0 <__swrite+0x1e>
 80191a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191a8:	2302      	movs	r3, #2
 80191aa:	2200      	movs	r2, #0
 80191ac:	f000 f9d0 	bl	8019550 <_lseek_r>
 80191b0:	89a3      	ldrh	r3, [r4, #12]
 80191b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80191b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80191ba:	81a3      	strh	r3, [r4, #12]
 80191bc:	4632      	mov	r2, r6
 80191be:	463b      	mov	r3, r7
 80191c0:	4628      	mov	r0, r5
 80191c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191c6:	f000 b8af 	b.w	8019328 <_write_r>

080191ca <__sseek>:
 80191ca:	b510      	push	{r4, lr}
 80191cc:	460c      	mov	r4, r1
 80191ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191d2:	f000 f9bd 	bl	8019550 <_lseek_r>
 80191d6:	1c43      	adds	r3, r0, #1
 80191d8:	89a3      	ldrh	r3, [r4, #12]
 80191da:	bf15      	itete	ne
 80191dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80191de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80191e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80191e6:	81a3      	strheq	r3, [r4, #12]
 80191e8:	bf18      	it	ne
 80191ea:	81a3      	strhne	r3, [r4, #12]
 80191ec:	bd10      	pop	{r4, pc}

080191ee <__sclose>:
 80191ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191f2:	f000 b8c9 	b.w	8019388 <_close_r>
	...

080191f8 <strcasecmp>:
 80191f8:	b530      	push	{r4, r5, lr}
 80191fa:	4d0b      	ldr	r5, [pc, #44]	; (8019228 <strcasecmp+0x30>)
 80191fc:	4604      	mov	r4, r0
 80191fe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019202:	5d5a      	ldrb	r2, [r3, r5]
 8019204:	f002 0203 	and.w	r2, r2, #3
 8019208:	2a01      	cmp	r2, #1
 801920a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801920e:	5ca8      	ldrb	r0, [r5, r2]
 8019210:	f000 0003 	and.w	r0, r0, #3
 8019214:	bf08      	it	eq
 8019216:	3320      	addeq	r3, #32
 8019218:	2801      	cmp	r0, #1
 801921a:	bf08      	it	eq
 801921c:	3220      	addeq	r2, #32
 801921e:	1a98      	subs	r0, r3, r2
 8019220:	d101      	bne.n	8019226 <strcasecmp+0x2e>
 8019222:	2a00      	cmp	r2, #0
 8019224:	d1eb      	bne.n	80191fe <strcasecmp+0x6>
 8019226:	bd30      	pop	{r4, r5, pc}
 8019228:	080281a5 	.word	0x080281a5

0801922c <strchr>:
 801922c:	b2c9      	uxtb	r1, r1
 801922e:	4603      	mov	r3, r0
 8019230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019234:	b11a      	cbz	r2, 801923e <strchr+0x12>
 8019236:	428a      	cmp	r2, r1
 8019238:	d1f9      	bne.n	801922e <strchr+0x2>
 801923a:	4618      	mov	r0, r3
 801923c:	4770      	bx	lr
 801923e:	2900      	cmp	r1, #0
 8019240:	bf18      	it	ne
 8019242:	2300      	movne	r3, #0
 8019244:	e7f9      	b.n	801923a <strchr+0xe>

08019246 <strncmp>:
 8019246:	b510      	push	{r4, lr}
 8019248:	b17a      	cbz	r2, 801926a <strncmp+0x24>
 801924a:	4603      	mov	r3, r0
 801924c:	3901      	subs	r1, #1
 801924e:	1884      	adds	r4, r0, r2
 8019250:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019254:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019258:	4290      	cmp	r0, r2
 801925a:	d101      	bne.n	8019260 <strncmp+0x1a>
 801925c:	42a3      	cmp	r3, r4
 801925e:	d101      	bne.n	8019264 <strncmp+0x1e>
 8019260:	1a80      	subs	r0, r0, r2
 8019262:	bd10      	pop	{r4, pc}
 8019264:	2800      	cmp	r0, #0
 8019266:	d1f3      	bne.n	8019250 <strncmp+0xa>
 8019268:	e7fa      	b.n	8019260 <strncmp+0x1a>
 801926a:	4610      	mov	r0, r2
 801926c:	e7f9      	b.n	8019262 <strncmp+0x1c>
	...

08019270 <strtok>:
 8019270:	4b16      	ldr	r3, [pc, #88]	; (80192cc <strtok+0x5c>)
 8019272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019274:	681e      	ldr	r6, [r3, #0]
 8019276:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8019278:	4605      	mov	r5, r0
 801927a:	b9fc      	cbnz	r4, 80192bc <strtok+0x4c>
 801927c:	2050      	movs	r0, #80	; 0x50
 801927e:	9101      	str	r1, [sp, #4]
 8019280:	f000 f978 	bl	8019574 <malloc>
 8019284:	9901      	ldr	r1, [sp, #4]
 8019286:	65b0      	str	r0, [r6, #88]	; 0x58
 8019288:	4602      	mov	r2, r0
 801928a:	b920      	cbnz	r0, 8019296 <strtok+0x26>
 801928c:	4b10      	ldr	r3, [pc, #64]	; (80192d0 <strtok+0x60>)
 801928e:	4811      	ldr	r0, [pc, #68]	; (80192d4 <strtok+0x64>)
 8019290:	2157      	movs	r1, #87	; 0x57
 8019292:	f000 f85b 	bl	801934c <__assert_func>
 8019296:	e9c0 4400 	strd	r4, r4, [r0]
 801929a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801929e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80192a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80192a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80192aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80192ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80192b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80192b6:	6184      	str	r4, [r0, #24]
 80192b8:	7704      	strb	r4, [r0, #28]
 80192ba:	6244      	str	r4, [r0, #36]	; 0x24
 80192bc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80192be:	2301      	movs	r3, #1
 80192c0:	4628      	mov	r0, r5
 80192c2:	b002      	add	sp, #8
 80192c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192c8:	f000 b806 	b.w	80192d8 <__strtok_r>
 80192cc:	20000034 	.word	0x20000034
 80192d0:	0802830c 	.word	0x0802830c
 80192d4:	0802837e 	.word	0x0802837e

080192d8 <__strtok_r>:
 80192d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192da:	b908      	cbnz	r0, 80192e0 <__strtok_r+0x8>
 80192dc:	6810      	ldr	r0, [r2, #0]
 80192de:	b188      	cbz	r0, 8019304 <__strtok_r+0x2c>
 80192e0:	4604      	mov	r4, r0
 80192e2:	4620      	mov	r0, r4
 80192e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80192e8:	460f      	mov	r7, r1
 80192ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 80192ee:	b91e      	cbnz	r6, 80192f8 <__strtok_r+0x20>
 80192f0:	b965      	cbnz	r5, 801930c <__strtok_r+0x34>
 80192f2:	6015      	str	r5, [r2, #0]
 80192f4:	4628      	mov	r0, r5
 80192f6:	e005      	b.n	8019304 <__strtok_r+0x2c>
 80192f8:	42b5      	cmp	r5, r6
 80192fa:	d1f6      	bne.n	80192ea <__strtok_r+0x12>
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d1f0      	bne.n	80192e2 <__strtok_r+0xa>
 8019300:	6014      	str	r4, [r2, #0]
 8019302:	7003      	strb	r3, [r0, #0]
 8019304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019306:	461c      	mov	r4, r3
 8019308:	e00c      	b.n	8019324 <__strtok_r+0x4c>
 801930a:	b915      	cbnz	r5, 8019312 <__strtok_r+0x3a>
 801930c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019310:	460e      	mov	r6, r1
 8019312:	f816 5b01 	ldrb.w	r5, [r6], #1
 8019316:	42ab      	cmp	r3, r5
 8019318:	d1f7      	bne.n	801930a <__strtok_r+0x32>
 801931a:	2b00      	cmp	r3, #0
 801931c:	d0f3      	beq.n	8019306 <__strtok_r+0x2e>
 801931e:	2300      	movs	r3, #0
 8019320:	f804 3c01 	strb.w	r3, [r4, #-1]
 8019324:	6014      	str	r4, [r2, #0]
 8019326:	e7ed      	b.n	8019304 <__strtok_r+0x2c>

08019328 <_write_r>:
 8019328:	b538      	push	{r3, r4, r5, lr}
 801932a:	4d07      	ldr	r5, [pc, #28]	; (8019348 <_write_r+0x20>)
 801932c:	4604      	mov	r4, r0
 801932e:	4608      	mov	r0, r1
 8019330:	4611      	mov	r1, r2
 8019332:	2200      	movs	r2, #0
 8019334:	602a      	str	r2, [r5, #0]
 8019336:	461a      	mov	r2, r3
 8019338:	f7e7 fcab 	bl	8000c92 <_write>
 801933c:	1c43      	adds	r3, r0, #1
 801933e:	d102      	bne.n	8019346 <_write_r+0x1e>
 8019340:	682b      	ldr	r3, [r5, #0]
 8019342:	b103      	cbz	r3, 8019346 <_write_r+0x1e>
 8019344:	6023      	str	r3, [r4, #0]
 8019346:	bd38      	pop	{r3, r4, r5, pc}
 8019348:	2001172c 	.word	0x2001172c

0801934c <__assert_func>:
 801934c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801934e:	4614      	mov	r4, r2
 8019350:	461a      	mov	r2, r3
 8019352:	4b09      	ldr	r3, [pc, #36]	; (8019378 <__assert_func+0x2c>)
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	4605      	mov	r5, r0
 8019358:	68d8      	ldr	r0, [r3, #12]
 801935a:	b14c      	cbz	r4, 8019370 <__assert_func+0x24>
 801935c:	4b07      	ldr	r3, [pc, #28]	; (801937c <__assert_func+0x30>)
 801935e:	9100      	str	r1, [sp, #0]
 8019360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019364:	4906      	ldr	r1, [pc, #24]	; (8019380 <__assert_func+0x34>)
 8019366:	462b      	mov	r3, r5
 8019368:	f000 f8e0 	bl	801952c <fiprintf>
 801936c:	f000 fe7e 	bl	801a06c <abort>
 8019370:	4b04      	ldr	r3, [pc, #16]	; (8019384 <__assert_func+0x38>)
 8019372:	461c      	mov	r4, r3
 8019374:	e7f3      	b.n	801935e <__assert_func+0x12>
 8019376:	bf00      	nop
 8019378:	20000034 	.word	0x20000034
 801937c:	080283db 	.word	0x080283db
 8019380:	080283e8 	.word	0x080283e8
 8019384:	08028416 	.word	0x08028416

08019388 <_close_r>:
 8019388:	b538      	push	{r3, r4, r5, lr}
 801938a:	4d06      	ldr	r5, [pc, #24]	; (80193a4 <_close_r+0x1c>)
 801938c:	2300      	movs	r3, #0
 801938e:	4604      	mov	r4, r0
 8019390:	4608      	mov	r0, r1
 8019392:	602b      	str	r3, [r5, #0]
 8019394:	f7e7 fc99 	bl	8000cca <_close>
 8019398:	1c43      	adds	r3, r0, #1
 801939a:	d102      	bne.n	80193a2 <_close_r+0x1a>
 801939c:	682b      	ldr	r3, [r5, #0]
 801939e:	b103      	cbz	r3, 80193a2 <_close_r+0x1a>
 80193a0:	6023      	str	r3, [r4, #0]
 80193a2:	bd38      	pop	{r3, r4, r5, pc}
 80193a4:	2001172c 	.word	0x2001172c

080193a8 <__sflush_r>:
 80193a8:	898a      	ldrh	r2, [r1, #12]
 80193aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193ae:	4605      	mov	r5, r0
 80193b0:	0710      	lsls	r0, r2, #28
 80193b2:	460c      	mov	r4, r1
 80193b4:	d458      	bmi.n	8019468 <__sflush_r+0xc0>
 80193b6:	684b      	ldr	r3, [r1, #4]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	dc05      	bgt.n	80193c8 <__sflush_r+0x20>
 80193bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80193be:	2b00      	cmp	r3, #0
 80193c0:	dc02      	bgt.n	80193c8 <__sflush_r+0x20>
 80193c2:	2000      	movs	r0, #0
 80193c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80193ca:	2e00      	cmp	r6, #0
 80193cc:	d0f9      	beq.n	80193c2 <__sflush_r+0x1a>
 80193ce:	2300      	movs	r3, #0
 80193d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80193d4:	682f      	ldr	r7, [r5, #0]
 80193d6:	602b      	str	r3, [r5, #0]
 80193d8:	d032      	beq.n	8019440 <__sflush_r+0x98>
 80193da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80193dc:	89a3      	ldrh	r3, [r4, #12]
 80193de:	075a      	lsls	r2, r3, #29
 80193e0:	d505      	bpl.n	80193ee <__sflush_r+0x46>
 80193e2:	6863      	ldr	r3, [r4, #4]
 80193e4:	1ac0      	subs	r0, r0, r3
 80193e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80193e8:	b10b      	cbz	r3, 80193ee <__sflush_r+0x46>
 80193ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80193ec:	1ac0      	subs	r0, r0, r3
 80193ee:	2300      	movs	r3, #0
 80193f0:	4602      	mov	r2, r0
 80193f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80193f4:	6a21      	ldr	r1, [r4, #32]
 80193f6:	4628      	mov	r0, r5
 80193f8:	47b0      	blx	r6
 80193fa:	1c43      	adds	r3, r0, #1
 80193fc:	89a3      	ldrh	r3, [r4, #12]
 80193fe:	d106      	bne.n	801940e <__sflush_r+0x66>
 8019400:	6829      	ldr	r1, [r5, #0]
 8019402:	291d      	cmp	r1, #29
 8019404:	d82c      	bhi.n	8019460 <__sflush_r+0xb8>
 8019406:	4a2a      	ldr	r2, [pc, #168]	; (80194b0 <__sflush_r+0x108>)
 8019408:	40ca      	lsrs	r2, r1
 801940a:	07d6      	lsls	r6, r2, #31
 801940c:	d528      	bpl.n	8019460 <__sflush_r+0xb8>
 801940e:	2200      	movs	r2, #0
 8019410:	6062      	str	r2, [r4, #4]
 8019412:	04d9      	lsls	r1, r3, #19
 8019414:	6922      	ldr	r2, [r4, #16]
 8019416:	6022      	str	r2, [r4, #0]
 8019418:	d504      	bpl.n	8019424 <__sflush_r+0x7c>
 801941a:	1c42      	adds	r2, r0, #1
 801941c:	d101      	bne.n	8019422 <__sflush_r+0x7a>
 801941e:	682b      	ldr	r3, [r5, #0]
 8019420:	b903      	cbnz	r3, 8019424 <__sflush_r+0x7c>
 8019422:	6560      	str	r0, [r4, #84]	; 0x54
 8019424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019426:	602f      	str	r7, [r5, #0]
 8019428:	2900      	cmp	r1, #0
 801942a:	d0ca      	beq.n	80193c2 <__sflush_r+0x1a>
 801942c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019430:	4299      	cmp	r1, r3
 8019432:	d002      	beq.n	801943a <__sflush_r+0x92>
 8019434:	4628      	mov	r0, r5
 8019436:	f000 f8b1 	bl	801959c <_free_r>
 801943a:	2000      	movs	r0, #0
 801943c:	6360      	str	r0, [r4, #52]	; 0x34
 801943e:	e7c1      	b.n	80193c4 <__sflush_r+0x1c>
 8019440:	6a21      	ldr	r1, [r4, #32]
 8019442:	2301      	movs	r3, #1
 8019444:	4628      	mov	r0, r5
 8019446:	47b0      	blx	r6
 8019448:	1c41      	adds	r1, r0, #1
 801944a:	d1c7      	bne.n	80193dc <__sflush_r+0x34>
 801944c:	682b      	ldr	r3, [r5, #0]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d0c4      	beq.n	80193dc <__sflush_r+0x34>
 8019452:	2b1d      	cmp	r3, #29
 8019454:	d001      	beq.n	801945a <__sflush_r+0xb2>
 8019456:	2b16      	cmp	r3, #22
 8019458:	d101      	bne.n	801945e <__sflush_r+0xb6>
 801945a:	602f      	str	r7, [r5, #0]
 801945c:	e7b1      	b.n	80193c2 <__sflush_r+0x1a>
 801945e:	89a3      	ldrh	r3, [r4, #12]
 8019460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019464:	81a3      	strh	r3, [r4, #12]
 8019466:	e7ad      	b.n	80193c4 <__sflush_r+0x1c>
 8019468:	690f      	ldr	r7, [r1, #16]
 801946a:	2f00      	cmp	r7, #0
 801946c:	d0a9      	beq.n	80193c2 <__sflush_r+0x1a>
 801946e:	0793      	lsls	r3, r2, #30
 8019470:	680e      	ldr	r6, [r1, #0]
 8019472:	bf08      	it	eq
 8019474:	694b      	ldreq	r3, [r1, #20]
 8019476:	600f      	str	r7, [r1, #0]
 8019478:	bf18      	it	ne
 801947a:	2300      	movne	r3, #0
 801947c:	eba6 0807 	sub.w	r8, r6, r7
 8019480:	608b      	str	r3, [r1, #8]
 8019482:	f1b8 0f00 	cmp.w	r8, #0
 8019486:	dd9c      	ble.n	80193c2 <__sflush_r+0x1a>
 8019488:	6a21      	ldr	r1, [r4, #32]
 801948a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801948c:	4643      	mov	r3, r8
 801948e:	463a      	mov	r2, r7
 8019490:	4628      	mov	r0, r5
 8019492:	47b0      	blx	r6
 8019494:	2800      	cmp	r0, #0
 8019496:	dc06      	bgt.n	80194a6 <__sflush_r+0xfe>
 8019498:	89a3      	ldrh	r3, [r4, #12]
 801949a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801949e:	81a3      	strh	r3, [r4, #12]
 80194a0:	f04f 30ff 	mov.w	r0, #4294967295
 80194a4:	e78e      	b.n	80193c4 <__sflush_r+0x1c>
 80194a6:	4407      	add	r7, r0
 80194a8:	eba8 0800 	sub.w	r8, r8, r0
 80194ac:	e7e9      	b.n	8019482 <__sflush_r+0xda>
 80194ae:	bf00      	nop
 80194b0:	20400001 	.word	0x20400001

080194b4 <_fflush_r>:
 80194b4:	b538      	push	{r3, r4, r5, lr}
 80194b6:	690b      	ldr	r3, [r1, #16]
 80194b8:	4605      	mov	r5, r0
 80194ba:	460c      	mov	r4, r1
 80194bc:	b913      	cbnz	r3, 80194c4 <_fflush_r+0x10>
 80194be:	2500      	movs	r5, #0
 80194c0:	4628      	mov	r0, r5
 80194c2:	bd38      	pop	{r3, r4, r5, pc}
 80194c4:	b118      	cbz	r0, 80194ce <_fflush_r+0x1a>
 80194c6:	6983      	ldr	r3, [r0, #24]
 80194c8:	b90b      	cbnz	r3, 80194ce <_fflush_r+0x1a>
 80194ca:	f7ff fb99 	bl	8018c00 <__sinit>
 80194ce:	4b14      	ldr	r3, [pc, #80]	; (8019520 <_fflush_r+0x6c>)
 80194d0:	429c      	cmp	r4, r3
 80194d2:	d11b      	bne.n	801950c <_fflush_r+0x58>
 80194d4:	686c      	ldr	r4, [r5, #4]
 80194d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d0ef      	beq.n	80194be <_fflush_r+0xa>
 80194de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80194e0:	07d0      	lsls	r0, r2, #31
 80194e2:	d404      	bmi.n	80194ee <_fflush_r+0x3a>
 80194e4:	0599      	lsls	r1, r3, #22
 80194e6:	d402      	bmi.n	80194ee <_fflush_r+0x3a>
 80194e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80194ea:	f7ff fc4c 	bl	8018d86 <__retarget_lock_acquire_recursive>
 80194ee:	4628      	mov	r0, r5
 80194f0:	4621      	mov	r1, r4
 80194f2:	f7ff ff59 	bl	80193a8 <__sflush_r>
 80194f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80194f8:	07da      	lsls	r2, r3, #31
 80194fa:	4605      	mov	r5, r0
 80194fc:	d4e0      	bmi.n	80194c0 <_fflush_r+0xc>
 80194fe:	89a3      	ldrh	r3, [r4, #12]
 8019500:	059b      	lsls	r3, r3, #22
 8019502:	d4dd      	bmi.n	80194c0 <_fflush_r+0xc>
 8019504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019506:	f7ff fc3f 	bl	8018d88 <__retarget_lock_release_recursive>
 801950a:	e7d9      	b.n	80194c0 <_fflush_r+0xc>
 801950c:	4b05      	ldr	r3, [pc, #20]	; (8019524 <_fflush_r+0x70>)
 801950e:	429c      	cmp	r4, r3
 8019510:	d101      	bne.n	8019516 <_fflush_r+0x62>
 8019512:	68ac      	ldr	r4, [r5, #8]
 8019514:	e7df      	b.n	80194d6 <_fflush_r+0x22>
 8019516:	4b04      	ldr	r3, [pc, #16]	; (8019528 <_fflush_r+0x74>)
 8019518:	429c      	cmp	r4, r3
 801951a:	bf08      	it	eq
 801951c:	68ec      	ldreq	r4, [r5, #12]
 801951e:	e7da      	b.n	80194d6 <_fflush_r+0x22>
 8019520:	080282c8 	.word	0x080282c8
 8019524:	080282e8 	.word	0x080282e8
 8019528:	080282a8 	.word	0x080282a8

0801952c <fiprintf>:
 801952c:	b40e      	push	{r1, r2, r3}
 801952e:	b503      	push	{r0, r1, lr}
 8019530:	4601      	mov	r1, r0
 8019532:	ab03      	add	r3, sp, #12
 8019534:	4805      	ldr	r0, [pc, #20]	; (801954c <fiprintf+0x20>)
 8019536:	f853 2b04 	ldr.w	r2, [r3], #4
 801953a:	6800      	ldr	r0, [r0, #0]
 801953c:	9301      	str	r3, [sp, #4]
 801953e:	f000 f9ff 	bl	8019940 <_vfiprintf_r>
 8019542:	b002      	add	sp, #8
 8019544:	f85d eb04 	ldr.w	lr, [sp], #4
 8019548:	b003      	add	sp, #12
 801954a:	4770      	bx	lr
 801954c:	20000034 	.word	0x20000034

08019550 <_lseek_r>:
 8019550:	b538      	push	{r3, r4, r5, lr}
 8019552:	4d07      	ldr	r5, [pc, #28]	; (8019570 <_lseek_r+0x20>)
 8019554:	4604      	mov	r4, r0
 8019556:	4608      	mov	r0, r1
 8019558:	4611      	mov	r1, r2
 801955a:	2200      	movs	r2, #0
 801955c:	602a      	str	r2, [r5, #0]
 801955e:	461a      	mov	r2, r3
 8019560:	f7e7 fbda 	bl	8000d18 <_lseek>
 8019564:	1c43      	adds	r3, r0, #1
 8019566:	d102      	bne.n	801956e <_lseek_r+0x1e>
 8019568:	682b      	ldr	r3, [r5, #0]
 801956a:	b103      	cbz	r3, 801956e <_lseek_r+0x1e>
 801956c:	6023      	str	r3, [r4, #0]
 801956e:	bd38      	pop	{r3, r4, r5, pc}
 8019570:	2001172c 	.word	0x2001172c

08019574 <malloc>:
 8019574:	4b02      	ldr	r3, [pc, #8]	; (8019580 <malloc+0xc>)
 8019576:	4601      	mov	r1, r0
 8019578:	6818      	ldr	r0, [r3, #0]
 801957a:	f7ff bc67 	b.w	8018e4c <_malloc_r>
 801957e:	bf00      	nop
 8019580:	20000034 	.word	0x20000034

08019584 <__malloc_lock>:
 8019584:	4801      	ldr	r0, [pc, #4]	; (801958c <__malloc_lock+0x8>)
 8019586:	f7ff bbfe 	b.w	8018d86 <__retarget_lock_acquire_recursive>
 801958a:	bf00      	nop
 801958c:	20011720 	.word	0x20011720

08019590 <__malloc_unlock>:
 8019590:	4801      	ldr	r0, [pc, #4]	; (8019598 <__malloc_unlock+0x8>)
 8019592:	f7ff bbf9 	b.w	8018d88 <__retarget_lock_release_recursive>
 8019596:	bf00      	nop
 8019598:	20011720 	.word	0x20011720

0801959c <_free_r>:
 801959c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801959e:	2900      	cmp	r1, #0
 80195a0:	d044      	beq.n	801962c <_free_r+0x90>
 80195a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80195a6:	9001      	str	r0, [sp, #4]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	f1a1 0404 	sub.w	r4, r1, #4
 80195ae:	bfb8      	it	lt
 80195b0:	18e4      	addlt	r4, r4, r3
 80195b2:	f7ff ffe7 	bl	8019584 <__malloc_lock>
 80195b6:	4a1e      	ldr	r2, [pc, #120]	; (8019630 <_free_r+0x94>)
 80195b8:	9801      	ldr	r0, [sp, #4]
 80195ba:	6813      	ldr	r3, [r2, #0]
 80195bc:	b933      	cbnz	r3, 80195cc <_free_r+0x30>
 80195be:	6063      	str	r3, [r4, #4]
 80195c0:	6014      	str	r4, [r2, #0]
 80195c2:	b003      	add	sp, #12
 80195c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80195c8:	f7ff bfe2 	b.w	8019590 <__malloc_unlock>
 80195cc:	42a3      	cmp	r3, r4
 80195ce:	d908      	bls.n	80195e2 <_free_r+0x46>
 80195d0:	6825      	ldr	r5, [r4, #0]
 80195d2:	1961      	adds	r1, r4, r5
 80195d4:	428b      	cmp	r3, r1
 80195d6:	bf01      	itttt	eq
 80195d8:	6819      	ldreq	r1, [r3, #0]
 80195da:	685b      	ldreq	r3, [r3, #4]
 80195dc:	1949      	addeq	r1, r1, r5
 80195de:	6021      	streq	r1, [r4, #0]
 80195e0:	e7ed      	b.n	80195be <_free_r+0x22>
 80195e2:	461a      	mov	r2, r3
 80195e4:	685b      	ldr	r3, [r3, #4]
 80195e6:	b10b      	cbz	r3, 80195ec <_free_r+0x50>
 80195e8:	42a3      	cmp	r3, r4
 80195ea:	d9fa      	bls.n	80195e2 <_free_r+0x46>
 80195ec:	6811      	ldr	r1, [r2, #0]
 80195ee:	1855      	adds	r5, r2, r1
 80195f0:	42a5      	cmp	r5, r4
 80195f2:	d10b      	bne.n	801960c <_free_r+0x70>
 80195f4:	6824      	ldr	r4, [r4, #0]
 80195f6:	4421      	add	r1, r4
 80195f8:	1854      	adds	r4, r2, r1
 80195fa:	42a3      	cmp	r3, r4
 80195fc:	6011      	str	r1, [r2, #0]
 80195fe:	d1e0      	bne.n	80195c2 <_free_r+0x26>
 8019600:	681c      	ldr	r4, [r3, #0]
 8019602:	685b      	ldr	r3, [r3, #4]
 8019604:	6053      	str	r3, [r2, #4]
 8019606:	4421      	add	r1, r4
 8019608:	6011      	str	r1, [r2, #0]
 801960a:	e7da      	b.n	80195c2 <_free_r+0x26>
 801960c:	d902      	bls.n	8019614 <_free_r+0x78>
 801960e:	230c      	movs	r3, #12
 8019610:	6003      	str	r3, [r0, #0]
 8019612:	e7d6      	b.n	80195c2 <_free_r+0x26>
 8019614:	6825      	ldr	r5, [r4, #0]
 8019616:	1961      	adds	r1, r4, r5
 8019618:	428b      	cmp	r3, r1
 801961a:	bf04      	itt	eq
 801961c:	6819      	ldreq	r1, [r3, #0]
 801961e:	685b      	ldreq	r3, [r3, #4]
 8019620:	6063      	str	r3, [r4, #4]
 8019622:	bf04      	itt	eq
 8019624:	1949      	addeq	r1, r1, r5
 8019626:	6021      	streq	r1, [r4, #0]
 8019628:	6054      	str	r4, [r2, #4]
 801962a:	e7ca      	b.n	80195c2 <_free_r+0x26>
 801962c:	b003      	add	sp, #12
 801962e:	bd30      	pop	{r4, r5, pc}
 8019630:	20011724 	.word	0x20011724

08019634 <__ssputs_r>:
 8019634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019638:	688e      	ldr	r6, [r1, #8]
 801963a:	429e      	cmp	r6, r3
 801963c:	4682      	mov	sl, r0
 801963e:	460c      	mov	r4, r1
 8019640:	4690      	mov	r8, r2
 8019642:	461f      	mov	r7, r3
 8019644:	d838      	bhi.n	80196b8 <__ssputs_r+0x84>
 8019646:	898a      	ldrh	r2, [r1, #12]
 8019648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801964c:	d032      	beq.n	80196b4 <__ssputs_r+0x80>
 801964e:	6825      	ldr	r5, [r4, #0]
 8019650:	6909      	ldr	r1, [r1, #16]
 8019652:	eba5 0901 	sub.w	r9, r5, r1
 8019656:	6965      	ldr	r5, [r4, #20]
 8019658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801965c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019660:	3301      	adds	r3, #1
 8019662:	444b      	add	r3, r9
 8019664:	106d      	asrs	r5, r5, #1
 8019666:	429d      	cmp	r5, r3
 8019668:	bf38      	it	cc
 801966a:	461d      	movcc	r5, r3
 801966c:	0553      	lsls	r3, r2, #21
 801966e:	d531      	bpl.n	80196d4 <__ssputs_r+0xa0>
 8019670:	4629      	mov	r1, r5
 8019672:	f7ff fbeb 	bl	8018e4c <_malloc_r>
 8019676:	4606      	mov	r6, r0
 8019678:	b950      	cbnz	r0, 8019690 <__ssputs_r+0x5c>
 801967a:	230c      	movs	r3, #12
 801967c:	f8ca 3000 	str.w	r3, [sl]
 8019680:	89a3      	ldrh	r3, [r4, #12]
 8019682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019686:	81a3      	strh	r3, [r4, #12]
 8019688:	f04f 30ff 	mov.w	r0, #4294967295
 801968c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019690:	6921      	ldr	r1, [r4, #16]
 8019692:	464a      	mov	r2, r9
 8019694:	f7ff fb89 	bl	8018daa <memcpy>
 8019698:	89a3      	ldrh	r3, [r4, #12]
 801969a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801969e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80196a2:	81a3      	strh	r3, [r4, #12]
 80196a4:	6126      	str	r6, [r4, #16]
 80196a6:	6165      	str	r5, [r4, #20]
 80196a8:	444e      	add	r6, r9
 80196aa:	eba5 0509 	sub.w	r5, r5, r9
 80196ae:	6026      	str	r6, [r4, #0]
 80196b0:	60a5      	str	r5, [r4, #8]
 80196b2:	463e      	mov	r6, r7
 80196b4:	42be      	cmp	r6, r7
 80196b6:	d900      	bls.n	80196ba <__ssputs_r+0x86>
 80196b8:	463e      	mov	r6, r7
 80196ba:	6820      	ldr	r0, [r4, #0]
 80196bc:	4632      	mov	r2, r6
 80196be:	4641      	mov	r1, r8
 80196c0:	f7ff fb81 	bl	8018dc6 <memmove>
 80196c4:	68a3      	ldr	r3, [r4, #8]
 80196c6:	1b9b      	subs	r3, r3, r6
 80196c8:	60a3      	str	r3, [r4, #8]
 80196ca:	6823      	ldr	r3, [r4, #0]
 80196cc:	4433      	add	r3, r6
 80196ce:	6023      	str	r3, [r4, #0]
 80196d0:	2000      	movs	r0, #0
 80196d2:	e7db      	b.n	801968c <__ssputs_r+0x58>
 80196d4:	462a      	mov	r2, r5
 80196d6:	f000 fd35 	bl	801a144 <_realloc_r>
 80196da:	4606      	mov	r6, r0
 80196dc:	2800      	cmp	r0, #0
 80196de:	d1e1      	bne.n	80196a4 <__ssputs_r+0x70>
 80196e0:	6921      	ldr	r1, [r4, #16]
 80196e2:	4650      	mov	r0, sl
 80196e4:	f7ff ff5a 	bl	801959c <_free_r>
 80196e8:	e7c7      	b.n	801967a <__ssputs_r+0x46>
	...

080196ec <_svfiprintf_r>:
 80196ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196f0:	4698      	mov	r8, r3
 80196f2:	898b      	ldrh	r3, [r1, #12]
 80196f4:	061b      	lsls	r3, r3, #24
 80196f6:	b09d      	sub	sp, #116	; 0x74
 80196f8:	4607      	mov	r7, r0
 80196fa:	460d      	mov	r5, r1
 80196fc:	4614      	mov	r4, r2
 80196fe:	d50e      	bpl.n	801971e <_svfiprintf_r+0x32>
 8019700:	690b      	ldr	r3, [r1, #16]
 8019702:	b963      	cbnz	r3, 801971e <_svfiprintf_r+0x32>
 8019704:	2140      	movs	r1, #64	; 0x40
 8019706:	f7ff fba1 	bl	8018e4c <_malloc_r>
 801970a:	6028      	str	r0, [r5, #0]
 801970c:	6128      	str	r0, [r5, #16]
 801970e:	b920      	cbnz	r0, 801971a <_svfiprintf_r+0x2e>
 8019710:	230c      	movs	r3, #12
 8019712:	603b      	str	r3, [r7, #0]
 8019714:	f04f 30ff 	mov.w	r0, #4294967295
 8019718:	e0d1      	b.n	80198be <_svfiprintf_r+0x1d2>
 801971a:	2340      	movs	r3, #64	; 0x40
 801971c:	616b      	str	r3, [r5, #20]
 801971e:	2300      	movs	r3, #0
 8019720:	9309      	str	r3, [sp, #36]	; 0x24
 8019722:	2320      	movs	r3, #32
 8019724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019728:	f8cd 800c 	str.w	r8, [sp, #12]
 801972c:	2330      	movs	r3, #48	; 0x30
 801972e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80198d8 <_svfiprintf_r+0x1ec>
 8019732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019736:	f04f 0901 	mov.w	r9, #1
 801973a:	4623      	mov	r3, r4
 801973c:	469a      	mov	sl, r3
 801973e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019742:	b10a      	cbz	r2, 8019748 <_svfiprintf_r+0x5c>
 8019744:	2a25      	cmp	r2, #37	; 0x25
 8019746:	d1f9      	bne.n	801973c <_svfiprintf_r+0x50>
 8019748:	ebba 0b04 	subs.w	fp, sl, r4
 801974c:	d00b      	beq.n	8019766 <_svfiprintf_r+0x7a>
 801974e:	465b      	mov	r3, fp
 8019750:	4622      	mov	r2, r4
 8019752:	4629      	mov	r1, r5
 8019754:	4638      	mov	r0, r7
 8019756:	f7ff ff6d 	bl	8019634 <__ssputs_r>
 801975a:	3001      	adds	r0, #1
 801975c:	f000 80aa 	beq.w	80198b4 <_svfiprintf_r+0x1c8>
 8019760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019762:	445a      	add	r2, fp
 8019764:	9209      	str	r2, [sp, #36]	; 0x24
 8019766:	f89a 3000 	ldrb.w	r3, [sl]
 801976a:	2b00      	cmp	r3, #0
 801976c:	f000 80a2 	beq.w	80198b4 <_svfiprintf_r+0x1c8>
 8019770:	2300      	movs	r3, #0
 8019772:	f04f 32ff 	mov.w	r2, #4294967295
 8019776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801977a:	f10a 0a01 	add.w	sl, sl, #1
 801977e:	9304      	str	r3, [sp, #16]
 8019780:	9307      	str	r3, [sp, #28]
 8019782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019786:	931a      	str	r3, [sp, #104]	; 0x68
 8019788:	4654      	mov	r4, sl
 801978a:	2205      	movs	r2, #5
 801978c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019790:	4851      	ldr	r0, [pc, #324]	; (80198d8 <_svfiprintf_r+0x1ec>)
 8019792:	f7e6 fd45 	bl	8000220 <memchr>
 8019796:	9a04      	ldr	r2, [sp, #16]
 8019798:	b9d8      	cbnz	r0, 80197d2 <_svfiprintf_r+0xe6>
 801979a:	06d0      	lsls	r0, r2, #27
 801979c:	bf44      	itt	mi
 801979e:	2320      	movmi	r3, #32
 80197a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80197a4:	0711      	lsls	r1, r2, #28
 80197a6:	bf44      	itt	mi
 80197a8:	232b      	movmi	r3, #43	; 0x2b
 80197aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80197ae:	f89a 3000 	ldrb.w	r3, [sl]
 80197b2:	2b2a      	cmp	r3, #42	; 0x2a
 80197b4:	d015      	beq.n	80197e2 <_svfiprintf_r+0xf6>
 80197b6:	9a07      	ldr	r2, [sp, #28]
 80197b8:	4654      	mov	r4, sl
 80197ba:	2000      	movs	r0, #0
 80197bc:	f04f 0c0a 	mov.w	ip, #10
 80197c0:	4621      	mov	r1, r4
 80197c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80197c6:	3b30      	subs	r3, #48	; 0x30
 80197c8:	2b09      	cmp	r3, #9
 80197ca:	d94e      	bls.n	801986a <_svfiprintf_r+0x17e>
 80197cc:	b1b0      	cbz	r0, 80197fc <_svfiprintf_r+0x110>
 80197ce:	9207      	str	r2, [sp, #28]
 80197d0:	e014      	b.n	80197fc <_svfiprintf_r+0x110>
 80197d2:	eba0 0308 	sub.w	r3, r0, r8
 80197d6:	fa09 f303 	lsl.w	r3, r9, r3
 80197da:	4313      	orrs	r3, r2
 80197dc:	9304      	str	r3, [sp, #16]
 80197de:	46a2      	mov	sl, r4
 80197e0:	e7d2      	b.n	8019788 <_svfiprintf_r+0x9c>
 80197e2:	9b03      	ldr	r3, [sp, #12]
 80197e4:	1d19      	adds	r1, r3, #4
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	9103      	str	r1, [sp, #12]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	bfbb      	ittet	lt
 80197ee:	425b      	neglt	r3, r3
 80197f0:	f042 0202 	orrlt.w	r2, r2, #2
 80197f4:	9307      	strge	r3, [sp, #28]
 80197f6:	9307      	strlt	r3, [sp, #28]
 80197f8:	bfb8      	it	lt
 80197fa:	9204      	strlt	r2, [sp, #16]
 80197fc:	7823      	ldrb	r3, [r4, #0]
 80197fe:	2b2e      	cmp	r3, #46	; 0x2e
 8019800:	d10c      	bne.n	801981c <_svfiprintf_r+0x130>
 8019802:	7863      	ldrb	r3, [r4, #1]
 8019804:	2b2a      	cmp	r3, #42	; 0x2a
 8019806:	d135      	bne.n	8019874 <_svfiprintf_r+0x188>
 8019808:	9b03      	ldr	r3, [sp, #12]
 801980a:	1d1a      	adds	r2, r3, #4
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	9203      	str	r2, [sp, #12]
 8019810:	2b00      	cmp	r3, #0
 8019812:	bfb8      	it	lt
 8019814:	f04f 33ff 	movlt.w	r3, #4294967295
 8019818:	3402      	adds	r4, #2
 801981a:	9305      	str	r3, [sp, #20]
 801981c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80198e8 <_svfiprintf_r+0x1fc>
 8019820:	7821      	ldrb	r1, [r4, #0]
 8019822:	2203      	movs	r2, #3
 8019824:	4650      	mov	r0, sl
 8019826:	f7e6 fcfb 	bl	8000220 <memchr>
 801982a:	b140      	cbz	r0, 801983e <_svfiprintf_r+0x152>
 801982c:	2340      	movs	r3, #64	; 0x40
 801982e:	eba0 000a 	sub.w	r0, r0, sl
 8019832:	fa03 f000 	lsl.w	r0, r3, r0
 8019836:	9b04      	ldr	r3, [sp, #16]
 8019838:	4303      	orrs	r3, r0
 801983a:	3401      	adds	r4, #1
 801983c:	9304      	str	r3, [sp, #16]
 801983e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019842:	4826      	ldr	r0, [pc, #152]	; (80198dc <_svfiprintf_r+0x1f0>)
 8019844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019848:	2206      	movs	r2, #6
 801984a:	f7e6 fce9 	bl	8000220 <memchr>
 801984e:	2800      	cmp	r0, #0
 8019850:	d038      	beq.n	80198c4 <_svfiprintf_r+0x1d8>
 8019852:	4b23      	ldr	r3, [pc, #140]	; (80198e0 <_svfiprintf_r+0x1f4>)
 8019854:	bb1b      	cbnz	r3, 801989e <_svfiprintf_r+0x1b2>
 8019856:	9b03      	ldr	r3, [sp, #12]
 8019858:	3307      	adds	r3, #7
 801985a:	f023 0307 	bic.w	r3, r3, #7
 801985e:	3308      	adds	r3, #8
 8019860:	9303      	str	r3, [sp, #12]
 8019862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019864:	4433      	add	r3, r6
 8019866:	9309      	str	r3, [sp, #36]	; 0x24
 8019868:	e767      	b.n	801973a <_svfiprintf_r+0x4e>
 801986a:	fb0c 3202 	mla	r2, ip, r2, r3
 801986e:	460c      	mov	r4, r1
 8019870:	2001      	movs	r0, #1
 8019872:	e7a5      	b.n	80197c0 <_svfiprintf_r+0xd4>
 8019874:	2300      	movs	r3, #0
 8019876:	3401      	adds	r4, #1
 8019878:	9305      	str	r3, [sp, #20]
 801987a:	4619      	mov	r1, r3
 801987c:	f04f 0c0a 	mov.w	ip, #10
 8019880:	4620      	mov	r0, r4
 8019882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019886:	3a30      	subs	r2, #48	; 0x30
 8019888:	2a09      	cmp	r2, #9
 801988a:	d903      	bls.n	8019894 <_svfiprintf_r+0x1a8>
 801988c:	2b00      	cmp	r3, #0
 801988e:	d0c5      	beq.n	801981c <_svfiprintf_r+0x130>
 8019890:	9105      	str	r1, [sp, #20]
 8019892:	e7c3      	b.n	801981c <_svfiprintf_r+0x130>
 8019894:	fb0c 2101 	mla	r1, ip, r1, r2
 8019898:	4604      	mov	r4, r0
 801989a:	2301      	movs	r3, #1
 801989c:	e7f0      	b.n	8019880 <_svfiprintf_r+0x194>
 801989e:	ab03      	add	r3, sp, #12
 80198a0:	9300      	str	r3, [sp, #0]
 80198a2:	462a      	mov	r2, r5
 80198a4:	4b0f      	ldr	r3, [pc, #60]	; (80198e4 <_svfiprintf_r+0x1f8>)
 80198a6:	a904      	add	r1, sp, #16
 80198a8:	4638      	mov	r0, r7
 80198aa:	f3af 8000 	nop.w
 80198ae:	1c42      	adds	r2, r0, #1
 80198b0:	4606      	mov	r6, r0
 80198b2:	d1d6      	bne.n	8019862 <_svfiprintf_r+0x176>
 80198b4:	89ab      	ldrh	r3, [r5, #12]
 80198b6:	065b      	lsls	r3, r3, #25
 80198b8:	f53f af2c 	bmi.w	8019714 <_svfiprintf_r+0x28>
 80198bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80198be:	b01d      	add	sp, #116	; 0x74
 80198c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198c4:	ab03      	add	r3, sp, #12
 80198c6:	9300      	str	r3, [sp, #0]
 80198c8:	462a      	mov	r2, r5
 80198ca:	4b06      	ldr	r3, [pc, #24]	; (80198e4 <_svfiprintf_r+0x1f8>)
 80198cc:	a904      	add	r1, sp, #16
 80198ce:	4638      	mov	r0, r7
 80198d0:	f000 f9d4 	bl	8019c7c <_printf_i>
 80198d4:	e7eb      	b.n	80198ae <_svfiprintf_r+0x1c2>
 80198d6:	bf00      	nop
 80198d8:	08028417 	.word	0x08028417
 80198dc:	08028421 	.word	0x08028421
 80198e0:	00000000 	.word	0x00000000
 80198e4:	08019635 	.word	0x08019635
 80198e8:	0802841d 	.word	0x0802841d

080198ec <__sfputc_r>:
 80198ec:	6893      	ldr	r3, [r2, #8]
 80198ee:	3b01      	subs	r3, #1
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	b410      	push	{r4}
 80198f4:	6093      	str	r3, [r2, #8]
 80198f6:	da08      	bge.n	801990a <__sfputc_r+0x1e>
 80198f8:	6994      	ldr	r4, [r2, #24]
 80198fa:	42a3      	cmp	r3, r4
 80198fc:	db01      	blt.n	8019902 <__sfputc_r+0x16>
 80198fe:	290a      	cmp	r1, #10
 8019900:	d103      	bne.n	801990a <__sfputc_r+0x1e>
 8019902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019906:	f000 baf1 	b.w	8019eec <__swbuf_r>
 801990a:	6813      	ldr	r3, [r2, #0]
 801990c:	1c58      	adds	r0, r3, #1
 801990e:	6010      	str	r0, [r2, #0]
 8019910:	7019      	strb	r1, [r3, #0]
 8019912:	4608      	mov	r0, r1
 8019914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019918:	4770      	bx	lr

0801991a <__sfputs_r>:
 801991a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801991c:	4606      	mov	r6, r0
 801991e:	460f      	mov	r7, r1
 8019920:	4614      	mov	r4, r2
 8019922:	18d5      	adds	r5, r2, r3
 8019924:	42ac      	cmp	r4, r5
 8019926:	d101      	bne.n	801992c <__sfputs_r+0x12>
 8019928:	2000      	movs	r0, #0
 801992a:	e007      	b.n	801993c <__sfputs_r+0x22>
 801992c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019930:	463a      	mov	r2, r7
 8019932:	4630      	mov	r0, r6
 8019934:	f7ff ffda 	bl	80198ec <__sfputc_r>
 8019938:	1c43      	adds	r3, r0, #1
 801993a:	d1f3      	bne.n	8019924 <__sfputs_r+0xa>
 801993c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019940 <_vfiprintf_r>:
 8019940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019944:	460d      	mov	r5, r1
 8019946:	b09d      	sub	sp, #116	; 0x74
 8019948:	4614      	mov	r4, r2
 801994a:	4698      	mov	r8, r3
 801994c:	4606      	mov	r6, r0
 801994e:	b118      	cbz	r0, 8019958 <_vfiprintf_r+0x18>
 8019950:	6983      	ldr	r3, [r0, #24]
 8019952:	b90b      	cbnz	r3, 8019958 <_vfiprintf_r+0x18>
 8019954:	f7ff f954 	bl	8018c00 <__sinit>
 8019958:	4b89      	ldr	r3, [pc, #548]	; (8019b80 <_vfiprintf_r+0x240>)
 801995a:	429d      	cmp	r5, r3
 801995c:	d11b      	bne.n	8019996 <_vfiprintf_r+0x56>
 801995e:	6875      	ldr	r5, [r6, #4]
 8019960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019962:	07d9      	lsls	r1, r3, #31
 8019964:	d405      	bmi.n	8019972 <_vfiprintf_r+0x32>
 8019966:	89ab      	ldrh	r3, [r5, #12]
 8019968:	059a      	lsls	r2, r3, #22
 801996a:	d402      	bmi.n	8019972 <_vfiprintf_r+0x32>
 801996c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801996e:	f7ff fa0a 	bl	8018d86 <__retarget_lock_acquire_recursive>
 8019972:	89ab      	ldrh	r3, [r5, #12]
 8019974:	071b      	lsls	r3, r3, #28
 8019976:	d501      	bpl.n	801997c <_vfiprintf_r+0x3c>
 8019978:	692b      	ldr	r3, [r5, #16]
 801997a:	b9eb      	cbnz	r3, 80199b8 <_vfiprintf_r+0x78>
 801997c:	4629      	mov	r1, r5
 801997e:	4630      	mov	r0, r6
 8019980:	f000 fb06 	bl	8019f90 <__swsetup_r>
 8019984:	b1c0      	cbz	r0, 80199b8 <_vfiprintf_r+0x78>
 8019986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019988:	07dc      	lsls	r4, r3, #31
 801998a:	d50e      	bpl.n	80199aa <_vfiprintf_r+0x6a>
 801998c:	f04f 30ff 	mov.w	r0, #4294967295
 8019990:	b01d      	add	sp, #116	; 0x74
 8019992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019996:	4b7b      	ldr	r3, [pc, #492]	; (8019b84 <_vfiprintf_r+0x244>)
 8019998:	429d      	cmp	r5, r3
 801999a:	d101      	bne.n	80199a0 <_vfiprintf_r+0x60>
 801999c:	68b5      	ldr	r5, [r6, #8]
 801999e:	e7df      	b.n	8019960 <_vfiprintf_r+0x20>
 80199a0:	4b79      	ldr	r3, [pc, #484]	; (8019b88 <_vfiprintf_r+0x248>)
 80199a2:	429d      	cmp	r5, r3
 80199a4:	bf08      	it	eq
 80199a6:	68f5      	ldreq	r5, [r6, #12]
 80199a8:	e7da      	b.n	8019960 <_vfiprintf_r+0x20>
 80199aa:	89ab      	ldrh	r3, [r5, #12]
 80199ac:	0598      	lsls	r0, r3, #22
 80199ae:	d4ed      	bmi.n	801998c <_vfiprintf_r+0x4c>
 80199b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80199b2:	f7ff f9e9 	bl	8018d88 <__retarget_lock_release_recursive>
 80199b6:	e7e9      	b.n	801998c <_vfiprintf_r+0x4c>
 80199b8:	2300      	movs	r3, #0
 80199ba:	9309      	str	r3, [sp, #36]	; 0x24
 80199bc:	2320      	movs	r3, #32
 80199be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80199c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80199c6:	2330      	movs	r3, #48	; 0x30
 80199c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019b8c <_vfiprintf_r+0x24c>
 80199cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80199d0:	f04f 0901 	mov.w	r9, #1
 80199d4:	4623      	mov	r3, r4
 80199d6:	469a      	mov	sl, r3
 80199d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80199dc:	b10a      	cbz	r2, 80199e2 <_vfiprintf_r+0xa2>
 80199de:	2a25      	cmp	r2, #37	; 0x25
 80199e0:	d1f9      	bne.n	80199d6 <_vfiprintf_r+0x96>
 80199e2:	ebba 0b04 	subs.w	fp, sl, r4
 80199e6:	d00b      	beq.n	8019a00 <_vfiprintf_r+0xc0>
 80199e8:	465b      	mov	r3, fp
 80199ea:	4622      	mov	r2, r4
 80199ec:	4629      	mov	r1, r5
 80199ee:	4630      	mov	r0, r6
 80199f0:	f7ff ff93 	bl	801991a <__sfputs_r>
 80199f4:	3001      	adds	r0, #1
 80199f6:	f000 80aa 	beq.w	8019b4e <_vfiprintf_r+0x20e>
 80199fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80199fc:	445a      	add	r2, fp
 80199fe:	9209      	str	r2, [sp, #36]	; 0x24
 8019a00:	f89a 3000 	ldrb.w	r3, [sl]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	f000 80a2 	beq.w	8019b4e <_vfiprintf_r+0x20e>
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8019a10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019a14:	f10a 0a01 	add.w	sl, sl, #1
 8019a18:	9304      	str	r3, [sp, #16]
 8019a1a:	9307      	str	r3, [sp, #28]
 8019a1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019a20:	931a      	str	r3, [sp, #104]	; 0x68
 8019a22:	4654      	mov	r4, sl
 8019a24:	2205      	movs	r2, #5
 8019a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a2a:	4858      	ldr	r0, [pc, #352]	; (8019b8c <_vfiprintf_r+0x24c>)
 8019a2c:	f7e6 fbf8 	bl	8000220 <memchr>
 8019a30:	9a04      	ldr	r2, [sp, #16]
 8019a32:	b9d8      	cbnz	r0, 8019a6c <_vfiprintf_r+0x12c>
 8019a34:	06d1      	lsls	r1, r2, #27
 8019a36:	bf44      	itt	mi
 8019a38:	2320      	movmi	r3, #32
 8019a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019a3e:	0713      	lsls	r3, r2, #28
 8019a40:	bf44      	itt	mi
 8019a42:	232b      	movmi	r3, #43	; 0x2b
 8019a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019a48:	f89a 3000 	ldrb.w	r3, [sl]
 8019a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8019a4e:	d015      	beq.n	8019a7c <_vfiprintf_r+0x13c>
 8019a50:	9a07      	ldr	r2, [sp, #28]
 8019a52:	4654      	mov	r4, sl
 8019a54:	2000      	movs	r0, #0
 8019a56:	f04f 0c0a 	mov.w	ip, #10
 8019a5a:	4621      	mov	r1, r4
 8019a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019a60:	3b30      	subs	r3, #48	; 0x30
 8019a62:	2b09      	cmp	r3, #9
 8019a64:	d94e      	bls.n	8019b04 <_vfiprintf_r+0x1c4>
 8019a66:	b1b0      	cbz	r0, 8019a96 <_vfiprintf_r+0x156>
 8019a68:	9207      	str	r2, [sp, #28]
 8019a6a:	e014      	b.n	8019a96 <_vfiprintf_r+0x156>
 8019a6c:	eba0 0308 	sub.w	r3, r0, r8
 8019a70:	fa09 f303 	lsl.w	r3, r9, r3
 8019a74:	4313      	orrs	r3, r2
 8019a76:	9304      	str	r3, [sp, #16]
 8019a78:	46a2      	mov	sl, r4
 8019a7a:	e7d2      	b.n	8019a22 <_vfiprintf_r+0xe2>
 8019a7c:	9b03      	ldr	r3, [sp, #12]
 8019a7e:	1d19      	adds	r1, r3, #4
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	9103      	str	r1, [sp, #12]
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	bfbb      	ittet	lt
 8019a88:	425b      	neglt	r3, r3
 8019a8a:	f042 0202 	orrlt.w	r2, r2, #2
 8019a8e:	9307      	strge	r3, [sp, #28]
 8019a90:	9307      	strlt	r3, [sp, #28]
 8019a92:	bfb8      	it	lt
 8019a94:	9204      	strlt	r2, [sp, #16]
 8019a96:	7823      	ldrb	r3, [r4, #0]
 8019a98:	2b2e      	cmp	r3, #46	; 0x2e
 8019a9a:	d10c      	bne.n	8019ab6 <_vfiprintf_r+0x176>
 8019a9c:	7863      	ldrb	r3, [r4, #1]
 8019a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8019aa0:	d135      	bne.n	8019b0e <_vfiprintf_r+0x1ce>
 8019aa2:	9b03      	ldr	r3, [sp, #12]
 8019aa4:	1d1a      	adds	r2, r3, #4
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	9203      	str	r2, [sp, #12]
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	bfb8      	it	lt
 8019aae:	f04f 33ff 	movlt.w	r3, #4294967295
 8019ab2:	3402      	adds	r4, #2
 8019ab4:	9305      	str	r3, [sp, #20]
 8019ab6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019b9c <_vfiprintf_r+0x25c>
 8019aba:	7821      	ldrb	r1, [r4, #0]
 8019abc:	2203      	movs	r2, #3
 8019abe:	4650      	mov	r0, sl
 8019ac0:	f7e6 fbae 	bl	8000220 <memchr>
 8019ac4:	b140      	cbz	r0, 8019ad8 <_vfiprintf_r+0x198>
 8019ac6:	2340      	movs	r3, #64	; 0x40
 8019ac8:	eba0 000a 	sub.w	r0, r0, sl
 8019acc:	fa03 f000 	lsl.w	r0, r3, r0
 8019ad0:	9b04      	ldr	r3, [sp, #16]
 8019ad2:	4303      	orrs	r3, r0
 8019ad4:	3401      	adds	r4, #1
 8019ad6:	9304      	str	r3, [sp, #16]
 8019ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019adc:	482c      	ldr	r0, [pc, #176]	; (8019b90 <_vfiprintf_r+0x250>)
 8019ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019ae2:	2206      	movs	r2, #6
 8019ae4:	f7e6 fb9c 	bl	8000220 <memchr>
 8019ae8:	2800      	cmp	r0, #0
 8019aea:	d03f      	beq.n	8019b6c <_vfiprintf_r+0x22c>
 8019aec:	4b29      	ldr	r3, [pc, #164]	; (8019b94 <_vfiprintf_r+0x254>)
 8019aee:	bb1b      	cbnz	r3, 8019b38 <_vfiprintf_r+0x1f8>
 8019af0:	9b03      	ldr	r3, [sp, #12]
 8019af2:	3307      	adds	r3, #7
 8019af4:	f023 0307 	bic.w	r3, r3, #7
 8019af8:	3308      	adds	r3, #8
 8019afa:	9303      	str	r3, [sp, #12]
 8019afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019afe:	443b      	add	r3, r7
 8019b00:	9309      	str	r3, [sp, #36]	; 0x24
 8019b02:	e767      	b.n	80199d4 <_vfiprintf_r+0x94>
 8019b04:	fb0c 3202 	mla	r2, ip, r2, r3
 8019b08:	460c      	mov	r4, r1
 8019b0a:	2001      	movs	r0, #1
 8019b0c:	e7a5      	b.n	8019a5a <_vfiprintf_r+0x11a>
 8019b0e:	2300      	movs	r3, #0
 8019b10:	3401      	adds	r4, #1
 8019b12:	9305      	str	r3, [sp, #20]
 8019b14:	4619      	mov	r1, r3
 8019b16:	f04f 0c0a 	mov.w	ip, #10
 8019b1a:	4620      	mov	r0, r4
 8019b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b20:	3a30      	subs	r2, #48	; 0x30
 8019b22:	2a09      	cmp	r2, #9
 8019b24:	d903      	bls.n	8019b2e <_vfiprintf_r+0x1ee>
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d0c5      	beq.n	8019ab6 <_vfiprintf_r+0x176>
 8019b2a:	9105      	str	r1, [sp, #20]
 8019b2c:	e7c3      	b.n	8019ab6 <_vfiprintf_r+0x176>
 8019b2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019b32:	4604      	mov	r4, r0
 8019b34:	2301      	movs	r3, #1
 8019b36:	e7f0      	b.n	8019b1a <_vfiprintf_r+0x1da>
 8019b38:	ab03      	add	r3, sp, #12
 8019b3a:	9300      	str	r3, [sp, #0]
 8019b3c:	462a      	mov	r2, r5
 8019b3e:	4b16      	ldr	r3, [pc, #88]	; (8019b98 <_vfiprintf_r+0x258>)
 8019b40:	a904      	add	r1, sp, #16
 8019b42:	4630      	mov	r0, r6
 8019b44:	f3af 8000 	nop.w
 8019b48:	4607      	mov	r7, r0
 8019b4a:	1c78      	adds	r0, r7, #1
 8019b4c:	d1d6      	bne.n	8019afc <_vfiprintf_r+0x1bc>
 8019b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019b50:	07d9      	lsls	r1, r3, #31
 8019b52:	d405      	bmi.n	8019b60 <_vfiprintf_r+0x220>
 8019b54:	89ab      	ldrh	r3, [r5, #12]
 8019b56:	059a      	lsls	r2, r3, #22
 8019b58:	d402      	bmi.n	8019b60 <_vfiprintf_r+0x220>
 8019b5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019b5c:	f7ff f914 	bl	8018d88 <__retarget_lock_release_recursive>
 8019b60:	89ab      	ldrh	r3, [r5, #12]
 8019b62:	065b      	lsls	r3, r3, #25
 8019b64:	f53f af12 	bmi.w	801998c <_vfiprintf_r+0x4c>
 8019b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019b6a:	e711      	b.n	8019990 <_vfiprintf_r+0x50>
 8019b6c:	ab03      	add	r3, sp, #12
 8019b6e:	9300      	str	r3, [sp, #0]
 8019b70:	462a      	mov	r2, r5
 8019b72:	4b09      	ldr	r3, [pc, #36]	; (8019b98 <_vfiprintf_r+0x258>)
 8019b74:	a904      	add	r1, sp, #16
 8019b76:	4630      	mov	r0, r6
 8019b78:	f000 f880 	bl	8019c7c <_printf_i>
 8019b7c:	e7e4      	b.n	8019b48 <_vfiprintf_r+0x208>
 8019b7e:	bf00      	nop
 8019b80:	080282c8 	.word	0x080282c8
 8019b84:	080282e8 	.word	0x080282e8
 8019b88:	080282a8 	.word	0x080282a8
 8019b8c:	08028417 	.word	0x08028417
 8019b90:	08028421 	.word	0x08028421
 8019b94:	00000000 	.word	0x00000000
 8019b98:	0801991b 	.word	0x0801991b
 8019b9c:	0802841d 	.word	0x0802841d

08019ba0 <_printf_common>:
 8019ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ba4:	4616      	mov	r6, r2
 8019ba6:	4699      	mov	r9, r3
 8019ba8:	688a      	ldr	r2, [r1, #8]
 8019baa:	690b      	ldr	r3, [r1, #16]
 8019bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019bb0:	4293      	cmp	r3, r2
 8019bb2:	bfb8      	it	lt
 8019bb4:	4613      	movlt	r3, r2
 8019bb6:	6033      	str	r3, [r6, #0]
 8019bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019bbc:	4607      	mov	r7, r0
 8019bbe:	460c      	mov	r4, r1
 8019bc0:	b10a      	cbz	r2, 8019bc6 <_printf_common+0x26>
 8019bc2:	3301      	adds	r3, #1
 8019bc4:	6033      	str	r3, [r6, #0]
 8019bc6:	6823      	ldr	r3, [r4, #0]
 8019bc8:	0699      	lsls	r1, r3, #26
 8019bca:	bf42      	ittt	mi
 8019bcc:	6833      	ldrmi	r3, [r6, #0]
 8019bce:	3302      	addmi	r3, #2
 8019bd0:	6033      	strmi	r3, [r6, #0]
 8019bd2:	6825      	ldr	r5, [r4, #0]
 8019bd4:	f015 0506 	ands.w	r5, r5, #6
 8019bd8:	d106      	bne.n	8019be8 <_printf_common+0x48>
 8019bda:	f104 0a19 	add.w	sl, r4, #25
 8019bde:	68e3      	ldr	r3, [r4, #12]
 8019be0:	6832      	ldr	r2, [r6, #0]
 8019be2:	1a9b      	subs	r3, r3, r2
 8019be4:	42ab      	cmp	r3, r5
 8019be6:	dc26      	bgt.n	8019c36 <_printf_common+0x96>
 8019be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019bec:	1e13      	subs	r3, r2, #0
 8019bee:	6822      	ldr	r2, [r4, #0]
 8019bf0:	bf18      	it	ne
 8019bf2:	2301      	movne	r3, #1
 8019bf4:	0692      	lsls	r2, r2, #26
 8019bf6:	d42b      	bmi.n	8019c50 <_printf_common+0xb0>
 8019bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019bfc:	4649      	mov	r1, r9
 8019bfe:	4638      	mov	r0, r7
 8019c00:	47c0      	blx	r8
 8019c02:	3001      	adds	r0, #1
 8019c04:	d01e      	beq.n	8019c44 <_printf_common+0xa4>
 8019c06:	6823      	ldr	r3, [r4, #0]
 8019c08:	68e5      	ldr	r5, [r4, #12]
 8019c0a:	6832      	ldr	r2, [r6, #0]
 8019c0c:	f003 0306 	and.w	r3, r3, #6
 8019c10:	2b04      	cmp	r3, #4
 8019c12:	bf08      	it	eq
 8019c14:	1aad      	subeq	r5, r5, r2
 8019c16:	68a3      	ldr	r3, [r4, #8]
 8019c18:	6922      	ldr	r2, [r4, #16]
 8019c1a:	bf0c      	ite	eq
 8019c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019c20:	2500      	movne	r5, #0
 8019c22:	4293      	cmp	r3, r2
 8019c24:	bfc4      	itt	gt
 8019c26:	1a9b      	subgt	r3, r3, r2
 8019c28:	18ed      	addgt	r5, r5, r3
 8019c2a:	2600      	movs	r6, #0
 8019c2c:	341a      	adds	r4, #26
 8019c2e:	42b5      	cmp	r5, r6
 8019c30:	d11a      	bne.n	8019c68 <_printf_common+0xc8>
 8019c32:	2000      	movs	r0, #0
 8019c34:	e008      	b.n	8019c48 <_printf_common+0xa8>
 8019c36:	2301      	movs	r3, #1
 8019c38:	4652      	mov	r2, sl
 8019c3a:	4649      	mov	r1, r9
 8019c3c:	4638      	mov	r0, r7
 8019c3e:	47c0      	blx	r8
 8019c40:	3001      	adds	r0, #1
 8019c42:	d103      	bne.n	8019c4c <_printf_common+0xac>
 8019c44:	f04f 30ff 	mov.w	r0, #4294967295
 8019c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c4c:	3501      	adds	r5, #1
 8019c4e:	e7c6      	b.n	8019bde <_printf_common+0x3e>
 8019c50:	18e1      	adds	r1, r4, r3
 8019c52:	1c5a      	adds	r2, r3, #1
 8019c54:	2030      	movs	r0, #48	; 0x30
 8019c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019c5a:	4422      	add	r2, r4
 8019c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019c64:	3302      	adds	r3, #2
 8019c66:	e7c7      	b.n	8019bf8 <_printf_common+0x58>
 8019c68:	2301      	movs	r3, #1
 8019c6a:	4622      	mov	r2, r4
 8019c6c:	4649      	mov	r1, r9
 8019c6e:	4638      	mov	r0, r7
 8019c70:	47c0      	blx	r8
 8019c72:	3001      	adds	r0, #1
 8019c74:	d0e6      	beq.n	8019c44 <_printf_common+0xa4>
 8019c76:	3601      	adds	r6, #1
 8019c78:	e7d9      	b.n	8019c2e <_printf_common+0x8e>
	...

08019c7c <_printf_i>:
 8019c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019c80:	7e0f      	ldrb	r7, [r1, #24]
 8019c82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019c84:	2f78      	cmp	r7, #120	; 0x78
 8019c86:	4691      	mov	r9, r2
 8019c88:	4680      	mov	r8, r0
 8019c8a:	460c      	mov	r4, r1
 8019c8c:	469a      	mov	sl, r3
 8019c8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019c92:	d807      	bhi.n	8019ca4 <_printf_i+0x28>
 8019c94:	2f62      	cmp	r7, #98	; 0x62
 8019c96:	d80a      	bhi.n	8019cae <_printf_i+0x32>
 8019c98:	2f00      	cmp	r7, #0
 8019c9a:	f000 80d8 	beq.w	8019e4e <_printf_i+0x1d2>
 8019c9e:	2f58      	cmp	r7, #88	; 0x58
 8019ca0:	f000 80a3 	beq.w	8019dea <_printf_i+0x16e>
 8019ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019cac:	e03a      	b.n	8019d24 <_printf_i+0xa8>
 8019cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019cb2:	2b15      	cmp	r3, #21
 8019cb4:	d8f6      	bhi.n	8019ca4 <_printf_i+0x28>
 8019cb6:	a101      	add	r1, pc, #4	; (adr r1, 8019cbc <_printf_i+0x40>)
 8019cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019cbc:	08019d15 	.word	0x08019d15
 8019cc0:	08019d29 	.word	0x08019d29
 8019cc4:	08019ca5 	.word	0x08019ca5
 8019cc8:	08019ca5 	.word	0x08019ca5
 8019ccc:	08019ca5 	.word	0x08019ca5
 8019cd0:	08019ca5 	.word	0x08019ca5
 8019cd4:	08019d29 	.word	0x08019d29
 8019cd8:	08019ca5 	.word	0x08019ca5
 8019cdc:	08019ca5 	.word	0x08019ca5
 8019ce0:	08019ca5 	.word	0x08019ca5
 8019ce4:	08019ca5 	.word	0x08019ca5
 8019ce8:	08019e35 	.word	0x08019e35
 8019cec:	08019d59 	.word	0x08019d59
 8019cf0:	08019e17 	.word	0x08019e17
 8019cf4:	08019ca5 	.word	0x08019ca5
 8019cf8:	08019ca5 	.word	0x08019ca5
 8019cfc:	08019e57 	.word	0x08019e57
 8019d00:	08019ca5 	.word	0x08019ca5
 8019d04:	08019d59 	.word	0x08019d59
 8019d08:	08019ca5 	.word	0x08019ca5
 8019d0c:	08019ca5 	.word	0x08019ca5
 8019d10:	08019e1f 	.word	0x08019e1f
 8019d14:	682b      	ldr	r3, [r5, #0]
 8019d16:	1d1a      	adds	r2, r3, #4
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	602a      	str	r2, [r5, #0]
 8019d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019d24:	2301      	movs	r3, #1
 8019d26:	e0a3      	b.n	8019e70 <_printf_i+0x1f4>
 8019d28:	6820      	ldr	r0, [r4, #0]
 8019d2a:	6829      	ldr	r1, [r5, #0]
 8019d2c:	0606      	lsls	r6, r0, #24
 8019d2e:	f101 0304 	add.w	r3, r1, #4
 8019d32:	d50a      	bpl.n	8019d4a <_printf_i+0xce>
 8019d34:	680e      	ldr	r6, [r1, #0]
 8019d36:	602b      	str	r3, [r5, #0]
 8019d38:	2e00      	cmp	r6, #0
 8019d3a:	da03      	bge.n	8019d44 <_printf_i+0xc8>
 8019d3c:	232d      	movs	r3, #45	; 0x2d
 8019d3e:	4276      	negs	r6, r6
 8019d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019d44:	485e      	ldr	r0, [pc, #376]	; (8019ec0 <_printf_i+0x244>)
 8019d46:	230a      	movs	r3, #10
 8019d48:	e019      	b.n	8019d7e <_printf_i+0x102>
 8019d4a:	680e      	ldr	r6, [r1, #0]
 8019d4c:	602b      	str	r3, [r5, #0]
 8019d4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019d52:	bf18      	it	ne
 8019d54:	b236      	sxthne	r6, r6
 8019d56:	e7ef      	b.n	8019d38 <_printf_i+0xbc>
 8019d58:	682b      	ldr	r3, [r5, #0]
 8019d5a:	6820      	ldr	r0, [r4, #0]
 8019d5c:	1d19      	adds	r1, r3, #4
 8019d5e:	6029      	str	r1, [r5, #0]
 8019d60:	0601      	lsls	r1, r0, #24
 8019d62:	d501      	bpl.n	8019d68 <_printf_i+0xec>
 8019d64:	681e      	ldr	r6, [r3, #0]
 8019d66:	e002      	b.n	8019d6e <_printf_i+0xf2>
 8019d68:	0646      	lsls	r6, r0, #25
 8019d6a:	d5fb      	bpl.n	8019d64 <_printf_i+0xe8>
 8019d6c:	881e      	ldrh	r6, [r3, #0]
 8019d6e:	4854      	ldr	r0, [pc, #336]	; (8019ec0 <_printf_i+0x244>)
 8019d70:	2f6f      	cmp	r7, #111	; 0x6f
 8019d72:	bf0c      	ite	eq
 8019d74:	2308      	moveq	r3, #8
 8019d76:	230a      	movne	r3, #10
 8019d78:	2100      	movs	r1, #0
 8019d7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019d7e:	6865      	ldr	r5, [r4, #4]
 8019d80:	60a5      	str	r5, [r4, #8]
 8019d82:	2d00      	cmp	r5, #0
 8019d84:	bfa2      	ittt	ge
 8019d86:	6821      	ldrge	r1, [r4, #0]
 8019d88:	f021 0104 	bicge.w	r1, r1, #4
 8019d8c:	6021      	strge	r1, [r4, #0]
 8019d8e:	b90e      	cbnz	r6, 8019d94 <_printf_i+0x118>
 8019d90:	2d00      	cmp	r5, #0
 8019d92:	d04d      	beq.n	8019e30 <_printf_i+0x1b4>
 8019d94:	4615      	mov	r5, r2
 8019d96:	fbb6 f1f3 	udiv	r1, r6, r3
 8019d9a:	fb03 6711 	mls	r7, r3, r1, r6
 8019d9e:	5dc7      	ldrb	r7, [r0, r7]
 8019da0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019da4:	4637      	mov	r7, r6
 8019da6:	42bb      	cmp	r3, r7
 8019da8:	460e      	mov	r6, r1
 8019daa:	d9f4      	bls.n	8019d96 <_printf_i+0x11a>
 8019dac:	2b08      	cmp	r3, #8
 8019dae:	d10b      	bne.n	8019dc8 <_printf_i+0x14c>
 8019db0:	6823      	ldr	r3, [r4, #0]
 8019db2:	07de      	lsls	r6, r3, #31
 8019db4:	d508      	bpl.n	8019dc8 <_printf_i+0x14c>
 8019db6:	6923      	ldr	r3, [r4, #16]
 8019db8:	6861      	ldr	r1, [r4, #4]
 8019dba:	4299      	cmp	r1, r3
 8019dbc:	bfde      	ittt	le
 8019dbe:	2330      	movle	r3, #48	; 0x30
 8019dc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019dc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019dc8:	1b52      	subs	r2, r2, r5
 8019dca:	6122      	str	r2, [r4, #16]
 8019dcc:	f8cd a000 	str.w	sl, [sp]
 8019dd0:	464b      	mov	r3, r9
 8019dd2:	aa03      	add	r2, sp, #12
 8019dd4:	4621      	mov	r1, r4
 8019dd6:	4640      	mov	r0, r8
 8019dd8:	f7ff fee2 	bl	8019ba0 <_printf_common>
 8019ddc:	3001      	adds	r0, #1
 8019dde:	d14c      	bne.n	8019e7a <_printf_i+0x1fe>
 8019de0:	f04f 30ff 	mov.w	r0, #4294967295
 8019de4:	b004      	add	sp, #16
 8019de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019dea:	4835      	ldr	r0, [pc, #212]	; (8019ec0 <_printf_i+0x244>)
 8019dec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019df0:	6829      	ldr	r1, [r5, #0]
 8019df2:	6823      	ldr	r3, [r4, #0]
 8019df4:	f851 6b04 	ldr.w	r6, [r1], #4
 8019df8:	6029      	str	r1, [r5, #0]
 8019dfa:	061d      	lsls	r5, r3, #24
 8019dfc:	d514      	bpl.n	8019e28 <_printf_i+0x1ac>
 8019dfe:	07df      	lsls	r7, r3, #31
 8019e00:	bf44      	itt	mi
 8019e02:	f043 0320 	orrmi.w	r3, r3, #32
 8019e06:	6023      	strmi	r3, [r4, #0]
 8019e08:	b91e      	cbnz	r6, 8019e12 <_printf_i+0x196>
 8019e0a:	6823      	ldr	r3, [r4, #0]
 8019e0c:	f023 0320 	bic.w	r3, r3, #32
 8019e10:	6023      	str	r3, [r4, #0]
 8019e12:	2310      	movs	r3, #16
 8019e14:	e7b0      	b.n	8019d78 <_printf_i+0xfc>
 8019e16:	6823      	ldr	r3, [r4, #0]
 8019e18:	f043 0320 	orr.w	r3, r3, #32
 8019e1c:	6023      	str	r3, [r4, #0]
 8019e1e:	2378      	movs	r3, #120	; 0x78
 8019e20:	4828      	ldr	r0, [pc, #160]	; (8019ec4 <_printf_i+0x248>)
 8019e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019e26:	e7e3      	b.n	8019df0 <_printf_i+0x174>
 8019e28:	0659      	lsls	r1, r3, #25
 8019e2a:	bf48      	it	mi
 8019e2c:	b2b6      	uxthmi	r6, r6
 8019e2e:	e7e6      	b.n	8019dfe <_printf_i+0x182>
 8019e30:	4615      	mov	r5, r2
 8019e32:	e7bb      	b.n	8019dac <_printf_i+0x130>
 8019e34:	682b      	ldr	r3, [r5, #0]
 8019e36:	6826      	ldr	r6, [r4, #0]
 8019e38:	6961      	ldr	r1, [r4, #20]
 8019e3a:	1d18      	adds	r0, r3, #4
 8019e3c:	6028      	str	r0, [r5, #0]
 8019e3e:	0635      	lsls	r5, r6, #24
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	d501      	bpl.n	8019e48 <_printf_i+0x1cc>
 8019e44:	6019      	str	r1, [r3, #0]
 8019e46:	e002      	b.n	8019e4e <_printf_i+0x1d2>
 8019e48:	0670      	lsls	r0, r6, #25
 8019e4a:	d5fb      	bpl.n	8019e44 <_printf_i+0x1c8>
 8019e4c:	8019      	strh	r1, [r3, #0]
 8019e4e:	2300      	movs	r3, #0
 8019e50:	6123      	str	r3, [r4, #16]
 8019e52:	4615      	mov	r5, r2
 8019e54:	e7ba      	b.n	8019dcc <_printf_i+0x150>
 8019e56:	682b      	ldr	r3, [r5, #0]
 8019e58:	1d1a      	adds	r2, r3, #4
 8019e5a:	602a      	str	r2, [r5, #0]
 8019e5c:	681d      	ldr	r5, [r3, #0]
 8019e5e:	6862      	ldr	r2, [r4, #4]
 8019e60:	2100      	movs	r1, #0
 8019e62:	4628      	mov	r0, r5
 8019e64:	f7e6 f9dc 	bl	8000220 <memchr>
 8019e68:	b108      	cbz	r0, 8019e6e <_printf_i+0x1f2>
 8019e6a:	1b40      	subs	r0, r0, r5
 8019e6c:	6060      	str	r0, [r4, #4]
 8019e6e:	6863      	ldr	r3, [r4, #4]
 8019e70:	6123      	str	r3, [r4, #16]
 8019e72:	2300      	movs	r3, #0
 8019e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e78:	e7a8      	b.n	8019dcc <_printf_i+0x150>
 8019e7a:	6923      	ldr	r3, [r4, #16]
 8019e7c:	462a      	mov	r2, r5
 8019e7e:	4649      	mov	r1, r9
 8019e80:	4640      	mov	r0, r8
 8019e82:	47d0      	blx	sl
 8019e84:	3001      	adds	r0, #1
 8019e86:	d0ab      	beq.n	8019de0 <_printf_i+0x164>
 8019e88:	6823      	ldr	r3, [r4, #0]
 8019e8a:	079b      	lsls	r3, r3, #30
 8019e8c:	d413      	bmi.n	8019eb6 <_printf_i+0x23a>
 8019e8e:	68e0      	ldr	r0, [r4, #12]
 8019e90:	9b03      	ldr	r3, [sp, #12]
 8019e92:	4298      	cmp	r0, r3
 8019e94:	bfb8      	it	lt
 8019e96:	4618      	movlt	r0, r3
 8019e98:	e7a4      	b.n	8019de4 <_printf_i+0x168>
 8019e9a:	2301      	movs	r3, #1
 8019e9c:	4632      	mov	r2, r6
 8019e9e:	4649      	mov	r1, r9
 8019ea0:	4640      	mov	r0, r8
 8019ea2:	47d0      	blx	sl
 8019ea4:	3001      	adds	r0, #1
 8019ea6:	d09b      	beq.n	8019de0 <_printf_i+0x164>
 8019ea8:	3501      	adds	r5, #1
 8019eaa:	68e3      	ldr	r3, [r4, #12]
 8019eac:	9903      	ldr	r1, [sp, #12]
 8019eae:	1a5b      	subs	r3, r3, r1
 8019eb0:	42ab      	cmp	r3, r5
 8019eb2:	dcf2      	bgt.n	8019e9a <_printf_i+0x21e>
 8019eb4:	e7eb      	b.n	8019e8e <_printf_i+0x212>
 8019eb6:	2500      	movs	r5, #0
 8019eb8:	f104 0619 	add.w	r6, r4, #25
 8019ebc:	e7f5      	b.n	8019eaa <_printf_i+0x22e>
 8019ebe:	bf00      	nop
 8019ec0:	08028428 	.word	0x08028428
 8019ec4:	08028439 	.word	0x08028439

08019ec8 <_read_r>:
 8019ec8:	b538      	push	{r3, r4, r5, lr}
 8019eca:	4d07      	ldr	r5, [pc, #28]	; (8019ee8 <_read_r+0x20>)
 8019ecc:	4604      	mov	r4, r0
 8019ece:	4608      	mov	r0, r1
 8019ed0:	4611      	mov	r1, r2
 8019ed2:	2200      	movs	r2, #0
 8019ed4:	602a      	str	r2, [r5, #0]
 8019ed6:	461a      	mov	r2, r3
 8019ed8:	f7e6 febe 	bl	8000c58 <_read>
 8019edc:	1c43      	adds	r3, r0, #1
 8019ede:	d102      	bne.n	8019ee6 <_read_r+0x1e>
 8019ee0:	682b      	ldr	r3, [r5, #0]
 8019ee2:	b103      	cbz	r3, 8019ee6 <_read_r+0x1e>
 8019ee4:	6023      	str	r3, [r4, #0]
 8019ee6:	bd38      	pop	{r3, r4, r5, pc}
 8019ee8:	2001172c 	.word	0x2001172c

08019eec <__swbuf_r>:
 8019eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eee:	460e      	mov	r6, r1
 8019ef0:	4614      	mov	r4, r2
 8019ef2:	4605      	mov	r5, r0
 8019ef4:	b118      	cbz	r0, 8019efe <__swbuf_r+0x12>
 8019ef6:	6983      	ldr	r3, [r0, #24]
 8019ef8:	b90b      	cbnz	r3, 8019efe <__swbuf_r+0x12>
 8019efa:	f7fe fe81 	bl	8018c00 <__sinit>
 8019efe:	4b21      	ldr	r3, [pc, #132]	; (8019f84 <__swbuf_r+0x98>)
 8019f00:	429c      	cmp	r4, r3
 8019f02:	d12b      	bne.n	8019f5c <__swbuf_r+0x70>
 8019f04:	686c      	ldr	r4, [r5, #4]
 8019f06:	69a3      	ldr	r3, [r4, #24]
 8019f08:	60a3      	str	r3, [r4, #8]
 8019f0a:	89a3      	ldrh	r3, [r4, #12]
 8019f0c:	071a      	lsls	r2, r3, #28
 8019f0e:	d52f      	bpl.n	8019f70 <__swbuf_r+0x84>
 8019f10:	6923      	ldr	r3, [r4, #16]
 8019f12:	b36b      	cbz	r3, 8019f70 <__swbuf_r+0x84>
 8019f14:	6923      	ldr	r3, [r4, #16]
 8019f16:	6820      	ldr	r0, [r4, #0]
 8019f18:	1ac0      	subs	r0, r0, r3
 8019f1a:	6963      	ldr	r3, [r4, #20]
 8019f1c:	b2f6      	uxtb	r6, r6
 8019f1e:	4283      	cmp	r3, r0
 8019f20:	4637      	mov	r7, r6
 8019f22:	dc04      	bgt.n	8019f2e <__swbuf_r+0x42>
 8019f24:	4621      	mov	r1, r4
 8019f26:	4628      	mov	r0, r5
 8019f28:	f7ff fac4 	bl	80194b4 <_fflush_r>
 8019f2c:	bb30      	cbnz	r0, 8019f7c <__swbuf_r+0x90>
 8019f2e:	68a3      	ldr	r3, [r4, #8]
 8019f30:	3b01      	subs	r3, #1
 8019f32:	60a3      	str	r3, [r4, #8]
 8019f34:	6823      	ldr	r3, [r4, #0]
 8019f36:	1c5a      	adds	r2, r3, #1
 8019f38:	6022      	str	r2, [r4, #0]
 8019f3a:	701e      	strb	r6, [r3, #0]
 8019f3c:	6963      	ldr	r3, [r4, #20]
 8019f3e:	3001      	adds	r0, #1
 8019f40:	4283      	cmp	r3, r0
 8019f42:	d004      	beq.n	8019f4e <__swbuf_r+0x62>
 8019f44:	89a3      	ldrh	r3, [r4, #12]
 8019f46:	07db      	lsls	r3, r3, #31
 8019f48:	d506      	bpl.n	8019f58 <__swbuf_r+0x6c>
 8019f4a:	2e0a      	cmp	r6, #10
 8019f4c:	d104      	bne.n	8019f58 <__swbuf_r+0x6c>
 8019f4e:	4621      	mov	r1, r4
 8019f50:	4628      	mov	r0, r5
 8019f52:	f7ff faaf 	bl	80194b4 <_fflush_r>
 8019f56:	b988      	cbnz	r0, 8019f7c <__swbuf_r+0x90>
 8019f58:	4638      	mov	r0, r7
 8019f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f5c:	4b0a      	ldr	r3, [pc, #40]	; (8019f88 <__swbuf_r+0x9c>)
 8019f5e:	429c      	cmp	r4, r3
 8019f60:	d101      	bne.n	8019f66 <__swbuf_r+0x7a>
 8019f62:	68ac      	ldr	r4, [r5, #8]
 8019f64:	e7cf      	b.n	8019f06 <__swbuf_r+0x1a>
 8019f66:	4b09      	ldr	r3, [pc, #36]	; (8019f8c <__swbuf_r+0xa0>)
 8019f68:	429c      	cmp	r4, r3
 8019f6a:	bf08      	it	eq
 8019f6c:	68ec      	ldreq	r4, [r5, #12]
 8019f6e:	e7ca      	b.n	8019f06 <__swbuf_r+0x1a>
 8019f70:	4621      	mov	r1, r4
 8019f72:	4628      	mov	r0, r5
 8019f74:	f000 f80c 	bl	8019f90 <__swsetup_r>
 8019f78:	2800      	cmp	r0, #0
 8019f7a:	d0cb      	beq.n	8019f14 <__swbuf_r+0x28>
 8019f7c:	f04f 37ff 	mov.w	r7, #4294967295
 8019f80:	e7ea      	b.n	8019f58 <__swbuf_r+0x6c>
 8019f82:	bf00      	nop
 8019f84:	080282c8 	.word	0x080282c8
 8019f88:	080282e8 	.word	0x080282e8
 8019f8c:	080282a8 	.word	0x080282a8

08019f90 <__swsetup_r>:
 8019f90:	4b32      	ldr	r3, [pc, #200]	; (801a05c <__swsetup_r+0xcc>)
 8019f92:	b570      	push	{r4, r5, r6, lr}
 8019f94:	681d      	ldr	r5, [r3, #0]
 8019f96:	4606      	mov	r6, r0
 8019f98:	460c      	mov	r4, r1
 8019f9a:	b125      	cbz	r5, 8019fa6 <__swsetup_r+0x16>
 8019f9c:	69ab      	ldr	r3, [r5, #24]
 8019f9e:	b913      	cbnz	r3, 8019fa6 <__swsetup_r+0x16>
 8019fa0:	4628      	mov	r0, r5
 8019fa2:	f7fe fe2d 	bl	8018c00 <__sinit>
 8019fa6:	4b2e      	ldr	r3, [pc, #184]	; (801a060 <__swsetup_r+0xd0>)
 8019fa8:	429c      	cmp	r4, r3
 8019faa:	d10f      	bne.n	8019fcc <__swsetup_r+0x3c>
 8019fac:	686c      	ldr	r4, [r5, #4]
 8019fae:	89a3      	ldrh	r3, [r4, #12]
 8019fb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019fb4:	0719      	lsls	r1, r3, #28
 8019fb6:	d42c      	bmi.n	801a012 <__swsetup_r+0x82>
 8019fb8:	06dd      	lsls	r5, r3, #27
 8019fba:	d411      	bmi.n	8019fe0 <__swsetup_r+0x50>
 8019fbc:	2309      	movs	r3, #9
 8019fbe:	6033      	str	r3, [r6, #0]
 8019fc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019fc4:	81a3      	strh	r3, [r4, #12]
 8019fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8019fca:	e03e      	b.n	801a04a <__swsetup_r+0xba>
 8019fcc:	4b25      	ldr	r3, [pc, #148]	; (801a064 <__swsetup_r+0xd4>)
 8019fce:	429c      	cmp	r4, r3
 8019fd0:	d101      	bne.n	8019fd6 <__swsetup_r+0x46>
 8019fd2:	68ac      	ldr	r4, [r5, #8]
 8019fd4:	e7eb      	b.n	8019fae <__swsetup_r+0x1e>
 8019fd6:	4b24      	ldr	r3, [pc, #144]	; (801a068 <__swsetup_r+0xd8>)
 8019fd8:	429c      	cmp	r4, r3
 8019fda:	bf08      	it	eq
 8019fdc:	68ec      	ldreq	r4, [r5, #12]
 8019fde:	e7e6      	b.n	8019fae <__swsetup_r+0x1e>
 8019fe0:	0758      	lsls	r0, r3, #29
 8019fe2:	d512      	bpl.n	801a00a <__swsetup_r+0x7a>
 8019fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019fe6:	b141      	cbz	r1, 8019ffa <__swsetup_r+0x6a>
 8019fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019fec:	4299      	cmp	r1, r3
 8019fee:	d002      	beq.n	8019ff6 <__swsetup_r+0x66>
 8019ff0:	4630      	mov	r0, r6
 8019ff2:	f7ff fad3 	bl	801959c <_free_r>
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	6363      	str	r3, [r4, #52]	; 0x34
 8019ffa:	89a3      	ldrh	r3, [r4, #12]
 8019ffc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a000:	81a3      	strh	r3, [r4, #12]
 801a002:	2300      	movs	r3, #0
 801a004:	6063      	str	r3, [r4, #4]
 801a006:	6923      	ldr	r3, [r4, #16]
 801a008:	6023      	str	r3, [r4, #0]
 801a00a:	89a3      	ldrh	r3, [r4, #12]
 801a00c:	f043 0308 	orr.w	r3, r3, #8
 801a010:	81a3      	strh	r3, [r4, #12]
 801a012:	6923      	ldr	r3, [r4, #16]
 801a014:	b94b      	cbnz	r3, 801a02a <__swsetup_r+0x9a>
 801a016:	89a3      	ldrh	r3, [r4, #12]
 801a018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a01c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a020:	d003      	beq.n	801a02a <__swsetup_r+0x9a>
 801a022:	4621      	mov	r1, r4
 801a024:	4630      	mov	r0, r6
 801a026:	f000 f84d 	bl	801a0c4 <__smakebuf_r>
 801a02a:	89a0      	ldrh	r0, [r4, #12]
 801a02c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a030:	f010 0301 	ands.w	r3, r0, #1
 801a034:	d00a      	beq.n	801a04c <__swsetup_r+0xbc>
 801a036:	2300      	movs	r3, #0
 801a038:	60a3      	str	r3, [r4, #8]
 801a03a:	6963      	ldr	r3, [r4, #20]
 801a03c:	425b      	negs	r3, r3
 801a03e:	61a3      	str	r3, [r4, #24]
 801a040:	6923      	ldr	r3, [r4, #16]
 801a042:	b943      	cbnz	r3, 801a056 <__swsetup_r+0xc6>
 801a044:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a048:	d1ba      	bne.n	8019fc0 <__swsetup_r+0x30>
 801a04a:	bd70      	pop	{r4, r5, r6, pc}
 801a04c:	0781      	lsls	r1, r0, #30
 801a04e:	bf58      	it	pl
 801a050:	6963      	ldrpl	r3, [r4, #20]
 801a052:	60a3      	str	r3, [r4, #8]
 801a054:	e7f4      	b.n	801a040 <__swsetup_r+0xb0>
 801a056:	2000      	movs	r0, #0
 801a058:	e7f7      	b.n	801a04a <__swsetup_r+0xba>
 801a05a:	bf00      	nop
 801a05c:	20000034 	.word	0x20000034
 801a060:	080282c8 	.word	0x080282c8
 801a064:	080282e8 	.word	0x080282e8
 801a068:	080282a8 	.word	0x080282a8

0801a06c <abort>:
 801a06c:	b508      	push	{r3, lr}
 801a06e:	2006      	movs	r0, #6
 801a070:	f000 f8c0 	bl	801a1f4 <raise>
 801a074:	2001      	movs	r0, #1
 801a076:	f7e6 fde5 	bl	8000c44 <_exit>

0801a07a <__swhatbuf_r>:
 801a07a:	b570      	push	{r4, r5, r6, lr}
 801a07c:	460e      	mov	r6, r1
 801a07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a082:	2900      	cmp	r1, #0
 801a084:	b096      	sub	sp, #88	; 0x58
 801a086:	4614      	mov	r4, r2
 801a088:	461d      	mov	r5, r3
 801a08a:	da08      	bge.n	801a09e <__swhatbuf_r+0x24>
 801a08c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a090:	2200      	movs	r2, #0
 801a092:	602a      	str	r2, [r5, #0]
 801a094:	061a      	lsls	r2, r3, #24
 801a096:	d410      	bmi.n	801a0ba <__swhatbuf_r+0x40>
 801a098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a09c:	e00e      	b.n	801a0bc <__swhatbuf_r+0x42>
 801a09e:	466a      	mov	r2, sp
 801a0a0:	f000 f8c4 	bl	801a22c <_fstat_r>
 801a0a4:	2800      	cmp	r0, #0
 801a0a6:	dbf1      	blt.n	801a08c <__swhatbuf_r+0x12>
 801a0a8:	9a01      	ldr	r2, [sp, #4]
 801a0aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a0ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a0b2:	425a      	negs	r2, r3
 801a0b4:	415a      	adcs	r2, r3
 801a0b6:	602a      	str	r2, [r5, #0]
 801a0b8:	e7ee      	b.n	801a098 <__swhatbuf_r+0x1e>
 801a0ba:	2340      	movs	r3, #64	; 0x40
 801a0bc:	2000      	movs	r0, #0
 801a0be:	6023      	str	r3, [r4, #0]
 801a0c0:	b016      	add	sp, #88	; 0x58
 801a0c2:	bd70      	pop	{r4, r5, r6, pc}

0801a0c4 <__smakebuf_r>:
 801a0c4:	898b      	ldrh	r3, [r1, #12]
 801a0c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a0c8:	079d      	lsls	r5, r3, #30
 801a0ca:	4606      	mov	r6, r0
 801a0cc:	460c      	mov	r4, r1
 801a0ce:	d507      	bpl.n	801a0e0 <__smakebuf_r+0x1c>
 801a0d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a0d4:	6023      	str	r3, [r4, #0]
 801a0d6:	6123      	str	r3, [r4, #16]
 801a0d8:	2301      	movs	r3, #1
 801a0da:	6163      	str	r3, [r4, #20]
 801a0dc:	b002      	add	sp, #8
 801a0de:	bd70      	pop	{r4, r5, r6, pc}
 801a0e0:	ab01      	add	r3, sp, #4
 801a0e2:	466a      	mov	r2, sp
 801a0e4:	f7ff ffc9 	bl	801a07a <__swhatbuf_r>
 801a0e8:	9900      	ldr	r1, [sp, #0]
 801a0ea:	4605      	mov	r5, r0
 801a0ec:	4630      	mov	r0, r6
 801a0ee:	f7fe fead 	bl	8018e4c <_malloc_r>
 801a0f2:	b948      	cbnz	r0, 801a108 <__smakebuf_r+0x44>
 801a0f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0f8:	059a      	lsls	r2, r3, #22
 801a0fa:	d4ef      	bmi.n	801a0dc <__smakebuf_r+0x18>
 801a0fc:	f023 0303 	bic.w	r3, r3, #3
 801a100:	f043 0302 	orr.w	r3, r3, #2
 801a104:	81a3      	strh	r3, [r4, #12]
 801a106:	e7e3      	b.n	801a0d0 <__smakebuf_r+0xc>
 801a108:	4b0d      	ldr	r3, [pc, #52]	; (801a140 <__smakebuf_r+0x7c>)
 801a10a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a10c:	89a3      	ldrh	r3, [r4, #12]
 801a10e:	6020      	str	r0, [r4, #0]
 801a110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a114:	81a3      	strh	r3, [r4, #12]
 801a116:	9b00      	ldr	r3, [sp, #0]
 801a118:	6163      	str	r3, [r4, #20]
 801a11a:	9b01      	ldr	r3, [sp, #4]
 801a11c:	6120      	str	r0, [r4, #16]
 801a11e:	b15b      	cbz	r3, 801a138 <__smakebuf_r+0x74>
 801a120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a124:	4630      	mov	r0, r6
 801a126:	f000 f893 	bl	801a250 <_isatty_r>
 801a12a:	b128      	cbz	r0, 801a138 <__smakebuf_r+0x74>
 801a12c:	89a3      	ldrh	r3, [r4, #12]
 801a12e:	f023 0303 	bic.w	r3, r3, #3
 801a132:	f043 0301 	orr.w	r3, r3, #1
 801a136:	81a3      	strh	r3, [r4, #12]
 801a138:	89a0      	ldrh	r0, [r4, #12]
 801a13a:	4305      	orrs	r5, r0
 801a13c:	81a5      	strh	r5, [r4, #12]
 801a13e:	e7cd      	b.n	801a0dc <__smakebuf_r+0x18>
 801a140:	08018b99 	.word	0x08018b99

0801a144 <_realloc_r>:
 801a144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a148:	4680      	mov	r8, r0
 801a14a:	4614      	mov	r4, r2
 801a14c:	460e      	mov	r6, r1
 801a14e:	b921      	cbnz	r1, 801a15a <_realloc_r+0x16>
 801a150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a154:	4611      	mov	r1, r2
 801a156:	f7fe be79 	b.w	8018e4c <_malloc_r>
 801a15a:	b92a      	cbnz	r2, 801a168 <_realloc_r+0x24>
 801a15c:	f7ff fa1e 	bl	801959c <_free_r>
 801a160:	4625      	mov	r5, r4
 801a162:	4628      	mov	r0, r5
 801a164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a168:	f000 f882 	bl	801a270 <_malloc_usable_size_r>
 801a16c:	4284      	cmp	r4, r0
 801a16e:	4607      	mov	r7, r0
 801a170:	d802      	bhi.n	801a178 <_realloc_r+0x34>
 801a172:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a176:	d812      	bhi.n	801a19e <_realloc_r+0x5a>
 801a178:	4621      	mov	r1, r4
 801a17a:	4640      	mov	r0, r8
 801a17c:	f7fe fe66 	bl	8018e4c <_malloc_r>
 801a180:	4605      	mov	r5, r0
 801a182:	2800      	cmp	r0, #0
 801a184:	d0ed      	beq.n	801a162 <_realloc_r+0x1e>
 801a186:	42bc      	cmp	r4, r7
 801a188:	4622      	mov	r2, r4
 801a18a:	4631      	mov	r1, r6
 801a18c:	bf28      	it	cs
 801a18e:	463a      	movcs	r2, r7
 801a190:	f7fe fe0b 	bl	8018daa <memcpy>
 801a194:	4631      	mov	r1, r6
 801a196:	4640      	mov	r0, r8
 801a198:	f7ff fa00 	bl	801959c <_free_r>
 801a19c:	e7e1      	b.n	801a162 <_realloc_r+0x1e>
 801a19e:	4635      	mov	r5, r6
 801a1a0:	e7df      	b.n	801a162 <_realloc_r+0x1e>

0801a1a2 <_raise_r>:
 801a1a2:	291f      	cmp	r1, #31
 801a1a4:	b538      	push	{r3, r4, r5, lr}
 801a1a6:	4604      	mov	r4, r0
 801a1a8:	460d      	mov	r5, r1
 801a1aa:	d904      	bls.n	801a1b6 <_raise_r+0x14>
 801a1ac:	2316      	movs	r3, #22
 801a1ae:	6003      	str	r3, [r0, #0]
 801a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a1b4:	bd38      	pop	{r3, r4, r5, pc}
 801a1b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a1b8:	b112      	cbz	r2, 801a1c0 <_raise_r+0x1e>
 801a1ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a1be:	b94b      	cbnz	r3, 801a1d4 <_raise_r+0x32>
 801a1c0:	4620      	mov	r0, r4
 801a1c2:	f000 f831 	bl	801a228 <_getpid_r>
 801a1c6:	462a      	mov	r2, r5
 801a1c8:	4601      	mov	r1, r0
 801a1ca:	4620      	mov	r0, r4
 801a1cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a1d0:	f000 b818 	b.w	801a204 <_kill_r>
 801a1d4:	2b01      	cmp	r3, #1
 801a1d6:	d00a      	beq.n	801a1ee <_raise_r+0x4c>
 801a1d8:	1c59      	adds	r1, r3, #1
 801a1da:	d103      	bne.n	801a1e4 <_raise_r+0x42>
 801a1dc:	2316      	movs	r3, #22
 801a1de:	6003      	str	r3, [r0, #0]
 801a1e0:	2001      	movs	r0, #1
 801a1e2:	e7e7      	b.n	801a1b4 <_raise_r+0x12>
 801a1e4:	2400      	movs	r4, #0
 801a1e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a1ea:	4628      	mov	r0, r5
 801a1ec:	4798      	blx	r3
 801a1ee:	2000      	movs	r0, #0
 801a1f0:	e7e0      	b.n	801a1b4 <_raise_r+0x12>
	...

0801a1f4 <raise>:
 801a1f4:	4b02      	ldr	r3, [pc, #8]	; (801a200 <raise+0xc>)
 801a1f6:	4601      	mov	r1, r0
 801a1f8:	6818      	ldr	r0, [r3, #0]
 801a1fa:	f7ff bfd2 	b.w	801a1a2 <_raise_r>
 801a1fe:	bf00      	nop
 801a200:	20000034 	.word	0x20000034

0801a204 <_kill_r>:
 801a204:	b538      	push	{r3, r4, r5, lr}
 801a206:	4d07      	ldr	r5, [pc, #28]	; (801a224 <_kill_r+0x20>)
 801a208:	2300      	movs	r3, #0
 801a20a:	4604      	mov	r4, r0
 801a20c:	4608      	mov	r0, r1
 801a20e:	4611      	mov	r1, r2
 801a210:	602b      	str	r3, [r5, #0]
 801a212:	f7e6 fd05 	bl	8000c20 <_kill>
 801a216:	1c43      	adds	r3, r0, #1
 801a218:	d102      	bne.n	801a220 <_kill_r+0x1c>
 801a21a:	682b      	ldr	r3, [r5, #0]
 801a21c:	b103      	cbz	r3, 801a220 <_kill_r+0x1c>
 801a21e:	6023      	str	r3, [r4, #0]
 801a220:	bd38      	pop	{r3, r4, r5, pc}
 801a222:	bf00      	nop
 801a224:	2001172c 	.word	0x2001172c

0801a228 <_getpid_r>:
 801a228:	f7e6 bcf2 	b.w	8000c10 <_getpid>

0801a22c <_fstat_r>:
 801a22c:	b538      	push	{r3, r4, r5, lr}
 801a22e:	4d07      	ldr	r5, [pc, #28]	; (801a24c <_fstat_r+0x20>)
 801a230:	2300      	movs	r3, #0
 801a232:	4604      	mov	r4, r0
 801a234:	4608      	mov	r0, r1
 801a236:	4611      	mov	r1, r2
 801a238:	602b      	str	r3, [r5, #0]
 801a23a:	f7e6 fd52 	bl	8000ce2 <_fstat>
 801a23e:	1c43      	adds	r3, r0, #1
 801a240:	d102      	bne.n	801a248 <_fstat_r+0x1c>
 801a242:	682b      	ldr	r3, [r5, #0]
 801a244:	b103      	cbz	r3, 801a248 <_fstat_r+0x1c>
 801a246:	6023      	str	r3, [r4, #0]
 801a248:	bd38      	pop	{r3, r4, r5, pc}
 801a24a:	bf00      	nop
 801a24c:	2001172c 	.word	0x2001172c

0801a250 <_isatty_r>:
 801a250:	b538      	push	{r3, r4, r5, lr}
 801a252:	4d06      	ldr	r5, [pc, #24]	; (801a26c <_isatty_r+0x1c>)
 801a254:	2300      	movs	r3, #0
 801a256:	4604      	mov	r4, r0
 801a258:	4608      	mov	r0, r1
 801a25a:	602b      	str	r3, [r5, #0]
 801a25c:	f7e6 fd51 	bl	8000d02 <_isatty>
 801a260:	1c43      	adds	r3, r0, #1
 801a262:	d102      	bne.n	801a26a <_isatty_r+0x1a>
 801a264:	682b      	ldr	r3, [r5, #0]
 801a266:	b103      	cbz	r3, 801a26a <_isatty_r+0x1a>
 801a268:	6023      	str	r3, [r4, #0]
 801a26a:	bd38      	pop	{r3, r4, r5, pc}
 801a26c:	2001172c 	.word	0x2001172c

0801a270 <_malloc_usable_size_r>:
 801a270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a274:	1f18      	subs	r0, r3, #4
 801a276:	2b00      	cmp	r3, #0
 801a278:	bfbc      	itt	lt
 801a27a:	580b      	ldrlt	r3, [r1, r0]
 801a27c:	18c0      	addlt	r0, r0, r3
 801a27e:	4770      	bx	lr

0801a280 <_init>:
 801a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a282:	bf00      	nop
 801a284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a286:	bc08      	pop	{r3}
 801a288:	469e      	mov	lr, r3
 801a28a:	4770      	bx	lr

0801a28c <_fini>:
 801a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a28e:	bf00      	nop
 801a290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a292:	bc08      	pop	{r3}
 801a294:	469e      	mov	lr, r3
 801a296:	4770      	bx	lr
